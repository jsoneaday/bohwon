function _mergeNamespaces(t, e) {
  for (var n = 0; n < e.length; n++) {
    const a = e[n];
    if (typeof a != "string" && !Array.isArray(a)) {
      for (const c in a)
        if (c !== "default" && !(c in t)) {
          const o = Object.getOwnPropertyDescriptor(a, c);
          o && Object.defineProperty(t, c, o.get ? o : {
            enumerable: !0,
            get: () => a[c]
          });
        }
    }
  }
  return Object.freeze(Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }));
}
const hack = () => {
  throw new Error("Unimplemented");
};
globalThis.crypto ??= {};
globalThis.crypto.subtle ??= {};
globalThis.crypto.subtle.generateKey ??= hack;
globalThis.crypto.subtle.importKey ??= hack;
globalThis.crypto.subtle.exportKey ??= hack;
globalThis.crypto.subtle.digest ??= hack;
globalThis.crypto.subtle.sign ??= hack;
const global$1 = globalThis || void 0 || self;
function bind$5(t, e) {
  return function() {
    return t.apply(e, arguments);
  };
}
const { toString: toString$1 } = Object.prototype, { getPrototypeOf: getPrototypeOf$2 } = Object, kindOf$1 = /* @__PURE__ */ ((t) => (e) => {
  const n = toString$1.call(e);
  return t[n] || (t[n] = n.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null)), kindOfTest$1 = (t) => (t = t.toLowerCase(), (e) => kindOf$1(e) === t), typeOfTest = (t) => (e) => typeof e === t, { isArray: isArray$1 } = Array, isUndefined$1 = typeOfTest("undefined");
function isBuffer$1(t) {
  return t !== null && !isUndefined$1(t) && t.constructor !== null && !isUndefined$1(t.constructor) && isFunction$2(t.constructor.isBuffer) && t.constructor.isBuffer(t);
}
const isArrayBuffer$1 = kindOfTest$1("ArrayBuffer");
function isArrayBufferView$1(t) {
  let e;
  return typeof ArrayBuffer < "u" && ArrayBuffer.isView ? e = ArrayBuffer.isView(t) : e = t && t.buffer && isArrayBuffer$1(t.buffer), e;
}
const isString$3 = typeOfTest("string"), isFunction$2 = typeOfTest("function"), isNumber$1 = typeOfTest("number"), isObject$3 = (t) => t !== null && typeof t == "object", isBoolean = (t) => t === !0 || t === !1, isPlainObject$1 = (t) => {
  if (kindOf$1(t) !== "object")
    return !1;
  const e = getPrototypeOf$2(t);
  return (e === null || e === Object.prototype || Object.getPrototypeOf(e) === null) && !(Symbol.toStringTag in t) && !(Symbol.iterator in t);
}, isDate$1 = kindOfTest$1("Date"), isFile$1 = kindOfTest$1("File"), isBlob$2 = kindOfTest$1("Blob"), isFileList$1 = kindOfTest$1("FileList"), isStream$1 = (t) => isObject$3(t) && isFunction$2(t.pipe), isFormData$2 = (t) => {
  let e;
  return t && (typeof FormData == "function" && t instanceof FormData || isFunction$2(t.append) && ((e = kindOf$1(t)) === "formdata" || // detect form-data instance
  e === "object" && isFunction$2(t.toString) && t.toString() === "[object FormData]"));
}, isURLSearchParams$1 = kindOfTest$1("URLSearchParams"), trim$1 = (t) => t.trim ? t.trim() : t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function forEach$3(t, e, { allOwnKeys: n = !1 } = {}) {
  if (t === null || typeof t > "u")
    return;
  let a, c;
  if (typeof t != "object" && (t = [t]), isArray$1(t))
    for (a = 0, c = t.length; a < c; a++)
      e.call(null, t[a], a, t);
  else {
    const o = n ? Object.getOwnPropertyNames(t) : Object.keys(t), d = o.length;
    let m;
    for (a = 0; a < d; a++)
      m = o[a], e.call(null, t[m], m, t);
  }
}
function findKey(t, e) {
  e = e.toLowerCase();
  const n = Object.keys(t);
  let a = n.length, c;
  for (; a-- > 0; )
    if (c = n[a], e === c.toLowerCase())
      return c;
  return null;
}
const _global = typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : typeof window < "u" ? window : global$1, isContextDefined = (t) => !isUndefined$1(t) && t !== _global;
function merge$1() {
  const { caseless: t } = isContextDefined(this) && this || {}, e = {}, n = (a, c) => {
    const o = t && findKey(e, c) || c;
    isPlainObject$1(e[o]) && isPlainObject$1(a) ? e[o] = merge$1(e[o], a) : isPlainObject$1(a) ? e[o] = merge$1({}, a) : isArray$1(a) ? e[o] = a.slice() : e[o] = a;
  };
  for (let a = 0, c = arguments.length; a < c; a++)
    arguments[a] && forEach$3(arguments[a], n);
  return e;
}
const extend$1 = (t, e, n, { allOwnKeys: a } = {}) => (forEach$3(e, (c, o) => {
  n && isFunction$2(c) ? t[o] = bind$5(c, n) : t[o] = c;
}, { allOwnKeys: a }), t), stripBOM$1 = (t) => (t.charCodeAt(0) === 65279 && (t = t.slice(1)), t), inherits$y = (t, e, n, a) => {
  t.prototype = Object.create(e.prototype, a), t.prototype.constructor = t, Object.defineProperty(t, "super", {
    value: e.prototype
  }), n && Object.assign(t.prototype, n);
}, toFlatObject$1 = (t, e, n, a) => {
  let c, o, d;
  const m = {};
  if (e = e || {}, t == null)
    return e;
  do {
    for (c = Object.getOwnPropertyNames(t), o = c.length; o-- > 0; )
      d = c[o], (!a || a(d, t, e)) && !m[d] && (e[d] = t[d], m[d] = !0);
    t = n !== !1 && getPrototypeOf$2(t);
  } while (t && (!n || n(t, e)) && t !== Object.prototype);
  return e;
}, endsWith$2 = (t, e, n) => {
  t = String(t), (n === void 0 || n > t.length) && (n = t.length), n -= e.length;
  const a = t.indexOf(e, n);
  return a !== -1 && a === n;
}, toArray$3 = (t) => {
  if (!t)
    return null;
  if (isArray$1(t))
    return t;
  let e = t.length;
  if (!isNumber$1(e))
    return null;
  const n = new Array(e);
  for (; e-- > 0; )
    n[e] = t[e];
  return n;
}, isTypedArray$2 = /* @__PURE__ */ ((t) => (e) => t && e instanceof t)(typeof Uint8Array < "u" && getPrototypeOf$2(Uint8Array)), forEachEntry = (t, e) => {
  const a = (t && t[Symbol.iterator]).call(t);
  let c;
  for (; (c = a.next()) && !c.done; ) {
    const o = c.value;
    e.call(t, o[0], o[1]);
  }
}, matchAll = (t, e) => {
  let n;
  const a = [];
  for (; (n = t.exec(e)) !== null; )
    a.push(n);
  return a;
}, isHTMLForm = kindOfTest$1("HTMLFormElement"), toCamelCase = (t) => t.toLowerCase().replace(
  /[-_\s]([a-z\d])(\w*)/g,
  function(n, a, c) {
    return a.toUpperCase() + c;
  }
), hasOwnProperty$1 = (({ hasOwnProperty: t }) => (e, n) => t.call(e, n))(Object.prototype), isRegExp = kindOfTest$1("RegExp"), reduceDescriptors = (t, e) => {
  const n = Object.getOwnPropertyDescriptors(t), a = {};
  forEach$3(n, (c, o) => {
    let d;
    (d = e(c, o, t)) !== !1 && (a[o] = d || c);
  }), Object.defineProperties(t, a);
}, freezeMethods = (t) => {
  reduceDescriptors(t, (e, n) => {
    if (isFunction$2(t) && ["arguments", "caller", "callee"].indexOf(n) !== -1)
      return !1;
    const a = t[n];
    if (isFunction$2(a)) {
      if (e.enumerable = !1, "writable" in e) {
        e.writable = !1;
        return;
      }
      e.set || (e.set = () => {
        throw Error("Can not rewrite read-only method '" + n + "'");
      });
    }
  });
}, toObjectSet = (t, e) => {
  const n = {}, a = (c) => {
    c.forEach((o) => {
      n[o] = !0;
    });
  };
  return isArray$1(t) ? a(t) : a(String(t).split(e)), n;
}, noop$3 = () => {
}, toFiniteNumber = (t, e) => (t = +t, Number.isFinite(t) ? t : e), ALPHA = "abcdefghijklmnopqrstuvwxyz", DIGIT = "0123456789", ALPHABET$4 = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
}, generateString = (t = 16, e = ALPHABET$4.ALPHA_DIGIT) => {
  let n = "";
  const { length: a } = e;
  for (; t--; )
    n += e[Math.random() * a | 0];
  return n;
};
function isSpecCompliantForm(t) {
  return !!(t && isFunction$2(t.append) && t[Symbol.toStringTag] === "FormData" && t[Symbol.iterator]);
}
const toJSONObject = (t) => {
  const e = new Array(10), n = (a, c) => {
    if (isObject$3(a)) {
      if (e.indexOf(a) >= 0)
        return;
      if (!("toJSON" in a)) {
        e[c] = a;
        const o = isArray$1(a) ? [] : {};
        return forEach$3(a, (d, m) => {
          const w = n(d, c + 1);
          !isUndefined$1(w) && (o[m] = w);
        }), e[c] = void 0, o;
      }
    }
    return a;
  };
  return n(t, 0);
}, isAsyncFn = kindOfTest$1("AsyncFunction"), isThenable = (t) => t && (isObject$3(t) || isFunction$2(t)) && isFunction$2(t.then) && isFunction$2(t.catch), utils$E = {
  isArray: isArray$1,
  isArrayBuffer: isArrayBuffer$1,
  isBuffer: isBuffer$1,
  isFormData: isFormData$2,
  isArrayBufferView: isArrayBufferView$1,
  isString: isString$3,
  isNumber: isNumber$1,
  isBoolean,
  isObject: isObject$3,
  isPlainObject: isPlainObject$1,
  isUndefined: isUndefined$1,
  isDate: isDate$1,
  isFile: isFile$1,
  isBlob: isBlob$2,
  isRegExp,
  isFunction: isFunction$2,
  isStream: isStream$1,
  isURLSearchParams: isURLSearchParams$1,
  isTypedArray: isTypedArray$2,
  isFileList: isFileList$1,
  forEach: forEach$3,
  merge: merge$1,
  extend: extend$1,
  trim: trim$1,
  stripBOM: stripBOM$1,
  inherits: inherits$y,
  toFlatObject: toFlatObject$1,
  kindOf: kindOf$1,
  kindOfTest: kindOfTest$1,
  endsWith: endsWith$2,
  toArray: toArray$3,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty: hasOwnProperty$1,
  hasOwnProp: hasOwnProperty$1,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop: noop$3,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET: ALPHABET$4,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable
};
var buffer$2 = {}, base64Js = {};
base64Js.byteLength = byteLength;
base64Js.toByteArray = toByteArray$1;
base64Js.fromByteArray = fromByteArray$1;
var lookup$1 = [], revLookup$1 = [], Arr$1 = typeof Uint8Array < "u" ? Uint8Array : Array, code$1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for (var i$2 = 0, len$1 = code$1.length; i$2 < len$1; ++i$2)
  lookup$1[i$2] = code$1[i$2], revLookup$1[code$1.charCodeAt(i$2)] = i$2;
revLookup$1[45] = 62;
revLookup$1[95] = 63;
function getLens$1(t) {
  var e = t.length;
  if (e % 4 > 0)
    throw new Error("Invalid string. Length must be a multiple of 4");
  var n = t.indexOf("=");
  n === -1 && (n = e);
  var a = n === e ? 0 : 4 - n % 4;
  return [n, a];
}
function byteLength(t) {
  var e = getLens$1(t), n = e[0], a = e[1];
  return (n + a) * 3 / 4 - a;
}
function _byteLength$1(t, e, n) {
  return (e + n) * 3 / 4 - n;
}
function toByteArray$1(t) {
  var e, n = getLens$1(t), a = n[0], c = n[1], o = new Arr$1(_byteLength$1(t, a, c)), d = 0, m = c > 0 ? a - 4 : a, w;
  for (w = 0; w < m; w += 4)
    e = revLookup$1[t.charCodeAt(w)] << 18 | revLookup$1[t.charCodeAt(w + 1)] << 12 | revLookup$1[t.charCodeAt(w + 2)] << 6 | revLookup$1[t.charCodeAt(w + 3)], o[d++] = e >> 16 & 255, o[d++] = e >> 8 & 255, o[d++] = e & 255;
  return c === 2 && (e = revLookup$1[t.charCodeAt(w)] << 2 | revLookup$1[t.charCodeAt(w + 1)] >> 4, o[d++] = e & 255), c === 1 && (e = revLookup$1[t.charCodeAt(w)] << 10 | revLookup$1[t.charCodeAt(w + 1)] << 4 | revLookup$1[t.charCodeAt(w + 2)] >> 2, o[d++] = e >> 8 & 255, o[d++] = e & 255), o;
}
function tripletToBase64$1(t) {
  return lookup$1[t >> 18 & 63] + lookup$1[t >> 12 & 63] + lookup$1[t >> 6 & 63] + lookup$1[t & 63];
}
function encodeChunk$1(t, e, n) {
  for (var a, c = [], o = e; o < n; o += 3)
    a = (t[o] << 16 & 16711680) + (t[o + 1] << 8 & 65280) + (t[o + 2] & 255), c.push(tripletToBase64$1(a));
  return c.join("");
}
function fromByteArray$1(t) {
  for (var e, n = t.length, a = n % 3, c = [], o = 16383, d = 0, m = n - a; d < m; d += o)
    c.push(encodeChunk$1(t, d, d + o > m ? m : d + o));
  return a === 1 ? (e = t[n - 1], c.push(
    lookup$1[e >> 2] + lookup$1[e << 4 & 63] + "=="
  )) : a === 2 && (e = (t[n - 2] << 8) + t[n - 1], c.push(
    lookup$1[e >> 10] + lookup$1[e >> 4 & 63] + lookup$1[e << 2 & 63] + "="
  )), c.join("");
}
var ieee754 = {};
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
ieee754.read = function(t, e, n, a, c) {
  var o, d, m = c * 8 - a - 1, w = (1 << m) - 1, S = w >> 1, A = -7, B = n ? c - 1 : 0, P = n ? -1 : 1, I = t[e + B];
  for (B += P, o = I & (1 << -A) - 1, I >>= -A, A += m; A > 0; o = o * 256 + t[e + B], B += P, A -= 8)
    ;
  for (d = o & (1 << -A) - 1, o >>= -A, A += a; A > 0; d = d * 256 + t[e + B], B += P, A -= 8)
    ;
  if (o === 0)
    o = 1 - S;
  else {
    if (o === w)
      return d ? NaN : (I ? -1 : 1) * (1 / 0);
    d = d + Math.pow(2, a), o = o - S;
  }
  return (I ? -1 : 1) * d * Math.pow(2, o - a);
};
ieee754.write = function(t, e, n, a, c, o) {
  var d, m, w, S = o * 8 - c - 1, A = (1 << S) - 1, B = A >> 1, P = c === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, I = a ? 0 : o - 1, O = a ? 1 : -1, L = e < 0 || e === 0 && 1 / e < 0 ? 1 : 0;
  for (e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (m = isNaN(e) ? 1 : 0, d = A) : (d = Math.floor(Math.log(e) / Math.LN2), e * (w = Math.pow(2, -d)) < 1 && (d--, w *= 2), d + B >= 1 ? e += P / w : e += P * Math.pow(2, 1 - B), e * w >= 2 && (d++, w /= 2), d + B >= A ? (m = 0, d = A) : d + B >= 1 ? (m = (e * w - 1) * Math.pow(2, c), d = d + B) : (m = e * Math.pow(2, B - 1) * Math.pow(2, c), d = 0)); c >= 8; t[n + I] = m & 255, I += O, m /= 256, c -= 8)
    ;
  for (d = d << c | m, S += c; S > 0; t[n + I] = d & 255, I += O, d /= 256, S -= 8)
    ;
  t[n + I - O] |= L * 128;
};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
(function(t) {
  const e = base64Js, n = ieee754, a = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
  t.Buffer = A, t.SlowBuffer = ie, t.INSPECT_MAX_BYTES = 50;
  const c = 2147483647;
  t.kMaxLength = c;
  const { Uint8Array: o, ArrayBuffer: d, SharedArrayBuffer: m } = globalThis;
  A.TYPED_ARRAY_SUPPORT = w(), !A.TYPED_ARRAY_SUPPORT && typeof console < "u" && typeof console.error == "function" && console.error(
    "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
  );
  function w() {
    try {
      const ee = new o(1), F = { foo: function() {
        return 42;
      } };
      return Object.setPrototypeOf(F, o.prototype), Object.setPrototypeOf(ee, F), ee.foo() === 42;
    } catch {
      return !1;
    }
  }
  Object.defineProperty(A.prototype, "parent", {
    enumerable: !0,
    get: function() {
      if (A.isBuffer(this))
        return this.buffer;
    }
  }), Object.defineProperty(A.prototype, "offset", {
    enumerable: !0,
    get: function() {
      if (A.isBuffer(this))
        return this.byteOffset;
    }
  });
  function S(ee) {
    if (ee > c)
      throw new RangeError('The value "' + ee + '" is invalid for option "size"');
    const F = new o(ee);
    return Object.setPrototypeOf(F, A.prototype), F;
  }
  function A(ee, F, J) {
    if (typeof ee == "number") {
      if (typeof F == "string")
        throw new TypeError(
          'The "string" argument must be of type string. Received type number'
        );
      return O(ee);
    }
    return B(ee, F, J);
  }
  A.poolSize = 8192;
  function B(ee, F, J) {
    if (typeof ee == "string")
      return L(ee, F);
    if (d.isView(ee))
      return z(ee);
    if (ee == null)
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof ee
      );
    if (De(ee, d) || ee && De(ee.buffer, d) || typeof m < "u" && (De(ee, m) || ee && De(ee.buffer, m)))
      return q(ee, F, J);
    if (typeof ee == "number")
      throw new TypeError(
        'The "value" argument must not be of type number. Received type number'
      );
    const oe = ee.valueOf && ee.valueOf();
    if (oe != null && oe !== ee)
      return A.from(oe, F, J);
    const he = Z(ee);
    if (he)
      return he;
    if (typeof Symbol < "u" && Symbol.toPrimitive != null && typeof ee[Symbol.toPrimitive] == "function")
      return A.from(ee[Symbol.toPrimitive]("string"), F, J);
    throw new TypeError(
      "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof ee
    );
  }
  A.from = function(ee, F, J) {
    return B(ee, F, J);
  }, Object.setPrototypeOf(A.prototype, o.prototype), Object.setPrototypeOf(A, o);
  function P(ee) {
    if (typeof ee != "number")
      throw new TypeError('"size" argument must be of type number');
    if (ee < 0)
      throw new RangeError('The value "' + ee + '" is invalid for option "size"');
  }
  function I(ee, F, J) {
    return P(ee), ee <= 0 ? S(ee) : F !== void 0 ? typeof J == "string" ? S(ee).fill(F, J) : S(ee).fill(F) : S(ee);
  }
  A.alloc = function(ee, F, J) {
    return I(ee, F, J);
  };
  function O(ee) {
    return P(ee), S(ee < 0 ? 0 : X(ee) | 0);
  }
  A.allocUnsafe = function(ee) {
    return O(ee);
  }, A.allocUnsafeSlow = function(ee) {
    return O(ee);
  };
  function L(ee, F) {
    if ((typeof F != "string" || F === "") && (F = "utf8"), !A.isEncoding(F))
      throw new TypeError("Unknown encoding: " + F);
    const J = fe(ee, F) | 0;
    let oe = S(J);
    const he = oe.write(ee, F);
    return he !== J && (oe = oe.slice(0, he)), oe;
  }
  function C(ee) {
    const F = ee.length < 0 ? 0 : X(ee.length) | 0, J = S(F);
    for (let oe = 0; oe < F; oe += 1)
      J[oe] = ee[oe] & 255;
    return J;
  }
  function z(ee) {
    if (De(ee, o)) {
      const F = new o(ee);
      return q(F.buffer, F.byteOffset, F.byteLength);
    }
    return C(ee);
  }
  function q(ee, F, J) {
    if (F < 0 || ee.byteLength < F)
      throw new RangeError('"offset" is outside of buffer bounds');
    if (ee.byteLength < F + (J || 0))
      throw new RangeError('"length" is outside of buffer bounds');
    let oe;
    return F === void 0 && J === void 0 ? oe = new o(ee) : J === void 0 ? oe = new o(ee, F) : oe = new o(ee, F, J), Object.setPrototypeOf(oe, A.prototype), oe;
  }
  function Z(ee) {
    if (A.isBuffer(ee)) {
      const F = X(ee.length) | 0, J = S(F);
      return J.length === 0 || ee.copy(J, 0, 0, F), J;
    }
    if (ee.length !== void 0)
      return typeof ee.length != "number" || vt(ee.length) ? S(0) : C(ee);
    if (ee.type === "Buffer" && Array.isArray(ee.data))
      return C(ee.data);
  }
  function X(ee) {
    if (ee >= c)
      throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + c.toString(16) + " bytes");
    return ee | 0;
  }
  function ie(ee) {
    return +ee != ee && (ee = 0), A.alloc(+ee);
  }
  A.isBuffer = function(F) {
    return F != null && F._isBuffer === !0 && F !== A.prototype;
  }, A.compare = function(F, J) {
    if (De(F, o) && (F = A.from(F, F.offset, F.byteLength)), De(J, o) && (J = A.from(J, J.offset, J.byteLength)), !A.isBuffer(F) || !A.isBuffer(J))
      throw new TypeError(
        'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
      );
    if (F === J)
      return 0;
    let oe = F.length, he = J.length;
    for (let Se = 0, me = Math.min(oe, he); Se < me; ++Se)
      if (F[Se] !== J[Se]) {
        oe = F[Se], he = J[Se];
        break;
      }
    return oe < he ? -1 : he < oe ? 1 : 0;
  }, A.isEncoding = function(F) {
    switch (String(F).toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "latin1":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return !0;
      default:
        return !1;
    }
  }, A.concat = function(F, J) {
    if (!Array.isArray(F))
      throw new TypeError('"list" argument must be an Array of Buffers');
    if (F.length === 0)
      return A.alloc(0);
    let oe;
    if (J === void 0)
      for (J = 0, oe = 0; oe < F.length; ++oe)
        J += F[oe].length;
    const he = A.allocUnsafe(J);
    let Se = 0;
    for (oe = 0; oe < F.length; ++oe) {
      let me = F[oe];
      if (De(me, o))
        Se + me.length > he.length ? (A.isBuffer(me) || (me = A.from(me)), me.copy(he, Se)) : o.prototype.set.call(
          he,
          me,
          Se
        );
      else if (A.isBuffer(me))
        me.copy(he, Se);
      else
        throw new TypeError('"list" argument must be an Array of Buffers');
      Se += me.length;
    }
    return he;
  };
  function fe(ee, F) {
    if (A.isBuffer(ee))
      return ee.length;
    if (d.isView(ee) || De(ee, d))
      return ee.byteLength;
    if (typeof ee != "string")
      throw new TypeError(
        'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof ee
      );
    const J = ee.length, oe = arguments.length > 2 && arguments[2] === !0;
    if (!oe && J === 0)
      return 0;
    let he = !1;
    for (; ; )
      switch (F) {
        case "ascii":
        case "latin1":
        case "binary":
          return J;
        case "utf8":
        case "utf-8":
          return xt(ee).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return J * 2;
        case "hex":
          return J >>> 1;
        case "base64":
          return wt(ee).length;
        default:
          if (he)
            return oe ? -1 : xt(ee).length;
          F = ("" + F).toLowerCase(), he = !0;
      }
  }
  A.byteLength = fe;
  function ye(ee, F, J) {
    let oe = !1;
    if ((F === void 0 || F < 0) && (F = 0), F > this.length || ((J === void 0 || J > this.length) && (J = this.length), J <= 0) || (J >>>= 0, F >>>= 0, J <= F))
      return "";
    for (ee || (ee = "utf8"); ; )
      switch (ee) {
        case "hex":
          return M(this, F, J);
        case "utf8":
        case "utf-8":
          return $(this, F, J);
        case "ascii":
          return l(this, F, J);
        case "latin1":
        case "binary":
          return b(this, F, J);
        case "base64":
          return v(this, F, J);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return k(this, F, J);
        default:
          if (oe)
            throw new TypeError("Unknown encoding: " + ee);
          ee = (ee + "").toLowerCase(), oe = !0;
      }
  }
  A.prototype._isBuffer = !0;
  function j(ee, F, J) {
    const oe = ee[F];
    ee[F] = ee[J], ee[J] = oe;
  }
  A.prototype.swap16 = function() {
    const F = this.length;
    if (F % 2 !== 0)
      throw new RangeError("Buffer size must be a multiple of 16-bits");
    for (let J = 0; J < F; J += 2)
      j(this, J, J + 1);
    return this;
  }, A.prototype.swap32 = function() {
    const F = this.length;
    if (F % 4 !== 0)
      throw new RangeError("Buffer size must be a multiple of 32-bits");
    for (let J = 0; J < F; J += 4)
      j(this, J, J + 3), j(this, J + 1, J + 2);
    return this;
  }, A.prototype.swap64 = function() {
    const F = this.length;
    if (F % 8 !== 0)
      throw new RangeError("Buffer size must be a multiple of 64-bits");
    for (let J = 0; J < F; J += 8)
      j(this, J, J + 7), j(this, J + 1, J + 6), j(this, J + 2, J + 5), j(this, J + 3, J + 4);
    return this;
  }, A.prototype.toString = function() {
    const F = this.length;
    return F === 0 ? "" : arguments.length === 0 ? $(this, 0, F) : ye.apply(this, arguments);
  }, A.prototype.toLocaleString = A.prototype.toString, A.prototype.equals = function(F) {
    if (!A.isBuffer(F))
      throw new TypeError("Argument must be a Buffer");
    return this === F ? !0 : A.compare(this, F) === 0;
  }, A.prototype.inspect = function() {
    let F = "";
    const J = t.INSPECT_MAX_BYTES;
    return F = this.toString("hex", 0, J).replace(/(.{2})/g, "$1 ").trim(), this.length > J && (F += " ... "), "<Buffer " + F + ">";
  }, a && (A.prototype[a] = A.prototype.inspect), A.prototype.compare = function(F, J, oe, he, Se) {
    if (De(F, o) && (F = A.from(F, F.offset, F.byteLength)), !A.isBuffer(F))
      throw new TypeError(
        'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof F
      );
    if (J === void 0 && (J = 0), oe === void 0 && (oe = F ? F.length : 0), he === void 0 && (he = 0), Se === void 0 && (Se = this.length), J < 0 || oe > F.length || he < 0 || Se > this.length)
      throw new RangeError("out of range index");
    if (he >= Se && J >= oe)
      return 0;
    if (he >= Se)
      return -1;
    if (J >= oe)
      return 1;
    if (J >>>= 0, oe >>>= 0, he >>>= 0, Se >>>= 0, this === F)
      return 0;
    let me = Se - he, Be = oe - J;
    const gt = Math.min(me, Be), Me = this.slice(he, Se), Oe = F.slice(J, oe);
    for (let ht = 0; ht < gt; ++ht)
      if (Me[ht] !== Oe[ht]) {
        me = Me[ht], Be = Oe[ht];
        break;
      }
    return me < Be ? -1 : Be < me ? 1 : 0;
  };
  function V(ee, F, J, oe, he) {
    if (ee.length === 0)
      return -1;
    if (typeof J == "string" ? (oe = J, J = 0) : J > 2147483647 ? J = 2147483647 : J < -2147483648 && (J = -2147483648), J = +J, vt(J) && (J = he ? 0 : ee.length - 1), J < 0 && (J = ee.length + J), J >= ee.length) {
      if (he)
        return -1;
      J = ee.length - 1;
    } else if (J < 0)
      if (he)
        J = 0;
      else
        return -1;
    if (typeof F == "string" && (F = A.from(F, oe)), A.isBuffer(F))
      return F.length === 0 ? -1 : ae(ee, F, J, oe, he);
    if (typeof F == "number")
      return F = F & 255, typeof o.prototype.indexOf == "function" ? he ? o.prototype.indexOf.call(ee, F, J) : o.prototype.lastIndexOf.call(ee, F, J) : ae(ee, [F], J, oe, he);
    throw new TypeError("val must be string, number or Buffer");
  }
  function ae(ee, F, J, oe, he) {
    let Se = 1, me = ee.length, Be = F.length;
    if (oe !== void 0 && (oe = String(oe).toLowerCase(), oe === "ucs2" || oe === "ucs-2" || oe === "utf16le" || oe === "utf-16le")) {
      if (ee.length < 2 || F.length < 2)
        return -1;
      Se = 2, me /= 2, Be /= 2, J /= 2;
    }
    function gt(Oe, ht) {
      return Se === 1 ? Oe[ht] : Oe.readUInt16BE(ht * Se);
    }
    let Me;
    if (he) {
      let Oe = -1;
      for (Me = J; Me < me; Me++)
        if (gt(ee, Me) === gt(F, Oe === -1 ? 0 : Me - Oe)) {
          if (Oe === -1 && (Oe = Me), Me - Oe + 1 === Be)
            return Oe * Se;
        } else
          Oe !== -1 && (Me -= Me - Oe), Oe = -1;
    } else
      for (J + Be > me && (J = me - Be), Me = J; Me >= 0; Me--) {
        let Oe = !0;
        for (let ht = 0; ht < Be; ht++)
          if (gt(ee, Me + ht) !== gt(F, ht)) {
            Oe = !1;
            break;
          }
        if (Oe)
          return Me;
      }
    return -1;
  }
  A.prototype.includes = function(F, J, oe) {
    return this.indexOf(F, J, oe) !== -1;
  }, A.prototype.indexOf = function(F, J, oe) {
    return V(this, F, J, oe, !0);
  }, A.prototype.lastIndexOf = function(F, J, oe) {
    return V(this, F, J, oe, !1);
  };
  function _(ee, F, J, oe) {
    J = Number(J) || 0;
    const he = ee.length - J;
    oe ? (oe = Number(oe), oe > he && (oe = he)) : oe = he;
    const Se = F.length;
    oe > Se / 2 && (oe = Se / 2);
    let me;
    for (me = 0; me < oe; ++me) {
      const Be = parseInt(F.substr(me * 2, 2), 16);
      if (vt(Be))
        return me;
      ee[J + me] = Be;
    }
    return me;
  }
  function u(ee, F, J, oe) {
    return Te(xt(F, ee.length - J), ee, J, oe);
  }
  function h(ee, F, J, oe) {
    return Te(Ne(F), ee, J, oe);
  }
  function p(ee, F, J, oe) {
    return Te(wt(F), ee, J, oe);
  }
  function y(ee, F, J, oe) {
    return Te(qe(F, ee.length - J), ee, J, oe);
  }
  A.prototype.write = function(F, J, oe, he) {
    if (J === void 0)
      he = "utf8", oe = this.length, J = 0;
    else if (oe === void 0 && typeof J == "string")
      he = J, oe = this.length, J = 0;
    else if (isFinite(J))
      J = J >>> 0, isFinite(oe) ? (oe = oe >>> 0, he === void 0 && (he = "utf8")) : (he = oe, oe = void 0);
    else
      throw new Error(
        "Buffer.write(string, encoding, offset[, length]) is no longer supported"
      );
    const Se = this.length - J;
    if ((oe === void 0 || oe > Se) && (oe = Se), F.length > 0 && (oe < 0 || J < 0) || J > this.length)
      throw new RangeError("Attempt to write outside buffer bounds");
    he || (he = "utf8");
    let me = !1;
    for (; ; )
      switch (he) {
        case "hex":
          return _(this, F, J, oe);
        case "utf8":
        case "utf-8":
          return u(this, F, J, oe);
        case "ascii":
        case "latin1":
        case "binary":
          return h(this, F, J, oe);
        case "base64":
          return p(this, F, J, oe);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return y(this, F, J, oe);
        default:
          if (me)
            throw new TypeError("Unknown encoding: " + he);
          he = ("" + he).toLowerCase(), me = !0;
      }
  }, A.prototype.toJSON = function() {
    return {
      type: "Buffer",
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };
  function v(ee, F, J) {
    return F === 0 && J === ee.length ? e.fromByteArray(ee) : e.fromByteArray(ee.slice(F, J));
  }
  function $(ee, F, J) {
    J = Math.min(ee.length, J);
    const oe = [];
    let he = F;
    for (; he < J; ) {
      const Se = ee[he];
      let me = null, Be = Se > 239 ? 4 : Se > 223 ? 3 : Se > 191 ? 2 : 1;
      if (he + Be <= J) {
        let gt, Me, Oe, ht;
        switch (Be) {
          case 1:
            Se < 128 && (me = Se);
            break;
          case 2:
            gt = ee[he + 1], (gt & 192) === 128 && (ht = (Se & 31) << 6 | gt & 63, ht > 127 && (me = ht));
            break;
          case 3:
            gt = ee[he + 1], Me = ee[he + 2], (gt & 192) === 128 && (Me & 192) === 128 && (ht = (Se & 15) << 12 | (gt & 63) << 6 | Me & 63, ht > 2047 && (ht < 55296 || ht > 57343) && (me = ht));
            break;
          case 4:
            gt = ee[he + 1], Me = ee[he + 2], Oe = ee[he + 3], (gt & 192) === 128 && (Me & 192) === 128 && (Oe & 192) === 128 && (ht = (Se & 15) << 18 | (gt & 63) << 12 | (Me & 63) << 6 | Oe & 63, ht > 65535 && ht < 1114112 && (me = ht));
        }
      }
      me === null ? (me = 65533, Be = 1) : me > 65535 && (me -= 65536, oe.push(me >>> 10 & 1023 | 55296), me = 56320 | me & 1023), oe.push(me), he += Be;
    }
    return x(oe);
  }
  const E = 4096;
  function x(ee) {
    const F = ee.length;
    if (F <= E)
      return String.fromCharCode.apply(String, ee);
    let J = "", oe = 0;
    for (; oe < F; )
      J += String.fromCharCode.apply(
        String,
        ee.slice(oe, oe += E)
      );
    return J;
  }
  function l(ee, F, J) {
    let oe = "";
    J = Math.min(ee.length, J);
    for (let he = F; he < J; ++he)
      oe += String.fromCharCode(ee[he] & 127);
    return oe;
  }
  function b(ee, F, J) {
    let oe = "";
    J = Math.min(ee.length, J);
    for (let he = F; he < J; ++he)
      oe += String.fromCharCode(ee[he]);
    return oe;
  }
  function M(ee, F, J) {
    const oe = ee.length;
    (!F || F < 0) && (F = 0), (!J || J < 0 || J > oe) && (J = oe);
    let he = "";
    for (let Se = F; Se < J; ++Se)
      he += ke[ee[Se]];
    return he;
  }
  function k(ee, F, J) {
    const oe = ee.slice(F, J);
    let he = "";
    for (let Se = 0; Se < oe.length - 1; Se += 2)
      he += String.fromCharCode(oe[Se] + oe[Se + 1] * 256);
    return he;
  }
  A.prototype.slice = function(F, J) {
    const oe = this.length;
    F = ~~F, J = J === void 0 ? oe : ~~J, F < 0 ? (F += oe, F < 0 && (F = 0)) : F > oe && (F = oe), J < 0 ? (J += oe, J < 0 && (J = 0)) : J > oe && (J = oe), J < F && (J = F);
    const he = this.subarray(F, J);
    return Object.setPrototypeOf(he, A.prototype), he;
  };
  function U(ee, F, J) {
    if (ee % 1 !== 0 || ee < 0)
      throw new RangeError("offset is not uint");
    if (ee + F > J)
      throw new RangeError("Trying to access beyond buffer length");
  }
  A.prototype.readUintLE = A.prototype.readUIntLE = function(F, J, oe) {
    F = F >>> 0, J = J >>> 0, oe || U(F, J, this.length);
    let he = this[F], Se = 1, me = 0;
    for (; ++me < J && (Se *= 256); )
      he += this[F + me] * Se;
    return he;
  }, A.prototype.readUintBE = A.prototype.readUIntBE = function(F, J, oe) {
    F = F >>> 0, J = J >>> 0, oe || U(F, J, this.length);
    let he = this[F + --J], Se = 1;
    for (; J > 0 && (Se *= 256); )
      he += this[F + --J] * Se;
    return he;
  }, A.prototype.readUint8 = A.prototype.readUInt8 = function(F, J) {
    return F = F >>> 0, J || U(F, 1, this.length), this[F];
  }, A.prototype.readUint16LE = A.prototype.readUInt16LE = function(F, J) {
    return F = F >>> 0, J || U(F, 2, this.length), this[F] | this[F + 1] << 8;
  }, A.prototype.readUint16BE = A.prototype.readUInt16BE = function(F, J) {
    return F = F >>> 0, J || U(F, 2, this.length), this[F] << 8 | this[F + 1];
  }, A.prototype.readUint32LE = A.prototype.readUInt32LE = function(F, J) {
    return F = F >>> 0, J || U(F, 4, this.length), (this[F] | this[F + 1] << 8 | this[F + 2] << 16) + this[F + 3] * 16777216;
  }, A.prototype.readUint32BE = A.prototype.readUInt32BE = function(F, J) {
    return F = F >>> 0, J || U(F, 4, this.length), this[F] * 16777216 + (this[F + 1] << 16 | this[F + 2] << 8 | this[F + 3]);
  }, A.prototype.readBigUInt64LE = Ue(function(F) {
    F = F >>> 0, Ee(F, "offset");
    const J = this[F], oe = this[F + 7];
    (J === void 0 || oe === void 0) && at(F, this.length - 8);
    const he = J + this[++F] * 2 ** 8 + this[++F] * 2 ** 16 + this[++F] * 2 ** 24, Se = this[++F] + this[++F] * 2 ** 8 + this[++F] * 2 ** 16 + oe * 2 ** 24;
    return BigInt(he) + (BigInt(Se) << BigInt(32));
  }), A.prototype.readBigUInt64BE = Ue(function(F) {
    F = F >>> 0, Ee(F, "offset");
    const J = this[F], oe = this[F + 7];
    (J === void 0 || oe === void 0) && at(F, this.length - 8);
    const he = J * 2 ** 24 + this[++F] * 2 ** 16 + this[++F] * 2 ** 8 + this[++F], Se = this[++F] * 2 ** 24 + this[++F] * 2 ** 16 + this[++F] * 2 ** 8 + oe;
    return (BigInt(he) << BigInt(32)) + BigInt(Se);
  }), A.prototype.readIntLE = function(F, J, oe) {
    F = F >>> 0, J = J >>> 0, oe || U(F, J, this.length);
    let he = this[F], Se = 1, me = 0;
    for (; ++me < J && (Se *= 256); )
      he += this[F + me] * Se;
    return Se *= 128, he >= Se && (he -= Math.pow(2, 8 * J)), he;
  }, A.prototype.readIntBE = function(F, J, oe) {
    F = F >>> 0, J = J >>> 0, oe || U(F, J, this.length);
    let he = J, Se = 1, me = this[F + --he];
    for (; he > 0 && (Se *= 256); )
      me += this[F + --he] * Se;
    return Se *= 128, me >= Se && (me -= Math.pow(2, 8 * J)), me;
  }, A.prototype.readInt8 = function(F, J) {
    return F = F >>> 0, J || U(F, 1, this.length), this[F] & 128 ? (255 - this[F] + 1) * -1 : this[F];
  }, A.prototype.readInt16LE = function(F, J) {
    F = F >>> 0, J || U(F, 2, this.length);
    const oe = this[F] | this[F + 1] << 8;
    return oe & 32768 ? oe | 4294901760 : oe;
  }, A.prototype.readInt16BE = function(F, J) {
    F = F >>> 0, J || U(F, 2, this.length);
    const oe = this[F + 1] | this[F] << 8;
    return oe & 32768 ? oe | 4294901760 : oe;
  }, A.prototype.readInt32LE = function(F, J) {
    return F = F >>> 0, J || U(F, 4, this.length), this[F] | this[F + 1] << 8 | this[F + 2] << 16 | this[F + 3] << 24;
  }, A.prototype.readInt32BE = function(F, J) {
    return F = F >>> 0, J || U(F, 4, this.length), this[F] << 24 | this[F + 1] << 16 | this[F + 2] << 8 | this[F + 3];
  }, A.prototype.readBigInt64LE = Ue(function(F) {
    F = F >>> 0, Ee(F, "offset");
    const J = this[F], oe = this[F + 7];
    (J === void 0 || oe === void 0) && at(F, this.length - 8);
    const he = this[F + 4] + this[F + 5] * 2 ** 8 + this[F + 6] * 2 ** 16 + (oe << 24);
    return (BigInt(he) << BigInt(32)) + BigInt(J + this[++F] * 2 ** 8 + this[++F] * 2 ** 16 + this[++F] * 2 ** 24);
  }), A.prototype.readBigInt64BE = Ue(function(F) {
    F = F >>> 0, Ee(F, "offset");
    const J = this[F], oe = this[F + 7];
    (J === void 0 || oe === void 0) && at(F, this.length - 8);
    const he = (J << 24) + // Overflow
    this[++F] * 2 ** 16 + this[++F] * 2 ** 8 + this[++F];
    return (BigInt(he) << BigInt(32)) + BigInt(this[++F] * 2 ** 24 + this[++F] * 2 ** 16 + this[++F] * 2 ** 8 + oe);
  }), A.prototype.readFloatLE = function(F, J) {
    return F = F >>> 0, J || U(F, 4, this.length), n.read(this, F, !0, 23, 4);
  }, A.prototype.readFloatBE = function(F, J) {
    return F = F >>> 0, J || U(F, 4, this.length), n.read(this, F, !1, 23, 4);
  }, A.prototype.readDoubleLE = function(F, J) {
    return F = F >>> 0, J || U(F, 8, this.length), n.read(this, F, !0, 52, 8);
  }, A.prototype.readDoubleBE = function(F, J) {
    return F = F >>> 0, J || U(F, 8, this.length), n.read(this, F, !1, 52, 8);
  };
  function T(ee, F, J, oe, he, Se) {
    if (!A.isBuffer(ee))
      throw new TypeError('"buffer" argument must be a Buffer instance');
    if (F > he || F < Se)
      throw new RangeError('"value" argument is out of bounds');
    if (J + oe > ee.length)
      throw new RangeError("Index out of range");
  }
  A.prototype.writeUintLE = A.prototype.writeUIntLE = function(F, J, oe, he) {
    if (F = +F, J = J >>> 0, oe = oe >>> 0, !he) {
      const Be = Math.pow(2, 8 * oe) - 1;
      T(this, F, J, oe, Be, 0);
    }
    let Se = 1, me = 0;
    for (this[J] = F & 255; ++me < oe && (Se *= 256); )
      this[J + me] = F / Se & 255;
    return J + oe;
  }, A.prototype.writeUintBE = A.prototype.writeUIntBE = function(F, J, oe, he) {
    if (F = +F, J = J >>> 0, oe = oe >>> 0, !he) {
      const Be = Math.pow(2, 8 * oe) - 1;
      T(this, F, J, oe, Be, 0);
    }
    let Se = oe - 1, me = 1;
    for (this[J + Se] = F & 255; --Se >= 0 && (me *= 256); )
      this[J + Se] = F / me & 255;
    return J + oe;
  }, A.prototype.writeUint8 = A.prototype.writeUInt8 = function(F, J, oe) {
    return F = +F, J = J >>> 0, oe || T(this, F, J, 1, 255, 0), this[J] = F & 255, J + 1;
  }, A.prototype.writeUint16LE = A.prototype.writeUInt16LE = function(F, J, oe) {
    return F = +F, J = J >>> 0, oe || T(this, F, J, 2, 65535, 0), this[J] = F & 255, this[J + 1] = F >>> 8, J + 2;
  }, A.prototype.writeUint16BE = A.prototype.writeUInt16BE = function(F, J, oe) {
    return F = +F, J = J >>> 0, oe || T(this, F, J, 2, 65535, 0), this[J] = F >>> 8, this[J + 1] = F & 255, J + 2;
  }, A.prototype.writeUint32LE = A.prototype.writeUInt32LE = function(F, J, oe) {
    return F = +F, J = J >>> 0, oe || T(this, F, J, 4, 4294967295, 0), this[J + 3] = F >>> 24, this[J + 2] = F >>> 16, this[J + 1] = F >>> 8, this[J] = F & 255, J + 4;
  }, A.prototype.writeUint32BE = A.prototype.writeUInt32BE = function(F, J, oe) {
    return F = +F, J = J >>> 0, oe || T(this, F, J, 4, 4294967295, 0), this[J] = F >>> 24, this[J + 1] = F >>> 16, this[J + 2] = F >>> 8, this[J + 3] = F & 255, J + 4;
  };
  function H(ee, F, J, oe, he) {
    xe(F, oe, he, ee, J, 7);
    let Se = Number(F & BigInt(4294967295));
    ee[J++] = Se, Se = Se >> 8, ee[J++] = Se, Se = Se >> 8, ee[J++] = Se, Se = Se >> 8, ee[J++] = Se;
    let me = Number(F >> BigInt(32) & BigInt(4294967295));
    return ee[J++] = me, me = me >> 8, ee[J++] = me, me = me >> 8, ee[J++] = me, me = me >> 8, ee[J++] = me, J;
  }
  function Y(ee, F, J, oe, he) {
    xe(F, oe, he, ee, J, 7);
    let Se = Number(F & BigInt(4294967295));
    ee[J + 7] = Se, Se = Se >> 8, ee[J + 6] = Se, Se = Se >> 8, ee[J + 5] = Se, Se = Se >> 8, ee[J + 4] = Se;
    let me = Number(F >> BigInt(32) & BigInt(4294967295));
    return ee[J + 3] = me, me = me >> 8, ee[J + 2] = me, me = me >> 8, ee[J + 1] = me, me = me >> 8, ee[J] = me, J + 8;
  }
  A.prototype.writeBigUInt64LE = Ue(function(F, J = 0) {
    return H(this, F, J, BigInt(0), BigInt("0xffffffffffffffff"));
  }), A.prototype.writeBigUInt64BE = Ue(function(F, J = 0) {
    return Y(this, F, J, BigInt(0), BigInt("0xffffffffffffffff"));
  }), A.prototype.writeIntLE = function(F, J, oe, he) {
    if (F = +F, J = J >>> 0, !he) {
      const gt = Math.pow(2, 8 * oe - 1);
      T(this, F, J, oe, gt - 1, -gt);
    }
    let Se = 0, me = 1, Be = 0;
    for (this[J] = F & 255; ++Se < oe && (me *= 256); )
      F < 0 && Be === 0 && this[J + Se - 1] !== 0 && (Be = 1), this[J + Se] = (F / me >> 0) - Be & 255;
    return J + oe;
  }, A.prototype.writeIntBE = function(F, J, oe, he) {
    if (F = +F, J = J >>> 0, !he) {
      const gt = Math.pow(2, 8 * oe - 1);
      T(this, F, J, oe, gt - 1, -gt);
    }
    let Se = oe - 1, me = 1, Be = 0;
    for (this[J + Se] = F & 255; --Se >= 0 && (me *= 256); )
      F < 0 && Be === 0 && this[J + Se + 1] !== 0 && (Be = 1), this[J + Se] = (F / me >> 0) - Be & 255;
    return J + oe;
  }, A.prototype.writeInt8 = function(F, J, oe) {
    return F = +F, J = J >>> 0, oe || T(this, F, J, 1, 127, -128), F < 0 && (F = 255 + F + 1), this[J] = F & 255, J + 1;
  }, A.prototype.writeInt16LE = function(F, J, oe) {
    return F = +F, J = J >>> 0, oe || T(this, F, J, 2, 32767, -32768), this[J] = F & 255, this[J + 1] = F >>> 8, J + 2;
  }, A.prototype.writeInt16BE = function(F, J, oe) {
    return F = +F, J = J >>> 0, oe || T(this, F, J, 2, 32767, -32768), this[J] = F >>> 8, this[J + 1] = F & 255, J + 2;
  }, A.prototype.writeInt32LE = function(F, J, oe) {
    return F = +F, J = J >>> 0, oe || T(this, F, J, 4, 2147483647, -2147483648), this[J] = F & 255, this[J + 1] = F >>> 8, this[J + 2] = F >>> 16, this[J + 3] = F >>> 24, J + 4;
  }, A.prototype.writeInt32BE = function(F, J, oe) {
    return F = +F, J = J >>> 0, oe || T(this, F, J, 4, 2147483647, -2147483648), F < 0 && (F = 4294967295 + F + 1), this[J] = F >>> 24, this[J + 1] = F >>> 16, this[J + 2] = F >>> 8, this[J + 3] = F & 255, J + 4;
  }, A.prototype.writeBigInt64LE = Ue(function(F, J = 0) {
    return H(this, F, J, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  }), A.prototype.writeBigInt64BE = Ue(function(F, J = 0) {
    return Y(this, F, J, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  });
  function le(ee, F, J, oe, he, Se) {
    if (J + oe > ee.length)
      throw new RangeError("Index out of range");
    if (J < 0)
      throw new RangeError("Index out of range");
  }
  function ce(ee, F, J, oe, he) {
    return F = +F, J = J >>> 0, he || le(ee, F, J, 4), n.write(ee, F, J, oe, 23, 4), J + 4;
  }
  A.prototype.writeFloatLE = function(F, J, oe) {
    return ce(this, F, J, !0, oe);
  }, A.prototype.writeFloatBE = function(F, J, oe) {
    return ce(this, F, J, !1, oe);
  };
  function de(ee, F, J, oe, he) {
    return F = +F, J = J >>> 0, he || le(ee, F, J, 8), n.write(ee, F, J, oe, 52, 8), J + 8;
  }
  A.prototype.writeDoubleLE = function(F, J, oe) {
    return de(this, F, J, !0, oe);
  }, A.prototype.writeDoubleBE = function(F, J, oe) {
    return de(this, F, J, !1, oe);
  }, A.prototype.copy = function(F, J, oe, he) {
    if (!A.isBuffer(F))
      throw new TypeError("argument should be a Buffer");
    if (oe || (oe = 0), !he && he !== 0 && (he = this.length), J >= F.length && (J = F.length), J || (J = 0), he > 0 && he < oe && (he = oe), he === oe || F.length === 0 || this.length === 0)
      return 0;
    if (J < 0)
      throw new RangeError("targetStart out of bounds");
    if (oe < 0 || oe >= this.length)
      throw new RangeError("Index out of range");
    if (he < 0)
      throw new RangeError("sourceEnd out of bounds");
    he > this.length && (he = this.length), F.length - J < he - oe && (he = F.length - J + oe);
    const Se = he - oe;
    return this === F && typeof o.prototype.copyWithin == "function" ? this.copyWithin(J, oe, he) : o.prototype.set.call(
      F,
      this.subarray(oe, he),
      J
    ), Se;
  }, A.prototype.fill = function(F, J, oe, he) {
    if (typeof F == "string") {
      if (typeof J == "string" ? (he = J, J = 0, oe = this.length) : typeof oe == "string" && (he = oe, oe = this.length), he !== void 0 && typeof he != "string")
        throw new TypeError("encoding must be a string");
      if (typeof he == "string" && !A.isEncoding(he))
        throw new TypeError("Unknown encoding: " + he);
      if (F.length === 1) {
        const me = F.charCodeAt(0);
        (he === "utf8" && me < 128 || he === "latin1") && (F = me);
      }
    } else
      typeof F == "number" ? F = F & 255 : typeof F == "boolean" && (F = Number(F));
    if (J < 0 || this.length < J || this.length < oe)
      throw new RangeError("Out of range index");
    if (oe <= J)
      return this;
    J = J >>> 0, oe = oe === void 0 ? this.length : oe >>> 0, F || (F = 0);
    let Se;
    if (typeof F == "number")
      for (Se = J; Se < oe; ++Se)
        this[Se] = F;
    else {
      const me = A.isBuffer(F) ? F : A.from(F, he), Be = me.length;
      if (Be === 0)
        throw new TypeError('The value "' + F + '" is invalid for argument "value"');
      for (Se = 0; Se < oe - J; ++Se)
        this[Se + J] = me[Se % Be];
    }
    return this;
  };
  const ue = {};
  function re(ee, F, J) {
    ue[ee] = class extends J {
      constructor() {
        super(), Object.defineProperty(this, "message", {
          value: F.apply(this, arguments),
          writable: !0,
          configurable: !0
        }), this.name = `${this.name} [${ee}]`, this.stack, delete this.name;
      }
      get code() {
        return ee;
      }
      set code(he) {
        Object.defineProperty(this, "code", {
          configurable: !0,
          enumerable: !0,
          value: he,
          writable: !0
        });
      }
      toString() {
        return `${this.name} [${ee}]: ${this.message}`;
      }
    };
  }
  re(
    "ERR_BUFFER_OUT_OF_BOUNDS",
    function(ee) {
      return ee ? `${ee} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
    },
    RangeError
  ), re(
    "ERR_INVALID_ARG_TYPE",
    function(ee, F) {
      return `The "${ee}" argument must be of type number. Received type ${typeof F}`;
    },
    TypeError
  ), re(
    "ERR_OUT_OF_RANGE",
    function(ee, F, J) {
      let oe = `The value of "${ee}" is out of range.`, he = J;
      return Number.isInteger(J) && Math.abs(J) > 2 ** 32 ? he = ge(String(J)) : typeof J == "bigint" && (he = String(J), (J > BigInt(2) ** BigInt(32) || J < -(BigInt(2) ** BigInt(32))) && (he = ge(he)), he += "n"), oe += ` It must be ${F}. Received ${he}`, oe;
    },
    RangeError
  );
  function ge(ee) {
    let F = "", J = ee.length;
    const oe = ee[0] === "-" ? 1 : 0;
    for (; J >= oe + 4; J -= 3)
      F = `_${ee.slice(J - 3, J)}${F}`;
    return `${ee.slice(0, J)}${F}`;
  }
  function Ae(ee, F, J) {
    Ee(F, "offset"), (ee[F] === void 0 || ee[F + J] === void 0) && at(F, ee.length - (J + 1));
  }
  function xe(ee, F, J, oe, he, Se) {
    if (ee > J || ee < F) {
      const me = typeof F == "bigint" ? "n" : "";
      let Be;
      throw Se > 3 ? F === 0 || F === BigInt(0) ? Be = `>= 0${me} and < 2${me} ** ${(Se + 1) * 8}${me}` : Be = `>= -(2${me} ** ${(Se + 1) * 8 - 1}${me}) and < 2 ** ${(Se + 1) * 8 - 1}${me}` : Be = `>= ${F}${me} and <= ${J}${me}`, new ue.ERR_OUT_OF_RANGE("value", Be, ee);
    }
    Ae(oe, he, Se);
  }
  function Ee(ee, F) {
    if (typeof ee != "number")
      throw new ue.ERR_INVALID_ARG_TYPE(F, "number", ee);
  }
  function at(ee, F, J) {
    throw Math.floor(ee) !== ee ? (Ee(ee, J), new ue.ERR_OUT_OF_RANGE(J || "offset", "an integer", ee)) : F < 0 ? new ue.ERR_BUFFER_OUT_OF_BOUNDS() : new ue.ERR_OUT_OF_RANGE(
      J || "offset",
      `>= ${J ? 1 : 0} and <= ${F}`,
      ee
    );
  }
  const Re = /[^+/0-9A-Za-z-_]/g;
  function ve(ee) {
    if (ee = ee.split("=")[0], ee = ee.trim().replace(Re, ""), ee.length < 2)
      return "";
    for (; ee.length % 4 !== 0; )
      ee = ee + "=";
    return ee;
  }
  function xt(ee, F) {
    F = F || 1 / 0;
    let J;
    const oe = ee.length;
    let he = null;
    const Se = [];
    for (let me = 0; me < oe; ++me) {
      if (J = ee.charCodeAt(me), J > 55295 && J < 57344) {
        if (!he) {
          if (J > 56319) {
            (F -= 3) > -1 && Se.push(239, 191, 189);
            continue;
          } else if (me + 1 === oe) {
            (F -= 3) > -1 && Se.push(239, 191, 189);
            continue;
          }
          he = J;
          continue;
        }
        if (J < 56320) {
          (F -= 3) > -1 && Se.push(239, 191, 189), he = J;
          continue;
        }
        J = (he - 55296 << 10 | J - 56320) + 65536;
      } else
        he && (F -= 3) > -1 && Se.push(239, 191, 189);
      if (he = null, J < 128) {
        if ((F -= 1) < 0)
          break;
        Se.push(J);
      } else if (J < 2048) {
        if ((F -= 2) < 0)
          break;
        Se.push(
          J >> 6 | 192,
          J & 63 | 128
        );
      } else if (J < 65536) {
        if ((F -= 3) < 0)
          break;
        Se.push(
          J >> 12 | 224,
          J >> 6 & 63 | 128,
          J & 63 | 128
        );
      } else if (J < 1114112) {
        if ((F -= 4) < 0)
          break;
        Se.push(
          J >> 18 | 240,
          J >> 12 & 63 | 128,
          J >> 6 & 63 | 128,
          J & 63 | 128
        );
      } else
        throw new Error("Invalid code point");
    }
    return Se;
  }
  function Ne(ee) {
    const F = [];
    for (let J = 0; J < ee.length; ++J)
      F.push(ee.charCodeAt(J) & 255);
    return F;
  }
  function qe(ee, F) {
    let J, oe, he;
    const Se = [];
    for (let me = 0; me < ee.length && !((F -= 2) < 0); ++me)
      J = ee.charCodeAt(me), oe = J >> 8, he = J % 256, Se.push(he), Se.push(oe);
    return Se;
  }
  function wt(ee) {
    return e.toByteArray(ve(ee));
  }
  function Te(ee, F, J, oe) {
    let he;
    for (he = 0; he < oe && !(he + J >= F.length || he >= ee.length); ++he)
      F[he + J] = ee[he];
    return he;
  }
  function De(ee, F) {
    return ee instanceof F || ee != null && ee.constructor != null && ee.constructor.name != null && ee.constructor.name === F.name;
  }
  function vt(ee) {
    return ee !== ee;
  }
  const ke = function() {
    const ee = "0123456789abcdef", F = new Array(256);
    for (let J = 0; J < 16; ++J) {
      const oe = J * 16;
      for (let he = 0; he < 16; ++he)
        F[oe + he] = ee[J] + ee[he];
    }
    return F;
  }();
  function Ue(ee) {
    return typeof BigInt > "u" ? $t : ee;
  }
  function $t() {
    throw new Error("BigInt not supported");
  }
})(buffer$2);
const Buffer$F = buffer$2.Buffer, Buffer$1$1 = buffer$2.Buffer, dist$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Buffer: Buffer$1$1,
  default: Buffer$F
}, Symbol.toStringTag, { value: "Module" }));
function AxiosError$3(t, e, n, a, c) {
  Error.call(this), Error.captureStackTrace ? Error.captureStackTrace(this, this.constructor) : this.stack = new Error().stack, this.message = t, this.name = "AxiosError", e && (this.code = e), n && (this.config = n), a && (this.request = a), c && (this.response = c);
}
utils$E.inherits(AxiosError$3, Error, {
  toJSON: function() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils$E.toJSONObject(this.config),
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});
const prototype$2 = AxiosError$3.prototype, descriptors$1 = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
  // eslint-disable-next-line func-names
].forEach((t) => {
  descriptors$1[t] = { value: t };
});
Object.defineProperties(AxiosError$3, descriptors$1);
Object.defineProperty(prototype$2, "isAxiosError", { value: !0 });
AxiosError$3.from = (t, e, n, a, c, o) => {
  const d = Object.create(prototype$2);
  return utils$E.toFlatObject(t, d, function(w) {
    return w !== Error.prototype;
  }, (m) => m !== "isAxiosError"), AxiosError$3.call(d, t.message, e, n, a, c), d.cause = t, d.name = t.name, o && Object.assign(d, o), d;
};
const httpAdapter = null;
function isVisitable(t) {
  return utils$E.isPlainObject(t) || utils$E.isArray(t);
}
function removeBrackets(t) {
  return utils$E.endsWith(t, "[]") ? t.slice(0, -2) : t;
}
function renderKey(t, e, n) {
  return t ? t.concat(e).map(function(c, o) {
    return c = removeBrackets(c), !n && o ? "[" + c + "]" : c;
  }).join(n ? "." : "") : e;
}
function isFlatArray(t) {
  return utils$E.isArray(t) && !t.some(isVisitable);
}
const predicates = utils$E.toFlatObject(utils$E, {}, null, function(e) {
  return /^is[A-Z]/.test(e);
});
function toFormData$2(t, e, n) {
  if (!utils$E.isObject(t))
    throw new TypeError("target must be an object");
  e = e || new FormData(), n = utils$E.toFlatObject(n, {
    metaTokens: !0,
    dots: !1,
    indexes: !1
  }, !1, function(L, C) {
    return !utils$E.isUndefined(C[L]);
  });
  const a = n.metaTokens, c = n.visitor || A, o = n.dots, d = n.indexes, w = (n.Blob || typeof Blob < "u" && Blob) && utils$E.isSpecCompliantForm(e);
  if (!utils$E.isFunction(c))
    throw new TypeError("visitor must be a function");
  function S(O) {
    if (O === null)
      return "";
    if (utils$E.isDate(O))
      return O.toISOString();
    if (!w && utils$E.isBlob(O))
      throw new AxiosError$3("Blob is not supported. Use a Buffer instead.");
    return utils$E.isArrayBuffer(O) || utils$E.isTypedArray(O) ? w && typeof Blob == "function" ? new Blob([O]) : Buffer$F.from(O) : O;
  }
  function A(O, L, C) {
    let z = O;
    if (O && !C && typeof O == "object") {
      if (utils$E.endsWith(L, "{}"))
        L = a ? L : L.slice(0, -2), O = JSON.stringify(O);
      else if (utils$E.isArray(O) && isFlatArray(O) || (utils$E.isFileList(O) || utils$E.endsWith(L, "[]")) && (z = utils$E.toArray(O)))
        return L = removeBrackets(L), z.forEach(function(Z, X) {
          !(utils$E.isUndefined(Z) || Z === null) && e.append(
            // eslint-disable-next-line no-nested-ternary
            d === !0 ? renderKey([L], X, o) : d === null ? L : L + "[]",
            S(Z)
          );
        }), !1;
    }
    return isVisitable(O) ? !0 : (e.append(renderKey(C, L, o), S(O)), !1);
  }
  const B = [], P = Object.assign(predicates, {
    defaultVisitor: A,
    convertValue: S,
    isVisitable
  });
  function I(O, L) {
    if (!utils$E.isUndefined(O)) {
      if (B.indexOf(O) !== -1)
        throw Error("Circular reference detected in " + L.join("."));
      B.push(O), utils$E.forEach(O, function(z, q) {
        (!(utils$E.isUndefined(z) || z === null) && c.call(
          e,
          z,
          utils$E.isString(q) ? q.trim() : q,
          L,
          P
        )) === !0 && I(z, L ? L.concat(q) : [q]);
      }), B.pop();
    }
  }
  if (!utils$E.isObject(t))
    throw new TypeError("data must be an object");
  return I(t), e;
}
function encode$4(t) {
  const e = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(t).replace(/[!'()~]|%20|%00/g, function(a) {
    return e[a];
  });
}
function AxiosURLSearchParams(t, e) {
  this._pairs = [], t && toFormData$2(t, this, e);
}
const prototype$1 = AxiosURLSearchParams.prototype;
prototype$1.append = function(e, n) {
  this._pairs.push([e, n]);
};
prototype$1.toString = function(e) {
  const n = e ? function(a) {
    return e.call(this, a, encode$4);
  } : encode$4;
  return this._pairs.map(function(c) {
    return n(c[0]) + "=" + n(c[1]);
  }, "").join("&");
};
function encode$3(t) {
  return encodeURIComponent(t).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function buildURL$2(t, e, n) {
  if (!e)
    return t;
  const a = n && n.encode || encode$3, c = n && n.serialize;
  let o;
  if (c ? o = c(e, n) : o = utils$E.isURLSearchParams(e) ? e.toString() : new AxiosURLSearchParams(e, n).toString(a), o) {
    const d = t.indexOf("#");
    d !== -1 && (t = t.slice(0, d)), t += (t.indexOf("?") === -1 ? "?" : "&") + o;
  }
  return t;
}
let InterceptorManager$2 = class {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(e, n, a) {
    return this.handlers.push({
      fulfilled: e,
      rejected: n,
      synchronous: a ? a.synchronous : !1,
      runWhen: a ? a.runWhen : null
    }), this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(e) {
    this.handlers[e] && (this.handlers[e] = null);
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    this.handlers && (this.handlers = []);
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(e) {
    utils$E.forEach(this.handlers, function(a) {
      a !== null && e(a);
    });
  }
};
const transitionalDefaults$1 = {
  silentJSONParsing: !0,
  forcedJSONParsing: !0,
  clarifyTimeoutError: !1
}, URLSearchParams$1 = typeof URLSearchParams < "u" ? URLSearchParams : AxiosURLSearchParams, FormData$2 = typeof FormData < "u" ? FormData : null, Blob$2 = typeof Blob < "u" ? Blob : null, platform$1 = {
  isBrowser: !0,
  classes: {
    URLSearchParams: URLSearchParams$1,
    FormData: FormData$2,
    Blob: Blob$2
  },
  protocols: ["http", "https", "file", "blob", "url", "data"]
}, hasBrowserEnv = typeof window < "u" && typeof document < "u", hasStandardBrowserEnv = ((t) => hasBrowserEnv && ["ReactNative", "NativeScript", "NS"].indexOf(t) < 0)(typeof navigator < "u" && navigator.product), hasStandardBrowserWebWorkerEnv = typeof WorkerGlobalScope < "u" && // eslint-disable-next-line no-undef
self instanceof WorkerGlobalScope && typeof self.importScripts == "function", utils$D = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  hasBrowserEnv,
  hasStandardBrowserEnv,
  hasStandardBrowserWebWorkerEnv
}, Symbol.toStringTag, { value: "Module" })), platform = {
  ...utils$D,
  ...platform$1
};
function toURLEncodedForm(t, e) {
  return toFormData$2(t, new platform.classes.URLSearchParams(), Object.assign({
    visitor: function(n, a, c, o) {
      return platform.isNode && utils$E.isBuffer(n) ? (this.append(a, n.toString("base64")), !1) : o.defaultVisitor.apply(this, arguments);
    }
  }, e));
}
function parsePropPath(t) {
  return utils$E.matchAll(/\w+|\[(\w*)]/g, t).map((e) => e[0] === "[]" ? "" : e[1] || e[0]);
}
function arrayToObject(t) {
  const e = {}, n = Object.keys(t);
  let a;
  const c = n.length;
  let o;
  for (a = 0; a < c; a++)
    o = n[a], e[o] = t[o];
  return e;
}
function formDataToJSON(t) {
  function e(n, a, c, o) {
    let d = n[o++];
    if (d === "__proto__")
      return !0;
    const m = Number.isFinite(+d), w = o >= n.length;
    return d = !d && utils$E.isArray(c) ? c.length : d, w ? (utils$E.hasOwnProp(c, d) ? c[d] = [c[d], a] : c[d] = a, !m) : ((!c[d] || !utils$E.isObject(c[d])) && (c[d] = []), e(n, a, c[d], o) && utils$E.isArray(c[d]) && (c[d] = arrayToObject(c[d])), !m);
  }
  if (utils$E.isFormData(t) && utils$E.isFunction(t.entries)) {
    const n = {};
    return utils$E.forEachEntry(t, (a, c) => {
      e(parsePropPath(a), c, n, 0);
    }), n;
  }
  return null;
}
function stringifySafely$1(t, e, n) {
  if (utils$E.isString(t))
    try {
      return (e || JSON.parse)(t), utils$E.trim(t);
    } catch (a) {
      if (a.name !== "SyntaxError")
        throw a;
    }
  return (n || JSON.stringify)(t);
}
const defaults$4 = {
  transitional: transitionalDefaults$1,
  adapter: ["xhr", "http"],
  transformRequest: [function(e, n) {
    const a = n.getContentType() || "", c = a.indexOf("application/json") > -1, o = utils$E.isObject(e);
    if (o && utils$E.isHTMLForm(e) && (e = new FormData(e)), utils$E.isFormData(e))
      return c ? JSON.stringify(formDataToJSON(e)) : e;
    if (utils$E.isArrayBuffer(e) || utils$E.isBuffer(e) || utils$E.isStream(e) || utils$E.isFile(e) || utils$E.isBlob(e))
      return e;
    if (utils$E.isArrayBufferView(e))
      return e.buffer;
    if (utils$E.isURLSearchParams(e))
      return n.setContentType("application/x-www-form-urlencoded;charset=utf-8", !1), e.toString();
    let m;
    if (o) {
      if (a.indexOf("application/x-www-form-urlencoded") > -1)
        return toURLEncodedForm(e, this.formSerializer).toString();
      if ((m = utils$E.isFileList(e)) || a.indexOf("multipart/form-data") > -1) {
        const w = this.env && this.env.FormData;
        return toFormData$2(
          m ? { "files[]": e } : e,
          w && new w(),
          this.formSerializer
        );
      }
    }
    return o || c ? (n.setContentType("application/json", !1), stringifySafely$1(e)) : e;
  }],
  transformResponse: [function(e) {
    const n = this.transitional || defaults$4.transitional, a = n && n.forcedJSONParsing, c = this.responseType === "json";
    if (e && utils$E.isString(e) && (a && !this.responseType || c)) {
      const d = !(n && n.silentJSONParsing) && c;
      try {
        return JSON.parse(e);
      } catch (m) {
        if (d)
          throw m.name === "SyntaxError" ? AxiosError$3.from(m, AxiosError$3.ERR_BAD_RESPONSE, this, null, this.response) : m;
      }
    }
    return e;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: platform.classes.FormData,
    Blob: platform.classes.Blob
  },
  validateStatus: function(e) {
    return e >= 200 && e < 300;
  },
  headers: {
    common: {
      Accept: "application/json, text/plain, */*",
      "Content-Type": void 0
    }
  }
};
utils$E.forEach(["delete", "get", "head", "post", "put", "patch"], (t) => {
  defaults$4.headers[t] = {};
});
const defaults$5 = defaults$4, ignoreDuplicateOf = utils$E.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]), parseHeaders$1 = (t) => {
  const e = {};
  let n, a, c;
  return t && t.split(`
`).forEach(function(d) {
    c = d.indexOf(":"), n = d.substring(0, c).trim().toLowerCase(), a = d.substring(c + 1).trim(), !(!n || e[n] && ignoreDuplicateOf[n]) && (n === "set-cookie" ? e[n] ? e[n].push(a) : e[n] = [a] : e[n] = e[n] ? e[n] + ", " + a : a);
  }), e;
}, $internals = Symbol("internals");
function normalizeHeader(t) {
  return t && String(t).trim().toLowerCase();
}
function normalizeValue(t) {
  return t === !1 || t == null ? t : utils$E.isArray(t) ? t.map(normalizeValue) : String(t);
}
function parseTokens(t) {
  const e = /* @__PURE__ */ Object.create(null), n = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let a;
  for (; a = n.exec(t); )
    e[a[1]] = a[2];
  return e;
}
const isValidHeaderName = (t) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(t.trim());
function matchHeaderValue(t, e, n, a, c) {
  if (utils$E.isFunction(a))
    return a.call(this, e, n);
  if (c && (e = n), !!utils$E.isString(e)) {
    if (utils$E.isString(a))
      return e.indexOf(a) !== -1;
    if (utils$E.isRegExp(a))
      return a.test(e);
  }
}
function formatHeader(t) {
  return t.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (e, n, a) => n.toUpperCase() + a);
}
function buildAccessors(t, e) {
  const n = utils$E.toCamelCase(" " + e);
  ["get", "set", "has"].forEach((a) => {
    Object.defineProperty(t, a + n, {
      value: function(c, o, d) {
        return this[a].call(this, e, c, o, d);
      },
      configurable: !0
    });
  });
}
class AxiosHeaders {
  constructor(e) {
    e && this.set(e);
  }
  set(e, n, a) {
    const c = this;
    function o(m, w, S) {
      const A = normalizeHeader(w);
      if (!A)
        throw new Error("header name must be a non-empty string");
      const B = utils$E.findKey(c, A);
      (!B || c[B] === void 0 || S === !0 || S === void 0 && c[B] !== !1) && (c[B || w] = normalizeValue(m));
    }
    const d = (m, w) => utils$E.forEach(m, (S, A) => o(S, A, w));
    return utils$E.isPlainObject(e) || e instanceof this.constructor ? d(e, n) : utils$E.isString(e) && (e = e.trim()) && !isValidHeaderName(e) ? d(parseHeaders$1(e), n) : e != null && o(n, e, a), this;
  }
  get(e, n) {
    if (e = normalizeHeader(e), e) {
      const a = utils$E.findKey(this, e);
      if (a) {
        const c = this[a];
        if (!n)
          return c;
        if (n === !0)
          return parseTokens(c);
        if (utils$E.isFunction(n))
          return n.call(this, c, a);
        if (utils$E.isRegExp(n))
          return n.exec(c);
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(e, n) {
    if (e = normalizeHeader(e), e) {
      const a = utils$E.findKey(this, e);
      return !!(a && this[a] !== void 0 && (!n || matchHeaderValue(this, this[a], a, n)));
    }
    return !1;
  }
  delete(e, n) {
    const a = this;
    let c = !1;
    function o(d) {
      if (d = normalizeHeader(d), d) {
        const m = utils$E.findKey(a, d);
        m && (!n || matchHeaderValue(a, a[m], m, n)) && (delete a[m], c = !0);
      }
    }
    return utils$E.isArray(e) ? e.forEach(o) : o(e), c;
  }
  clear(e) {
    const n = Object.keys(this);
    let a = n.length, c = !1;
    for (; a--; ) {
      const o = n[a];
      (!e || matchHeaderValue(this, this[o], o, e, !0)) && (delete this[o], c = !0);
    }
    return c;
  }
  normalize(e) {
    const n = this, a = {};
    return utils$E.forEach(this, (c, o) => {
      const d = utils$E.findKey(a, o);
      if (d) {
        n[d] = normalizeValue(c), delete n[o];
        return;
      }
      const m = e ? formatHeader(o) : String(o).trim();
      m !== o && delete n[o], n[m] = normalizeValue(c), a[m] = !0;
    }), this;
  }
  concat(...e) {
    return this.constructor.concat(this, ...e);
  }
  toJSON(e) {
    const n = /* @__PURE__ */ Object.create(null);
    return utils$E.forEach(this, (a, c) => {
      a != null && a !== !1 && (n[c] = e && utils$E.isArray(a) ? a.join(", ") : a);
    }), n;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([e, n]) => e + ": " + n).join(`
`);
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(e) {
    return e instanceof this ? e : new this(e);
  }
  static concat(e, ...n) {
    const a = new this(e);
    return n.forEach((c) => a.set(c)), a;
  }
  static accessor(e) {
    const a = (this[$internals] = this[$internals] = {
      accessors: {}
    }).accessors, c = this.prototype;
    function o(d) {
      const m = normalizeHeader(d);
      a[m] || (buildAccessors(c, d), a[m] = !0);
    }
    return utils$E.isArray(e) ? e.forEach(o) : o(e), this;
  }
}
AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
utils$E.reduceDescriptors(AxiosHeaders.prototype, ({ value: t }, e) => {
  let n = e[0].toUpperCase() + e.slice(1);
  return {
    get: () => t,
    set(a) {
      this[n] = a;
    }
  };
});
utils$E.freezeMethods(AxiosHeaders);
const AxiosHeaders$1 = AxiosHeaders;
function transformData$2(t, e) {
  const n = this || defaults$5, a = e || n, c = AxiosHeaders$1.from(a.headers);
  let o = a.data;
  return utils$E.forEach(t, function(m) {
    o = m.call(n, o, c.normalize(), e ? e.status : void 0);
  }), c.normalize(), o;
}
function isCancel$2(t) {
  return !!(t && t.__CANCEL__);
}
function CanceledError$1(t, e, n) {
  AxiosError$3.call(this, t ?? "canceled", AxiosError$3.ERR_CANCELED, e, n), this.name = "CanceledError";
}
utils$E.inherits(CanceledError$1, AxiosError$3, {
  __CANCEL__: !0
});
function settle$1(t, e, n) {
  const a = n.config.validateStatus;
  !n.status || !a || a(n.status) ? t(n) : e(new AxiosError$3(
    "Request failed with status code " + n.status,
    [AxiosError$3.ERR_BAD_REQUEST, AxiosError$3.ERR_BAD_RESPONSE][Math.floor(n.status / 100) - 4],
    n.config,
    n.request,
    n
  ));
}
const cookies$1 = platform.hasStandardBrowserEnv ? (
  // Standard browser envs support document.cookie
  {
    write(t, e, n, a, c, o) {
      const d = [t + "=" + encodeURIComponent(e)];
      utils$E.isNumber(n) && d.push("expires=" + new Date(n).toGMTString()), utils$E.isString(a) && d.push("path=" + a), utils$E.isString(c) && d.push("domain=" + c), o === !0 && d.push("secure"), document.cookie = d.join("; ");
    },
    read(t) {
      const e = document.cookie.match(new RegExp("(^|;\\s*)(" + t + ")=([^;]*)"));
      return e ? decodeURIComponent(e[3]) : null;
    },
    remove(t) {
      this.write(t, "", Date.now() - 864e5);
    }
  }
) : (
  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {
    },
    read() {
      return null;
    },
    remove() {
    }
  }
);
function isAbsoluteURL$2(t) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(t);
}
function combineURLs$2(t, e) {
  return e ? t.replace(/\/?\/$/, "") + "/" + e.replace(/^\/+/, "") : t;
}
function buildFullPath$2(t, e) {
  return t && !isAbsoluteURL$2(e) ? combineURLs$2(t, e) : e;
}
const isURLSameOrigin$1 = platform.hasStandardBrowserEnv ? (
  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  function() {
    const e = /(msie|trident)/i.test(navigator.userAgent), n = document.createElement("a");
    let a;
    function c(o) {
      let d = o;
      return e && (n.setAttribute("href", d), d = n.href), n.setAttribute("href", d), {
        href: n.href,
        protocol: n.protocol ? n.protocol.replace(/:$/, "") : "",
        host: n.host,
        search: n.search ? n.search.replace(/^\?/, "") : "",
        hash: n.hash ? n.hash.replace(/^#/, "") : "",
        hostname: n.hostname,
        port: n.port,
        pathname: n.pathname.charAt(0) === "/" ? n.pathname : "/" + n.pathname
      };
    }
    return a = c(window.location.href), function(d) {
      const m = utils$E.isString(d) ? c(d) : d;
      return m.protocol === a.protocol && m.host === a.host;
    };
  }()
) : (
  // Non standard browser envs (web workers, react-native) lack needed support.
  /* @__PURE__ */ function() {
    return function() {
      return !0;
    };
  }()
);
function parseProtocol$1(t) {
  const e = /^([-+\w]{1,25})(:?\/\/|:)/.exec(t);
  return e && e[1] || "";
}
function speedometer(t, e) {
  t = t || 10;
  const n = new Array(t), a = new Array(t);
  let c = 0, o = 0, d;
  return e = e !== void 0 ? e : 1e3, function(w) {
    const S = Date.now(), A = a[o];
    d || (d = S), n[c] = w, a[c] = S;
    let B = o, P = 0;
    for (; B !== c; )
      P += n[B++], B = B % t;
    if (c = (c + 1) % t, c === o && (o = (o + 1) % t), S - d < e)
      return;
    const I = A && S - A;
    return I ? Math.round(P * 1e3 / I) : void 0;
  };
}
function progressEventReducer(t, e) {
  let n = 0;
  const a = speedometer(50, 250);
  return (c) => {
    const o = c.loaded, d = c.lengthComputable ? c.total : void 0, m = o - n, w = a(m), S = o <= d;
    n = o;
    const A = {
      loaded: o,
      total: d,
      progress: d ? o / d : void 0,
      bytes: m,
      rate: w || void 0,
      estimated: w && d && S ? (d - o) / w : void 0,
      event: c
    };
    A[e ? "download" : "upload"] = !0, t(A);
  };
}
const isXHRAdapterSupported = typeof XMLHttpRequest < "u", xhrAdapter = isXHRAdapterSupported && function(t) {
  return new Promise(function(n, a) {
    let c = t.data;
    const o = AxiosHeaders$1.from(t.headers).normalize();
    let { responseType: d, withXSRFToken: m } = t, w;
    function S() {
      t.cancelToken && t.cancelToken.unsubscribe(w), t.signal && t.signal.removeEventListener("abort", w);
    }
    let A;
    if (utils$E.isFormData(c)) {
      if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv)
        o.setContentType(!1);
      else if ((A = o.getContentType()) !== !1) {
        const [L, ...C] = A ? A.split(";").map((z) => z.trim()).filter(Boolean) : [];
        o.setContentType([L || "multipart/form-data", ...C].join("; "));
      }
    }
    let B = new XMLHttpRequest();
    if (t.auth) {
      const L = t.auth.username || "", C = t.auth.password ? unescape(encodeURIComponent(t.auth.password)) : "";
      o.set("Authorization", "Basic " + btoa(L + ":" + C));
    }
    const P = buildFullPath$2(t.baseURL, t.url);
    B.open(t.method.toUpperCase(), buildURL$2(P, t.params, t.paramsSerializer), !0), B.timeout = t.timeout;
    function I() {
      if (!B)
        return;
      const L = AxiosHeaders$1.from(
        "getAllResponseHeaders" in B && B.getAllResponseHeaders()
      ), z = {
        data: !d || d === "text" || d === "json" ? B.responseText : B.response,
        status: B.status,
        statusText: B.statusText,
        headers: L,
        config: t,
        request: B
      };
      settle$1(function(Z) {
        n(Z), S();
      }, function(Z) {
        a(Z), S();
      }, z), B = null;
    }
    if ("onloadend" in B ? B.onloadend = I : B.onreadystatechange = function() {
      !B || B.readyState !== 4 || B.status === 0 && !(B.responseURL && B.responseURL.indexOf("file:") === 0) || setTimeout(I);
    }, B.onabort = function() {
      B && (a(new AxiosError$3("Request aborted", AxiosError$3.ECONNABORTED, t, B)), B = null);
    }, B.onerror = function() {
      a(new AxiosError$3("Network Error", AxiosError$3.ERR_NETWORK, t, B)), B = null;
    }, B.ontimeout = function() {
      let C = t.timeout ? "timeout of " + t.timeout + "ms exceeded" : "timeout exceeded";
      const z = t.transitional || transitionalDefaults$1;
      t.timeoutErrorMessage && (C = t.timeoutErrorMessage), a(new AxiosError$3(
        C,
        z.clarifyTimeoutError ? AxiosError$3.ETIMEDOUT : AxiosError$3.ECONNABORTED,
        t,
        B
      )), B = null;
    }, platform.hasStandardBrowserEnv && (m && utils$E.isFunction(m) && (m = m(t)), m || m !== !1 && isURLSameOrigin$1(P))) {
      const L = t.xsrfHeaderName && t.xsrfCookieName && cookies$1.read(t.xsrfCookieName);
      L && o.set(t.xsrfHeaderName, L);
    }
    c === void 0 && o.setContentType(null), "setRequestHeader" in B && utils$E.forEach(o.toJSON(), function(C, z) {
      B.setRequestHeader(z, C);
    }), utils$E.isUndefined(t.withCredentials) || (B.withCredentials = !!t.withCredentials), d && d !== "json" && (B.responseType = t.responseType), typeof t.onDownloadProgress == "function" && B.addEventListener("progress", progressEventReducer(t.onDownloadProgress, !0)), typeof t.onUploadProgress == "function" && B.upload && B.upload.addEventListener("progress", progressEventReducer(t.onUploadProgress)), (t.cancelToken || t.signal) && (w = (L) => {
      B && (a(!L || L.type ? new CanceledError$1(null, t, B) : L), B.abort(), B = null);
    }, t.cancelToken && t.cancelToken.subscribe(w), t.signal && (t.signal.aborted ? w() : t.signal.addEventListener("abort", w)));
    const O = parseProtocol$1(P);
    if (O && platform.protocols.indexOf(O) === -1) {
      a(new AxiosError$3("Unsupported protocol " + O + ":", AxiosError$3.ERR_BAD_REQUEST, t));
      return;
    }
    B.send(c || null);
  });
}, knownAdapters = {
  http: httpAdapter,
  xhr: xhrAdapter
};
utils$E.forEach(knownAdapters, (t, e) => {
  if (t) {
    try {
      Object.defineProperty(t, "name", { value: e });
    } catch {
    }
    Object.defineProperty(t, "adapterName", { value: e });
  }
});
const renderReason = (t) => `- ${t}`, isResolvedHandle = (t) => utils$E.isFunction(t) || t === null || t === !1, adapters = {
  getAdapter: (t) => {
    t = utils$E.isArray(t) ? t : [t];
    const { length: e } = t;
    let n, a;
    const c = {};
    for (let o = 0; o < e; o++) {
      n = t[o];
      let d;
      if (a = n, !isResolvedHandle(n) && (a = knownAdapters[(d = String(n)).toLowerCase()], a === void 0))
        throw new AxiosError$3(`Unknown adapter '${d}'`);
      if (a)
        break;
      c[d || "#" + o] = a;
    }
    if (!a) {
      const o = Object.entries(c).map(
        ([m, w]) => `adapter ${m} ` + (w === !1 ? "is not supported by the environment" : "is not available in the build")
      );
      let d = e ? o.length > 1 ? `since :
` + o.map(renderReason).join(`
`) : " " + renderReason(o[0]) : "as no adapter specified";
      throw new AxiosError$3(
        "There is no suitable adapter to dispatch the request " + d,
        "ERR_NOT_SUPPORT"
      );
    }
    return a;
  },
  adapters: knownAdapters
};
function throwIfCancellationRequested$1(t) {
  if (t.cancelToken && t.cancelToken.throwIfRequested(), t.signal && t.signal.aborted)
    throw new CanceledError$1(null, t);
}
function dispatchRequest$2(t) {
  return throwIfCancellationRequested$1(t), t.headers = AxiosHeaders$1.from(t.headers), t.data = transformData$2.call(
    t,
    t.transformRequest
  ), ["post", "put", "patch"].indexOf(t.method) !== -1 && t.headers.setContentType("application/x-www-form-urlencoded", !1), adapters.getAdapter(t.adapter || defaults$5.adapter)(t).then(function(a) {
    return throwIfCancellationRequested$1(t), a.data = transformData$2.call(
      t,
      t.transformResponse,
      a
    ), a.headers = AxiosHeaders$1.from(a.headers), a;
  }, function(a) {
    return isCancel$2(a) || (throwIfCancellationRequested$1(t), a && a.response && (a.response.data = transformData$2.call(
      t,
      t.transformResponse,
      a.response
    ), a.response.headers = AxiosHeaders$1.from(a.response.headers))), Promise.reject(a);
  });
}
const headersToObject = (t) => t instanceof AxiosHeaders$1 ? t.toJSON() : t;
function mergeConfig$3(t, e) {
  e = e || {};
  const n = {};
  function a(S, A, B) {
    return utils$E.isPlainObject(S) && utils$E.isPlainObject(A) ? utils$E.merge.call({ caseless: B }, S, A) : utils$E.isPlainObject(A) ? utils$E.merge({}, A) : utils$E.isArray(A) ? A.slice() : A;
  }
  function c(S, A, B) {
    if (utils$E.isUndefined(A)) {
      if (!utils$E.isUndefined(S))
        return a(void 0, S, B);
    } else
      return a(S, A, B);
  }
  function o(S, A) {
    if (!utils$E.isUndefined(A))
      return a(void 0, A);
  }
  function d(S, A) {
    if (utils$E.isUndefined(A)) {
      if (!utils$E.isUndefined(S))
        return a(void 0, S);
    } else
      return a(void 0, A);
  }
  function m(S, A, B) {
    if (B in e)
      return a(S, A);
    if (B in t)
      return a(void 0, S);
  }
  const w = {
    url: o,
    method: o,
    data: o,
    baseURL: d,
    transformRequest: d,
    transformResponse: d,
    paramsSerializer: d,
    timeout: d,
    timeoutMessage: d,
    withCredentials: d,
    withXSRFToken: d,
    adapter: d,
    responseType: d,
    xsrfCookieName: d,
    xsrfHeaderName: d,
    onUploadProgress: d,
    onDownloadProgress: d,
    decompress: d,
    maxContentLength: d,
    maxBodyLength: d,
    beforeRedirect: d,
    transport: d,
    httpAgent: d,
    httpsAgent: d,
    cancelToken: d,
    socketPath: d,
    responseEncoding: d,
    validateStatus: m,
    headers: (S, A) => c(headersToObject(S), headersToObject(A), !0)
  };
  return utils$E.forEach(Object.keys(Object.assign({}, t, e)), function(A) {
    const B = w[A] || c, P = B(t[A], e[A], A);
    utils$E.isUndefined(P) && B !== m || (n[A] = P);
  }), n;
}
const VERSION$2 = "1.6.7", validators$3 = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((t, e) => {
  validators$3[t] = function(a) {
    return typeof a === t || "a" + (e < 1 ? "n " : " ") + t;
  };
});
const deprecatedWarnings$1 = {};
validators$3.transitional = function(e, n, a) {
  function c(o, d) {
    return "[Axios v" + VERSION$2 + "] Transitional option '" + o + "'" + d + (a ? ". " + a : "");
  }
  return (o, d, m) => {
    if (e === !1)
      throw new AxiosError$3(
        c(d, " has been removed" + (n ? " in " + n : "")),
        AxiosError$3.ERR_DEPRECATED
      );
    return n && !deprecatedWarnings$1[d] && (deprecatedWarnings$1[d] = !0, console.warn(
      c(
        d,
        " has been deprecated since v" + n + " and will be removed in the near future"
      )
    )), e ? e(o, d, m) : !0;
  };
};
function assertOptions$1(t, e, n) {
  if (typeof t != "object")
    throw new AxiosError$3("options must be an object", AxiosError$3.ERR_BAD_OPTION_VALUE);
  const a = Object.keys(t);
  let c = a.length;
  for (; c-- > 0; ) {
    const o = a[c], d = e[o];
    if (d) {
      const m = t[o], w = m === void 0 || d(m, o, t);
      if (w !== !0)
        throw new AxiosError$3("option " + o + " must be " + w, AxiosError$3.ERR_BAD_OPTION_VALUE);
      continue;
    }
    if (n !== !0)
      throw new AxiosError$3("Unknown option " + o, AxiosError$3.ERR_BAD_OPTION);
  }
}
const validator$2 = {
  assertOptions: assertOptions$1,
  validators: validators$3
}, validators$2 = validator$2.validators;
let Axios$2 = class {
  constructor(e) {
    this.defaults = e, this.interceptors = {
      request: new InterceptorManager$2(),
      response: new InterceptorManager$2()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(e, n) {
    try {
      return await this._request(e, n);
    } catch (a) {
      if (a instanceof Error) {
        let c;
        Error.captureStackTrace ? Error.captureStackTrace(c = {}) : c = new Error();
        const o = c.stack ? c.stack.replace(/^.+\n/, "") : "";
        a.stack ? o && !String(a.stack).endsWith(o.replace(/^.+\n.+\n/, "")) && (a.stack += `
` + o) : a.stack = o;
      }
      throw a;
    }
  }
  _request(e, n) {
    typeof e == "string" ? (n = n || {}, n.url = e) : n = e || {}, n = mergeConfig$3(this.defaults, n);
    const { transitional: a, paramsSerializer: c, headers: o } = n;
    a !== void 0 && validator$2.assertOptions(a, {
      silentJSONParsing: validators$2.transitional(validators$2.boolean),
      forcedJSONParsing: validators$2.transitional(validators$2.boolean),
      clarifyTimeoutError: validators$2.transitional(validators$2.boolean)
    }, !1), c != null && (utils$E.isFunction(c) ? n.paramsSerializer = {
      serialize: c
    } : validator$2.assertOptions(c, {
      encode: validators$2.function,
      serialize: validators$2.function
    }, !0)), n.method = (n.method || this.defaults.method || "get").toLowerCase();
    let d = o && utils$E.merge(
      o.common,
      o[n.method]
    );
    o && utils$E.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (O) => {
        delete o[O];
      }
    ), n.headers = AxiosHeaders$1.concat(d, o);
    const m = [];
    let w = !0;
    this.interceptors.request.forEach(function(L) {
      typeof L.runWhen == "function" && L.runWhen(n) === !1 || (w = w && L.synchronous, m.unshift(L.fulfilled, L.rejected));
    });
    const S = [];
    this.interceptors.response.forEach(function(L) {
      S.push(L.fulfilled, L.rejected);
    });
    let A, B = 0, P;
    if (!w) {
      const O = [dispatchRequest$2.bind(this), void 0];
      for (O.unshift.apply(O, m), O.push.apply(O, S), P = O.length, A = Promise.resolve(n); B < P; )
        A = A.then(O[B++], O[B++]);
      return A;
    }
    P = m.length;
    let I = n;
    for (B = 0; B < P; ) {
      const O = m[B++], L = m[B++];
      try {
        I = O(I);
      } catch (C) {
        L.call(this, C);
        break;
      }
    }
    try {
      A = dispatchRequest$2.call(this, I);
    } catch (O) {
      return Promise.reject(O);
    }
    for (B = 0, P = S.length; B < P; )
      A = A.then(S[B++], S[B++]);
    return A;
  }
  getUri(e) {
    e = mergeConfig$3(this.defaults, e);
    const n = buildFullPath$2(e.baseURL, e.url);
    return buildURL$2(n, e.params, e.paramsSerializer);
  }
};
utils$E.forEach(["delete", "get", "head", "options"], function(e) {
  Axios$2.prototype[e] = function(n, a) {
    return this.request(mergeConfig$3(a || {}, {
      method: e,
      url: n,
      data: (a || {}).data
    }));
  };
});
utils$E.forEach(["post", "put", "patch"], function(e) {
  function n(a) {
    return function(o, d, m) {
      return this.request(mergeConfig$3(m || {}, {
        method: e,
        headers: a ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url: o,
        data: d
      }));
    };
  }
  Axios$2.prototype[e] = n(), Axios$2.prototype[e + "Form"] = n(!0);
});
const Axios$3 = Axios$2;
class CancelToken {
  constructor(e) {
    if (typeof e != "function")
      throw new TypeError("executor must be a function.");
    let n;
    this.promise = new Promise(function(o) {
      n = o;
    });
    const a = this;
    this.promise.then((c) => {
      if (!a._listeners)
        return;
      let o = a._listeners.length;
      for (; o-- > 0; )
        a._listeners[o](c);
      a._listeners = null;
    }), this.promise.then = (c) => {
      let o;
      const d = new Promise((m) => {
        a.subscribe(m), o = m;
      }).then(c);
      return d.cancel = function() {
        a.unsubscribe(o);
      }, d;
    }, e(function(o, d, m) {
      a.reason || (a.reason = new CanceledError$1(o, d, m), n(a.reason));
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason)
      throw this.reason;
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(e) {
    if (this.reason) {
      e(this.reason);
      return;
    }
    this._listeners ? this._listeners.push(e) : this._listeners = [e];
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(e) {
    if (!this._listeners)
      return;
    const n = this._listeners.indexOf(e);
    n !== -1 && this._listeners.splice(n, 1);
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let e;
    return {
      token: new CancelToken(function(c) {
        e = c;
      }),
      cancel: e
    };
  }
}
const CancelToken$1 = CancelToken;
function spread$1(t) {
  return function(n) {
    return t.apply(null, n);
  };
}
function isAxiosError$1(t) {
  return utils$E.isObject(t) && t.isAxiosError === !0;
}
const HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode).forEach(([t, e]) => {
  HttpStatusCode[e] = t;
});
const HttpStatusCode$1 = HttpStatusCode;
function createInstance$1(t) {
  const e = new Axios$3(t), n = bind$5(Axios$3.prototype.request, e);
  return utils$E.extend(n, Axios$3.prototype, e, { allOwnKeys: !0 }), utils$E.extend(n, e, null, { allOwnKeys: !0 }), n.create = function(c) {
    return createInstance$1(mergeConfig$3(t, c));
  }, n;
}
const axios$3 = createInstance$1(defaults$5);
axios$3.Axios = Axios$3;
axios$3.CanceledError = CanceledError$1;
axios$3.CancelToken = CancelToken$1;
axios$3.isCancel = isCancel$2;
axios$3.VERSION = VERSION$2;
axios$3.toFormData = toFormData$2;
axios$3.AxiosError = AxiosError$3;
axios$3.Cancel = axios$3.CanceledError;
axios$3.all = function(e) {
  return Promise.all(e);
};
axios$3.spread = spread$1;
axios$3.isAxiosError = isAxiosError$1;
axios$3.mergeConfig = mergeConfig$3;
axios$3.AxiosHeaders = AxiosHeaders$1;
axios$3.formToJSON = (t) => formDataToJSON(utils$E.isHTMLForm(t) ? new FormData(t) : t);
axios$3.getAdapter = adapters.getAdapter;
axios$3.HttpStatusCode = HttpStatusCode$1;
axios$3.default = axios$3;
var commonjsGlobal = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function getDefaultExportFromCjs$2(t) {
  return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
}
function getAugmentedNamespace(t) {
  if (t.__esModule)
    return t;
  var e = t.default;
  if (typeof e == "function") {
    var n = function a() {
      return this instanceof a ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
    };
    n.prototype = e.prototype;
  } else
    n = {};
  return Object.defineProperty(n, "__esModule", { value: !0 }), Object.keys(t).forEach(function(a) {
    var c = Object.getOwnPropertyDescriptor(t, a);
    Object.defineProperty(n, a, c.get ? c : {
      enumerable: !0,
      get: function() {
        return t[a];
      }
    });
  }), n;
}
var cryptoBrowserify = {};
function getDefaultExportFromCjs$1(t) {
  return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
}
var browser$f = { exports: {} }, process = browser$f.exports = {}, cachedSetTimeout, cachedClearTimeout;
function defaultSetTimout() {
  throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
  throw new Error("clearTimeout has not been defined");
}
(function() {
  try {
    typeof setTimeout == "function" ? cachedSetTimeout = setTimeout : cachedSetTimeout = defaultSetTimout;
  } catch {
    cachedSetTimeout = defaultSetTimout;
  }
  try {
    typeof clearTimeout == "function" ? cachedClearTimeout = clearTimeout : cachedClearTimeout = defaultClearTimeout;
  } catch {
    cachedClearTimeout = defaultClearTimeout;
  }
})();
function runTimeout(t) {
  if (cachedSetTimeout === setTimeout)
    return setTimeout(t, 0);
  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout)
    return cachedSetTimeout = setTimeout, setTimeout(t, 0);
  try {
    return cachedSetTimeout(t, 0);
  } catch {
    try {
      return cachedSetTimeout.call(null, t, 0);
    } catch {
      return cachedSetTimeout.call(this, t, 0);
    }
  }
}
function runClearTimeout(t) {
  if (cachedClearTimeout === clearTimeout)
    return clearTimeout(t);
  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout)
    return cachedClearTimeout = clearTimeout, clearTimeout(t);
  try {
    return cachedClearTimeout(t);
  } catch {
    try {
      return cachedClearTimeout.call(null, t);
    } catch {
      return cachedClearTimeout.call(this, t);
    }
  }
}
var queue = [], draining = !1, currentQueue, queueIndex = -1;
function cleanUpNextTick() {
  !draining || !currentQueue || (draining = !1, currentQueue.length ? queue = currentQueue.concat(queue) : queueIndex = -1, queue.length && drainQueue());
}
function drainQueue() {
  if (!draining) {
    var t = runTimeout(cleanUpNextTick);
    draining = !0;
    for (var e = queue.length; e; ) {
      for (currentQueue = queue, queue = []; ++queueIndex < e; )
        currentQueue && currentQueue[queueIndex].run();
      queueIndex = -1, e = queue.length;
    }
    currentQueue = null, draining = !1, runClearTimeout(t);
  }
}
process.nextTick = function(t) {
  var e = new Array(arguments.length - 1);
  if (arguments.length > 1)
    for (var n = 1; n < arguments.length; n++)
      e[n - 1] = arguments[n];
  queue.push(new Item(t, e)), queue.length === 1 && !draining && runTimeout(drainQueue);
};
function Item(t, e) {
  this.fun = t, this.array = e;
}
Item.prototype.run = function() {
  this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = !0;
process.env = {};
process.argv = [];
process.version = "";
process.versions = {};
function noop$2() {
}
process.on = noop$2;
process.addListener = noop$2;
process.once = noop$2;
process.off = noop$2;
process.removeListener = noop$2;
process.removeAllListeners = noop$2;
process.emit = noop$2;
process.prependListener = noop$2;
process.prependOnceListener = noop$2;
process.listeners = function(t) {
  return [];
};
process.binding = function(t) {
  throw new Error("process.binding is not supported");
};
process.cwd = function() {
  return "/";
};
process.chdir = function(t) {
  throw new Error("process.chdir is not supported");
};
process.umask = function() {
  return 0;
};
var browserExports$1 = browser$f.exports;
const process$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(browserExports$1);
var browser$e = { exports: {} }, safeBuffer$1 = { exports: {} };
const require$$0$2 = /* @__PURE__ */ getAugmentedNamespace(dist$1);
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
(function(t, e) {
  var n = require$$0$2, a = n.Buffer;
  function c(d, m) {
    for (var w in d)
      m[w] = d[w];
  }
  a.from && a.alloc && a.allocUnsafe && a.allocUnsafeSlow ? t.exports = n : (c(n, e), e.Buffer = o);
  function o(d, m, w) {
    return a(d, m, w);
  }
  o.prototype = Object.create(a.prototype), c(a, o), o.from = function(d, m, w) {
    if (typeof d == "number")
      throw new TypeError("Argument must not be a number");
    return a(d, m, w);
  }, o.alloc = function(d, m, w) {
    if (typeof d != "number")
      throw new TypeError("Argument must be a number");
    var S = a(d);
    return m !== void 0 ? typeof w == "string" ? S.fill(m, w) : S.fill(m) : S.fill(0), S;
  }, o.allocUnsafe = function(d) {
    if (typeof d != "number")
      throw new TypeError("Argument must be a number");
    return a(d);
  }, o.allocUnsafeSlow = function(d) {
    if (typeof d != "number")
      throw new TypeError("Argument must be a number");
    return n.SlowBuffer(d);
  };
})(safeBuffer$1, safeBuffer$1.exports);
var safeBufferExports = safeBuffer$1.exports, MAX_BYTES = 65536, MAX_UINT32 = 4294967295;
function oldBrowser$1() {
  throw new Error(`Secure random number generation is not supported by this browser.
Use Chrome, Firefox or Internet Explorer 11`);
}
var Buffer$E = safeBufferExports.Buffer, crypto$6 = commonjsGlobal.crypto || commonjsGlobal.msCrypto;
crypto$6 && crypto$6.getRandomValues ? browser$e.exports = randomBytes$4 : browser$e.exports = oldBrowser$1;
function randomBytes$4(t, e) {
  if (t > MAX_UINT32)
    throw new RangeError("requested too many random bytes");
  var n = Buffer$E.allocUnsafe(t);
  if (t > 0)
    if (t > MAX_BYTES)
      for (var a = 0; a < t; a += MAX_BYTES)
        crypto$6.getRandomValues(n.slice(a, a + MAX_BYTES));
    else
      crypto$6.getRandomValues(n);
  return typeof e == "function" ? process$1.nextTick(function() {
    e(null, n);
  }) : n;
}
var browserExports = browser$e.exports, inherits_browser$1 = { exports: {} };
typeof Object.create == "function" ? inherits_browser$1.exports = function(e, n) {
  n && (e.super_ = n, e.prototype = Object.create(n.prototype, {
    constructor: {
      value: e,
      enumerable: !1,
      writable: !0,
      configurable: !0
    }
  }));
} : inherits_browser$1.exports = function(e, n) {
  if (n) {
    e.super_ = n;
    var a = function() {
    };
    a.prototype = n.prototype, e.prototype = new a(), e.prototype.constructor = e;
  }
};
var inherits_browserExports = inherits_browser$1.exports, readableBrowser = { exports: {} }, events = { exports: {} }, R = typeof Reflect == "object" ? Reflect : null, ReflectApply = R && typeof R.apply == "function" ? R.apply : function(e, n, a) {
  return Function.prototype.apply.call(e, n, a);
}, ReflectOwnKeys;
R && typeof R.ownKeys == "function" ? ReflectOwnKeys = R.ownKeys : Object.getOwnPropertySymbols ? ReflectOwnKeys = function(e) {
  return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));
} : ReflectOwnKeys = function(e) {
  return Object.getOwnPropertyNames(e);
};
function ProcessEmitWarning(t) {
  console && console.warn && console.warn(t);
}
var NumberIsNaN = Number.isNaN || function(e) {
  return e !== e;
};
function EventEmitter$1() {
  EventEmitter$1.init.call(this);
}
events.exports = EventEmitter$1;
events.exports.once = once$2;
EventEmitter$1.EventEmitter = EventEmitter$1;
EventEmitter$1.prototype._events = void 0;
EventEmitter$1.prototype._eventsCount = 0;
EventEmitter$1.prototype._maxListeners = void 0;
var defaultMaxListeners = 10;
function checkListener(t) {
  if (typeof t != "function")
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof t);
}
Object.defineProperty(EventEmitter$1, "defaultMaxListeners", {
  enumerable: !0,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(t) {
    if (typeof t != "number" || t < 0 || NumberIsNaN(t))
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + t + ".");
    defaultMaxListeners = t;
  }
});
EventEmitter$1.init = function() {
  (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
};
EventEmitter$1.prototype.setMaxListeners = function(e) {
  if (typeof e != "number" || e < 0 || NumberIsNaN(e))
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e + ".");
  return this._maxListeners = e, this;
};
function _getMaxListeners(t) {
  return t._maxListeners === void 0 ? EventEmitter$1.defaultMaxListeners : t._maxListeners;
}
EventEmitter$1.prototype.getMaxListeners = function() {
  return _getMaxListeners(this);
};
EventEmitter$1.prototype.emit = function(e) {
  for (var n = [], a = 1; a < arguments.length; a++)
    n.push(arguments[a]);
  var c = e === "error", o = this._events;
  if (o !== void 0)
    c = c && o.error === void 0;
  else if (!c)
    return !1;
  if (c) {
    var d;
    if (n.length > 0 && (d = n[0]), d instanceof Error)
      throw d;
    var m = new Error("Unhandled error." + (d ? " (" + d.message + ")" : ""));
    throw m.context = d, m;
  }
  var w = o[e];
  if (w === void 0)
    return !1;
  if (typeof w == "function")
    ReflectApply(w, this, n);
  else
    for (var S = w.length, A = arrayClone(w, S), a = 0; a < S; ++a)
      ReflectApply(A[a], this, n);
  return !0;
};
function _addListener(t, e, n, a) {
  var c, o, d;
  if (checkListener(n), o = t._events, o === void 0 ? (o = t._events = /* @__PURE__ */ Object.create(null), t._eventsCount = 0) : (o.newListener !== void 0 && (t.emit(
    "newListener",
    e,
    n.listener ? n.listener : n
  ), o = t._events), d = o[e]), d === void 0)
    d = o[e] = n, ++t._eventsCount;
  else if (typeof d == "function" ? d = o[e] = a ? [n, d] : [d, n] : a ? d.unshift(n) : d.push(n), c = _getMaxListeners(t), c > 0 && d.length > c && !d.warned) {
    d.warned = !0;
    var m = new Error("Possible EventEmitter memory leak detected. " + d.length + " " + String(e) + " listeners added. Use emitter.setMaxListeners() to increase limit");
    m.name = "MaxListenersExceededWarning", m.emitter = t, m.type = e, m.count = d.length, ProcessEmitWarning(m);
  }
  return t;
}
EventEmitter$1.prototype.addListener = function(e, n) {
  return _addListener(this, e, n, !1);
};
EventEmitter$1.prototype.on = EventEmitter$1.prototype.addListener;
EventEmitter$1.prototype.prependListener = function(e, n) {
  return _addListener(this, e, n, !0);
};
function onceWrapper() {
  if (!this.fired)
    return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
}
function _onceWrap(t, e, n) {
  var a = { fired: !1, wrapFn: void 0, target: t, type: e, listener: n }, c = onceWrapper.bind(a);
  return c.listener = n, a.wrapFn = c, c;
}
EventEmitter$1.prototype.once = function(e, n) {
  return checkListener(n), this.on(e, _onceWrap(this, e, n)), this;
};
EventEmitter$1.prototype.prependOnceListener = function(e, n) {
  return checkListener(n), this.prependListener(e, _onceWrap(this, e, n)), this;
};
EventEmitter$1.prototype.removeListener = function(e, n) {
  var a, c, o, d, m;
  if (checkListener(n), c = this._events, c === void 0)
    return this;
  if (a = c[e], a === void 0)
    return this;
  if (a === n || a.listener === n)
    --this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : (delete c[e], c.removeListener && this.emit("removeListener", e, a.listener || n));
  else if (typeof a != "function") {
    for (o = -1, d = a.length - 1; d >= 0; d--)
      if (a[d] === n || a[d].listener === n) {
        m = a[d].listener, o = d;
        break;
      }
    if (o < 0)
      return this;
    o === 0 ? a.shift() : spliceOne(a, o), a.length === 1 && (c[e] = a[0]), c.removeListener !== void 0 && this.emit("removeListener", e, m || n);
  }
  return this;
};
EventEmitter$1.prototype.off = EventEmitter$1.prototype.removeListener;
EventEmitter$1.prototype.removeAllListeners = function(e) {
  var n, a, c;
  if (a = this._events, a === void 0)
    return this;
  if (a.removeListener === void 0)
    return arguments.length === 0 ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : a[e] !== void 0 && (--this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : delete a[e]), this;
  if (arguments.length === 0) {
    var o = Object.keys(a), d;
    for (c = 0; c < o.length; ++c)
      d = o[c], d !== "removeListener" && this.removeAllListeners(d);
    return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
  }
  if (n = a[e], typeof n == "function")
    this.removeListener(e, n);
  else if (n !== void 0)
    for (c = n.length - 1; c >= 0; c--)
      this.removeListener(e, n[c]);
  return this;
};
function _listeners(t, e, n) {
  var a = t._events;
  if (a === void 0)
    return [];
  var c = a[e];
  return c === void 0 ? [] : typeof c == "function" ? n ? [c.listener || c] : [c] : n ? unwrapListeners(c) : arrayClone(c, c.length);
}
EventEmitter$1.prototype.listeners = function(e) {
  return _listeners(this, e, !0);
};
EventEmitter$1.prototype.rawListeners = function(e) {
  return _listeners(this, e, !1);
};
EventEmitter$1.listenerCount = function(t, e) {
  return typeof t.listenerCount == "function" ? t.listenerCount(e) : listenerCount.call(t, e);
};
EventEmitter$1.prototype.listenerCount = listenerCount;
function listenerCount(t) {
  var e = this._events;
  if (e !== void 0) {
    var n = e[t];
    if (typeof n == "function")
      return 1;
    if (n !== void 0)
      return n.length;
  }
  return 0;
}
EventEmitter$1.prototype.eventNames = function() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(t, e) {
  for (var n = new Array(e), a = 0; a < e; ++a)
    n[a] = t[a];
  return n;
}
function spliceOne(t, e) {
  for (; e + 1 < t.length; e++)
    t[e] = t[e + 1];
  t.pop();
}
function unwrapListeners(t) {
  for (var e = new Array(t.length), n = 0; n < e.length; ++n)
    e[n] = t[n].listener || t[n];
  return e;
}
function once$2(t, e) {
  return new Promise(function(n, a) {
    function c(d) {
      t.removeListener(e, o), a(d);
    }
    function o() {
      typeof t.removeListener == "function" && t.removeListener("error", c), n([].slice.call(arguments));
    }
    eventTargetAgnosticAddListener(t, e, o, { once: !0 }), e !== "error" && addErrorHandlerIfEventEmitter(t, c, { once: !0 });
  });
}
function addErrorHandlerIfEventEmitter(t, e, n) {
  typeof t.on == "function" && eventTargetAgnosticAddListener(t, "error", e, n);
}
function eventTargetAgnosticAddListener(t, e, n, a) {
  if (typeof t.on == "function")
    a.once ? t.once(e, n) : t.on(e, n);
  else if (typeof t.addEventListener == "function")
    t.addEventListener(e, function c(o) {
      a.once && t.removeEventListener(e, c), n(o);
    });
  else
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof t);
}
var eventsExports = events.exports, streamBrowser = eventsExports.EventEmitter, util = {}, types$1 = {}, shams$1 = function() {
  if (typeof Symbol != "function" || typeof Object.getOwnPropertySymbols != "function")
    return !1;
  if (typeof Symbol.iterator == "symbol")
    return !0;
  var e = {}, n = Symbol("test"), a = Object(n);
  if (typeof n == "string" || Object.prototype.toString.call(n) !== "[object Symbol]" || Object.prototype.toString.call(a) !== "[object Symbol]")
    return !1;
  var c = 42;
  e[n] = c;
  for (n in e)
    return !1;
  if (typeof Object.keys == "function" && Object.keys(e).length !== 0 || typeof Object.getOwnPropertyNames == "function" && Object.getOwnPropertyNames(e).length !== 0)
    return !1;
  var o = Object.getOwnPropertySymbols(e);
  if (o.length !== 1 || o[0] !== n || !Object.prototype.propertyIsEnumerable.call(e, n))
    return !1;
  if (typeof Object.getOwnPropertyDescriptor == "function") {
    var d = Object.getOwnPropertyDescriptor(e, n);
    if (d.value !== c || d.enumerable !== !0)
      return !1;
  }
  return !0;
}, hasSymbols$2 = shams$1, shams = function() {
  return hasSymbols$2() && !!Symbol.toStringTag;
}, esErrors = Error, _eval = EvalError, range = RangeError, ref = ReferenceError, syntax = SyntaxError, type$1 = TypeError, uri = URIError, origSymbol = typeof Symbol < "u" && Symbol, hasSymbolSham = shams$1, hasSymbols$1 = function() {
  return typeof origSymbol != "function" || typeof Symbol != "function" || typeof origSymbol("foo") != "symbol" || typeof Symbol("bar") != "symbol" ? !1 : hasSymbolSham();
}, test = {
  foo: {}
}, $Object = Object, hasProto$1 = function() {
  return { __proto__: test }.foo === test.foo && !({ __proto__: null } instanceof $Object);
}, ERROR_MESSAGE = "Function.prototype.bind called on incompatible ", toStr$3 = Object.prototype.toString, max = Math.max, funcType = "[object Function]", concatty = function(e, n) {
  for (var a = [], c = 0; c < e.length; c += 1)
    a[c] = e[c];
  for (var o = 0; o < n.length; o += 1)
    a[o + e.length] = n[o];
  return a;
}, slicy = function(e, n) {
  for (var a = [], c = n || 0, o = 0; c < e.length; c += 1, o += 1)
    a[o] = e[c];
  return a;
}, joiny = function(t, e) {
  for (var n = "", a = 0; a < t.length; a += 1)
    n += t[a], a + 1 < t.length && (n += e);
  return n;
}, implementation$1 = function(e) {
  var n = this;
  if (typeof n != "function" || toStr$3.apply(n) !== funcType)
    throw new TypeError(ERROR_MESSAGE + n);
  for (var a = slicy(arguments, 1), c, o = function() {
    if (this instanceof c) {
      var A = n.apply(
        this,
        concatty(a, arguments)
      );
      return Object(A) === A ? A : this;
    }
    return n.apply(
      e,
      concatty(a, arguments)
    );
  }, d = max(0, n.length - a.length), m = [], w = 0; w < d; w++)
    m[w] = "$" + w;
  if (c = Function("binder", "return function (" + joiny(m, ",") + "){ return binder.apply(this,arguments); }")(o), n.prototype) {
    var S = function() {
    };
    S.prototype = n.prototype, c.prototype = new S(), S.prototype = null;
  }
  return c;
}, implementation = implementation$1, functionBind = Function.prototype.bind || implementation, call$1 = Function.prototype.call, $hasOwn = Object.prototype.hasOwnProperty, bind$4 = functionBind, hasown = bind$4.call(call$1, $hasOwn), undefined$1, $Error = esErrors, $EvalError = _eval, $RangeError = range, $ReferenceError = ref, $SyntaxError$1 = syntax, $TypeError$2 = type$1, $URIError = uri, $Function = Function, getEvalledConstructor = function(t) {
  try {
    return $Function('"use strict"; return (' + t + ").constructor;")();
  } catch {
  }
}, $gOPD$1 = Object.getOwnPropertyDescriptor;
if ($gOPD$1)
  try {
    $gOPD$1({}, "");
  } catch {
    $gOPD$1 = null;
  }
var throwTypeError = function() {
  throw new $TypeError$2();
}, ThrowTypeError = $gOPD$1 ? function() {
  try {
    return arguments.callee, throwTypeError;
  } catch {
    try {
      return $gOPD$1(arguments, "callee").get;
    } catch {
      return throwTypeError;
    }
  }
}() : throwTypeError, hasSymbols = hasSymbols$1(), hasProto = hasProto$1(), getProto$1 = Object.getPrototypeOf || (hasProto ? function(t) {
  return t.__proto__;
} : null), needsEval = {}, TypedArray = typeof Uint8Array > "u" || !getProto$1 ? undefined$1 : getProto$1(Uint8Array), INTRINSICS = {
  __proto__: null,
  "%AggregateError%": typeof AggregateError > "u" ? undefined$1 : AggregateError,
  "%Array%": Array,
  "%ArrayBuffer%": typeof ArrayBuffer > "u" ? undefined$1 : ArrayBuffer,
  "%ArrayIteratorPrototype%": hasSymbols && getProto$1 ? getProto$1([][Symbol.iterator]()) : undefined$1,
  "%AsyncFromSyncIteratorPrototype%": undefined$1,
  "%AsyncFunction%": needsEval,
  "%AsyncGenerator%": needsEval,
  "%AsyncGeneratorFunction%": needsEval,
  "%AsyncIteratorPrototype%": needsEval,
  "%Atomics%": typeof Atomics > "u" ? undefined$1 : Atomics,
  "%BigInt%": typeof BigInt > "u" ? undefined$1 : BigInt,
  "%BigInt64Array%": typeof BigInt64Array > "u" ? undefined$1 : BigInt64Array,
  "%BigUint64Array%": typeof BigUint64Array > "u" ? undefined$1 : BigUint64Array,
  "%Boolean%": Boolean,
  "%DataView%": typeof DataView > "u" ? undefined$1 : DataView,
  "%Date%": Date,
  "%decodeURI%": decodeURI,
  "%decodeURIComponent%": decodeURIComponent,
  "%encodeURI%": encodeURI,
  "%encodeURIComponent%": encodeURIComponent,
  "%Error%": $Error,
  "%eval%": eval,
  // eslint-disable-line no-eval
  "%EvalError%": $EvalError,
  "%Float32Array%": typeof Float32Array > "u" ? undefined$1 : Float32Array,
  "%Float64Array%": typeof Float64Array > "u" ? undefined$1 : Float64Array,
  "%FinalizationRegistry%": typeof FinalizationRegistry > "u" ? undefined$1 : FinalizationRegistry,
  "%Function%": $Function,
  "%GeneratorFunction%": needsEval,
  "%Int8Array%": typeof Int8Array > "u" ? undefined$1 : Int8Array,
  "%Int16Array%": typeof Int16Array > "u" ? undefined$1 : Int16Array,
  "%Int32Array%": typeof Int32Array > "u" ? undefined$1 : Int32Array,
  "%isFinite%": isFinite,
  "%isNaN%": isNaN,
  "%IteratorPrototype%": hasSymbols && getProto$1 ? getProto$1(getProto$1([][Symbol.iterator]())) : undefined$1,
  "%JSON%": typeof JSON == "object" ? JSON : undefined$1,
  "%Map%": typeof Map > "u" ? undefined$1 : Map,
  "%MapIteratorPrototype%": typeof Map > "u" || !hasSymbols || !getProto$1 ? undefined$1 : getProto$1((/* @__PURE__ */ new Map())[Symbol.iterator]()),
  "%Math%": Math,
  "%Number%": Number,
  "%Object%": Object,
  "%parseFloat%": parseFloat,
  "%parseInt%": parseInt,
  "%Promise%": typeof Promise > "u" ? undefined$1 : Promise,
  "%Proxy%": typeof Proxy > "u" ? undefined$1 : Proxy,
  "%RangeError%": $RangeError,
  "%ReferenceError%": $ReferenceError,
  "%Reflect%": typeof Reflect > "u" ? undefined$1 : Reflect,
  "%RegExp%": RegExp,
  "%Set%": typeof Set > "u" ? undefined$1 : Set,
  "%SetIteratorPrototype%": typeof Set > "u" || !hasSymbols || !getProto$1 ? undefined$1 : getProto$1((/* @__PURE__ */ new Set())[Symbol.iterator]()),
  "%SharedArrayBuffer%": typeof SharedArrayBuffer > "u" ? undefined$1 : SharedArrayBuffer,
  "%String%": String,
  "%StringIteratorPrototype%": hasSymbols && getProto$1 ? getProto$1(""[Symbol.iterator]()) : undefined$1,
  "%Symbol%": hasSymbols ? Symbol : undefined$1,
  "%SyntaxError%": $SyntaxError$1,
  "%ThrowTypeError%": ThrowTypeError,
  "%TypedArray%": TypedArray,
  "%TypeError%": $TypeError$2,
  "%Uint8Array%": typeof Uint8Array > "u" ? undefined$1 : Uint8Array,
  "%Uint8ClampedArray%": typeof Uint8ClampedArray > "u" ? undefined$1 : Uint8ClampedArray,
  "%Uint16Array%": typeof Uint16Array > "u" ? undefined$1 : Uint16Array,
  "%Uint32Array%": typeof Uint32Array > "u" ? undefined$1 : Uint32Array,
  "%URIError%": $URIError,
  "%WeakMap%": typeof WeakMap > "u" ? undefined$1 : WeakMap,
  "%WeakRef%": typeof WeakRef > "u" ? undefined$1 : WeakRef,
  "%WeakSet%": typeof WeakSet > "u" ? undefined$1 : WeakSet
};
if (getProto$1)
  try {
    null.error;
  } catch (t) {
    var errorProto = getProto$1(getProto$1(t));
    INTRINSICS["%Error.prototype%"] = errorProto;
  }
var doEval = function t(e) {
  var n;
  if (e === "%AsyncFunction%")
    n = getEvalledConstructor("async function () {}");
  else if (e === "%GeneratorFunction%")
    n = getEvalledConstructor("function* () {}");
  else if (e === "%AsyncGeneratorFunction%")
    n = getEvalledConstructor("async function* () {}");
  else if (e === "%AsyncGenerator%") {
    var a = t("%AsyncGeneratorFunction%");
    a && (n = a.prototype);
  } else if (e === "%AsyncIteratorPrototype%") {
    var c = t("%AsyncGenerator%");
    c && getProto$1 && (n = getProto$1(c.prototype));
  }
  return INTRINSICS[e] = n, n;
}, LEGACY_ALIASES = {
  __proto__: null,
  "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
  "%ArrayPrototype%": ["Array", "prototype"],
  "%ArrayProto_entries%": ["Array", "prototype", "entries"],
  "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
  "%ArrayProto_keys%": ["Array", "prototype", "keys"],
  "%ArrayProto_values%": ["Array", "prototype", "values"],
  "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
  "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
  "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
  "%BooleanPrototype%": ["Boolean", "prototype"],
  "%DataViewPrototype%": ["DataView", "prototype"],
  "%DatePrototype%": ["Date", "prototype"],
  "%ErrorPrototype%": ["Error", "prototype"],
  "%EvalErrorPrototype%": ["EvalError", "prototype"],
  "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
  "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
  "%FunctionPrototype%": ["Function", "prototype"],
  "%Generator%": ["GeneratorFunction", "prototype"],
  "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
  "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
  "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
  "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
  "%JSONParse%": ["JSON", "parse"],
  "%JSONStringify%": ["JSON", "stringify"],
  "%MapPrototype%": ["Map", "prototype"],
  "%NumberPrototype%": ["Number", "prototype"],
  "%ObjectPrototype%": ["Object", "prototype"],
  "%ObjProto_toString%": ["Object", "prototype", "toString"],
  "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
  "%PromisePrototype%": ["Promise", "prototype"],
  "%PromiseProto_then%": ["Promise", "prototype", "then"],
  "%Promise_all%": ["Promise", "all"],
  "%Promise_reject%": ["Promise", "reject"],
  "%Promise_resolve%": ["Promise", "resolve"],
  "%RangeErrorPrototype%": ["RangeError", "prototype"],
  "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
  "%RegExpPrototype%": ["RegExp", "prototype"],
  "%SetPrototype%": ["Set", "prototype"],
  "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
  "%StringPrototype%": ["String", "prototype"],
  "%SymbolPrototype%": ["Symbol", "prototype"],
  "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
  "%TypedArrayPrototype%": ["TypedArray", "prototype"],
  "%TypeErrorPrototype%": ["TypeError", "prototype"],
  "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
  "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
  "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
  "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
  "%URIErrorPrototype%": ["URIError", "prototype"],
  "%WeakMapPrototype%": ["WeakMap", "prototype"],
  "%WeakSetPrototype%": ["WeakSet", "prototype"]
}, bind$3 = functionBind, hasOwn = hasown, $concat = bind$3.call(Function.call, Array.prototype.concat), $spliceApply = bind$3.call(Function.apply, Array.prototype.splice), $replace = bind$3.call(Function.call, String.prototype.replace), $strSlice = bind$3.call(Function.call, String.prototype.slice), $exec = bind$3.call(Function.call, RegExp.prototype.exec), rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g, reEscapeChar = /\\(\\)?/g, stringToPath = function(e) {
  var n = $strSlice(e, 0, 1), a = $strSlice(e, -1);
  if (n === "%" && a !== "%")
    throw new $SyntaxError$1("invalid intrinsic syntax, expected closing `%`");
  if (a === "%" && n !== "%")
    throw new $SyntaxError$1("invalid intrinsic syntax, expected opening `%`");
  var c = [];
  return $replace(e, rePropName, function(o, d, m, w) {
    c[c.length] = m ? $replace(w, reEscapeChar, "$1") : d || o;
  }), c;
}, getBaseIntrinsic = function(e, n) {
  var a = e, c;
  if (hasOwn(LEGACY_ALIASES, a) && (c = LEGACY_ALIASES[a], a = "%" + c[0] + "%"), hasOwn(INTRINSICS, a)) {
    var o = INTRINSICS[a];
    if (o === needsEval && (o = doEval(a)), typeof o > "u" && !n)
      throw new $TypeError$2("intrinsic " + e + " exists, but is not available. Please file an issue!");
    return {
      alias: c,
      name: a,
      value: o
    };
  }
  throw new $SyntaxError$1("intrinsic " + e + " does not exist!");
}, getIntrinsic = function(e, n) {
  if (typeof e != "string" || e.length === 0)
    throw new $TypeError$2("intrinsic name must be a non-empty string");
  if (arguments.length > 1 && typeof n != "boolean")
    throw new $TypeError$2('"allowMissing" argument must be a boolean');
  if ($exec(/^%?[^%]*%?$/, e) === null)
    throw new $SyntaxError$1("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
  var a = stringToPath(e), c = a.length > 0 ? a[0] : "", o = getBaseIntrinsic("%" + c + "%", n), d = o.name, m = o.value, w = !1, S = o.alias;
  S && (c = S[0], $spliceApply(a, $concat([0, 1], S)));
  for (var A = 1, B = !0; A < a.length; A += 1) {
    var P = a[A], I = $strSlice(P, 0, 1), O = $strSlice(P, -1);
    if ((I === '"' || I === "'" || I === "`" || O === '"' || O === "'" || O === "`") && I !== O)
      throw new $SyntaxError$1("property names with quotes must have matching quotes");
    if ((P === "constructor" || !B) && (w = !0), c += "." + P, d = "%" + c + "%", hasOwn(INTRINSICS, d))
      m = INTRINSICS[d];
    else if (m != null) {
      if (!(P in m)) {
        if (!n)
          throw new $TypeError$2("base intrinsic for " + e + " exists, but the property is not available.");
        return;
      }
      if ($gOPD$1 && A + 1 >= a.length) {
        var L = $gOPD$1(m, P);
        B = !!L, B && "get" in L && !("originalValue" in L.get) ? m = L.get : m = m[P];
      } else
        B = hasOwn(m, P), m = m[P];
      B && !w && (INTRINSICS[d] = m);
    }
  }
  return m;
}, callBind$2 = { exports: {} }, GetIntrinsic$4 = getIntrinsic, $defineProperty$1 = GetIntrinsic$4("%Object.defineProperty%", !0), hasPropertyDescriptors$1 = function() {
  if ($defineProperty$1)
    try {
      return $defineProperty$1({}, "a", { value: 1 }), !0;
    } catch {
      return !1;
    }
  return !1;
};
hasPropertyDescriptors$1.hasArrayLengthDefineBug = function() {
  if (!hasPropertyDescriptors$1())
    return null;
  try {
    return $defineProperty$1([], "length", { value: 1 }).length !== 1;
  } catch {
    return !0;
  }
};
var hasPropertyDescriptors_1 = hasPropertyDescriptors$1, GetIntrinsic$3 = getIntrinsic, $gOPD = GetIntrinsic$3("%Object.getOwnPropertyDescriptor%", !0);
if ($gOPD)
  try {
    $gOPD([], "length");
  } catch {
    $gOPD = null;
  }
var gopd$1 = $gOPD, hasPropertyDescriptors = hasPropertyDescriptors_1(), GetIntrinsic$2 = getIntrinsic, $defineProperty = hasPropertyDescriptors && GetIntrinsic$2("%Object.defineProperty%", !0);
if ($defineProperty)
  try {
    $defineProperty({}, "a", { value: 1 });
  } catch {
    $defineProperty = !1;
  }
var $SyntaxError = syntax, $TypeError$1 = type$1, gopd = gopd$1, defineDataProperty = function(e, n, a) {
  if (!e || typeof e != "object" && typeof e != "function")
    throw new $TypeError$1("`obj` must be an object or a function`");
  if (typeof n != "string" && typeof n != "symbol")
    throw new $TypeError$1("`property` must be a string or a symbol`");
  if (arguments.length > 3 && typeof arguments[3] != "boolean" && arguments[3] !== null)
    throw new $TypeError$1("`nonEnumerable`, if provided, must be a boolean or null");
  if (arguments.length > 4 && typeof arguments[4] != "boolean" && arguments[4] !== null)
    throw new $TypeError$1("`nonWritable`, if provided, must be a boolean or null");
  if (arguments.length > 5 && typeof arguments[5] != "boolean" && arguments[5] !== null)
    throw new $TypeError$1("`nonConfigurable`, if provided, must be a boolean or null");
  if (arguments.length > 6 && typeof arguments[6] != "boolean")
    throw new $TypeError$1("`loose`, if provided, must be a boolean");
  var c = arguments.length > 3 ? arguments[3] : null, o = arguments.length > 4 ? arguments[4] : null, d = arguments.length > 5 ? arguments[5] : null, m = arguments.length > 6 ? arguments[6] : !1, w = !!gopd && gopd(e, n);
  if ($defineProperty)
    $defineProperty(e, n, {
      configurable: d === null && w ? w.configurable : !d,
      enumerable: c === null && w ? w.enumerable : !c,
      value: a,
      writable: o === null && w ? w.writable : !o
    });
  else if (m || !c && !o && !d)
    e[n] = a;
  else
    throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
}, GetIntrinsic$1 = getIntrinsic, define$2 = defineDataProperty, hasDescriptors = hasPropertyDescriptors_1(), gOPD$1 = gopd$1, $TypeError = type$1, $floor = GetIntrinsic$1("%Math.floor%"), setFunctionLength = function(e, n) {
  if (typeof e != "function")
    throw new $TypeError("`fn` is not a function");
  if (typeof n != "number" || n < 0 || n > 4294967295 || $floor(n) !== n)
    throw new $TypeError("`length` must be a positive 32-bit integer");
  var a = arguments.length > 2 && !!arguments[2], c = !0, o = !0;
  if ("length" in e && gOPD$1) {
    var d = gOPD$1(e, "length");
    d && !d.configurable && (c = !1), d && !d.writable && (o = !1);
  }
  return (c || o || !a) && (hasDescriptors ? define$2(
    /** @type {Parameters<define>[0]} */
    e,
    "length",
    n,
    !0,
    !0
  ) : define$2(
    /** @type {Parameters<define>[0]} */
    e,
    "length",
    n
  )), e;
};
(function(t) {
  var e = functionBind, n = getIntrinsic, a = setFunctionLength, c = type$1, o = n("%Function.prototype.apply%"), d = n("%Function.prototype.call%"), m = n("%Reflect.apply%", !0) || e.call(d, o), w = n("%Object.defineProperty%", !0), S = n("%Math.max%");
  if (w)
    try {
      w({}, "a", { value: 1 });
    } catch {
      w = null;
    }
  t.exports = function(P) {
    if (typeof P != "function")
      throw new c("a function is required");
    var I = m(e, d, arguments);
    return a(
      I,
      1 + S(0, P.length - (arguments.length - 1)),
      !0
    );
  };
  var A = function() {
    return m(e, o, arguments);
  };
  w ? w(t.exports, "apply", { value: A }) : t.exports.apply = A;
})(callBind$2);
var callBindExports = callBind$2.exports, GetIntrinsic = getIntrinsic, callBind$1 = callBindExports, $indexOf$1 = callBind$1(GetIntrinsic("String.prototype.indexOf")), callBound$2 = function(e, n) {
  var a = GetIntrinsic(e, !!n);
  return typeof a == "function" && $indexOf$1(e, ".prototype.") > -1 ? callBind$1(a) : a;
}, hasToStringTag$3 = shams(), callBound$1 = callBound$2, $toString$1 = callBound$1("Object.prototype.toString"), isStandardArguments = function(e) {
  return hasToStringTag$3 && e && typeof e == "object" && Symbol.toStringTag in e ? !1 : $toString$1(e) === "[object Arguments]";
}, isLegacyArguments = function(e) {
  return isStandardArguments(e) ? !0 : e !== null && typeof e == "object" && typeof e.length == "number" && e.length >= 0 && $toString$1(e) !== "[object Array]" && $toString$1(e.callee) === "[object Function]";
}, supportsStandardArguments = function() {
  return isStandardArguments(arguments);
}();
isStandardArguments.isLegacyArguments = isLegacyArguments;
var isArguments = supportsStandardArguments ? isStandardArguments : isLegacyArguments, toStr$2 = Object.prototype.toString, fnToStr$1 = Function.prototype.toString, isFnRegex = /^\s*(?:function)?\*/, hasToStringTag$2 = shams(), getProto = Object.getPrototypeOf, getGeneratorFunc = function() {
  if (!hasToStringTag$2)
    return !1;
  try {
    return Function("return function*() {}")();
  } catch {
  }
}, GeneratorFunction, isGeneratorFunction = function(e) {
  if (typeof e != "function")
    return !1;
  if (isFnRegex.test(fnToStr$1.call(e)))
    return !0;
  if (!hasToStringTag$2) {
    var n = toStr$2.call(e);
    return n === "[object GeneratorFunction]";
  }
  if (!getProto)
    return !1;
  if (typeof GeneratorFunction > "u") {
    var a = getGeneratorFunc();
    GeneratorFunction = a ? getProto(a) : !1;
  }
  return getProto(e) === GeneratorFunction;
}, fnToStr = Function.prototype.toString, reflectApply = typeof Reflect == "object" && Reflect !== null && Reflect.apply, badArrayLike, isCallableMarker;
if (typeof reflectApply == "function" && typeof Object.defineProperty == "function")
  try {
    badArrayLike = Object.defineProperty({}, "length", {
      get: function() {
        throw isCallableMarker;
      }
    }), isCallableMarker = {}, reflectApply(function() {
      throw 42;
    }, null, badArrayLike);
  } catch (t) {
    t !== isCallableMarker && (reflectApply = null);
  }
else
  reflectApply = null;
var constructorRegex = /^\s*class\b/, isES6ClassFn = function(e) {
  try {
    var n = fnToStr.call(e);
    return constructorRegex.test(n);
  } catch {
    return !1;
  }
}, tryFunctionObject = function(e) {
  try {
    return isES6ClassFn(e) ? !1 : (fnToStr.call(e), !0);
  } catch {
    return !1;
  }
}, toStr$1 = Object.prototype.toString, objectClass = "[object Object]", fnClass = "[object Function]", genClass = "[object GeneratorFunction]", ddaClass = "[object HTMLAllCollection]", ddaClass2 = "[object HTML document.all class]", ddaClass3 = "[object HTMLCollection]", hasToStringTag$1 = typeof Symbol == "function" && !!Symbol.toStringTag, isIE68 = !(0 in [,]), isDDA = function() {
  return !1;
};
if (typeof document == "object") {
  var all = document.all;
  toStr$1.call(all) === toStr$1.call(document.all) && (isDDA = function(e) {
    if ((isIE68 || !e) && (typeof e > "u" || typeof e == "object"))
      try {
        var n = toStr$1.call(e);
        return (n === ddaClass || n === ddaClass2 || n === ddaClass3 || n === objectClass) && e("") == null;
      } catch {
      }
    return !1;
  });
}
var isCallable$1 = reflectApply ? function(e) {
  if (isDDA(e))
    return !0;
  if (!e || typeof e != "function" && typeof e != "object")
    return !1;
  try {
    reflectApply(e, null, badArrayLike);
  } catch (n) {
    if (n !== isCallableMarker)
      return !1;
  }
  return !isES6ClassFn(e) && tryFunctionObject(e);
} : function(e) {
  if (isDDA(e))
    return !0;
  if (!e || typeof e != "function" && typeof e != "object")
    return !1;
  if (hasToStringTag$1)
    return tryFunctionObject(e);
  if (isES6ClassFn(e))
    return !1;
  var n = toStr$1.call(e);
  return n !== fnClass && n !== genClass && !/^\[object HTML/.test(n) ? !1 : tryFunctionObject(e);
}, isCallable = isCallable$1, toStr = Object.prototype.toString, hasOwnProperty = Object.prototype.hasOwnProperty, forEachArray = function(e, n, a) {
  for (var c = 0, o = e.length; c < o; c++)
    hasOwnProperty.call(e, c) && (a == null ? n(e[c], c, e) : n.call(a, e[c], c, e));
}, forEachString = function(e, n, a) {
  for (var c = 0, o = e.length; c < o; c++)
    a == null ? n(e.charAt(c), c, e) : n.call(a, e.charAt(c), c, e);
}, forEachObject = function(e, n, a) {
  for (var c in e)
    hasOwnProperty.call(e, c) && (a == null ? n(e[c], c, e) : n.call(a, e[c], c, e));
}, forEach$2 = function(e, n, a) {
  if (!isCallable(n))
    throw new TypeError("iterator must be a function");
  var c;
  arguments.length >= 3 && (c = a), toStr.call(e) === "[object Array]" ? forEachArray(e, n, c) : typeof e == "string" ? forEachString(e, n, c) : forEachObject(e, n, c);
}, forEach_1 = forEach$2, possibleNames = [
  "BigInt64Array",
  "BigUint64Array",
  "Float32Array",
  "Float64Array",
  "Int16Array",
  "Int32Array",
  "Int8Array",
  "Uint16Array",
  "Uint32Array",
  "Uint8Array",
  "Uint8ClampedArray"
], g$1 = typeof globalThis > "u" ? commonjsGlobal : globalThis, availableTypedArrays$1 = function() {
  for (var e = [], n = 0; n < possibleNames.length; n++)
    typeof g$1[possibleNames[n]] == "function" && (e[e.length] = possibleNames[n]);
  return e;
}, forEach$1 = forEach_1, availableTypedArrays = availableTypedArrays$1, callBind = callBindExports, callBound = callBound$2, gOPD = gopd$1, $toString = callBound("Object.prototype.toString"), hasToStringTag = shams(), g = typeof globalThis > "u" ? commonjsGlobal : globalThis, typedArrays = availableTypedArrays(), $slice = callBound("String.prototype.slice"), getPrototypeOf$1 = Object.getPrototypeOf, $indexOf = callBound("Array.prototype.indexOf", !0) || /** @type {(array: readonly unknown[], value: unknown) => keyof array} */
function(e, n) {
  for (var a = 0; a < e.length; a += 1)
    if (e[a] === n)
      return a;
  return -1;
}, cache = { __proto__: null };
hasToStringTag && gOPD && getPrototypeOf$1 ? forEach$1(typedArrays, function(t) {
  var e = new g[t]();
  if (Symbol.toStringTag in e) {
    var n = getPrototypeOf$1(e), a = gOPD(n, Symbol.toStringTag);
    if (!a) {
      var c = getPrototypeOf$1(n);
      a = gOPD(c, Symbol.toStringTag);
    }
    cache["$" + t] = callBind(a.get);
  }
}) : forEach$1(typedArrays, function(t) {
  var e = new g[t](), n = e.slice || e.set;
  n && (cache["$" + t] = callBind(n));
});
var tryTypedArrays = function(e) {
  var n = !1;
  return forEach$1(
    // eslint-disable-next-line no-extra-parens
    /** @type {Record<`\$${TypedArrayName}`, typeof cache>} */
    /** @type {any} */
    cache,
    /** @type {(getter: typeof cache, name: `\$${TypedArrayName}`) => void} */
    function(a, c) {
      if (!n)
        try {
          "$" + a(e) === c && (n = $slice(c, 1));
        } catch {
        }
    }
  ), n;
}, trySlices = function(e) {
  var n = !1;
  return forEach$1(
    // eslint-disable-next-line no-extra-parens
    /** @type {any} */
    cache,
    /** @type {(getter: typeof cache, name: `\$${TypedArrayName}`) => void} */
    function(a, c) {
      if (!n)
        try {
          a(e), n = $slice(c, 1);
        } catch {
        }
    }
  ), n;
}, whichTypedArray$1 = function(e) {
  if (!e || typeof e != "object")
    return !1;
  if (!hasToStringTag) {
    var n = $slice($toString(e), 8, -1);
    return $indexOf(typedArrays, n) > -1 ? n : n !== "Object" ? !1 : trySlices(e);
  }
  return gOPD ? tryTypedArrays(e) : null;
}, whichTypedArray = whichTypedArray$1, isTypedArray$1 = function(e) {
  return !!whichTypedArray(e);
};
(function(t) {
  var e = isArguments, n = isGeneratorFunction, a = whichTypedArray$1, c = isTypedArray$1;
  function o(ve) {
    return ve.call.bind(ve);
  }
  var d = typeof BigInt < "u", m = typeof Symbol < "u", w = o(Object.prototype.toString), S = o(Number.prototype.valueOf), A = o(String.prototype.valueOf), B = o(Boolean.prototype.valueOf);
  if (d)
    var P = o(BigInt.prototype.valueOf);
  if (m)
    var I = o(Symbol.prototype.valueOf);
  function O(ve, xt) {
    if (typeof ve != "object")
      return !1;
    try {
      return xt(ve), !0;
    } catch {
      return !1;
    }
  }
  t.isArgumentsObject = e, t.isGeneratorFunction = n, t.isTypedArray = c;
  function L(ve) {
    return typeof Promise < "u" && ve instanceof Promise || ve !== null && typeof ve == "object" && typeof ve.then == "function" && typeof ve.catch == "function";
  }
  t.isPromise = L;
  function C(ve) {
    return typeof ArrayBuffer < "u" && ArrayBuffer.isView ? ArrayBuffer.isView(ve) : c(ve) || k(ve);
  }
  t.isArrayBufferView = C;
  function z(ve) {
    return a(ve) === "Uint8Array";
  }
  t.isUint8Array = z;
  function q(ve) {
    return a(ve) === "Uint8ClampedArray";
  }
  t.isUint8ClampedArray = q;
  function Z(ve) {
    return a(ve) === "Uint16Array";
  }
  t.isUint16Array = Z;
  function X(ve) {
    return a(ve) === "Uint32Array";
  }
  t.isUint32Array = X;
  function ie(ve) {
    return a(ve) === "Int8Array";
  }
  t.isInt8Array = ie;
  function fe(ve) {
    return a(ve) === "Int16Array";
  }
  t.isInt16Array = fe;
  function ye(ve) {
    return a(ve) === "Int32Array";
  }
  t.isInt32Array = ye;
  function j(ve) {
    return a(ve) === "Float32Array";
  }
  t.isFloat32Array = j;
  function V(ve) {
    return a(ve) === "Float64Array";
  }
  t.isFloat64Array = V;
  function ae(ve) {
    return a(ve) === "BigInt64Array";
  }
  t.isBigInt64Array = ae;
  function _(ve) {
    return a(ve) === "BigUint64Array";
  }
  t.isBigUint64Array = _;
  function u(ve) {
    return w(ve) === "[object Map]";
  }
  u.working = typeof Map < "u" && u(/* @__PURE__ */ new Map());
  function h(ve) {
    return typeof Map > "u" ? !1 : u.working ? u(ve) : ve instanceof Map;
  }
  t.isMap = h;
  function p(ve) {
    return w(ve) === "[object Set]";
  }
  p.working = typeof Set < "u" && p(/* @__PURE__ */ new Set());
  function y(ve) {
    return typeof Set > "u" ? !1 : p.working ? p(ve) : ve instanceof Set;
  }
  t.isSet = y;
  function v(ve) {
    return w(ve) === "[object WeakMap]";
  }
  v.working = typeof WeakMap < "u" && v(/* @__PURE__ */ new WeakMap());
  function $(ve) {
    return typeof WeakMap > "u" ? !1 : v.working ? v(ve) : ve instanceof WeakMap;
  }
  t.isWeakMap = $;
  function E(ve) {
    return w(ve) === "[object WeakSet]";
  }
  E.working = typeof WeakSet < "u" && E(/* @__PURE__ */ new WeakSet());
  function x(ve) {
    return E(ve);
  }
  t.isWeakSet = x;
  function l(ve) {
    return w(ve) === "[object ArrayBuffer]";
  }
  l.working = typeof ArrayBuffer < "u" && l(new ArrayBuffer());
  function b(ve) {
    return typeof ArrayBuffer > "u" ? !1 : l.working ? l(ve) : ve instanceof ArrayBuffer;
  }
  t.isArrayBuffer = b;
  function M(ve) {
    return w(ve) === "[object DataView]";
  }
  M.working = typeof ArrayBuffer < "u" && typeof DataView < "u" && M(new DataView(new ArrayBuffer(1), 0, 1));
  function k(ve) {
    return typeof DataView > "u" ? !1 : M.working ? M(ve) : ve instanceof DataView;
  }
  t.isDataView = k;
  var U = typeof SharedArrayBuffer < "u" ? SharedArrayBuffer : void 0;
  function T(ve) {
    return w(ve) === "[object SharedArrayBuffer]";
  }
  function H(ve) {
    return typeof U > "u" ? !1 : (typeof T.working > "u" && (T.working = T(new U())), T.working ? T(ve) : ve instanceof U);
  }
  t.isSharedArrayBuffer = H;
  function Y(ve) {
    return w(ve) === "[object AsyncFunction]";
  }
  t.isAsyncFunction = Y;
  function le(ve) {
    return w(ve) === "[object Map Iterator]";
  }
  t.isMapIterator = le;
  function ce(ve) {
    return w(ve) === "[object Set Iterator]";
  }
  t.isSetIterator = ce;
  function de(ve) {
    return w(ve) === "[object Generator]";
  }
  t.isGeneratorObject = de;
  function ue(ve) {
    return w(ve) === "[object WebAssembly.Module]";
  }
  t.isWebAssemblyCompiledModule = ue;
  function re(ve) {
    return O(ve, S);
  }
  t.isNumberObject = re;
  function ge(ve) {
    return O(ve, A);
  }
  t.isStringObject = ge;
  function Ae(ve) {
    return O(ve, B);
  }
  t.isBooleanObject = Ae;
  function xe(ve) {
    return d && O(ve, P);
  }
  t.isBigIntObject = xe;
  function Ee(ve) {
    return m && O(ve, I);
  }
  t.isSymbolObject = Ee;
  function at(ve) {
    return re(ve) || ge(ve) || Ae(ve) || xe(ve) || Ee(ve);
  }
  t.isBoxedPrimitive = at;
  function Re(ve) {
    return typeof Uint8Array < "u" && (b(ve) || H(ve));
  }
  t.isAnyArrayBuffer = Re, ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(ve) {
    Object.defineProperty(t, ve, {
      enumerable: !1,
      value: function() {
        throw new Error(ve + " is not supported in userland");
      }
    });
  });
})(types$1);
var isBufferBrowser = function(e) {
  return e && typeof e == "object" && typeof e.copy == "function" && typeof e.fill == "function" && typeof e.readUInt8 == "function";
};
(function(t) {
  var e = Object.getOwnPropertyDescriptors || function(k) {
    for (var U = Object.keys(k), T = {}, H = 0; H < U.length; H++)
      T[U[H]] = Object.getOwnPropertyDescriptor(k, U[H]);
    return T;
  }, n = /%[sdj%]/g;
  t.format = function(M) {
    if (!ie(M)) {
      for (var k = [], U = 0; U < arguments.length; U++)
        k.push(d(arguments[U]));
      return k.join(" ");
    }
    for (var U = 1, T = arguments, H = T.length, Y = String(M).replace(n, function(ce) {
      if (ce === "%%")
        return "%";
      if (U >= H)
        return ce;
      switch (ce) {
        case "%s":
          return String(T[U++]);
        case "%d":
          return Number(T[U++]);
        case "%j":
          try {
            return JSON.stringify(T[U++]);
          } catch {
            return "[Circular]";
          }
        default:
          return ce;
      }
    }), le = T[U]; U < H; le = T[++U])
      q(le) || !V(le) ? Y += " " + le : Y += " " + d(le);
    return Y;
  }, t.deprecate = function(M, k) {
    if (typeof process$1 < "u" && process$1.noDeprecation === !0)
      return M;
    if (typeof process$1 > "u")
      return function() {
        return t.deprecate(M, k).apply(this, arguments);
      };
    var U = !1;
    function T() {
      if (!U) {
        if (process$1.throwDeprecation)
          throw new Error(k);
        process$1.traceDeprecation ? console.trace(k) : console.error(k), U = !0;
      }
      return M.apply(this, arguments);
    }
    return T;
  };
  var a = {}, c = /^$/;
  if (process$1.env.NODE_DEBUG) {
    var o = process$1.env.NODE_DEBUG;
    o = o.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase(), c = new RegExp("^" + o + "$", "i");
  }
  t.debuglog = function(M) {
    if (M = M.toUpperCase(), !a[M])
      if (c.test(M)) {
        var k = process$1.pid;
        a[M] = function() {
          var U = t.format.apply(t, arguments);
          console.error("%s %d: %s", M, k, U);
        };
      } else
        a[M] = function() {
        };
    return a[M];
  };
  function d(M, k) {
    var U = {
      seen: [],
      stylize: w
    };
    return arguments.length >= 3 && (U.depth = arguments[2]), arguments.length >= 4 && (U.colors = arguments[3]), z(k) ? U.showHidden = k : k && t._extend(U, k), ye(U.showHidden) && (U.showHidden = !1), ye(U.depth) && (U.depth = 2), ye(U.colors) && (U.colors = !1), ye(U.customInspect) && (U.customInspect = !0), U.colors && (U.stylize = m), A(U, M, U.depth);
  }
  t.inspect = d, d.colors = {
    bold: [1, 22],
    italic: [3, 23],
    underline: [4, 24],
    inverse: [7, 27],
    white: [37, 39],
    grey: [90, 39],
    black: [30, 39],
    blue: [34, 39],
    cyan: [36, 39],
    green: [32, 39],
    magenta: [35, 39],
    red: [31, 39],
    yellow: [33, 39]
  }, d.styles = {
    special: "cyan",
    number: "yellow",
    boolean: "yellow",
    undefined: "grey",
    null: "bold",
    string: "green",
    date: "magenta",
    // "name": intentionally not styling
    regexp: "red"
  };
  function m(M, k) {
    var U = d.styles[k];
    return U ? "\x1B[" + d.colors[U][0] + "m" + M + "\x1B[" + d.colors[U][1] + "m" : M;
  }
  function w(M, k) {
    return M;
  }
  function S(M) {
    var k = {};
    return M.forEach(function(U, T) {
      k[U] = !0;
    }), k;
  }
  function A(M, k, U) {
    if (M.customInspect && k && u(k.inspect) && // Filter out the util module, it's inspect function is special
    k.inspect !== t.inspect && // Also filter out any prototype objects using the circular check.
    !(k.constructor && k.constructor.prototype === k)) {
      var T = k.inspect(U, M);
      return ie(T) || (T = A(M, T, U)), T;
    }
    var H = B(M, k);
    if (H)
      return H;
    var Y = Object.keys(k), le = S(Y);
    if (M.showHidden && (Y = Object.getOwnPropertyNames(k)), _(k) && (Y.indexOf("message") >= 0 || Y.indexOf("description") >= 0))
      return P(k);
    if (Y.length === 0) {
      if (u(k)) {
        var ce = k.name ? ": " + k.name : "";
        return M.stylize("[Function" + ce + "]", "special");
      }
      if (j(k))
        return M.stylize(RegExp.prototype.toString.call(k), "regexp");
      if (ae(k))
        return M.stylize(Date.prototype.toString.call(k), "date");
      if (_(k))
        return P(k);
    }
    var de = "", ue = !1, re = ["{", "}"];
    if (C(k) && (ue = !0, re = ["[", "]"]), u(k)) {
      var ge = k.name ? ": " + k.name : "";
      de = " [Function" + ge + "]";
    }
    if (j(k) && (de = " " + RegExp.prototype.toString.call(k)), ae(k) && (de = " " + Date.prototype.toUTCString.call(k)), _(k) && (de = " " + P(k)), Y.length === 0 && (!ue || k.length == 0))
      return re[0] + de + re[1];
    if (U < 0)
      return j(k) ? M.stylize(RegExp.prototype.toString.call(k), "regexp") : M.stylize("[Object]", "special");
    M.seen.push(k);
    var Ae;
    return ue ? Ae = I(M, k, U, le, Y) : Ae = Y.map(function(xe) {
      return O(M, k, U, le, xe, ue);
    }), M.seen.pop(), L(Ae, de, re);
  }
  function B(M, k) {
    if (ye(k))
      return M.stylize("undefined", "undefined");
    if (ie(k)) {
      var U = "'" + JSON.stringify(k).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
      return M.stylize(U, "string");
    }
    if (X(k))
      return M.stylize("" + k, "number");
    if (z(k))
      return M.stylize("" + k, "boolean");
    if (q(k))
      return M.stylize("null", "null");
  }
  function P(M) {
    return "[" + Error.prototype.toString.call(M) + "]";
  }
  function I(M, k, U, T, H) {
    for (var Y = [], le = 0, ce = k.length; le < ce; ++le)
      E(k, String(le)) ? Y.push(O(
        M,
        k,
        U,
        T,
        String(le),
        !0
      )) : Y.push("");
    return H.forEach(function(de) {
      de.match(/^\d+$/) || Y.push(O(
        M,
        k,
        U,
        T,
        de,
        !0
      ));
    }), Y;
  }
  function O(M, k, U, T, H, Y) {
    var le, ce, de;
    if (de = Object.getOwnPropertyDescriptor(k, H) || { value: k[H] }, de.get ? de.set ? ce = M.stylize("[Getter/Setter]", "special") : ce = M.stylize("[Getter]", "special") : de.set && (ce = M.stylize("[Setter]", "special")), E(T, H) || (le = "[" + H + "]"), ce || (M.seen.indexOf(de.value) < 0 ? (q(U) ? ce = A(M, de.value, null) : ce = A(M, de.value, U - 1), ce.indexOf(`
`) > -1 && (Y ? ce = ce.split(`
`).map(function(ue) {
      return "  " + ue;
    }).join(`
`).slice(2) : ce = `
` + ce.split(`
`).map(function(ue) {
      return "   " + ue;
    }).join(`
`))) : ce = M.stylize("[Circular]", "special")), ye(le)) {
      if (Y && H.match(/^\d+$/))
        return ce;
      le = JSON.stringify("" + H), le.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (le = le.slice(1, -1), le = M.stylize(le, "name")) : (le = le.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), le = M.stylize(le, "string"));
    }
    return le + ": " + ce;
  }
  function L(M, k, U) {
    var T = M.reduce(function(H, Y) {
      return Y.indexOf(`
`) >= 0, H + Y.replace(/\u001b\[\d\d?m/g, "").length + 1;
    }, 0);
    return T > 60 ? U[0] + (k === "" ? "" : k + `
 `) + " " + M.join(`,
  `) + " " + U[1] : U[0] + k + " " + M.join(", ") + " " + U[1];
  }
  t.types = types$1;
  function C(M) {
    return Array.isArray(M);
  }
  t.isArray = C;
  function z(M) {
    return typeof M == "boolean";
  }
  t.isBoolean = z;
  function q(M) {
    return M === null;
  }
  t.isNull = q;
  function Z(M) {
    return M == null;
  }
  t.isNullOrUndefined = Z;
  function X(M) {
    return typeof M == "number";
  }
  t.isNumber = X;
  function ie(M) {
    return typeof M == "string";
  }
  t.isString = ie;
  function fe(M) {
    return typeof M == "symbol";
  }
  t.isSymbol = fe;
  function ye(M) {
    return M === void 0;
  }
  t.isUndefined = ye;
  function j(M) {
    return V(M) && p(M) === "[object RegExp]";
  }
  t.isRegExp = j, t.types.isRegExp = j;
  function V(M) {
    return typeof M == "object" && M !== null;
  }
  t.isObject = V;
  function ae(M) {
    return V(M) && p(M) === "[object Date]";
  }
  t.isDate = ae, t.types.isDate = ae;
  function _(M) {
    return V(M) && (p(M) === "[object Error]" || M instanceof Error);
  }
  t.isError = _, t.types.isNativeError = _;
  function u(M) {
    return typeof M == "function";
  }
  t.isFunction = u;
  function h(M) {
    return M === null || typeof M == "boolean" || typeof M == "number" || typeof M == "string" || typeof M == "symbol" || // ES6 symbol
    typeof M > "u";
  }
  t.isPrimitive = h, t.isBuffer = isBufferBrowser;
  function p(M) {
    return Object.prototype.toString.call(M);
  }
  function y(M) {
    return M < 10 ? "0" + M.toString(10) : M.toString(10);
  }
  var v = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
  ];
  function $() {
    var M = /* @__PURE__ */ new Date(), k = [
      y(M.getHours()),
      y(M.getMinutes()),
      y(M.getSeconds())
    ].join(":");
    return [M.getDate(), v[M.getMonth()], k].join(" ");
  }
  t.log = function() {
    console.log("%s - %s", $(), t.format.apply(t, arguments));
  }, t.inherits = inherits_browserExports, t._extend = function(M, k) {
    if (!k || !V(k))
      return M;
    for (var U = Object.keys(k), T = U.length; T--; )
      M[U[T]] = k[U[T]];
    return M;
  };
  function E(M, k) {
    return Object.prototype.hasOwnProperty.call(M, k);
  }
  var x = typeof Symbol < "u" ? Symbol("util.promisify.custom") : void 0;
  t.promisify = function(k) {
    if (typeof k != "function")
      throw new TypeError('The "original" argument must be of type Function');
    if (x && k[x]) {
      var U = k[x];
      if (typeof U != "function")
        throw new TypeError('The "util.promisify.custom" argument must be of type Function');
      return Object.defineProperty(U, x, {
        value: U,
        enumerable: !1,
        writable: !1,
        configurable: !0
      }), U;
    }
    function U() {
      for (var T, H, Y = new Promise(function(de, ue) {
        T = de, H = ue;
      }), le = [], ce = 0; ce < arguments.length; ce++)
        le.push(arguments[ce]);
      le.push(function(de, ue) {
        de ? H(de) : T(ue);
      });
      try {
        k.apply(this, le);
      } catch (de) {
        H(de);
      }
      return Y;
    }
    return Object.setPrototypeOf(U, Object.getPrototypeOf(k)), x && Object.defineProperty(U, x, {
      value: U,
      enumerable: !1,
      writable: !1,
      configurable: !0
    }), Object.defineProperties(
      U,
      e(k)
    );
  }, t.promisify.custom = x;
  function l(M, k) {
    if (!M) {
      var U = new Error("Promise was rejected with a falsy value");
      U.reason = M, M = U;
    }
    return k(M);
  }
  function b(M) {
    if (typeof M != "function")
      throw new TypeError('The "original" argument must be of type Function');
    function k() {
      for (var U = [], T = 0; T < arguments.length; T++)
        U.push(arguments[T]);
      var H = U.pop();
      if (typeof H != "function")
        throw new TypeError("The last argument must be of type Function");
      var Y = this, le = function() {
        return H.apply(Y, arguments);
      };
      M.apply(this, U).then(
        function(ce) {
          process$1.nextTick(le.bind(null, null, ce));
        },
        function(ce) {
          process$1.nextTick(l.bind(null, ce, le));
        }
      );
    }
    return Object.setPrototypeOf(k, Object.getPrototypeOf(M)), Object.defineProperties(
      k,
      e(M)
    ), k;
  }
  t.callbackify = b;
})(util);
var buffer_list, hasRequiredBuffer_list;
function requireBuffer_list() {
  if (hasRequiredBuffer_list)
    return buffer_list;
  hasRequiredBuffer_list = 1;
  function t(O, L) {
    var C = Object.keys(O);
    if (Object.getOwnPropertySymbols) {
      var z = Object.getOwnPropertySymbols(O);
      L && (z = z.filter(function(q) {
        return Object.getOwnPropertyDescriptor(O, q).enumerable;
      })), C.push.apply(C, z);
    }
    return C;
  }
  function e(O) {
    for (var L = 1; L < arguments.length; L++) {
      var C = arguments[L] != null ? arguments[L] : {};
      L % 2 ? t(Object(C), !0).forEach(function(z) {
        n(O, z, C[z]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(O, Object.getOwnPropertyDescriptors(C)) : t(Object(C)).forEach(function(z) {
        Object.defineProperty(O, z, Object.getOwnPropertyDescriptor(C, z));
      });
    }
    return O;
  }
  function n(O, L, C) {
    return L = d(L), L in O ? Object.defineProperty(O, L, { value: C, enumerable: !0, configurable: !0, writable: !0 }) : O[L] = C, O;
  }
  function a(O, L) {
    if (!(O instanceof L))
      throw new TypeError("Cannot call a class as a function");
  }
  function c(O, L) {
    for (var C = 0; C < L.length; C++) {
      var z = L[C];
      z.enumerable = z.enumerable || !1, z.configurable = !0, "value" in z && (z.writable = !0), Object.defineProperty(O, d(z.key), z);
    }
  }
  function o(O, L, C) {
    return L && c(O.prototype, L), C && c(O, C), Object.defineProperty(O, "prototype", { writable: !1 }), O;
  }
  function d(O) {
    var L = m(O, "string");
    return typeof L == "symbol" ? L : String(L);
  }
  function m(O, L) {
    if (typeof O != "object" || O === null)
      return O;
    var C = O[Symbol.toPrimitive];
    if (C !== void 0) {
      var z = C.call(O, L || "default");
      if (typeof z != "object")
        return z;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (L === "string" ? String : Number)(O);
  }
  var w = require$$0$2, S = w.Buffer, A = util, B = A.inspect, P = B && B.custom || "inspect";
  function I(O, L, C) {
    S.prototype.copy.call(O, L, C);
  }
  return buffer_list = /* @__PURE__ */ function() {
    function O() {
      a(this, O), this.head = null, this.tail = null, this.length = 0;
    }
    return o(O, [{
      key: "push",
      value: function(C) {
        var z = {
          data: C,
          next: null
        };
        this.length > 0 ? this.tail.next = z : this.head = z, this.tail = z, ++this.length;
      }
    }, {
      key: "unshift",
      value: function(C) {
        var z = {
          data: C,
          next: this.head
        };
        this.length === 0 && (this.tail = z), this.head = z, ++this.length;
      }
    }, {
      key: "shift",
      value: function() {
        if (this.length !== 0) {
          var C = this.head.data;
          return this.length === 1 ? this.head = this.tail = null : this.head = this.head.next, --this.length, C;
        }
      }
    }, {
      key: "clear",
      value: function() {
        this.head = this.tail = null, this.length = 0;
      }
    }, {
      key: "join",
      value: function(C) {
        if (this.length === 0)
          return "";
        for (var z = this.head, q = "" + z.data; z = z.next; )
          q += C + z.data;
        return q;
      }
    }, {
      key: "concat",
      value: function(C) {
        if (this.length === 0)
          return S.alloc(0);
        for (var z = S.allocUnsafe(C >>> 0), q = this.head, Z = 0; q; )
          I(q.data, z, Z), Z += q.data.length, q = q.next;
        return z;
      }
      // Consumes a specified amount of bytes or characters from the buffered data.
    }, {
      key: "consume",
      value: function(C, z) {
        var q;
        return C < this.head.data.length ? (q = this.head.data.slice(0, C), this.head.data = this.head.data.slice(C)) : C === this.head.data.length ? q = this.shift() : q = z ? this._getString(C) : this._getBuffer(C), q;
      }
    }, {
      key: "first",
      value: function() {
        return this.head.data;
      }
      // Consumes a specified amount of characters from the buffered data.
    }, {
      key: "_getString",
      value: function(C) {
        var z = this.head, q = 1, Z = z.data;
        for (C -= Z.length; z = z.next; ) {
          var X = z.data, ie = C > X.length ? X.length : C;
          if (ie === X.length ? Z += X : Z += X.slice(0, C), C -= ie, C === 0) {
            ie === X.length ? (++q, z.next ? this.head = z.next : this.head = this.tail = null) : (this.head = z, z.data = X.slice(ie));
            break;
          }
          ++q;
        }
        return this.length -= q, Z;
      }
      // Consumes a specified amount of bytes from the buffered data.
    }, {
      key: "_getBuffer",
      value: function(C) {
        var z = S.allocUnsafe(C), q = this.head, Z = 1;
        for (q.data.copy(z), C -= q.data.length; q = q.next; ) {
          var X = q.data, ie = C > X.length ? X.length : C;
          if (X.copy(z, z.length - C, 0, ie), C -= ie, C === 0) {
            ie === X.length ? (++Z, q.next ? this.head = q.next : this.head = this.tail = null) : (this.head = q, q.data = X.slice(ie));
            break;
          }
          ++Z;
        }
        return this.length -= Z, z;
      }
      // Make sure the linked list only shows the minimal necessary information.
    }, {
      key: P,
      value: function(C, z) {
        return B(this, e(e({}, z), {}, {
          // Only inspect one level.
          depth: 0,
          // It should not recurse.
          customInspect: !1
        }));
      }
    }]), O;
  }(), buffer_list;
}
function destroy(t, e) {
  var n = this, a = this._readableState && this._readableState.destroyed, c = this._writableState && this._writableState.destroyed;
  return a || c ? (e ? e(t) : t && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = !0, process$1.nextTick(emitErrorNT, this, t)) : process$1.nextTick(emitErrorNT, this, t)), this) : (this._readableState && (this._readableState.destroyed = !0), this._writableState && (this._writableState.destroyed = !0), this._destroy(t || null, function(o) {
    !e && o ? n._writableState ? n._writableState.errorEmitted ? process$1.nextTick(emitCloseNT, n) : (n._writableState.errorEmitted = !0, process$1.nextTick(emitErrorAndCloseNT, n, o)) : process$1.nextTick(emitErrorAndCloseNT, n, o) : e ? (process$1.nextTick(emitCloseNT, n), e(o)) : process$1.nextTick(emitCloseNT, n);
  }), this);
}
function emitErrorAndCloseNT(t, e) {
  emitErrorNT(t, e), emitCloseNT(t);
}
function emitCloseNT(t) {
  t._writableState && !t._writableState.emitClose || t._readableState && !t._readableState.emitClose || t.emit("close");
}
function undestroy() {
  this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, this._writableState.ending = !1, this._writableState.finalCalled = !1, this._writableState.prefinished = !1, this._writableState.finished = !1, this._writableState.errorEmitted = !1);
}
function emitErrorNT(t, e) {
  t.emit("error", e);
}
function errorOrDestroy(t, e) {
  var n = t._readableState, a = t._writableState;
  n && n.autoDestroy || a && a.autoDestroy ? t.destroy(e) : t.emit("error", e);
}
var destroy_1 = {
  destroy,
  undestroy,
  errorOrDestroy
}, errorsBrowser = {};
function _inheritsLoose(t, e) {
  t.prototype = Object.create(e.prototype), t.prototype.constructor = t, t.__proto__ = e;
}
var codes = {};
function createErrorType(t, e, n) {
  n || (n = Error);
  function a(o, d, m) {
    return typeof e == "string" ? e : e(o, d, m);
  }
  var c = /* @__PURE__ */ function(o) {
    _inheritsLoose(d, o);
    function d(m, w, S) {
      return o.call(this, a(m, w, S)) || this;
    }
    return d;
  }(n);
  c.prototype.name = n.name, c.prototype.code = t, codes[t] = c;
}
function oneOf(t, e) {
  if (Array.isArray(t)) {
    var n = t.length;
    return t = t.map(function(a) {
      return String(a);
    }), n > 2 ? "one of ".concat(e, " ").concat(t.slice(0, n - 1).join(", "), ", or ") + t[n - 1] : n === 2 ? "one of ".concat(e, " ").concat(t[0], " or ").concat(t[1]) : "of ".concat(e, " ").concat(t[0]);
  } else
    return "of ".concat(e, " ").concat(String(t));
}
function startsWith(t, e, n) {
  return t.substr(!n || n < 0 ? 0 : +n, e.length) === e;
}
function endsWith$1(t, e, n) {
  return (n === void 0 || n > t.length) && (n = t.length), t.substring(n - e.length, n) === e;
}
function includes(t, e, n) {
  return typeof n != "number" && (n = 0), n + e.length > t.length ? !1 : t.indexOf(e, n) !== -1;
}
createErrorType("ERR_INVALID_OPT_VALUE", function(t, e) {
  return 'The value "' + e + '" is invalid for option "' + t + '"';
}, TypeError);
createErrorType("ERR_INVALID_ARG_TYPE", function(t, e, n) {
  var a;
  typeof e == "string" && startsWith(e, "not ") ? (a = "must not be", e = e.replace(/^not /, "")) : a = "must be";
  var c;
  if (endsWith$1(t, " argument"))
    c = "The ".concat(t, " ").concat(a, " ").concat(oneOf(e, "type"));
  else {
    var o = includes(t, ".") ? "property" : "argument";
    c = 'The "'.concat(t, '" ').concat(o, " ").concat(a, " ").concat(oneOf(e, "type"));
  }
  return c += ". Received type ".concat(typeof n), c;
}, TypeError);
createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(t) {
  return "The " + t + " method is not implemented";
});
createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
createErrorType("ERR_STREAM_DESTROYED", function(t) {
  return "Cannot call " + t + " after a stream was destroyed";
});
createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
createErrorType("ERR_UNKNOWN_ENCODING", function(t) {
  return "Unknown encoding: " + t;
}, TypeError);
createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
errorsBrowser.codes = codes;
var ERR_INVALID_OPT_VALUE = errorsBrowser.codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(t, e, n) {
  return t.highWaterMark != null ? t.highWaterMark : e ? t[n] : null;
}
function getHighWaterMark(t, e, n, a) {
  var c = highWaterMarkFrom(e, a, n);
  if (c != null) {
    if (!(isFinite(c) && Math.floor(c) === c) || c < 0) {
      var o = a ? n : "highWaterMark";
      throw new ERR_INVALID_OPT_VALUE(o, c);
    }
    return Math.floor(c);
  }
  return t.objectMode ? 16 : 16 * 1024;
}
var state = {
  getHighWaterMark
}, browser$d = deprecate;
function deprecate(t, e) {
  if (config("noDeprecation"))
    return t;
  var n = !1;
  function a() {
    if (!n) {
      if (config("throwDeprecation"))
        throw new Error(e);
      config("traceDeprecation") ? console.trace(e) : console.warn(e), n = !0;
    }
    return t.apply(this, arguments);
  }
  return a;
}
function config(t) {
  try {
    if (!commonjsGlobal.localStorage)
      return !1;
  } catch {
    return !1;
  }
  var e = commonjsGlobal.localStorage[t];
  return e == null ? !1 : String(e).toLowerCase() === "true";
}
var _stream_writable, hasRequired_stream_writable;
function require_stream_writable() {
  if (hasRequired_stream_writable)
    return _stream_writable;
  hasRequired_stream_writable = 1, _stream_writable = j;
  function t(H) {
    var Y = this;
    this.next = null, this.entry = null, this.finish = function() {
      T(Y, H);
    };
  }
  var e;
  j.WritableState = fe;
  var n = {
    deprecate: browser$d
  }, a = streamBrowser, c = require$$0$2.Buffer, o = (typeof commonjsGlobal < "u" ? commonjsGlobal : typeof window < "u" ? window : typeof self < "u" ? self : {}).Uint8Array || function() {
  };
  function d(H) {
    return c.from(H);
  }
  function m(H) {
    return c.isBuffer(H) || H instanceof o;
  }
  var w = destroy_1, S = state, A = S.getHighWaterMark, B = errorsBrowser.codes, P = B.ERR_INVALID_ARG_TYPE, I = B.ERR_METHOD_NOT_IMPLEMENTED, O = B.ERR_MULTIPLE_CALLBACK, L = B.ERR_STREAM_CANNOT_PIPE, C = B.ERR_STREAM_DESTROYED, z = B.ERR_STREAM_NULL_VALUES, q = B.ERR_STREAM_WRITE_AFTER_END, Z = B.ERR_UNKNOWN_ENCODING, X = w.errorOrDestroy;
  inherits_browserExports(j, a);
  function ie() {
  }
  function fe(H, Y, le) {
    e = e || require_stream_duplex(), H = H || {}, typeof le != "boolean" && (le = Y instanceof e), this.objectMode = !!H.objectMode, le && (this.objectMode = this.objectMode || !!H.writableObjectMode), this.highWaterMark = A(this, H, "writableHighWaterMark", le), this.finalCalled = !1, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1, this.destroyed = !1;
    var ce = H.decodeStrings === !1;
    this.decodeStrings = !ce, this.defaultEncoding = H.defaultEncoding || "utf8", this.length = 0, this.writing = !1, this.corked = 0, this.sync = !0, this.bufferProcessing = !1, this.onwrite = function(de) {
      v(Y, de);
    }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = !1, this.errorEmitted = !1, this.emitClose = H.emitClose !== !1, this.autoDestroy = !!H.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new t(this);
  }
  fe.prototype.getBuffer = function() {
    for (var Y = this.bufferedRequest, le = []; Y; )
      le.push(Y), Y = Y.next;
    return le;
  }, function() {
    try {
      Object.defineProperty(fe.prototype, "buffer", {
        get: n.deprecate(function() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
      });
    } catch {
    }
  }();
  var ye;
  typeof Symbol == "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] == "function" ? (ye = Function.prototype[Symbol.hasInstance], Object.defineProperty(j, Symbol.hasInstance, {
    value: function(Y) {
      return ye.call(this, Y) ? !0 : this !== j ? !1 : Y && Y._writableState instanceof fe;
    }
  })) : ye = function(Y) {
    return Y instanceof this;
  };
  function j(H) {
    e = e || require_stream_duplex();
    var Y = this instanceof e;
    if (!Y && !ye.call(j, this))
      return new j(H);
    this._writableState = new fe(H, this, Y), this.writable = !0, H && (typeof H.write == "function" && (this._write = H.write), typeof H.writev == "function" && (this._writev = H.writev), typeof H.destroy == "function" && (this._destroy = H.destroy), typeof H.final == "function" && (this._final = H.final)), a.call(this);
  }
  j.prototype.pipe = function() {
    X(this, new L());
  };
  function V(H, Y) {
    var le = new q();
    X(H, le), process$1.nextTick(Y, le);
  }
  function ae(H, Y, le, ce) {
    var de;
    return le === null ? de = new z() : typeof le != "string" && !Y.objectMode && (de = new P("chunk", ["string", "Buffer"], le)), de ? (X(H, de), process$1.nextTick(ce, de), !1) : !0;
  }
  j.prototype.write = function(H, Y, le) {
    var ce = this._writableState, de = !1, ue = !ce.objectMode && m(H);
    return ue && !c.isBuffer(H) && (H = d(H)), typeof Y == "function" && (le = Y, Y = null), ue ? Y = "buffer" : Y || (Y = ce.defaultEncoding), typeof le != "function" && (le = ie), ce.ending ? V(this, le) : (ue || ae(this, ce, H, le)) && (ce.pendingcb++, de = u(this, ce, ue, H, Y, le)), de;
  }, j.prototype.cork = function() {
    this._writableState.corked++;
  }, j.prototype.uncork = function() {
    var H = this._writableState;
    H.corked && (H.corked--, !H.writing && !H.corked && !H.bufferProcessing && H.bufferedRequest && x(this, H));
  }, j.prototype.setDefaultEncoding = function(Y) {
    if (typeof Y == "string" && (Y = Y.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((Y + "").toLowerCase()) > -1))
      throw new Z(Y);
    return this._writableState.defaultEncoding = Y, this;
  }, Object.defineProperty(j.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState && this._writableState.getBuffer();
    }
  });
  function _(H, Y, le) {
    return !H.objectMode && H.decodeStrings !== !1 && typeof Y == "string" && (Y = c.from(Y, le)), Y;
  }
  Object.defineProperty(j.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState.highWaterMark;
    }
  });
  function u(H, Y, le, ce, de, ue) {
    if (!le) {
      var re = _(Y, ce, de);
      ce !== re && (le = !0, de = "buffer", ce = re);
    }
    var ge = Y.objectMode ? 1 : ce.length;
    Y.length += ge;
    var Ae = Y.length < Y.highWaterMark;
    if (Ae || (Y.needDrain = !0), Y.writing || Y.corked) {
      var xe = Y.lastBufferedRequest;
      Y.lastBufferedRequest = {
        chunk: ce,
        encoding: de,
        isBuf: le,
        callback: ue,
        next: null
      }, xe ? xe.next = Y.lastBufferedRequest : Y.bufferedRequest = Y.lastBufferedRequest, Y.bufferedRequestCount += 1;
    } else
      h(H, Y, !1, ge, ce, de, ue);
    return Ae;
  }
  function h(H, Y, le, ce, de, ue, re) {
    Y.writelen = ce, Y.writecb = re, Y.writing = !0, Y.sync = !0, Y.destroyed ? Y.onwrite(new C("write")) : le ? H._writev(de, Y.onwrite) : H._write(de, ue, Y.onwrite), Y.sync = !1;
  }
  function p(H, Y, le, ce, de) {
    --Y.pendingcb, le ? (process$1.nextTick(de, ce), process$1.nextTick(k, H, Y), H._writableState.errorEmitted = !0, X(H, ce)) : (de(ce), H._writableState.errorEmitted = !0, X(H, ce), k(H, Y));
  }
  function y(H) {
    H.writing = !1, H.writecb = null, H.length -= H.writelen, H.writelen = 0;
  }
  function v(H, Y) {
    var le = H._writableState, ce = le.sync, de = le.writecb;
    if (typeof de != "function")
      throw new O();
    if (y(le), Y)
      p(H, le, ce, Y, de);
    else {
      var ue = l(le) || H.destroyed;
      !ue && !le.corked && !le.bufferProcessing && le.bufferedRequest && x(H, le), ce ? process$1.nextTick($, H, le, ue, de) : $(H, le, ue, de);
    }
  }
  function $(H, Y, le, ce) {
    le || E(H, Y), Y.pendingcb--, ce(), k(H, Y);
  }
  function E(H, Y) {
    Y.length === 0 && Y.needDrain && (Y.needDrain = !1, H.emit("drain"));
  }
  function x(H, Y) {
    Y.bufferProcessing = !0;
    var le = Y.bufferedRequest;
    if (H._writev && le && le.next) {
      var ce = Y.bufferedRequestCount, de = new Array(ce), ue = Y.corkedRequestsFree;
      ue.entry = le;
      for (var re = 0, ge = !0; le; )
        de[re] = le, le.isBuf || (ge = !1), le = le.next, re += 1;
      de.allBuffers = ge, h(H, Y, !0, Y.length, de, "", ue.finish), Y.pendingcb++, Y.lastBufferedRequest = null, ue.next ? (Y.corkedRequestsFree = ue.next, ue.next = null) : Y.corkedRequestsFree = new t(Y), Y.bufferedRequestCount = 0;
    } else {
      for (; le; ) {
        var Ae = le.chunk, xe = le.encoding, Ee = le.callback, at = Y.objectMode ? 1 : Ae.length;
        if (h(H, Y, !1, at, Ae, xe, Ee), le = le.next, Y.bufferedRequestCount--, Y.writing)
          break;
      }
      le === null && (Y.lastBufferedRequest = null);
    }
    Y.bufferedRequest = le, Y.bufferProcessing = !1;
  }
  j.prototype._write = function(H, Y, le) {
    le(new I("_write()"));
  }, j.prototype._writev = null, j.prototype.end = function(H, Y, le) {
    var ce = this._writableState;
    return typeof H == "function" ? (le = H, H = null, Y = null) : typeof Y == "function" && (le = Y, Y = null), H != null && this.write(H, Y), ce.corked && (ce.corked = 1, this.uncork()), ce.ending || U(this, ce, le), this;
  }, Object.defineProperty(j.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState.length;
    }
  });
  function l(H) {
    return H.ending && H.length === 0 && H.bufferedRequest === null && !H.finished && !H.writing;
  }
  function b(H, Y) {
    H._final(function(le) {
      Y.pendingcb--, le && X(H, le), Y.prefinished = !0, H.emit("prefinish"), k(H, Y);
    });
  }
  function M(H, Y) {
    !Y.prefinished && !Y.finalCalled && (typeof H._final == "function" && !Y.destroyed ? (Y.pendingcb++, Y.finalCalled = !0, process$1.nextTick(b, H, Y)) : (Y.prefinished = !0, H.emit("prefinish")));
  }
  function k(H, Y) {
    var le = l(Y);
    if (le && (M(H, Y), Y.pendingcb === 0 && (Y.finished = !0, H.emit("finish"), Y.autoDestroy))) {
      var ce = H._readableState;
      (!ce || ce.autoDestroy && ce.endEmitted) && H.destroy();
    }
    return le;
  }
  function U(H, Y, le) {
    Y.ending = !0, k(H, Y), le && (Y.finished ? process$1.nextTick(le) : H.once("finish", le)), Y.ended = !0, H.writable = !1;
  }
  function T(H, Y, le) {
    var ce = H.entry;
    for (H.entry = null; ce; ) {
      var de = ce.callback;
      Y.pendingcb--, de(le), ce = ce.next;
    }
    Y.corkedRequestsFree.next = H;
  }
  return Object.defineProperty(j.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState === void 0 ? !1 : this._writableState.destroyed;
    },
    set: function(Y) {
      this._writableState && (this._writableState.destroyed = Y);
    }
  }), j.prototype.destroy = w.destroy, j.prototype._undestroy = w.undestroy, j.prototype._destroy = function(H, Y) {
    Y(H);
  }, _stream_writable;
}
var _stream_duplex, hasRequired_stream_duplex;
function require_stream_duplex() {
  if (hasRequired_stream_duplex)
    return _stream_duplex;
  hasRequired_stream_duplex = 1;
  var t = Object.keys || function(S) {
    var A = [];
    for (var B in S)
      A.push(B);
    return A;
  };
  _stream_duplex = d;
  var e = require_stream_readable(), n = require_stream_writable();
  inherits_browserExports(d, e);
  for (var a = t(n.prototype), c = 0; c < a.length; c++) {
    var o = a[c];
    d.prototype[o] || (d.prototype[o] = n.prototype[o]);
  }
  function d(S) {
    if (!(this instanceof d))
      return new d(S);
    e.call(this, S), n.call(this, S), this.allowHalfOpen = !0, S && (S.readable === !1 && (this.readable = !1), S.writable === !1 && (this.writable = !1), S.allowHalfOpen === !1 && (this.allowHalfOpen = !1, this.once("end", m)));
  }
  Object.defineProperty(d.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState.highWaterMark;
    }
  }), Object.defineProperty(d.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState && this._writableState.getBuffer();
    }
  }), Object.defineProperty(d.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState.length;
    }
  });
  function m() {
    this._writableState.ended || process$1.nextTick(w, this);
  }
  function w(S) {
    S.end();
  }
  return Object.defineProperty(d.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState === void 0 || this._writableState === void 0 ? !1 : this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function(A) {
      this._readableState === void 0 || this._writableState === void 0 || (this._readableState.destroyed = A, this._writableState.destroyed = A);
    }
  }), _stream_duplex;
}
var string_decoder = {}, Buffer$D = safeBufferExports.Buffer, isEncoding = Buffer$D.isEncoding || function(t) {
  switch (t = "" + t, t && t.toLowerCase()) {
    case "hex":
    case "utf8":
    case "utf-8":
    case "ascii":
    case "binary":
    case "base64":
    case "ucs2":
    case "ucs-2":
    case "utf16le":
    case "utf-16le":
    case "raw":
      return !0;
    default:
      return !1;
  }
};
function _normalizeEncoding(t) {
  if (!t)
    return "utf8";
  for (var e; ; )
    switch (t) {
      case "utf8":
      case "utf-8":
        return "utf8";
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return "utf16le";
      case "latin1":
      case "binary":
        return "latin1";
      case "base64":
      case "ascii":
      case "hex":
        return t;
      default:
        if (e)
          return;
        t = ("" + t).toLowerCase(), e = !0;
    }
}
function normalizeEncoding(t) {
  var e = _normalizeEncoding(t);
  if (typeof e != "string" && (Buffer$D.isEncoding === isEncoding || !isEncoding(t)))
    throw new Error("Unknown encoding: " + t);
  return e || t;
}
string_decoder.StringDecoder = StringDecoder$1;
function StringDecoder$1(t) {
  this.encoding = normalizeEncoding(t);
  var e;
  switch (this.encoding) {
    case "utf16le":
      this.text = utf16Text, this.end = utf16End, e = 4;
      break;
    case "utf8":
      this.fillLast = utf8FillLast, e = 4;
      break;
    case "base64":
      this.text = base64Text, this.end = base64End, e = 3;
      break;
    default:
      this.write = simpleWrite, this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0, this.lastTotal = 0, this.lastChar = Buffer$D.allocUnsafe(e);
}
StringDecoder$1.prototype.write = function(t) {
  if (t.length === 0)
    return "";
  var e, n;
  if (this.lastNeed) {
    if (e = this.fillLast(t), e === void 0)
      return "";
    n = this.lastNeed, this.lastNeed = 0;
  } else
    n = 0;
  return n < t.length ? e ? e + this.text(t, n) : this.text(t, n) : e || "";
};
StringDecoder$1.prototype.end = utf8End;
StringDecoder$1.prototype.text = utf8Text;
StringDecoder$1.prototype.fillLast = function(t) {
  if (this.lastNeed <= t.length)
    return t.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
  t.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, t.length), this.lastNeed -= t.length;
};
function utf8CheckByte(t) {
  return t <= 127 ? 0 : t >> 5 === 6 ? 2 : t >> 4 === 14 ? 3 : t >> 3 === 30 ? 4 : t >> 6 === 2 ? -1 : -2;
}
function utf8CheckIncomplete(t, e, n) {
  var a = e.length - 1;
  if (a < n)
    return 0;
  var c = utf8CheckByte(e[a]);
  return c >= 0 ? (c > 0 && (t.lastNeed = c - 1), c) : --a < n || c === -2 ? 0 : (c = utf8CheckByte(e[a]), c >= 0 ? (c > 0 && (t.lastNeed = c - 2), c) : --a < n || c === -2 ? 0 : (c = utf8CheckByte(e[a]), c >= 0 ? (c > 0 && (c === 2 ? c = 0 : t.lastNeed = c - 3), c) : 0));
}
function utf8CheckExtraBytes(t, e, n) {
  if ((e[0] & 192) !== 128)
    return t.lastNeed = 0, "�";
  if (t.lastNeed > 1 && e.length > 1) {
    if ((e[1] & 192) !== 128)
      return t.lastNeed = 1, "�";
    if (t.lastNeed > 2 && e.length > 2 && (e[2] & 192) !== 128)
      return t.lastNeed = 2, "�";
  }
}
function utf8FillLast(t) {
  var e = this.lastTotal - this.lastNeed, n = utf8CheckExtraBytes(this, t);
  if (n !== void 0)
    return n;
  if (this.lastNeed <= t.length)
    return t.copy(this.lastChar, e, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
  t.copy(this.lastChar, e, 0, t.length), this.lastNeed -= t.length;
}
function utf8Text(t, e) {
  var n = utf8CheckIncomplete(this, t, e);
  if (!this.lastNeed)
    return t.toString("utf8", e);
  this.lastTotal = n;
  var a = t.length - (n - this.lastNeed);
  return t.copy(this.lastChar, 0, a), t.toString("utf8", e, a);
}
function utf8End(t) {
  var e = t && t.length ? this.write(t) : "";
  return this.lastNeed ? e + "�" : e;
}
function utf16Text(t, e) {
  if ((t.length - e) % 2 === 0) {
    var n = t.toString("utf16le", e);
    if (n) {
      var a = n.charCodeAt(n.length - 1);
      if (a >= 55296 && a <= 56319)
        return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = t[t.length - 2], this.lastChar[1] = t[t.length - 1], n.slice(0, -1);
    }
    return n;
  }
  return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = t[t.length - 1], t.toString("utf16le", e, t.length - 1);
}
function utf16End(t) {
  var e = t && t.length ? this.write(t) : "";
  if (this.lastNeed) {
    var n = this.lastTotal - this.lastNeed;
    return e + this.lastChar.toString("utf16le", 0, n);
  }
  return e;
}
function base64Text(t, e) {
  var n = (t.length - e) % 3;
  return n === 0 ? t.toString("base64", e) : (this.lastNeed = 3 - n, this.lastTotal = 3, n === 1 ? this.lastChar[0] = t[t.length - 1] : (this.lastChar[0] = t[t.length - 2], this.lastChar[1] = t[t.length - 1]), t.toString("base64", e, t.length - n));
}
function base64End(t) {
  var e = t && t.length ? this.write(t) : "";
  return this.lastNeed ? e + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : e;
}
function simpleWrite(t) {
  return t.toString(this.encoding);
}
function simpleEnd(t) {
  return t && t.length ? this.write(t) : "";
}
var ERR_STREAM_PREMATURE_CLOSE = errorsBrowser.codes.ERR_STREAM_PREMATURE_CLOSE;
function once$1(t) {
  var e = !1;
  return function() {
    if (!e) {
      e = !0;
      for (var n = arguments.length, a = new Array(n), c = 0; c < n; c++)
        a[c] = arguments[c];
      t.apply(this, a);
    }
  };
}
function noop$1() {
}
function isRequest$1(t) {
  return t.setHeader && typeof t.abort == "function";
}
function eos$1(t, e, n) {
  if (typeof e == "function")
    return eos$1(t, null, e);
  e || (e = {}), n = once$1(n || noop$1);
  var a = e.readable || e.readable !== !1 && t.readable, c = e.writable || e.writable !== !1 && t.writable, o = function() {
    t.writable || m();
  }, d = t._writableState && t._writableState.finished, m = function() {
    c = !1, d = !0, a || n.call(t);
  }, w = t._readableState && t._readableState.endEmitted, S = function() {
    a = !1, w = !0, c || n.call(t);
  }, A = function(O) {
    n.call(t, O);
  }, B = function() {
    var O;
    if (a && !w)
      return (!t._readableState || !t._readableState.ended) && (O = new ERR_STREAM_PREMATURE_CLOSE()), n.call(t, O);
    if (c && !d)
      return (!t._writableState || !t._writableState.ended) && (O = new ERR_STREAM_PREMATURE_CLOSE()), n.call(t, O);
  }, P = function() {
    t.req.on("finish", m);
  };
  return isRequest$1(t) ? (t.on("complete", m), t.on("abort", B), t.req ? P() : t.on("request", P)) : c && !t._writableState && (t.on("end", o), t.on("close", o)), t.on("end", S), t.on("finish", m), e.error !== !1 && t.on("error", A), t.on("close", B), function() {
    t.removeListener("complete", m), t.removeListener("abort", B), t.removeListener("request", P), t.req && t.req.removeListener("finish", m), t.removeListener("end", o), t.removeListener("close", o), t.removeListener("finish", m), t.removeListener("end", S), t.removeListener("error", A), t.removeListener("close", B);
  };
}
var endOfStream = eos$1, async_iterator, hasRequiredAsync_iterator;
function requireAsync_iterator() {
  if (hasRequiredAsync_iterator)
    return async_iterator;
  hasRequiredAsync_iterator = 1;
  var t;
  function e(Z, X, ie) {
    return X = n(X), X in Z ? Object.defineProperty(Z, X, { value: ie, enumerable: !0, configurable: !0, writable: !0 }) : Z[X] = ie, Z;
  }
  function n(Z) {
    var X = a(Z, "string");
    return typeof X == "symbol" ? X : String(X);
  }
  function a(Z, X) {
    if (typeof Z != "object" || Z === null)
      return Z;
    var ie = Z[Symbol.toPrimitive];
    if (ie !== void 0) {
      var fe = ie.call(Z, X || "default");
      if (typeof fe != "object")
        return fe;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (X === "string" ? String : Number)(Z);
  }
  var c = endOfStream, o = Symbol("lastResolve"), d = Symbol("lastReject"), m = Symbol("error"), w = Symbol("ended"), S = Symbol("lastPromise"), A = Symbol("handlePromise"), B = Symbol("stream");
  function P(Z, X) {
    return {
      value: Z,
      done: X
    };
  }
  function I(Z) {
    var X = Z[o];
    if (X !== null) {
      var ie = Z[B].read();
      ie !== null && (Z[S] = null, Z[o] = null, Z[d] = null, X(P(ie, !1)));
    }
  }
  function O(Z) {
    process$1.nextTick(I, Z);
  }
  function L(Z, X) {
    return function(ie, fe) {
      Z.then(function() {
        if (X[w]) {
          ie(P(void 0, !0));
          return;
        }
        X[A](ie, fe);
      }, fe);
    };
  }
  var C = Object.getPrototypeOf(function() {
  }), z = Object.setPrototypeOf((t = {
    get stream() {
      return this[B];
    },
    next: function() {
      var X = this, ie = this[m];
      if (ie !== null)
        return Promise.reject(ie);
      if (this[w])
        return Promise.resolve(P(void 0, !0));
      if (this[B].destroyed)
        return new Promise(function(V, ae) {
          process$1.nextTick(function() {
            X[m] ? ae(X[m]) : V(P(void 0, !0));
          });
        });
      var fe = this[S], ye;
      if (fe)
        ye = new Promise(L(fe, this));
      else {
        var j = this[B].read();
        if (j !== null)
          return Promise.resolve(P(j, !1));
        ye = new Promise(this[A]);
      }
      return this[S] = ye, ye;
    }
  }, e(t, Symbol.asyncIterator, function() {
    return this;
  }), e(t, "return", function() {
    var X = this;
    return new Promise(function(ie, fe) {
      X[B].destroy(null, function(ye) {
        if (ye) {
          fe(ye);
          return;
        }
        ie(P(void 0, !0));
      });
    });
  }), t), C), q = function(X) {
    var ie, fe = Object.create(z, (ie = {}, e(ie, B, {
      value: X,
      writable: !0
    }), e(ie, o, {
      value: null,
      writable: !0
    }), e(ie, d, {
      value: null,
      writable: !0
    }), e(ie, m, {
      value: null,
      writable: !0
    }), e(ie, w, {
      value: X._readableState.endEmitted,
      writable: !0
    }), e(ie, A, {
      value: function(j, V) {
        var ae = fe[B].read();
        ae ? (fe[S] = null, fe[o] = null, fe[d] = null, j(P(ae, !1))) : (fe[o] = j, fe[d] = V);
      },
      writable: !0
    }), ie));
    return fe[S] = null, c(X, function(ye) {
      if (ye && ye.code !== "ERR_STREAM_PREMATURE_CLOSE") {
        var j = fe[d];
        j !== null && (fe[S] = null, fe[o] = null, fe[d] = null, j(ye)), fe[m] = ye;
        return;
      }
      var V = fe[o];
      V !== null && (fe[S] = null, fe[o] = null, fe[d] = null, V(P(void 0, !0))), fe[w] = !0;
    }), X.on("readable", O.bind(null, fe)), fe;
  };
  return async_iterator = q, async_iterator;
}
var fromBrowser, hasRequiredFromBrowser;
function requireFromBrowser() {
  return hasRequiredFromBrowser || (hasRequiredFromBrowser = 1, fromBrowser = function() {
    throw new Error("Readable.from is not available in the browser");
  }), fromBrowser;
}
var _stream_readable, hasRequired_stream_readable;
function require_stream_readable() {
  if (hasRequired_stream_readable)
    return _stream_readable;
  hasRequired_stream_readable = 1, _stream_readable = V;
  var t;
  V.ReadableState = j, eventsExports.EventEmitter;
  var e = function(re, ge) {
    return re.listeners(ge).length;
  }, n = streamBrowser, a = require$$0$2.Buffer, c = (typeof commonjsGlobal < "u" ? commonjsGlobal : typeof window < "u" ? window : typeof self < "u" ? self : {}).Uint8Array || function() {
  };
  function o(ue) {
    return a.from(ue);
  }
  function d(ue) {
    return a.isBuffer(ue) || ue instanceof c;
  }
  var m = util, w;
  m && m.debuglog ? w = m.debuglog("stream") : w = function() {
  };
  var S = requireBuffer_list(), A = destroy_1, B = state, P = B.getHighWaterMark, I = errorsBrowser.codes, O = I.ERR_INVALID_ARG_TYPE, L = I.ERR_STREAM_PUSH_AFTER_EOF, C = I.ERR_METHOD_NOT_IMPLEMENTED, z = I.ERR_STREAM_UNSHIFT_AFTER_END_EVENT, q, Z, X;
  inherits_browserExports(V, n);
  var ie = A.errorOrDestroy, fe = ["error", "close", "destroy", "pause", "resume"];
  function ye(ue, re, ge) {
    if (typeof ue.prependListener == "function")
      return ue.prependListener(re, ge);
    !ue._events || !ue._events[re] ? ue.on(re, ge) : Array.isArray(ue._events[re]) ? ue._events[re].unshift(ge) : ue._events[re] = [ge, ue._events[re]];
  }
  function j(ue, re, ge) {
    t = t || require_stream_duplex(), ue = ue || {}, typeof ge != "boolean" && (ge = re instanceof t), this.objectMode = !!ue.objectMode, ge && (this.objectMode = this.objectMode || !!ue.readableObjectMode), this.highWaterMark = P(this, ue, "readableHighWaterMark", ge), this.buffer = new S(), this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, this.paused = !0, this.emitClose = ue.emitClose !== !1, this.autoDestroy = !!ue.autoDestroy, this.destroyed = !1, this.defaultEncoding = ue.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, this.encoding = null, ue.encoding && (q || (q = string_decoder.StringDecoder), this.decoder = new q(ue.encoding), this.encoding = ue.encoding);
  }
  function V(ue) {
    if (t = t || require_stream_duplex(), !(this instanceof V))
      return new V(ue);
    var re = this instanceof t;
    this._readableState = new j(ue, this, re), this.readable = !0, ue && (typeof ue.read == "function" && (this._read = ue.read), typeof ue.destroy == "function" && (this._destroy = ue.destroy)), n.call(this);
  }
  Object.defineProperty(V.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState === void 0 ? !1 : this._readableState.destroyed;
    },
    set: function(re) {
      this._readableState && (this._readableState.destroyed = re);
    }
  }), V.prototype.destroy = A.destroy, V.prototype._undestroy = A.undestroy, V.prototype._destroy = function(ue, re) {
    re(ue);
  }, V.prototype.push = function(ue, re) {
    var ge = this._readableState, Ae;
    return ge.objectMode ? Ae = !0 : typeof ue == "string" && (re = re || ge.defaultEncoding, re !== ge.encoding && (ue = a.from(ue, re), re = ""), Ae = !0), ae(this, ue, re, !1, Ae);
  }, V.prototype.unshift = function(ue) {
    return ae(this, ue, null, !0, !1);
  };
  function ae(ue, re, ge, Ae, xe) {
    w("readableAddChunk", re);
    var Ee = ue._readableState;
    if (re === null)
      Ee.reading = !1, v(ue, Ee);
    else {
      var at;
      if (xe || (at = u(Ee, re)), at)
        ie(ue, at);
      else if (Ee.objectMode || re && re.length > 0)
        if (typeof re != "string" && !Ee.objectMode && Object.getPrototypeOf(re) !== a.prototype && (re = o(re)), Ae)
          Ee.endEmitted ? ie(ue, new z()) : _(ue, Ee, re, !0);
        else if (Ee.ended)
          ie(ue, new L());
        else {
          if (Ee.destroyed)
            return !1;
          Ee.reading = !1, Ee.decoder && !ge ? (re = Ee.decoder.write(re), Ee.objectMode || re.length !== 0 ? _(ue, Ee, re, !1) : x(ue, Ee)) : _(ue, Ee, re, !1);
        }
      else
        Ae || (Ee.reading = !1, x(ue, Ee));
    }
    return !Ee.ended && (Ee.length < Ee.highWaterMark || Ee.length === 0);
  }
  function _(ue, re, ge, Ae) {
    re.flowing && re.length === 0 && !re.sync ? (re.awaitDrain = 0, ue.emit("data", ge)) : (re.length += re.objectMode ? 1 : ge.length, Ae ? re.buffer.unshift(ge) : re.buffer.push(ge), re.needReadable && $(ue)), x(ue, re);
  }
  function u(ue, re) {
    var ge;
    return !d(re) && typeof re != "string" && re !== void 0 && !ue.objectMode && (ge = new O("chunk", ["string", "Buffer", "Uint8Array"], re)), ge;
  }
  V.prototype.isPaused = function() {
    return this._readableState.flowing === !1;
  }, V.prototype.setEncoding = function(ue) {
    q || (q = string_decoder.StringDecoder);
    var re = new q(ue);
    this._readableState.decoder = re, this._readableState.encoding = this._readableState.decoder.encoding;
    for (var ge = this._readableState.buffer.head, Ae = ""; ge !== null; )
      Ae += re.write(ge.data), ge = ge.next;
    return this._readableState.buffer.clear(), Ae !== "" && this._readableState.buffer.push(Ae), this._readableState.length = Ae.length, this;
  };
  var h = 1073741824;
  function p(ue) {
    return ue >= h ? ue = h : (ue--, ue |= ue >>> 1, ue |= ue >>> 2, ue |= ue >>> 4, ue |= ue >>> 8, ue |= ue >>> 16, ue++), ue;
  }
  function y(ue, re) {
    return ue <= 0 || re.length === 0 && re.ended ? 0 : re.objectMode ? 1 : ue !== ue ? re.flowing && re.length ? re.buffer.head.data.length : re.length : (ue > re.highWaterMark && (re.highWaterMark = p(ue)), ue <= re.length ? ue : re.ended ? re.length : (re.needReadable = !0, 0));
  }
  V.prototype.read = function(ue) {
    w("read", ue), ue = parseInt(ue, 10);
    var re = this._readableState, ge = ue;
    if (ue !== 0 && (re.emittedReadable = !1), ue === 0 && re.needReadable && ((re.highWaterMark !== 0 ? re.length >= re.highWaterMark : re.length > 0) || re.ended))
      return w("read: emitReadable", re.length, re.ended), re.length === 0 && re.ended ? le(this) : $(this), null;
    if (ue = y(ue, re), ue === 0 && re.ended)
      return re.length === 0 && le(this), null;
    var Ae = re.needReadable;
    w("need readable", Ae), (re.length === 0 || re.length - ue < re.highWaterMark) && (Ae = !0, w("length less than watermark", Ae)), re.ended || re.reading ? (Ae = !1, w("reading or ended", Ae)) : Ae && (w("do read"), re.reading = !0, re.sync = !0, re.length === 0 && (re.needReadable = !0), this._read(re.highWaterMark), re.sync = !1, re.reading || (ue = y(ge, re)));
    var xe;
    return ue > 0 ? xe = Y(ue, re) : xe = null, xe === null ? (re.needReadable = re.length <= re.highWaterMark, ue = 0) : (re.length -= ue, re.awaitDrain = 0), re.length === 0 && (re.ended || (re.needReadable = !0), ge !== ue && re.ended && le(this)), xe !== null && this.emit("data", xe), xe;
  };
  function v(ue, re) {
    if (w("onEofChunk"), !re.ended) {
      if (re.decoder) {
        var ge = re.decoder.end();
        ge && ge.length && (re.buffer.push(ge), re.length += re.objectMode ? 1 : ge.length);
      }
      re.ended = !0, re.sync ? $(ue) : (re.needReadable = !1, re.emittedReadable || (re.emittedReadable = !0, E(ue)));
    }
  }
  function $(ue) {
    var re = ue._readableState;
    w("emitReadable", re.needReadable, re.emittedReadable), re.needReadable = !1, re.emittedReadable || (w("emitReadable", re.flowing), re.emittedReadable = !0, process$1.nextTick(E, ue));
  }
  function E(ue) {
    var re = ue._readableState;
    w("emitReadable_", re.destroyed, re.length, re.ended), !re.destroyed && (re.length || re.ended) && (ue.emit("readable"), re.emittedReadable = !1), re.needReadable = !re.flowing && !re.ended && re.length <= re.highWaterMark, H(ue);
  }
  function x(ue, re) {
    re.readingMore || (re.readingMore = !0, process$1.nextTick(l, ue, re));
  }
  function l(ue, re) {
    for (; !re.reading && !re.ended && (re.length < re.highWaterMark || re.flowing && re.length === 0); ) {
      var ge = re.length;
      if (w("maybeReadMore read 0"), ue.read(0), ge === re.length)
        break;
    }
    re.readingMore = !1;
  }
  V.prototype._read = function(ue) {
    ie(this, new C("_read()"));
  }, V.prototype.pipe = function(ue, re) {
    var ge = this, Ae = this._readableState;
    switch (Ae.pipesCount) {
      case 0:
        Ae.pipes = ue;
        break;
      case 1:
        Ae.pipes = [Ae.pipes, ue];
        break;
      default:
        Ae.pipes.push(ue);
        break;
    }
    Ae.pipesCount += 1, w("pipe count=%d opts=%j", Ae.pipesCount, re);
    var xe = (!re || re.end !== !1) && ue !== process$1.stdout && ue !== process$1.stderr, Ee = xe ? Re : vt;
    Ae.endEmitted ? process$1.nextTick(Ee) : ge.once("end", Ee), ue.on("unpipe", at);
    function at(ke, Ue) {
      w("onunpipe"), ke === ge && Ue && Ue.hasUnpiped === !1 && (Ue.hasUnpiped = !0, Ne());
    }
    function Re() {
      w("onend"), ue.end();
    }
    var ve = b(ge);
    ue.on("drain", ve);
    var xt = !1;
    function Ne() {
      w("cleanup"), ue.removeListener("close", Te), ue.removeListener("finish", De), ue.removeListener("drain", ve), ue.removeListener("error", wt), ue.removeListener("unpipe", at), ge.removeListener("end", Re), ge.removeListener("end", vt), ge.removeListener("data", qe), xt = !0, Ae.awaitDrain && (!ue._writableState || ue._writableState.needDrain) && ve();
    }
    ge.on("data", qe);
    function qe(ke) {
      w("ondata");
      var Ue = ue.write(ke);
      w("dest.write", Ue), Ue === !1 && ((Ae.pipesCount === 1 && Ae.pipes === ue || Ae.pipesCount > 1 && de(Ae.pipes, ue) !== -1) && !xt && (w("false write response, pause", Ae.awaitDrain), Ae.awaitDrain++), ge.pause());
    }
    function wt(ke) {
      w("onerror", ke), vt(), ue.removeListener("error", wt), e(ue, "error") === 0 && ie(ue, ke);
    }
    ye(ue, "error", wt);
    function Te() {
      ue.removeListener("finish", De), vt();
    }
    ue.once("close", Te);
    function De() {
      w("onfinish"), ue.removeListener("close", Te), vt();
    }
    ue.once("finish", De);
    function vt() {
      w("unpipe"), ge.unpipe(ue);
    }
    return ue.emit("pipe", ge), Ae.flowing || (w("pipe resume"), ge.resume()), ue;
  };
  function b(ue) {
    return function() {
      var ge = ue._readableState;
      w("pipeOnDrain", ge.awaitDrain), ge.awaitDrain && ge.awaitDrain--, ge.awaitDrain === 0 && e(ue, "data") && (ge.flowing = !0, H(ue));
    };
  }
  V.prototype.unpipe = function(ue) {
    var re = this._readableState, ge = {
      hasUnpiped: !1
    };
    if (re.pipesCount === 0)
      return this;
    if (re.pipesCount === 1)
      return ue && ue !== re.pipes ? this : (ue || (ue = re.pipes), re.pipes = null, re.pipesCount = 0, re.flowing = !1, ue && ue.emit("unpipe", this, ge), this);
    if (!ue) {
      var Ae = re.pipes, xe = re.pipesCount;
      re.pipes = null, re.pipesCount = 0, re.flowing = !1;
      for (var Ee = 0; Ee < xe; Ee++)
        Ae[Ee].emit("unpipe", this, {
          hasUnpiped: !1
        });
      return this;
    }
    var at = de(re.pipes, ue);
    return at === -1 ? this : (re.pipes.splice(at, 1), re.pipesCount -= 1, re.pipesCount === 1 && (re.pipes = re.pipes[0]), ue.emit("unpipe", this, ge), this);
  }, V.prototype.on = function(ue, re) {
    var ge = n.prototype.on.call(this, ue, re), Ae = this._readableState;
    return ue === "data" ? (Ae.readableListening = this.listenerCount("readable") > 0, Ae.flowing !== !1 && this.resume()) : ue === "readable" && !Ae.endEmitted && !Ae.readableListening && (Ae.readableListening = Ae.needReadable = !0, Ae.flowing = !1, Ae.emittedReadable = !1, w("on readable", Ae.length, Ae.reading), Ae.length ? $(this) : Ae.reading || process$1.nextTick(k, this)), ge;
  }, V.prototype.addListener = V.prototype.on, V.prototype.removeListener = function(ue, re) {
    var ge = n.prototype.removeListener.call(this, ue, re);
    return ue === "readable" && process$1.nextTick(M, this), ge;
  }, V.prototype.removeAllListeners = function(ue) {
    var re = n.prototype.removeAllListeners.apply(this, arguments);
    return (ue === "readable" || ue === void 0) && process$1.nextTick(M, this), re;
  };
  function M(ue) {
    var re = ue._readableState;
    re.readableListening = ue.listenerCount("readable") > 0, re.resumeScheduled && !re.paused ? re.flowing = !0 : ue.listenerCount("data") > 0 && ue.resume();
  }
  function k(ue) {
    w("readable nexttick read 0"), ue.read(0);
  }
  V.prototype.resume = function() {
    var ue = this._readableState;
    return ue.flowing || (w("resume"), ue.flowing = !ue.readableListening, U(this, ue)), ue.paused = !1, this;
  };
  function U(ue, re) {
    re.resumeScheduled || (re.resumeScheduled = !0, process$1.nextTick(T, ue, re));
  }
  function T(ue, re) {
    w("resume", re.reading), re.reading || ue.read(0), re.resumeScheduled = !1, ue.emit("resume"), H(ue), re.flowing && !re.reading && ue.read(0);
  }
  V.prototype.pause = function() {
    return w("call pause flowing=%j", this._readableState.flowing), this._readableState.flowing !== !1 && (w("pause"), this._readableState.flowing = !1, this.emit("pause")), this._readableState.paused = !0, this;
  };
  function H(ue) {
    var re = ue._readableState;
    for (w("flow", re.flowing); re.flowing && ue.read() !== null; )
      ;
  }
  V.prototype.wrap = function(ue) {
    var re = this, ge = this._readableState, Ae = !1;
    ue.on("end", function() {
      if (w("wrapped end"), ge.decoder && !ge.ended) {
        var at = ge.decoder.end();
        at && at.length && re.push(at);
      }
      re.push(null);
    }), ue.on("data", function(at) {
      if (w("wrapped data"), ge.decoder && (at = ge.decoder.write(at)), !(ge.objectMode && at == null) && !(!ge.objectMode && (!at || !at.length))) {
        var Re = re.push(at);
        Re || (Ae = !0, ue.pause());
      }
    });
    for (var xe in ue)
      this[xe] === void 0 && typeof ue[xe] == "function" && (this[xe] = /* @__PURE__ */ function(Re) {
        return function() {
          return ue[Re].apply(ue, arguments);
        };
      }(xe));
    for (var Ee = 0; Ee < fe.length; Ee++)
      ue.on(fe[Ee], this.emit.bind(this, fe[Ee]));
    return this._read = function(at) {
      w("wrapped _read", at), Ae && (Ae = !1, ue.resume());
    }, this;
  }, typeof Symbol == "function" && (V.prototype[Symbol.asyncIterator] = function() {
    return Z === void 0 && (Z = requireAsync_iterator()), Z(this);
  }), Object.defineProperty(V.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState.highWaterMark;
    }
  }), Object.defineProperty(V.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState && this._readableState.buffer;
    }
  }), Object.defineProperty(V.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState.flowing;
    },
    set: function(re) {
      this._readableState && (this._readableState.flowing = re);
    }
  }), V._fromList = Y, Object.defineProperty(V.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState.length;
    }
  });
  function Y(ue, re) {
    if (re.length === 0)
      return null;
    var ge;
    return re.objectMode ? ge = re.buffer.shift() : !ue || ue >= re.length ? (re.decoder ? ge = re.buffer.join("") : re.buffer.length === 1 ? ge = re.buffer.first() : ge = re.buffer.concat(re.length), re.buffer.clear()) : ge = re.buffer.consume(ue, re.decoder), ge;
  }
  function le(ue) {
    var re = ue._readableState;
    w("endReadable", re.endEmitted), re.endEmitted || (re.ended = !0, process$1.nextTick(ce, re, ue));
  }
  function ce(ue, re) {
    if (w("endReadableNT", ue.endEmitted, ue.length), !ue.endEmitted && ue.length === 0 && (ue.endEmitted = !0, re.readable = !1, re.emit("end"), ue.autoDestroy)) {
      var ge = re._writableState;
      (!ge || ge.autoDestroy && ge.finished) && re.destroy();
    }
  }
  typeof Symbol == "function" && (V.from = function(ue, re) {
    return X === void 0 && (X = requireFromBrowser()), X(V, ue, re);
  });
  function de(ue, re) {
    for (var ge = 0, Ae = ue.length; ge < Ae; ge++)
      if (ue[ge] === re)
        return ge;
    return -1;
  }
  return _stream_readable;
}
var _stream_transform = Transform$9, _require$codes$1 = errorsBrowser.codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes$1.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes$1.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes$1.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes$1.ERR_TRANSFORM_WITH_LENGTH_0, Duplex = require_stream_duplex();
inherits_browserExports(Transform$9, Duplex);
function afterTransform(t, e) {
  var n = this._transformState;
  n.transforming = !1;
  var a = n.writecb;
  if (a === null)
    return this.emit("error", new ERR_MULTIPLE_CALLBACK());
  n.writechunk = null, n.writecb = null, e != null && this.push(e), a(t);
  var c = this._readableState;
  c.reading = !1, (c.needReadable || c.length < c.highWaterMark) && this._read(c.highWaterMark);
}
function Transform$9(t) {
  if (!(this instanceof Transform$9))
    return new Transform$9(t);
  Duplex.call(this, t), this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: !1,
    transforming: !1,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }, this._readableState.needReadable = !0, this._readableState.sync = !1, t && (typeof t.transform == "function" && (this._transform = t.transform), typeof t.flush == "function" && (this._flush = t.flush)), this.on("prefinish", prefinish);
}
function prefinish() {
  var t = this;
  typeof this._flush == "function" && !this._readableState.destroyed ? this._flush(function(e, n) {
    done(t, e, n);
  }) : done(this, null, null);
}
Transform$9.prototype.push = function(t, e) {
  return this._transformState.needTransform = !1, Duplex.prototype.push.call(this, t, e);
};
Transform$9.prototype._transform = function(t, e, n) {
  n(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
};
Transform$9.prototype._write = function(t, e, n) {
  var a = this._transformState;
  if (a.writecb = n, a.writechunk = t, a.writeencoding = e, !a.transforming) {
    var c = this._readableState;
    (a.needTransform || c.needReadable || c.length < c.highWaterMark) && this._read(c.highWaterMark);
  }
};
Transform$9.prototype._read = function(t) {
  var e = this._transformState;
  e.writechunk !== null && !e.transforming ? (e.transforming = !0, this._transform(e.writechunk, e.writeencoding, e.afterTransform)) : e.needTransform = !0;
};
Transform$9.prototype._destroy = function(t, e) {
  Duplex.prototype._destroy.call(this, t, function(n) {
    e(n);
  });
};
function done(t, e, n) {
  if (e)
    return t.emit("error", e);
  if (n != null && t.push(n), t._writableState.length)
    throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (t._transformState.transforming)
    throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return t.push(null);
}
var _stream_passthrough = PassThrough, Transform$8 = _stream_transform;
inherits_browserExports(PassThrough, Transform$8);
function PassThrough(t) {
  if (!(this instanceof PassThrough))
    return new PassThrough(t);
  Transform$8.call(this, t);
}
PassThrough.prototype._transform = function(t, e, n) {
  n(null, t);
};
var eos;
function once(t) {
  var e = !1;
  return function() {
    e || (e = !0, t.apply(void 0, arguments));
  };
}
var _require$codes = errorsBrowser.codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(t) {
  if (t)
    throw t;
}
function isRequest(t) {
  return t.setHeader && typeof t.abort == "function";
}
function destroyer(t, e, n, a) {
  a = once(a);
  var c = !1;
  t.on("close", function() {
    c = !0;
  }), eos === void 0 && (eos = endOfStream), eos(t, {
    readable: e,
    writable: n
  }, function(d) {
    if (d)
      return a(d);
    c = !0, a();
  });
  var o = !1;
  return function(d) {
    if (!c && !o) {
      if (o = !0, isRequest(t))
        return t.abort();
      if (typeof t.destroy == "function")
        return t.destroy();
      a(d || new ERR_STREAM_DESTROYED("pipe"));
    }
  };
}
function call(t) {
  t();
}
function pipe(t, e) {
  return t.pipe(e);
}
function popCallback(t) {
  return !t.length || typeof t[t.length - 1] != "function" ? noop : t.pop();
}
function pipeline() {
  for (var t = arguments.length, e = new Array(t), n = 0; n < t; n++)
    e[n] = arguments[n];
  var a = popCallback(e);
  if (Array.isArray(e[0]) && (e = e[0]), e.length < 2)
    throw new ERR_MISSING_ARGS("streams");
  var c, o = e.map(function(d, m) {
    var w = m < e.length - 1, S = m > 0;
    return destroyer(d, w, S, function(A) {
      c || (c = A), A && o.forEach(call), !w && (o.forEach(call), a(c));
    });
  });
  return e.reduce(pipe);
}
var pipeline_1 = pipeline;
(function(t, e) {
  e = t.exports = require_stream_readable(), e.Stream = e, e.Readable = e, e.Writable = require_stream_writable(), e.Duplex = require_stream_duplex(), e.Transform = _stream_transform, e.PassThrough = _stream_passthrough, e.finished = endOfStream, e.pipeline = pipeline_1;
})(readableBrowser, readableBrowser.exports);
var readableBrowserExports = readableBrowser.exports, Buffer$C = safeBufferExports.Buffer, Transform$7 = readableBrowserExports.Transform, inherits$x = inherits_browserExports;
function throwIfNotStringOrBuffer(t, e) {
  if (!Buffer$C.isBuffer(t) && typeof t != "string")
    throw new TypeError(e + " must be a string or a buffer");
}
function HashBase$2(t) {
  Transform$7.call(this), this._block = Buffer$C.allocUnsafe(t), this._blockSize = t, this._blockOffset = 0, this._length = [0, 0, 0, 0], this._finalized = !1;
}
inherits$x(HashBase$2, Transform$7);
HashBase$2.prototype._transform = function(t, e, n) {
  var a = null;
  try {
    this.update(t, e);
  } catch (c) {
    a = c;
  }
  n(a);
};
HashBase$2.prototype._flush = function(t) {
  var e = null;
  try {
    this.push(this.digest());
  } catch (n) {
    e = n;
  }
  t(e);
};
HashBase$2.prototype.update = function(t, e) {
  if (throwIfNotStringOrBuffer(t, "Data"), this._finalized)
    throw new Error("Digest already called");
  Buffer$C.isBuffer(t) || (t = Buffer$C.from(t, e));
  for (var n = this._block, a = 0; this._blockOffset + t.length - a >= this._blockSize; ) {
    for (var c = this._blockOffset; c < this._blockSize; )
      n[c++] = t[a++];
    this._update(), this._blockOffset = 0;
  }
  for (; a < t.length; )
    n[this._blockOffset++] = t[a++];
  for (var o = 0, d = t.length * 8; d > 0; ++o)
    this._length[o] += d, d = this._length[o] / 4294967296 | 0, d > 0 && (this._length[o] -= 4294967296 * d);
  return this;
};
HashBase$2.prototype._update = function() {
  throw new Error("_update is not implemented");
};
HashBase$2.prototype.digest = function(t) {
  if (this._finalized)
    throw new Error("Digest already called");
  this._finalized = !0;
  var e = this._digest();
  t !== void 0 && (e = e.toString(t)), this._block.fill(0), this._blockOffset = 0;
  for (var n = 0; n < 4; ++n)
    this._length[n] = 0;
  return e;
};
HashBase$2.prototype._digest = function() {
  throw new Error("_digest is not implemented");
};
var hashBase = HashBase$2, inherits$w = inherits_browserExports, HashBase$1 = hashBase, Buffer$B = safeBufferExports.Buffer, ARRAY16$1 = new Array(16);
function MD5$3() {
  HashBase$1.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878;
}
inherits$w(MD5$3, HashBase$1);
MD5$3.prototype._update = function() {
  for (var t = ARRAY16$1, e = 0; e < 16; ++e)
    t[e] = this._block.readInt32LE(e * 4);
  var n = this._a, a = this._b, c = this._c, o = this._d;
  n = fnF(n, a, c, o, t[0], 3614090360, 7), o = fnF(o, n, a, c, t[1], 3905402710, 12), c = fnF(c, o, n, a, t[2], 606105819, 17), a = fnF(a, c, o, n, t[3], 3250441966, 22), n = fnF(n, a, c, o, t[4], 4118548399, 7), o = fnF(o, n, a, c, t[5], 1200080426, 12), c = fnF(c, o, n, a, t[6], 2821735955, 17), a = fnF(a, c, o, n, t[7], 4249261313, 22), n = fnF(n, a, c, o, t[8], 1770035416, 7), o = fnF(o, n, a, c, t[9], 2336552879, 12), c = fnF(c, o, n, a, t[10], 4294925233, 17), a = fnF(a, c, o, n, t[11], 2304563134, 22), n = fnF(n, a, c, o, t[12], 1804603682, 7), o = fnF(o, n, a, c, t[13], 4254626195, 12), c = fnF(c, o, n, a, t[14], 2792965006, 17), a = fnF(a, c, o, n, t[15], 1236535329, 22), n = fnG(n, a, c, o, t[1], 4129170786, 5), o = fnG(o, n, a, c, t[6], 3225465664, 9), c = fnG(c, o, n, a, t[11], 643717713, 14), a = fnG(a, c, o, n, t[0], 3921069994, 20), n = fnG(n, a, c, o, t[5], 3593408605, 5), o = fnG(o, n, a, c, t[10], 38016083, 9), c = fnG(c, o, n, a, t[15], 3634488961, 14), a = fnG(a, c, o, n, t[4], 3889429448, 20), n = fnG(n, a, c, o, t[9], 568446438, 5), o = fnG(o, n, a, c, t[14], 3275163606, 9), c = fnG(c, o, n, a, t[3], 4107603335, 14), a = fnG(a, c, o, n, t[8], 1163531501, 20), n = fnG(n, a, c, o, t[13], 2850285829, 5), o = fnG(o, n, a, c, t[2], 4243563512, 9), c = fnG(c, o, n, a, t[7], 1735328473, 14), a = fnG(a, c, o, n, t[12], 2368359562, 20), n = fnH(n, a, c, o, t[5], 4294588738, 4), o = fnH(o, n, a, c, t[8], 2272392833, 11), c = fnH(c, o, n, a, t[11], 1839030562, 16), a = fnH(a, c, o, n, t[14], 4259657740, 23), n = fnH(n, a, c, o, t[1], 2763975236, 4), o = fnH(o, n, a, c, t[4], 1272893353, 11), c = fnH(c, o, n, a, t[7], 4139469664, 16), a = fnH(a, c, o, n, t[10], 3200236656, 23), n = fnH(n, a, c, o, t[13], 681279174, 4), o = fnH(o, n, a, c, t[0], 3936430074, 11), c = fnH(c, o, n, a, t[3], 3572445317, 16), a = fnH(a, c, o, n, t[6], 76029189, 23), n = fnH(n, a, c, o, t[9], 3654602809, 4), o = fnH(o, n, a, c, t[12], 3873151461, 11), c = fnH(c, o, n, a, t[15], 530742520, 16), a = fnH(a, c, o, n, t[2], 3299628645, 23), n = fnI(n, a, c, o, t[0], 4096336452, 6), o = fnI(o, n, a, c, t[7], 1126891415, 10), c = fnI(c, o, n, a, t[14], 2878612391, 15), a = fnI(a, c, o, n, t[5], 4237533241, 21), n = fnI(n, a, c, o, t[12], 1700485571, 6), o = fnI(o, n, a, c, t[3], 2399980690, 10), c = fnI(c, o, n, a, t[10], 4293915773, 15), a = fnI(a, c, o, n, t[1], 2240044497, 21), n = fnI(n, a, c, o, t[8], 1873313359, 6), o = fnI(o, n, a, c, t[15], 4264355552, 10), c = fnI(c, o, n, a, t[6], 2734768916, 15), a = fnI(a, c, o, n, t[13], 1309151649, 21), n = fnI(n, a, c, o, t[4], 4149444226, 6), o = fnI(o, n, a, c, t[11], 3174756917, 10), c = fnI(c, o, n, a, t[2], 718787259, 15), a = fnI(a, c, o, n, t[9], 3951481745, 21), this._a = this._a + n | 0, this._b = this._b + a | 0, this._c = this._c + c | 0, this._d = this._d + o | 0;
};
MD5$3.prototype._digest = function() {
  this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
  var t = Buffer$B.allocUnsafe(16);
  return t.writeInt32LE(this._a, 0), t.writeInt32LE(this._b, 4), t.writeInt32LE(this._c, 8), t.writeInt32LE(this._d, 12), t;
};
function rotl$1(t, e) {
  return t << e | t >>> 32 - e;
}
function fnF(t, e, n, a, c, o, d) {
  return rotl$1(t + (e & n | ~e & a) + c + o | 0, d) + e | 0;
}
function fnG(t, e, n, a, c, o, d) {
  return rotl$1(t + (e & a | n & ~a) + c + o | 0, d) + e | 0;
}
function fnH(t, e, n, a, c, o, d) {
  return rotl$1(t + (e ^ n ^ a) + c + o | 0, d) + e | 0;
}
function fnI(t, e, n, a, c, o, d) {
  return rotl$1(t + (n ^ (e | ~a)) + c + o | 0, d) + e | 0;
}
var md5_js = MD5$3, Buffer$A = require$$0$2.Buffer, inherits$v = inherits_browserExports, HashBase = hashBase, ARRAY16 = new Array(16), zl = [
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  7,
  4,
  13,
  1,
  10,
  6,
  15,
  3,
  12,
  0,
  9,
  5,
  2,
  14,
  11,
  8,
  3,
  10,
  14,
  4,
  9,
  15,
  8,
  1,
  2,
  7,
  0,
  6,
  13,
  11,
  5,
  12,
  1,
  9,
  11,
  10,
  0,
  8,
  12,
  4,
  13,
  3,
  7,
  15,
  14,
  5,
  6,
  2,
  4,
  0,
  5,
  9,
  7,
  12,
  2,
  10,
  14,
  1,
  3,
  8,
  11,
  6,
  15,
  13
], zr = [
  5,
  14,
  7,
  0,
  9,
  2,
  11,
  4,
  13,
  6,
  15,
  8,
  1,
  10,
  3,
  12,
  6,
  11,
  3,
  7,
  0,
  13,
  5,
  10,
  14,
  15,
  8,
  12,
  4,
  9,
  1,
  2,
  15,
  5,
  1,
  3,
  7,
  14,
  6,
  9,
  11,
  8,
  12,
  2,
  10,
  0,
  4,
  13,
  8,
  6,
  4,
  1,
  3,
  11,
  15,
  0,
  5,
  12,
  2,
  13,
  9,
  7,
  10,
  14,
  12,
  15,
  10,
  4,
  1,
  5,
  8,
  7,
  6,
  2,
  13,
  14,
  0,
  3,
  9,
  11
], sl = [
  11,
  14,
  15,
  12,
  5,
  8,
  7,
  9,
  11,
  13,
  14,
  15,
  6,
  7,
  9,
  8,
  7,
  6,
  8,
  13,
  11,
  9,
  7,
  15,
  7,
  12,
  15,
  9,
  11,
  7,
  13,
  12,
  11,
  13,
  6,
  7,
  14,
  9,
  13,
  15,
  14,
  8,
  13,
  6,
  5,
  12,
  7,
  5,
  11,
  12,
  14,
  15,
  14,
  15,
  9,
  8,
  9,
  14,
  5,
  6,
  8,
  6,
  5,
  12,
  9,
  15,
  5,
  11,
  6,
  8,
  13,
  12,
  5,
  12,
  13,
  14,
  11,
  8,
  5,
  6
], sr = [
  8,
  9,
  9,
  11,
  13,
  15,
  15,
  5,
  7,
  7,
  8,
  11,
  14,
  14,
  12,
  6,
  9,
  13,
  15,
  7,
  12,
  8,
  9,
  11,
  7,
  7,
  12,
  7,
  6,
  15,
  13,
  11,
  9,
  7,
  15,
  11,
  8,
  6,
  6,
  14,
  12,
  13,
  5,
  14,
  13,
  13,
  7,
  5,
  15,
  5,
  8,
  11,
  14,
  14,
  6,
  14,
  6,
  9,
  12,
  9,
  12,
  5,
  15,
  8,
  8,
  5,
  12,
  9,
  12,
  5,
  14,
  6,
  8,
  13,
  6,
  5,
  15,
  13,
  11,
  11
], hl = [0, 1518500249, 1859775393, 2400959708, 2840853838], hr = [1352829926, 1548603684, 1836072691, 2053994217, 0];
function RIPEMD160$4() {
  HashBase.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520;
}
inherits$v(RIPEMD160$4, HashBase);
RIPEMD160$4.prototype._update = function() {
  for (var t = ARRAY16, e = 0; e < 16; ++e)
    t[e] = this._block.readInt32LE(e * 4);
  for (var n = this._a | 0, a = this._b | 0, c = this._c | 0, o = this._d | 0, d = this._e | 0, m = this._a | 0, w = this._b | 0, S = this._c | 0, A = this._d | 0, B = this._e | 0, P = 0; P < 80; P += 1) {
    var I, O;
    P < 16 ? (I = fn1(n, a, c, o, d, t[zl[P]], hl[0], sl[P]), O = fn5(m, w, S, A, B, t[zr[P]], hr[0], sr[P])) : P < 32 ? (I = fn2(n, a, c, o, d, t[zl[P]], hl[1], sl[P]), O = fn4(m, w, S, A, B, t[zr[P]], hr[1], sr[P])) : P < 48 ? (I = fn3(n, a, c, o, d, t[zl[P]], hl[2], sl[P]), O = fn3(m, w, S, A, B, t[zr[P]], hr[2], sr[P])) : P < 64 ? (I = fn4(n, a, c, o, d, t[zl[P]], hl[3], sl[P]), O = fn2(m, w, S, A, B, t[zr[P]], hr[3], sr[P])) : (I = fn5(n, a, c, o, d, t[zl[P]], hl[4], sl[P]), O = fn1(m, w, S, A, B, t[zr[P]], hr[4], sr[P])), n = d, d = o, o = rotl(c, 10), c = a, a = I, m = B, B = A, A = rotl(S, 10), S = w, w = O;
  }
  var L = this._b + c + A | 0;
  this._b = this._c + o + B | 0, this._c = this._d + d + m | 0, this._d = this._e + n + w | 0, this._e = this._a + a + S | 0, this._a = L;
};
RIPEMD160$4.prototype._digest = function() {
  this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
  var t = Buffer$A.alloc ? Buffer$A.alloc(20) : new Buffer$A(20);
  return t.writeInt32LE(this._a, 0), t.writeInt32LE(this._b, 4), t.writeInt32LE(this._c, 8), t.writeInt32LE(this._d, 12), t.writeInt32LE(this._e, 16), t;
};
function rotl(t, e) {
  return t << e | t >>> 32 - e;
}
function fn1(t, e, n, a, c, o, d, m) {
  return rotl(t + (e ^ n ^ a) + o + d | 0, m) + c | 0;
}
function fn2(t, e, n, a, c, o, d, m) {
  return rotl(t + (e & n | ~e & a) + o + d | 0, m) + c | 0;
}
function fn3(t, e, n, a, c, o, d, m) {
  return rotl(t + ((e | ~n) ^ a) + o + d | 0, m) + c | 0;
}
function fn4(t, e, n, a, c, o, d, m) {
  return rotl(t + (e & a | n & ~a) + o + d | 0, m) + c | 0;
}
function fn5(t, e, n, a, c, o, d, m) {
  return rotl(t + (e ^ (n | ~a)) + o + d | 0, m) + c | 0;
}
var ripemd160$1 = RIPEMD160$4, sha_js = { exports: {} }, Buffer$z = safeBufferExports.Buffer;
function Hash$9(t, e) {
  this._block = Buffer$z.alloc(t), this._finalSize = e, this._blockSize = t, this._len = 0;
}
Hash$9.prototype.update = function(t, e) {
  typeof t == "string" && (e = e || "utf8", t = Buffer$z.from(t, e));
  for (var n = this._block, a = this._blockSize, c = t.length, o = this._len, d = 0; d < c; ) {
    for (var m = o % a, w = Math.min(c - d, a - m), S = 0; S < w; S++)
      n[m + S] = t[d + S];
    o += w, d += w, o % a === 0 && this._update(n);
  }
  return this._len += c, this;
};
Hash$9.prototype.digest = function(t) {
  var e = this._len % this._blockSize;
  this._block[e] = 128, this._block.fill(0, e + 1), e >= this._finalSize && (this._update(this._block), this._block.fill(0));
  var n = this._len * 8;
  if (n <= 4294967295)
    this._block.writeUInt32BE(n, this._blockSize - 4);
  else {
    var a = (n & 4294967295) >>> 0, c = (n - a) / 4294967296;
    this._block.writeUInt32BE(c, this._blockSize - 8), this._block.writeUInt32BE(a, this._blockSize - 4);
  }
  this._update(this._block);
  var o = this._hash();
  return t ? o.toString(t) : o;
};
Hash$9.prototype._update = function() {
  throw new Error("_update must be implemented by subclass");
};
var hash$7 = Hash$9, inherits$u = inherits_browserExports, Hash$8 = hash$7, Buffer$y = safeBufferExports.Buffer, K$4 = [
  1518500249,
  1859775393,
  -1894007588,
  -899497514
], W$5 = new Array(80);
function Sha() {
  this.init(), this._w = W$5, Hash$8.call(this, 64, 56);
}
inherits$u(Sha, Hash$8);
Sha.prototype.init = function() {
  return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
};
function rotl5$1(t) {
  return t << 5 | t >>> 27;
}
function rotl30$1(t) {
  return t << 30 | t >>> 2;
}
function ft$1(t, e, n, a) {
  return t === 0 ? e & n | ~e & a : t === 2 ? e & n | e & a | n & a : e ^ n ^ a;
}
Sha.prototype._update = function(t) {
  for (var e = this._w, n = this._a | 0, a = this._b | 0, c = this._c | 0, o = this._d | 0, d = this._e | 0, m = 0; m < 16; ++m)
    e[m] = t.readInt32BE(m * 4);
  for (; m < 80; ++m)
    e[m] = e[m - 3] ^ e[m - 8] ^ e[m - 14] ^ e[m - 16];
  for (var w = 0; w < 80; ++w) {
    var S = ~~(w / 20), A = rotl5$1(n) + ft$1(S, a, c, o) + d + e[w] + K$4[S] | 0;
    d = o, o = c, c = rotl30$1(a), a = n, n = A;
  }
  this._a = n + this._a | 0, this._b = a + this._b | 0, this._c = c + this._c | 0, this._d = o + this._d | 0, this._e = d + this._e | 0;
};
Sha.prototype._hash = function() {
  var t = Buffer$y.allocUnsafe(20);
  return t.writeInt32BE(this._a | 0, 0), t.writeInt32BE(this._b | 0, 4), t.writeInt32BE(this._c | 0, 8), t.writeInt32BE(this._d | 0, 12), t.writeInt32BE(this._e | 0, 16), t;
};
var sha$4 = Sha, inherits$t = inherits_browserExports, Hash$7 = hash$7, Buffer$x = safeBufferExports.Buffer, K$3 = [
  1518500249,
  1859775393,
  -1894007588,
  -899497514
], W$4 = new Array(80);
function Sha1() {
  this.init(), this._w = W$4, Hash$7.call(this, 64, 56);
}
inherits$t(Sha1, Hash$7);
Sha1.prototype.init = function() {
  return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
};
function rotl1(t) {
  return t << 1 | t >>> 31;
}
function rotl5(t) {
  return t << 5 | t >>> 27;
}
function rotl30(t) {
  return t << 30 | t >>> 2;
}
function ft(t, e, n, a) {
  return t === 0 ? e & n | ~e & a : t === 2 ? e & n | e & a | n & a : e ^ n ^ a;
}
Sha1.prototype._update = function(t) {
  for (var e = this._w, n = this._a | 0, a = this._b | 0, c = this._c | 0, o = this._d | 0, d = this._e | 0, m = 0; m < 16; ++m)
    e[m] = t.readInt32BE(m * 4);
  for (; m < 80; ++m)
    e[m] = rotl1(e[m - 3] ^ e[m - 8] ^ e[m - 14] ^ e[m - 16]);
  for (var w = 0; w < 80; ++w) {
    var S = ~~(w / 20), A = rotl5(n) + ft(S, a, c, o) + d + e[w] + K$3[S] | 0;
    d = o, o = c, c = rotl30(a), a = n, n = A;
  }
  this._a = n + this._a | 0, this._b = a + this._b | 0, this._c = c + this._c | 0, this._d = o + this._d | 0, this._e = d + this._e | 0;
};
Sha1.prototype._hash = function() {
  var t = Buffer$x.allocUnsafe(20);
  return t.writeInt32BE(this._a | 0, 0), t.writeInt32BE(this._b | 0, 4), t.writeInt32BE(this._c | 0, 8), t.writeInt32BE(this._d | 0, 12), t.writeInt32BE(this._e | 0, 16), t;
};
var sha1$1 = Sha1, inherits$s = inherits_browserExports, Hash$6 = hash$7, Buffer$w = safeBufferExports.Buffer, K$2 = [
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
], W$3 = new Array(64);
function Sha256$1() {
  this.init(), this._w = W$3, Hash$6.call(this, 64, 56);
}
inherits$s(Sha256$1, Hash$6);
Sha256$1.prototype.init = function() {
  return this._a = 1779033703, this._b = 3144134277, this._c = 1013904242, this._d = 2773480762, this._e = 1359893119, this._f = 2600822924, this._g = 528734635, this._h = 1541459225, this;
};
function ch(t, e, n) {
  return n ^ t & (e ^ n);
}
function maj$1(t, e, n) {
  return t & e | n & (t | e);
}
function sigma0$1(t) {
  return (t >>> 2 | t << 30) ^ (t >>> 13 | t << 19) ^ (t >>> 22 | t << 10);
}
function sigma1$1(t) {
  return (t >>> 6 | t << 26) ^ (t >>> 11 | t << 21) ^ (t >>> 25 | t << 7);
}
function gamma0(t) {
  return (t >>> 7 | t << 25) ^ (t >>> 18 | t << 14) ^ t >>> 3;
}
function gamma1(t) {
  return (t >>> 17 | t << 15) ^ (t >>> 19 | t << 13) ^ t >>> 10;
}
Sha256$1.prototype._update = function(t) {
  for (var e = this._w, n = this._a | 0, a = this._b | 0, c = this._c | 0, o = this._d | 0, d = this._e | 0, m = this._f | 0, w = this._g | 0, S = this._h | 0, A = 0; A < 16; ++A)
    e[A] = t.readInt32BE(A * 4);
  for (; A < 64; ++A)
    e[A] = gamma1(e[A - 2]) + e[A - 7] + gamma0(e[A - 15]) + e[A - 16] | 0;
  for (var B = 0; B < 64; ++B) {
    var P = S + sigma1$1(d) + ch(d, m, w) + K$2[B] + e[B] | 0, I = sigma0$1(n) + maj$1(n, a, c) | 0;
    S = w, w = m, m = d, d = o + P | 0, o = c, c = a, a = n, n = P + I | 0;
  }
  this._a = n + this._a | 0, this._b = a + this._b | 0, this._c = c + this._c | 0, this._d = o + this._d | 0, this._e = d + this._e | 0, this._f = m + this._f | 0, this._g = w + this._g | 0, this._h = S + this._h | 0;
};
Sha256$1.prototype._hash = function() {
  var t = Buffer$w.allocUnsafe(32);
  return t.writeInt32BE(this._a, 0), t.writeInt32BE(this._b, 4), t.writeInt32BE(this._c, 8), t.writeInt32BE(this._d, 12), t.writeInt32BE(this._e, 16), t.writeInt32BE(this._f, 20), t.writeInt32BE(this._g, 24), t.writeInt32BE(this._h, 28), t;
};
var sha256$5 = Sha256$1, inherits$r = inherits_browserExports, Sha256 = sha256$5, Hash$5 = hash$7, Buffer$v = safeBufferExports.Buffer, W$2 = new Array(64);
function Sha224() {
  this.init(), this._w = W$2, Hash$5.call(this, 64, 56);
}
inherits$r(Sha224, Sha256);
Sha224.prototype.init = function() {
  return this._a = 3238371032, this._b = 914150663, this._c = 812702999, this._d = 4144912697, this._e = 4290775857, this._f = 1750603025, this._g = 1694076839, this._h = 3204075428, this;
};
Sha224.prototype._hash = function() {
  var t = Buffer$v.allocUnsafe(28);
  return t.writeInt32BE(this._a, 0), t.writeInt32BE(this._b, 4), t.writeInt32BE(this._c, 8), t.writeInt32BE(this._d, 12), t.writeInt32BE(this._e, 16), t.writeInt32BE(this._f, 20), t.writeInt32BE(this._g, 24), t;
};
var sha224$1 = Sha224, inherits$q = inherits_browserExports, Hash$4 = hash$7, Buffer$u = safeBufferExports.Buffer, K$1 = [
  1116352408,
  3609767458,
  1899447441,
  602891725,
  3049323471,
  3964484399,
  3921009573,
  2173295548,
  961987163,
  4081628472,
  1508970993,
  3053834265,
  2453635748,
  2937671579,
  2870763221,
  3664609560,
  3624381080,
  2734883394,
  310598401,
  1164996542,
  607225278,
  1323610764,
  1426881987,
  3590304994,
  1925078388,
  4068182383,
  2162078206,
  991336113,
  2614888103,
  633803317,
  3248222580,
  3479774868,
  3835390401,
  2666613458,
  4022224774,
  944711139,
  264347078,
  2341262773,
  604807628,
  2007800933,
  770255983,
  1495990901,
  1249150122,
  1856431235,
  1555081692,
  3175218132,
  1996064986,
  2198950837,
  2554220882,
  3999719339,
  2821834349,
  766784016,
  2952996808,
  2566594879,
  3210313671,
  3203337956,
  3336571891,
  1034457026,
  3584528711,
  2466948901,
  113926993,
  3758326383,
  338241895,
  168717936,
  666307205,
  1188179964,
  773529912,
  1546045734,
  1294757372,
  1522805485,
  1396182291,
  2643833823,
  1695183700,
  2343527390,
  1986661051,
  1014477480,
  2177026350,
  1206759142,
  2456956037,
  344077627,
  2730485921,
  1290863460,
  2820302411,
  3158454273,
  3259730800,
  3505952657,
  3345764771,
  106217008,
  3516065817,
  3606008344,
  3600352804,
  1432725776,
  4094571909,
  1467031594,
  275423344,
  851169720,
  430227734,
  3100823752,
  506948616,
  1363258195,
  659060556,
  3750685593,
  883997877,
  3785050280,
  958139571,
  3318307427,
  1322822218,
  3812723403,
  1537002063,
  2003034995,
  1747873779,
  3602036899,
  1955562222,
  1575990012,
  2024104815,
  1125592928,
  2227730452,
  2716904306,
  2361852424,
  442776044,
  2428436474,
  593698344,
  2756734187,
  3733110249,
  3204031479,
  2999351573,
  3329325298,
  3815920427,
  3391569614,
  3928383900,
  3515267271,
  566280711,
  3940187606,
  3454069534,
  4118630271,
  4000239992,
  116418474,
  1914138554,
  174292421,
  2731055270,
  289380356,
  3203993006,
  460393269,
  320620315,
  685471733,
  587496836,
  852142971,
  1086792851,
  1017036298,
  365543100,
  1126000580,
  2618297676,
  1288033470,
  3409855158,
  1501505948,
  4234509866,
  1607167915,
  987167468,
  1816402316,
  1246189591
], W$1 = new Array(160);
function Sha512() {
  this.init(), this._w = W$1, Hash$4.call(this, 128, 112);
}
inherits$q(Sha512, Hash$4);
Sha512.prototype.init = function() {
  return this._ah = 1779033703, this._bh = 3144134277, this._ch = 1013904242, this._dh = 2773480762, this._eh = 1359893119, this._fh = 2600822924, this._gh = 528734635, this._hh = 1541459225, this._al = 4089235720, this._bl = 2227873595, this._cl = 4271175723, this._dl = 1595750129, this._el = 2917565137, this._fl = 725511199, this._gl = 4215389547, this._hl = 327033209, this;
};
function Ch(t, e, n) {
  return n ^ t & (e ^ n);
}
function maj(t, e, n) {
  return t & e | n & (t | e);
}
function sigma0(t, e) {
  return (t >>> 28 | e << 4) ^ (e >>> 2 | t << 30) ^ (e >>> 7 | t << 25);
}
function sigma1(t, e) {
  return (t >>> 14 | e << 18) ^ (t >>> 18 | e << 14) ^ (e >>> 9 | t << 23);
}
function Gamma0(t, e) {
  return (t >>> 1 | e << 31) ^ (t >>> 8 | e << 24) ^ t >>> 7;
}
function Gamma0l(t, e) {
  return (t >>> 1 | e << 31) ^ (t >>> 8 | e << 24) ^ (t >>> 7 | e << 25);
}
function Gamma1(t, e) {
  return (t >>> 19 | e << 13) ^ (e >>> 29 | t << 3) ^ t >>> 6;
}
function Gamma1l(t, e) {
  return (t >>> 19 | e << 13) ^ (e >>> 29 | t << 3) ^ (t >>> 6 | e << 26);
}
function getCarry(t, e) {
  return t >>> 0 < e >>> 0 ? 1 : 0;
}
Sha512.prototype._update = function(t) {
  for (var e = this._w, n = this._ah | 0, a = this._bh | 0, c = this._ch | 0, o = this._dh | 0, d = this._eh | 0, m = this._fh | 0, w = this._gh | 0, S = this._hh | 0, A = this._al | 0, B = this._bl | 0, P = this._cl | 0, I = this._dl | 0, O = this._el | 0, L = this._fl | 0, C = this._gl | 0, z = this._hl | 0, q = 0; q < 32; q += 2)
    e[q] = t.readInt32BE(q * 4), e[q + 1] = t.readInt32BE(q * 4 + 4);
  for (; q < 160; q += 2) {
    var Z = e[q - 30], X = e[q - 15 * 2 + 1], ie = Gamma0(Z, X), fe = Gamma0l(X, Z);
    Z = e[q - 2 * 2], X = e[q - 2 * 2 + 1];
    var ye = Gamma1(Z, X), j = Gamma1l(X, Z), V = e[q - 7 * 2], ae = e[q - 7 * 2 + 1], _ = e[q - 16 * 2], u = e[q - 16 * 2 + 1], h = fe + ae | 0, p = ie + V + getCarry(h, fe) | 0;
    h = h + j | 0, p = p + ye + getCarry(h, j) | 0, h = h + u | 0, p = p + _ + getCarry(h, u) | 0, e[q] = p, e[q + 1] = h;
  }
  for (var y = 0; y < 160; y += 2) {
    p = e[y], h = e[y + 1];
    var v = maj(n, a, c), $ = maj(A, B, P), E = sigma0(n, A), x = sigma0(A, n), l = sigma1(d, O), b = sigma1(O, d), M = K$1[y], k = K$1[y + 1], U = Ch(d, m, w), T = Ch(O, L, C), H = z + b | 0, Y = S + l + getCarry(H, z) | 0;
    H = H + T | 0, Y = Y + U + getCarry(H, T) | 0, H = H + k | 0, Y = Y + M + getCarry(H, k) | 0, H = H + h | 0, Y = Y + p + getCarry(H, h) | 0;
    var le = x + $ | 0, ce = E + v + getCarry(le, x) | 0;
    S = w, z = C, w = m, C = L, m = d, L = O, O = I + H | 0, d = o + Y + getCarry(O, I) | 0, o = c, I = P, c = a, P = B, a = n, B = A, A = H + le | 0, n = Y + ce + getCarry(A, H) | 0;
  }
  this._al = this._al + A | 0, this._bl = this._bl + B | 0, this._cl = this._cl + P | 0, this._dl = this._dl + I | 0, this._el = this._el + O | 0, this._fl = this._fl + L | 0, this._gl = this._gl + C | 0, this._hl = this._hl + z | 0, this._ah = this._ah + n + getCarry(this._al, A) | 0, this._bh = this._bh + a + getCarry(this._bl, B) | 0, this._ch = this._ch + c + getCarry(this._cl, P) | 0, this._dh = this._dh + o + getCarry(this._dl, I) | 0, this._eh = this._eh + d + getCarry(this._el, O) | 0, this._fh = this._fh + m + getCarry(this._fl, L) | 0, this._gh = this._gh + w + getCarry(this._gl, C) | 0, this._hh = this._hh + S + getCarry(this._hl, z) | 0;
};
Sha512.prototype._hash = function() {
  var t = Buffer$u.allocUnsafe(64);
  function e(n, a, c) {
    t.writeInt32BE(n, c), t.writeInt32BE(a, c + 4);
  }
  return e(this._ah, this._al, 0), e(this._bh, this._bl, 8), e(this._ch, this._cl, 16), e(this._dh, this._dl, 24), e(this._eh, this._el, 32), e(this._fh, this._fl, 40), e(this._gh, this._gl, 48), e(this._hh, this._hl, 56), t;
};
var sha512$4 = Sha512, inherits$p = inherits_browserExports, SHA512$5 = sha512$4, Hash$3 = hash$7, Buffer$t = safeBufferExports.Buffer, W = new Array(160);
function Sha384() {
  this.init(), this._w = W, Hash$3.call(this, 128, 112);
}
inherits$p(Sha384, SHA512$5);
Sha384.prototype.init = function() {
  return this._ah = 3418070365, this._bh = 1654270250, this._ch = 2438529370, this._dh = 355462360, this._eh = 1731405415, this._fh = 2394180231, this._gh = 3675008525, this._hh = 1203062813, this._al = 3238371032, this._bl = 914150663, this._cl = 812702999, this._dl = 4144912697, this._el = 4290775857, this._fl = 1750603025, this._gl = 1694076839, this._hl = 3204075428, this;
};
Sha384.prototype._hash = function() {
  var t = Buffer$t.allocUnsafe(48);
  function e(n, a, c) {
    t.writeInt32BE(n, c), t.writeInt32BE(a, c + 4);
  }
  return e(this._ah, this._al, 0), e(this._bh, this._bl, 8), e(this._ch, this._cl, 16), e(this._dh, this._dl, 24), e(this._eh, this._el, 32), e(this._fh, this._fl, 40), t;
};
var sha384$1 = Sha384, exports = sha_js.exports = function(e) {
  e = e.toLowerCase();
  var n = exports[e];
  if (!n)
    throw new Error(e + " is not supported (we accept pull requests)");
  return new n();
};
exports.sha = sha$4;
exports.sha1 = sha1$1;
exports.sha224 = sha224$1;
exports.sha256 = sha256$5;
exports.sha384 = sha384$1;
exports.sha512 = sha512$4;
var sha_jsExports = sha_js.exports, streamBrowserify = Stream$1, EE = eventsExports.EventEmitter, inherits$o = inherits_browserExports;
inherits$o(Stream$1, EE);
Stream$1.Readable = require_stream_readable();
Stream$1.Writable = require_stream_writable();
Stream$1.Duplex = require_stream_duplex();
Stream$1.Transform = _stream_transform;
Stream$1.PassThrough = _stream_passthrough;
Stream$1.finished = endOfStream;
Stream$1.pipeline = pipeline_1;
Stream$1.Stream = Stream$1;
function Stream$1() {
  EE.call(this);
}
Stream$1.prototype.pipe = function(t, e) {
  var n = this;
  function a(A) {
    t.writable && t.write(A) === !1 && n.pause && n.pause();
  }
  n.on("data", a);
  function c() {
    n.readable && n.resume && n.resume();
  }
  t.on("drain", c), !t._isStdio && (!e || e.end !== !1) && (n.on("end", d), n.on("close", m));
  var o = !1;
  function d() {
    o || (o = !0, t.end());
  }
  function m() {
    o || (o = !0, typeof t.destroy == "function" && t.destroy());
  }
  function w(A) {
    if (S(), EE.listenerCount(this, "error") === 0)
      throw A;
  }
  n.on("error", w), t.on("error", w);
  function S() {
    n.removeListener("data", a), t.removeListener("drain", c), n.removeListener("end", d), n.removeListener("close", m), n.removeListener("error", w), t.removeListener("error", w), n.removeListener("end", S), n.removeListener("close", S), t.removeListener("close", S);
  }
  return n.on("end", S), n.on("close", S), t.on("close", S), t.emit("pipe", n), t;
};
var Buffer$s = safeBufferExports.Buffer, Transform$6 = streamBrowserify.Transform, StringDecoder = string_decoder.StringDecoder, inherits$n = inherits_browserExports;
function CipherBase$1(t) {
  Transform$6.call(this), this.hashMode = typeof t == "string", this.hashMode ? this[t] = this._finalOrDigest : this.final = this._finalOrDigest, this._final && (this.__final = this._final, this._final = null), this._decoder = null, this._encoding = null;
}
inherits$n(CipherBase$1, Transform$6);
CipherBase$1.prototype.update = function(t, e, n) {
  typeof t == "string" && (t = Buffer$s.from(t, e));
  var a = this._update(t);
  return this.hashMode ? this : (n && (a = this._toString(a, n)), a);
};
CipherBase$1.prototype.setAutoPadding = function() {
};
CipherBase$1.prototype.getAuthTag = function() {
  throw new Error("trying to get auth tag in unsupported state");
};
CipherBase$1.prototype.setAuthTag = function() {
  throw new Error("trying to set auth tag in unsupported state");
};
CipherBase$1.prototype.setAAD = function() {
  throw new Error("trying to set aad in unsupported state");
};
CipherBase$1.prototype._transform = function(t, e, n) {
  var a;
  try {
    this.hashMode ? this._update(t) : this.push(this._update(t));
  } catch (c) {
    a = c;
  } finally {
    n(a);
  }
};
CipherBase$1.prototype._flush = function(t) {
  var e;
  try {
    this.push(this.__final());
  } catch (n) {
    e = n;
  }
  t(e);
};
CipherBase$1.prototype._finalOrDigest = function(t) {
  var e = this.__final() || Buffer$s.alloc(0);
  return t && (e = this._toString(e, t, !0)), e;
};
CipherBase$1.prototype._toString = function(t, e, n) {
  if (this._decoder || (this._decoder = new StringDecoder(e), this._encoding = e), this._encoding !== e)
    throw new Error("can't switch encodings");
  var a = this._decoder.write(t);
  return n && (a += this._decoder.end()), a;
};
var cipherBase = CipherBase$1, inherits$m = inherits_browserExports, MD5$2 = md5_js, RIPEMD160$3 = ripemd160$1, sha$3 = sha_jsExports, Base$5 = cipherBase;
function Hash$2(t) {
  Base$5.call(this, "digest"), this._hash = t;
}
inherits$m(Hash$2, Base$5);
Hash$2.prototype._update = function(t) {
  this._hash.update(t);
};
Hash$2.prototype._final = function() {
  return this._hash.digest();
};
var browser$c = function(e) {
  return e = e.toLowerCase(), e === "md5" ? new MD5$2() : e === "rmd160" || e === "ripemd160" ? new RIPEMD160$3() : new Hash$2(sha$3(e));
}, inherits$l = inherits_browserExports, Buffer$r = safeBufferExports.Buffer, Base$4 = cipherBase, ZEROS$2 = Buffer$r.alloc(128), blocksize = 64;
function Hmac$3(t, e) {
  Base$4.call(this, "digest"), typeof e == "string" && (e = Buffer$r.from(e)), this._alg = t, this._key = e, e.length > blocksize ? e = t(e) : e.length < blocksize && (e = Buffer$r.concat([e, ZEROS$2], blocksize));
  for (var n = this._ipad = Buffer$r.allocUnsafe(blocksize), a = this._opad = Buffer$r.allocUnsafe(blocksize), c = 0; c < blocksize; c++)
    n[c] = e[c] ^ 54, a[c] = e[c] ^ 92;
  this._hash = [n];
}
inherits$l(Hmac$3, Base$4);
Hmac$3.prototype._update = function(t) {
  this._hash.push(t);
};
Hmac$3.prototype._final = function() {
  var t = this._alg(Buffer$r.concat(this._hash));
  return this._alg(Buffer$r.concat([this._opad, t]));
};
var legacy = Hmac$3, MD5$1 = md5_js, md5$3 = function(t) {
  return new MD5$1().update(t).digest();
}, inherits$k = inherits_browserExports, Legacy = legacy, Base$3 = cipherBase, Buffer$q = safeBufferExports.Buffer, md5$2 = md5$3, RIPEMD160$2 = ripemd160$1, sha$2 = sha_jsExports, ZEROS$1 = Buffer$q.alloc(128);
function Hmac$2(t, e) {
  Base$3.call(this, "digest"), typeof e == "string" && (e = Buffer$q.from(e));
  var n = t === "sha512" || t === "sha384" ? 128 : 64;
  if (this._alg = t, this._key = e, e.length > n) {
    var a = t === "rmd160" ? new RIPEMD160$2() : sha$2(t);
    e = a.update(e).digest();
  } else
    e.length < n && (e = Buffer$q.concat([e, ZEROS$1], n));
  for (var c = this._ipad = Buffer$q.allocUnsafe(n), o = this._opad = Buffer$q.allocUnsafe(n), d = 0; d < n; d++)
    c[d] = e[d] ^ 54, o[d] = e[d] ^ 92;
  this._hash = t === "rmd160" ? new RIPEMD160$2() : sha$2(t), this._hash.update(c);
}
inherits$k(Hmac$2, Base$3);
Hmac$2.prototype._update = function(t) {
  this._hash.update(t);
};
Hmac$2.prototype._final = function() {
  var t = this._hash.digest(), e = this._alg === "rmd160" ? new RIPEMD160$2() : sha$2(this._alg);
  return e.update(this._opad).update(t).digest();
};
var browser$b = function(e, n) {
  return e = e.toLowerCase(), e === "rmd160" || e === "ripemd160" ? new Hmac$2("rmd160", n) : e === "md5" ? new Legacy(md5$2, n) : new Hmac$2(e, n);
};
const sha224WithRSAEncryption = {
  sign: "rsa",
  hash: "sha224",
  id: "302d300d06096086480165030402040500041c"
}, sha256WithRSAEncryption = {
  sign: "rsa",
  hash: "sha256",
  id: "3031300d060960864801650304020105000420"
}, sha384WithRSAEncryption = {
  sign: "rsa",
  hash: "sha384",
  id: "3041300d060960864801650304020205000430"
}, sha512WithRSAEncryption = {
  sign: "rsa",
  hash: "sha512",
  id: "3051300d060960864801650304020305000440"
}, sha256$4 = {
  sign: "ecdsa",
  hash: "sha256",
  id: ""
}, sha224 = {
  sign: "ecdsa",
  hash: "sha224",
  id: ""
}, sha384 = {
  sign: "ecdsa",
  hash: "sha384",
  id: ""
}, sha512$3 = {
  sign: "ecdsa",
  hash: "sha512",
  id: ""
}, DSA = {
  sign: "dsa",
  hash: "sha1",
  id: ""
}, ripemd160WithRSA = {
  sign: "rsa",
  hash: "rmd160",
  id: "3021300906052b2403020105000414"
}, md5WithRSAEncryption = {
  sign: "rsa",
  hash: "md5",
  id: "3020300c06082a864886f70d020505000410"
}, require$$6 = {
  sha224WithRSAEncryption,
  "RSA-SHA224": {
    sign: "ecdsa/rsa",
    hash: "sha224",
    id: "302d300d06096086480165030402040500041c"
  },
  sha256WithRSAEncryption,
  "RSA-SHA256": {
    sign: "ecdsa/rsa",
    hash: "sha256",
    id: "3031300d060960864801650304020105000420"
  },
  sha384WithRSAEncryption,
  "RSA-SHA384": {
    sign: "ecdsa/rsa",
    hash: "sha384",
    id: "3041300d060960864801650304020205000430"
  },
  sha512WithRSAEncryption,
  "RSA-SHA512": {
    sign: "ecdsa/rsa",
    hash: "sha512",
    id: "3051300d060960864801650304020305000440"
  },
  "RSA-SHA1": {
    sign: "rsa",
    hash: "sha1",
    id: "3021300906052b0e03021a05000414"
  },
  "ecdsa-with-SHA1": {
    sign: "ecdsa",
    hash: "sha1",
    id: ""
  },
  sha256: sha256$4,
  sha224,
  sha384,
  sha512: sha512$3,
  "DSA-SHA": {
    sign: "dsa",
    hash: "sha1",
    id: ""
  },
  "DSA-SHA1": {
    sign: "dsa",
    hash: "sha1",
    id: ""
  },
  DSA,
  "DSA-WITH-SHA224": {
    sign: "dsa",
    hash: "sha224",
    id: ""
  },
  "DSA-SHA224": {
    sign: "dsa",
    hash: "sha224",
    id: ""
  },
  "DSA-WITH-SHA256": {
    sign: "dsa",
    hash: "sha256",
    id: ""
  },
  "DSA-SHA256": {
    sign: "dsa",
    hash: "sha256",
    id: ""
  },
  "DSA-WITH-SHA384": {
    sign: "dsa",
    hash: "sha384",
    id: ""
  },
  "DSA-SHA384": {
    sign: "dsa",
    hash: "sha384",
    id: ""
  },
  "DSA-WITH-SHA512": {
    sign: "dsa",
    hash: "sha512",
    id: ""
  },
  "DSA-SHA512": {
    sign: "dsa",
    hash: "sha512",
    id: ""
  },
  "DSA-RIPEMD160": {
    sign: "dsa",
    hash: "rmd160",
    id: ""
  },
  ripemd160WithRSA,
  "RSA-RIPEMD160": {
    sign: "rsa",
    hash: "rmd160",
    id: "3021300906052b2403020105000414"
  },
  md5WithRSAEncryption,
  "RSA-MD5": {
    sign: "rsa",
    hash: "md5",
    id: "3020300c06082a864886f70d020505000410"
  }
};
var algos = require$$6, browser$a = {}, MAX_ALLOC = Math.pow(2, 30) - 1, precondition = function(t, e) {
  if (typeof t != "number")
    throw new TypeError("Iterations not a number");
  if (t < 0)
    throw new TypeError("Bad iterations");
  if (typeof e != "number")
    throw new TypeError("Key length not a number");
  if (e < 0 || e > MAX_ALLOC || e !== e)
    throw new TypeError("Bad key length");
}, defaultEncoding$2;
if (commonjsGlobal.process && commonjsGlobal.process.browser)
  defaultEncoding$2 = "utf-8";
else if (commonjsGlobal.process && commonjsGlobal.process.version) {
  var pVersionMajor = parseInt(process$1.version.split(".")[0].slice(1), 10);
  defaultEncoding$2 = pVersionMajor >= 6 ? "utf-8" : "binary";
} else
  defaultEncoding$2 = "utf-8";
var defaultEncoding_1 = defaultEncoding$2, Buffer$p = safeBufferExports.Buffer, toBuffer$5 = function(t, e, n) {
  if (Buffer$p.isBuffer(t))
    return t;
  if (typeof t == "string")
    return Buffer$p.from(t, e);
  if (ArrayBuffer.isView(t))
    return Buffer$p.from(t.buffer);
  throw new TypeError(n + " must be a string, a Buffer, a typed array or a DataView");
}, md5$1 = md5$3, RIPEMD160$1 = ripemd160$1, sha$1 = sha_jsExports, Buffer$o = safeBufferExports.Buffer, checkParameters$1 = precondition, defaultEncoding$1 = defaultEncoding_1, toBuffer$4 = toBuffer$5, ZEROS = Buffer$o.alloc(128), sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
};
function Hmac$1(t, e, n) {
  var a = getDigest(t), c = t === "sha512" || t === "sha384" ? 128 : 64;
  e.length > c ? e = a(e) : e.length < c && (e = Buffer$o.concat([e, ZEROS], c));
  for (var o = Buffer$o.allocUnsafe(c + sizes[t]), d = Buffer$o.allocUnsafe(c + sizes[t]), m = 0; m < c; m++)
    o[m] = e[m] ^ 54, d[m] = e[m] ^ 92;
  var w = Buffer$o.allocUnsafe(c + n + 4);
  o.copy(w, 0, 0, c), this.ipad1 = w, this.ipad2 = o, this.opad = d, this.alg = t, this.blocksize = c, this.hash = a, this.size = sizes[t];
}
Hmac$1.prototype.run = function(t, e) {
  t.copy(e, this.blocksize);
  var n = this.hash(e);
  return n.copy(this.opad, this.blocksize), this.hash(this.opad);
};
function getDigest(t) {
  function e(a) {
    return sha$1(t).update(a).digest();
  }
  function n(a) {
    return new RIPEMD160$1().update(a).digest();
  }
  return t === "rmd160" || t === "ripemd160" ? n : t === "md5" ? md5$1 : e;
}
function pbkdf2$4(t, e, n, a, c) {
  checkParameters$1(n, a), t = toBuffer$4(t, defaultEncoding$1, "Password"), e = toBuffer$4(e, defaultEncoding$1, "Salt"), c = c || "sha1";
  var o = new Hmac$1(c, t, e.length), d = Buffer$o.allocUnsafe(a), m = Buffer$o.allocUnsafe(e.length + 4);
  e.copy(m, 0, 0, e.length);
  for (var w = 0, S = sizes[c], A = Math.ceil(a / S), B = 1; B <= A; B++) {
    m.writeUInt32BE(B, e.length);
    for (var P = o.run(m, o.ipad1), I = P, O = 1; O < n; O++) {
      I = o.run(I, o.ipad2);
      for (var L = 0; L < S; L++)
        P[L] ^= I[L];
    }
    P.copy(d, w), w += S;
  }
  return d;
}
var syncBrowser = pbkdf2$4, Buffer$n = safeBufferExports.Buffer, checkParameters = precondition, defaultEncoding = defaultEncoding_1, sync = syncBrowser, toBuffer$3 = toBuffer$5, ZERO_BUF, subtle = commonjsGlobal.crypto && commonjsGlobal.crypto.subtle, toBrowser = {
  sha: "SHA-1",
  "sha-1": "SHA-1",
  sha1: "SHA-1",
  sha256: "SHA-256",
  "sha-256": "SHA-256",
  sha384: "SHA-384",
  "sha-384": "SHA-384",
  "sha-512": "SHA-512",
  sha512: "SHA-512"
}, checks = [];
function checkNative(t) {
  if (commonjsGlobal.process && !commonjsGlobal.process.browser || !subtle || !subtle.importKey || !subtle.deriveBits)
    return Promise.resolve(!1);
  if (checks[t] !== void 0)
    return checks[t];
  ZERO_BUF = ZERO_BUF || Buffer$n.alloc(8);
  var e = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, t).then(function() {
    return !0;
  }).catch(function() {
    return !1;
  });
  return checks[t] = e, e;
}
var nextTick;
function getNextTick() {
  return nextTick || (commonjsGlobal.process && commonjsGlobal.process.nextTick ? nextTick = commonjsGlobal.process.nextTick : commonjsGlobal.queueMicrotask ? nextTick = commonjsGlobal.queueMicrotask : commonjsGlobal.setImmediate ? nextTick = commonjsGlobal.setImmediate : nextTick = commonjsGlobal.setTimeout, nextTick);
}
function browserPbkdf2(t, e, n, a, c) {
  return subtle.importKey(
    "raw",
    t,
    { name: "PBKDF2" },
    !1,
    ["deriveBits"]
  ).then(function(o) {
    return subtle.deriveBits({
      name: "PBKDF2",
      salt: e,
      iterations: n,
      hash: {
        name: c
      }
    }, o, a << 3);
  }).then(function(o) {
    return Buffer$n.from(o);
  });
}
function resolvePromise(t, e) {
  t.then(function(n) {
    getNextTick()(function() {
      e(null, n);
    });
  }, function(n) {
    getNextTick()(function() {
      e(n);
    });
  });
}
var async = function(t, e, n, a, c, o) {
  typeof c == "function" && (o = c, c = void 0), c = c || "sha1";
  var d = toBrowser[c.toLowerCase()];
  if (!d || typeof commonjsGlobal.Promise != "function") {
    getNextTick()(function() {
      var m;
      try {
        m = sync(t, e, n, a, c);
      } catch (w) {
        return o(w);
      }
      o(null, m);
    });
    return;
  }
  if (checkParameters(n, a), t = toBuffer$3(t, defaultEncoding, "Password"), e = toBuffer$3(e, defaultEncoding, "Salt"), typeof o != "function")
    throw new Error("No callback provided to pbkdf2");
  resolvePromise(checkNative(d).then(function(m) {
    return m ? browserPbkdf2(t, e, n, a, d) : sync(t, e, n, a, c);
  }), o);
};
browser$a.pbkdf2 = async;
browser$a.pbkdf2Sync = syncBrowser;
var browser$9 = {}, des$2 = {}, utils$C = {};
utils$C.readUInt32BE = function(e, n) {
  var a = e[0 + n] << 24 | e[1 + n] << 16 | e[2 + n] << 8 | e[3 + n];
  return a >>> 0;
};
utils$C.writeUInt32BE = function(e, n, a) {
  e[0 + a] = n >>> 24, e[1 + a] = n >>> 16 & 255, e[2 + a] = n >>> 8 & 255, e[3 + a] = n & 255;
};
utils$C.ip = function(e, n, a, c) {
  for (var o = 0, d = 0, m = 6; m >= 0; m -= 2) {
    for (var w = 0; w <= 24; w += 8)
      o <<= 1, o |= n >>> w + m & 1;
    for (var w = 0; w <= 24; w += 8)
      o <<= 1, o |= e >>> w + m & 1;
  }
  for (var m = 6; m >= 0; m -= 2) {
    for (var w = 1; w <= 25; w += 8)
      d <<= 1, d |= n >>> w + m & 1;
    for (var w = 1; w <= 25; w += 8)
      d <<= 1, d |= e >>> w + m & 1;
  }
  a[c + 0] = o >>> 0, a[c + 1] = d >>> 0;
};
utils$C.rip = function(e, n, a, c) {
  for (var o = 0, d = 0, m = 0; m < 4; m++)
    for (var w = 24; w >= 0; w -= 8)
      o <<= 1, o |= n >>> w + m & 1, o <<= 1, o |= e >>> w + m & 1;
  for (var m = 4; m < 8; m++)
    for (var w = 24; w >= 0; w -= 8)
      d <<= 1, d |= n >>> w + m & 1, d <<= 1, d |= e >>> w + m & 1;
  a[c + 0] = o >>> 0, a[c + 1] = d >>> 0;
};
utils$C.pc1 = function(e, n, a, c) {
  for (var o = 0, d = 0, m = 7; m >= 5; m--) {
    for (var w = 0; w <= 24; w += 8)
      o <<= 1, o |= n >> w + m & 1;
    for (var w = 0; w <= 24; w += 8)
      o <<= 1, o |= e >> w + m & 1;
  }
  for (var w = 0; w <= 24; w += 8)
    o <<= 1, o |= n >> w + m & 1;
  for (var m = 1; m <= 3; m++) {
    for (var w = 0; w <= 24; w += 8)
      d <<= 1, d |= n >> w + m & 1;
    for (var w = 0; w <= 24; w += 8)
      d <<= 1, d |= e >> w + m & 1;
  }
  for (var w = 0; w <= 24; w += 8)
    d <<= 1, d |= e >> w + m & 1;
  a[c + 0] = o >>> 0, a[c + 1] = d >>> 0;
};
utils$C.r28shl = function(e, n) {
  return e << n & 268435455 | e >>> 28 - n;
};
var pc2table = [
  // inL => outL
  14,
  11,
  17,
  4,
  27,
  23,
  25,
  0,
  13,
  22,
  7,
  18,
  5,
  9,
  16,
  24,
  2,
  20,
  12,
  21,
  1,
  8,
  15,
  26,
  // inR => outR
  15,
  4,
  25,
  19,
  9,
  1,
  26,
  16,
  5,
  11,
  23,
  8,
  12,
  7,
  17,
  0,
  22,
  3,
  10,
  14,
  6,
  20,
  27,
  24
];
utils$C.pc2 = function(e, n, a, c) {
  for (var o = 0, d = 0, m = pc2table.length >>> 1, w = 0; w < m; w++)
    o <<= 1, o |= e >>> pc2table[w] & 1;
  for (var w = m; w < pc2table.length; w++)
    d <<= 1, d |= n >>> pc2table[w] & 1;
  a[c + 0] = o >>> 0, a[c + 1] = d >>> 0;
};
utils$C.expand = function(e, n, a) {
  var c = 0, o = 0;
  c = (e & 1) << 5 | e >>> 27;
  for (var d = 23; d >= 15; d -= 4)
    c <<= 6, c |= e >>> d & 63;
  for (var d = 11; d >= 3; d -= 4)
    o |= e >>> d & 63, o <<= 6;
  o |= (e & 31) << 1 | e >>> 31, n[a + 0] = c >>> 0, n[a + 1] = o >>> 0;
};
var sTable = [
  14,
  0,
  4,
  15,
  13,
  7,
  1,
  4,
  2,
  14,
  15,
  2,
  11,
  13,
  8,
  1,
  3,
  10,
  10,
  6,
  6,
  12,
  12,
  11,
  5,
  9,
  9,
  5,
  0,
  3,
  7,
  8,
  4,
  15,
  1,
  12,
  14,
  8,
  8,
  2,
  13,
  4,
  6,
  9,
  2,
  1,
  11,
  7,
  15,
  5,
  12,
  11,
  9,
  3,
  7,
  14,
  3,
  10,
  10,
  0,
  5,
  6,
  0,
  13,
  15,
  3,
  1,
  13,
  8,
  4,
  14,
  7,
  6,
  15,
  11,
  2,
  3,
  8,
  4,
  14,
  9,
  12,
  7,
  0,
  2,
  1,
  13,
  10,
  12,
  6,
  0,
  9,
  5,
  11,
  10,
  5,
  0,
  13,
  14,
  8,
  7,
  10,
  11,
  1,
  10,
  3,
  4,
  15,
  13,
  4,
  1,
  2,
  5,
  11,
  8,
  6,
  12,
  7,
  6,
  12,
  9,
  0,
  3,
  5,
  2,
  14,
  15,
  9,
  10,
  13,
  0,
  7,
  9,
  0,
  14,
  9,
  6,
  3,
  3,
  4,
  15,
  6,
  5,
  10,
  1,
  2,
  13,
  8,
  12,
  5,
  7,
  14,
  11,
  12,
  4,
  11,
  2,
  15,
  8,
  1,
  13,
  1,
  6,
  10,
  4,
  13,
  9,
  0,
  8,
  6,
  15,
  9,
  3,
  8,
  0,
  7,
  11,
  4,
  1,
  15,
  2,
  14,
  12,
  3,
  5,
  11,
  10,
  5,
  14,
  2,
  7,
  12,
  7,
  13,
  13,
  8,
  14,
  11,
  3,
  5,
  0,
  6,
  6,
  15,
  9,
  0,
  10,
  3,
  1,
  4,
  2,
  7,
  8,
  2,
  5,
  12,
  11,
  1,
  12,
  10,
  4,
  14,
  15,
  9,
  10,
  3,
  6,
  15,
  9,
  0,
  0,
  6,
  12,
  10,
  11,
  1,
  7,
  13,
  13,
  8,
  15,
  9,
  1,
  4,
  3,
  5,
  14,
  11,
  5,
  12,
  2,
  7,
  8,
  2,
  4,
  14,
  2,
  14,
  12,
  11,
  4,
  2,
  1,
  12,
  7,
  4,
  10,
  7,
  11,
  13,
  6,
  1,
  8,
  5,
  5,
  0,
  3,
  15,
  15,
  10,
  13,
  3,
  0,
  9,
  14,
  8,
  9,
  6,
  4,
  11,
  2,
  8,
  1,
  12,
  11,
  7,
  10,
  1,
  13,
  14,
  7,
  2,
  8,
  13,
  15,
  6,
  9,
  15,
  12,
  0,
  5,
  9,
  6,
  10,
  3,
  4,
  0,
  5,
  14,
  3,
  12,
  10,
  1,
  15,
  10,
  4,
  15,
  2,
  9,
  7,
  2,
  12,
  6,
  9,
  8,
  5,
  0,
  6,
  13,
  1,
  3,
  13,
  4,
  14,
  14,
  0,
  7,
  11,
  5,
  3,
  11,
  8,
  9,
  4,
  14,
  3,
  15,
  2,
  5,
  12,
  2,
  9,
  8,
  5,
  12,
  15,
  3,
  10,
  7,
  11,
  0,
  14,
  4,
  1,
  10,
  7,
  1,
  6,
  13,
  0,
  11,
  8,
  6,
  13,
  4,
  13,
  11,
  0,
  2,
  11,
  14,
  7,
  15,
  4,
  0,
  9,
  8,
  1,
  13,
  10,
  3,
  14,
  12,
  3,
  9,
  5,
  7,
  12,
  5,
  2,
  10,
  15,
  6,
  8,
  1,
  6,
  1,
  6,
  4,
  11,
  11,
  13,
  13,
  8,
  12,
  1,
  3,
  4,
  7,
  10,
  14,
  7,
  10,
  9,
  15,
  5,
  6,
  0,
  8,
  15,
  0,
  14,
  5,
  2,
  9,
  3,
  2,
  12,
  13,
  1,
  2,
  15,
  8,
  13,
  4,
  8,
  6,
  10,
  15,
  3,
  11,
  7,
  1,
  4,
  10,
  12,
  9,
  5,
  3,
  6,
  14,
  11,
  5,
  0,
  0,
  14,
  12,
  9,
  7,
  2,
  7,
  2,
  11,
  1,
  4,
  14,
  1,
  7,
  9,
  4,
  12,
  10,
  14,
  8,
  2,
  13,
  0,
  15,
  6,
  12,
  10,
  9,
  13,
  0,
  15,
  3,
  3,
  5,
  5,
  6,
  8,
  11
];
utils$C.substitute = function(e, n) {
  for (var a = 0, c = 0; c < 4; c++) {
    var o = e >>> 18 - c * 6 & 63, d = sTable[c * 64 + o];
    a <<= 4, a |= d;
  }
  for (var c = 0; c < 4; c++) {
    var o = n >>> 18 - c * 6 & 63, d = sTable[4 * 64 + c * 64 + o];
    a <<= 4, a |= d;
  }
  return a >>> 0;
};
var permuteTable = [
  16,
  25,
  12,
  11,
  3,
  20,
  4,
  15,
  31,
  17,
  9,
  6,
  27,
  14,
  1,
  22,
  30,
  24,
  8,
  18,
  0,
  5,
  29,
  23,
  13,
  19,
  2,
  26,
  10,
  21,
  28,
  7
];
utils$C.permute = function(e) {
  for (var n = 0, a = 0; a < permuteTable.length; a++)
    n <<= 1, n |= e >>> permuteTable[a] & 1;
  return n >>> 0;
};
utils$C.padSplit = function(e, n, a) {
  for (var c = e.toString(2); c.length < n; )
    c = "0" + c;
  for (var o = [], d = 0; d < n; d += a)
    o.push(c.slice(d, d + a));
  return o.join(" ");
};
var minimalisticAssert$1 = assert$p;
function assert$p(t, e) {
  if (!t)
    throw new Error(e || "Assertion failed");
}
assert$p.equal = function(e, n, a) {
  if (e != n)
    throw new Error(a || "Assertion failed: " + e + " != " + n);
};
var assert$o = minimalisticAssert$1;
function Cipher$3(t) {
  this.options = t, this.type = this.options.type, this.blockSize = 8, this._init(), this.buffer = new Array(this.blockSize), this.bufferOff = 0, this.padding = t.padding !== !1;
}
var cipher = Cipher$3;
Cipher$3.prototype._init = function() {
};
Cipher$3.prototype.update = function(e) {
  return e.length === 0 ? [] : this.type === "decrypt" ? this._updateDecrypt(e) : this._updateEncrypt(e);
};
Cipher$3.prototype._buffer = function(e, n) {
  for (var a = Math.min(this.buffer.length - this.bufferOff, e.length - n), c = 0; c < a; c++)
    this.buffer[this.bufferOff + c] = e[n + c];
  return this.bufferOff += a, a;
};
Cipher$3.prototype._flushBuffer = function(e, n) {
  return this._update(this.buffer, 0, e, n), this.bufferOff = 0, this.blockSize;
};
Cipher$3.prototype._updateEncrypt = function(e) {
  var n = 0, a = 0, c = (this.bufferOff + e.length) / this.blockSize | 0, o = new Array(c * this.blockSize);
  this.bufferOff !== 0 && (n += this._buffer(e, n), this.bufferOff === this.buffer.length && (a += this._flushBuffer(o, a)));
  for (var d = e.length - (e.length - n) % this.blockSize; n < d; n += this.blockSize)
    this._update(e, n, o, a), a += this.blockSize;
  for (; n < e.length; n++, this.bufferOff++)
    this.buffer[this.bufferOff] = e[n];
  return o;
};
Cipher$3.prototype._updateDecrypt = function(e) {
  for (var n = 0, a = 0, c = Math.ceil((this.bufferOff + e.length) / this.blockSize) - 1, o = new Array(c * this.blockSize); c > 0; c--)
    n += this._buffer(e, n), a += this._flushBuffer(o, a);
  return n += this._buffer(e, n), o;
};
Cipher$3.prototype.final = function(e) {
  var n;
  e && (n = this.update(e));
  var a;
  return this.type === "encrypt" ? a = this._finalEncrypt() : a = this._finalDecrypt(), n ? n.concat(a) : a;
};
Cipher$3.prototype._pad = function(e, n) {
  if (n === 0)
    return !1;
  for (; n < e.length; )
    e[n++] = 0;
  return !0;
};
Cipher$3.prototype._finalEncrypt = function() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];
  var e = new Array(this.blockSize);
  return this._update(this.buffer, 0, e, 0), e;
};
Cipher$3.prototype._unpad = function(e) {
  return e;
};
Cipher$3.prototype._finalDecrypt = function() {
  assert$o.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
  var e = new Array(this.blockSize);
  return this._flushBuffer(e, 0), this._unpad(e);
};
var assert$n = minimalisticAssert$1, inherits$j = inherits_browserExports, utils$B = utils$C, Cipher$2 = cipher;
function DESState() {
  this.tmp = new Array(2), this.keys = null;
}
function DES$3(t) {
  Cipher$2.call(this, t);
  var e = new DESState();
  this._desState = e, this.deriveKeys(e, t.key);
}
inherits$j(DES$3, Cipher$2);
var des$1 = DES$3;
DES$3.create = function(e) {
  return new DES$3(e);
};
var shiftTable = [
  1,
  1,
  2,
  2,
  2,
  2,
  2,
  2,
  1,
  2,
  2,
  2,
  2,
  2,
  2,
  1
];
DES$3.prototype.deriveKeys = function(e, n) {
  e.keys = new Array(16 * 2), assert$n.equal(n.length, this.blockSize, "Invalid key length");
  var a = utils$B.readUInt32BE(n, 0), c = utils$B.readUInt32BE(n, 4);
  utils$B.pc1(a, c, e.tmp, 0), a = e.tmp[0], c = e.tmp[1];
  for (var o = 0; o < e.keys.length; o += 2) {
    var d = shiftTable[o >>> 1];
    a = utils$B.r28shl(a, d), c = utils$B.r28shl(c, d), utils$B.pc2(a, c, e.keys, o);
  }
};
DES$3.prototype._update = function(e, n, a, c) {
  var o = this._desState, d = utils$B.readUInt32BE(e, n), m = utils$B.readUInt32BE(e, n + 4);
  utils$B.ip(d, m, o.tmp, 0), d = o.tmp[0], m = o.tmp[1], this.type === "encrypt" ? this._encrypt(o, d, m, o.tmp, 0) : this._decrypt(o, d, m, o.tmp, 0), d = o.tmp[0], m = o.tmp[1], utils$B.writeUInt32BE(a, d, c), utils$B.writeUInt32BE(a, m, c + 4);
};
DES$3.prototype._pad = function(e, n) {
  if (this.padding === !1)
    return !1;
  for (var a = e.length - n, c = n; c < e.length; c++)
    e[c] = a;
  return !0;
};
DES$3.prototype._unpad = function(e) {
  if (this.padding === !1)
    return e;
  for (var n = e[e.length - 1], a = e.length - n; a < e.length; a++)
    assert$n.equal(e[a], n);
  return e.slice(0, e.length - n);
};
DES$3.prototype._encrypt = function(e, n, a, c, o) {
  for (var d = n, m = a, w = 0; w < e.keys.length; w += 2) {
    var S = e.keys[w], A = e.keys[w + 1];
    utils$B.expand(m, e.tmp, 0), S ^= e.tmp[0], A ^= e.tmp[1];
    var B = utils$B.substitute(S, A), P = utils$B.permute(B), I = m;
    m = (d ^ P) >>> 0, d = I;
  }
  utils$B.rip(m, d, c, o);
};
DES$3.prototype._decrypt = function(e, n, a, c, o) {
  for (var d = a, m = n, w = e.keys.length - 2; w >= 0; w -= 2) {
    var S = e.keys[w], A = e.keys[w + 1];
    utils$B.expand(d, e.tmp, 0), S ^= e.tmp[0], A ^= e.tmp[1];
    var B = utils$B.substitute(S, A), P = utils$B.permute(B), I = d;
    d = (m ^ P) >>> 0, m = I;
  }
  utils$B.rip(d, m, c, o);
};
var cbc$1 = {}, assert$m = minimalisticAssert$1, inherits$i = inherits_browserExports, proto = {};
function CBCState(t) {
  assert$m.equal(t.length, 8, "Invalid IV length"), this.iv = new Array(8);
  for (var e = 0; e < this.iv.length; e++)
    this.iv[e] = t[e];
}
function instantiate(t) {
  function e(o) {
    t.call(this, o), this._cbcInit();
  }
  inherits$i(e, t);
  for (var n = Object.keys(proto), a = 0; a < n.length; a++) {
    var c = n[a];
    e.prototype[c] = proto[c];
  }
  return e.create = function(d) {
    return new e(d);
  }, e;
}
cbc$1.instantiate = instantiate;
proto._cbcInit = function() {
  var e = new CBCState(this.options.iv);
  this._cbcState = e;
};
proto._update = function(e, n, a, c) {
  var o = this._cbcState, d = this.constructor.super_.prototype, m = o.iv;
  if (this.type === "encrypt") {
    for (var w = 0; w < this.blockSize; w++)
      m[w] ^= e[n + w];
    d._update.call(this, m, 0, a, c);
    for (var w = 0; w < this.blockSize; w++)
      m[w] = a[c + w];
  } else {
    d._update.call(this, e, n, a, c);
    for (var w = 0; w < this.blockSize; w++)
      a[c + w] ^= m[w];
    for (var w = 0; w < this.blockSize; w++)
      m[w] = e[n + w];
  }
};
var assert$l = minimalisticAssert$1, inherits$h = inherits_browserExports, Cipher$1 = cipher, DES$2 = des$1;
function EDEState(t, e) {
  assert$l.equal(e.length, 24, "Invalid key length");
  var n = e.slice(0, 8), a = e.slice(8, 16), c = e.slice(16, 24);
  t === "encrypt" ? this.ciphers = [
    DES$2.create({ type: "encrypt", key: n }),
    DES$2.create({ type: "decrypt", key: a }),
    DES$2.create({ type: "encrypt", key: c })
  ] : this.ciphers = [
    DES$2.create({ type: "decrypt", key: c }),
    DES$2.create({ type: "encrypt", key: a }),
    DES$2.create({ type: "decrypt", key: n })
  ];
}
function EDE(t) {
  Cipher$1.call(this, t);
  var e = new EDEState(this.type, this.options.key);
  this._edeState = e;
}
inherits$h(EDE, Cipher$1);
var ede = EDE;
EDE.create = function(e) {
  return new EDE(e);
};
EDE.prototype._update = function(e, n, a, c) {
  var o = this._edeState;
  o.ciphers[0]._update(e, n, a, c), o.ciphers[1]._update(a, c, a, c), o.ciphers[2]._update(a, c, a, c);
};
EDE.prototype._pad = DES$2.prototype._pad;
EDE.prototype._unpad = DES$2.prototype._unpad;
des$2.utils = utils$C;
des$2.Cipher = cipher;
des$2.DES = des$1;
des$2.CBC = cbc$1;
des$2.EDE = ede;
var CipherBase = cipherBase, des = des$2, inherits$g = inherits_browserExports, Buffer$m = safeBufferExports.Buffer, modes$3 = {
  "des-ede3-cbc": des.CBC.instantiate(des.EDE),
  "des-ede3": des.EDE,
  "des-ede-cbc": des.CBC.instantiate(des.EDE),
  "des-ede": des.EDE,
  "des-cbc": des.CBC.instantiate(des.DES),
  "des-ecb": des.DES
};
modes$3.des = modes$3["des-cbc"];
modes$3.des3 = modes$3["des-ede3-cbc"];
var browserifyDes = DES$1;
inherits$g(DES$1, CipherBase);
function DES$1(t) {
  CipherBase.call(this);
  var e = t.mode.toLowerCase(), n = modes$3[e], a;
  t.decrypt ? a = "decrypt" : a = "encrypt";
  var c = t.key;
  Buffer$m.isBuffer(c) || (c = Buffer$m.from(c)), (e === "des-ede" || e === "des-ede-cbc") && (c = Buffer$m.concat([c, c.slice(0, 8)]));
  var o = t.iv;
  Buffer$m.isBuffer(o) || (o = Buffer$m.from(o)), this._des = n.create({
    key: c,
    iv: o,
    type: a
  });
}
DES$1.prototype._update = function(t) {
  return Buffer$m.from(this._des.update(t));
};
DES$1.prototype._final = function() {
  return Buffer$m.from(this._des.final());
};
var browser$8 = {}, encrypter = {}, ecb = {};
ecb.encrypt = function(t, e) {
  return t._cipher.encryptBlock(e);
};
ecb.decrypt = function(t, e) {
  return t._cipher.decryptBlock(e);
};
var cbc = {}, bufferXor = function(e, n) {
  for (var a = Math.min(e.length, n.length), c = new Buffer$F(a), o = 0; o < a; ++o)
    c[o] = e[o] ^ n[o];
  return c;
}, xor$7 = bufferXor;
cbc.encrypt = function(t, e) {
  var n = xor$7(e, t._prev);
  return t._prev = t._cipher.encryptBlock(n), t._prev;
};
cbc.decrypt = function(t, e) {
  var n = t._prev;
  t._prev = e;
  var a = t._cipher.decryptBlock(e);
  return xor$7(a, n);
};
var cfb = {}, Buffer$l = safeBufferExports.Buffer, xor$6 = bufferXor;
function encryptStart(t, e, n) {
  var a = e.length, c = xor$6(e, t._cache);
  return t._cache = t._cache.slice(a), t._prev = Buffer$l.concat([t._prev, n ? e : c]), c;
}
cfb.encrypt = function(t, e, n) {
  for (var a = Buffer$l.allocUnsafe(0), c; e.length; )
    if (t._cache.length === 0 && (t._cache = t._cipher.encryptBlock(t._prev), t._prev = Buffer$l.allocUnsafe(0)), t._cache.length <= e.length)
      c = t._cache.length, a = Buffer$l.concat([a, encryptStart(t, e.slice(0, c), n)]), e = e.slice(c);
    else {
      a = Buffer$l.concat([a, encryptStart(t, e, n)]);
      break;
    }
  return a;
};
var cfb8 = {}, Buffer$k = safeBufferExports.Buffer;
function encryptByte$1(t, e, n) {
  var a = t._cipher.encryptBlock(t._prev), c = a[0] ^ e;
  return t._prev = Buffer$k.concat([
    t._prev.slice(1),
    Buffer$k.from([n ? e : c])
  ]), c;
}
cfb8.encrypt = function(t, e, n) {
  for (var a = e.length, c = Buffer$k.allocUnsafe(a), o = -1; ++o < a; )
    c[o] = encryptByte$1(t, e[o], n);
  return c;
};
var cfb1 = {}, Buffer$j = safeBufferExports.Buffer;
function encryptByte(t, e, n) {
  for (var a, c = -1, o = 8, d = 0, m, w; ++c < o; )
    a = t._cipher.encryptBlock(t._prev), m = e & 1 << 7 - c ? 128 : 0, w = a[0] ^ m, d += (w & 128) >> c % 8, t._prev = shiftIn(t._prev, n ? m : w);
  return d;
}
function shiftIn(t, e) {
  var n = t.length, a = -1, c = Buffer$j.allocUnsafe(t.length);
  for (t = Buffer$j.concat([t, Buffer$j.from([e])]); ++a < n; )
    c[a] = t[a] << 1 | t[a + 1] >> 7;
  return c;
}
cfb1.encrypt = function(t, e, n) {
  for (var a = e.length, c = Buffer$j.allocUnsafe(a), o = -1; ++o < a; )
    c[o] = encryptByte(t, e[o], n);
  return c;
};
var ofb = {}, xor$5 = bufferXor;
function getBlock$1(t) {
  return t._prev = t._cipher.encryptBlock(t._prev), t._prev;
}
ofb.encrypt = function(t, e) {
  for (; t._cache.length < e.length; )
    t._cache = Buffer$F.concat([t._cache, getBlock$1(t)]);
  var n = t._cache.slice(0, e.length);
  return t._cache = t._cache.slice(e.length), xor$5(e, n);
};
var ctr = {};
function incr32$2(t) {
  for (var e = t.length, n; e--; )
    if (n = t.readUInt8(e), n === 255)
      t.writeUInt8(0, e);
    else {
      n++, t.writeUInt8(n, e);
      break;
    }
}
var incr32_1 = incr32$2, xor$4 = bufferXor, Buffer$i = safeBufferExports.Buffer, incr32$1 = incr32_1;
function getBlock(t) {
  var e = t._cipher.encryptBlockRaw(t._prev);
  return incr32$1(t._prev), e;
}
var blockSize = 16;
ctr.encrypt = function(t, e) {
  var n = Math.ceil(e.length / blockSize), a = t._cache.length;
  t._cache = Buffer$i.concat([
    t._cache,
    Buffer$i.allocUnsafe(n * blockSize)
  ]);
  for (var c = 0; c < n; c++) {
    var o = getBlock(t), d = a + c * blockSize;
    t._cache.writeUInt32BE(o[0], d + 0), t._cache.writeUInt32BE(o[1], d + 4), t._cache.writeUInt32BE(o[2], d + 8), t._cache.writeUInt32BE(o[3], d + 12);
  }
  var m = t._cache.slice(0, e.length);
  return t._cache = t._cache.slice(e.length), xor$4(e, m);
};
const aes128 = {
  cipher: "AES",
  key: 128,
  iv: 16,
  mode: "CBC",
  type: "block"
}, aes192 = {
  cipher: "AES",
  key: 192,
  iv: 16,
  mode: "CBC",
  type: "block"
}, aes256 = {
  cipher: "AES",
  key: 256,
  iv: 16,
  mode: "CBC",
  type: "block"
}, require$$2$1 = {
  "aes-128-ecb": {
    cipher: "AES",
    key: 128,
    iv: 0,
    mode: "ECB",
    type: "block"
  },
  "aes-192-ecb": {
    cipher: "AES",
    key: 192,
    iv: 0,
    mode: "ECB",
    type: "block"
  },
  "aes-256-ecb": {
    cipher: "AES",
    key: 256,
    iv: 0,
    mode: "ECB",
    type: "block"
  },
  "aes-128-cbc": {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "CBC",
    type: "block"
  },
  "aes-192-cbc": {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "CBC",
    type: "block"
  },
  "aes-256-cbc": {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "CBC",
    type: "block"
  },
  aes128,
  aes192,
  aes256,
  "aes-128-cfb": {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "CFB",
    type: "stream"
  },
  "aes-192-cfb": {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "CFB",
    type: "stream"
  },
  "aes-256-cfb": {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "CFB",
    type: "stream"
  },
  "aes-128-cfb8": {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "CFB8",
    type: "stream"
  },
  "aes-192-cfb8": {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "CFB8",
    type: "stream"
  },
  "aes-256-cfb8": {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "CFB8",
    type: "stream"
  },
  "aes-128-cfb1": {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "CFB1",
    type: "stream"
  },
  "aes-192-cfb1": {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "CFB1",
    type: "stream"
  },
  "aes-256-cfb1": {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "CFB1",
    type: "stream"
  },
  "aes-128-ofb": {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "OFB",
    type: "stream"
  },
  "aes-192-ofb": {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "OFB",
    type: "stream"
  },
  "aes-256-ofb": {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "OFB",
    type: "stream"
  },
  "aes-128-ctr": {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "CTR",
    type: "stream"
  },
  "aes-192-ctr": {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "CTR",
    type: "stream"
  },
  "aes-256-ctr": {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "CTR",
    type: "stream"
  },
  "aes-128-gcm": {
    cipher: "AES",
    key: 128,
    iv: 12,
    mode: "GCM",
    type: "auth"
  },
  "aes-192-gcm": {
    cipher: "AES",
    key: 192,
    iv: 12,
    mode: "GCM",
    type: "auth"
  },
  "aes-256-gcm": {
    cipher: "AES",
    key: 256,
    iv: 12,
    mode: "GCM",
    type: "auth"
  }
};
var modeModules = {
  ECB: ecb,
  CBC: cbc,
  CFB: cfb,
  CFB8: cfb8,
  CFB1: cfb1,
  OFB: ofb,
  CTR: ctr,
  GCM: ctr
}, modes$2 = require$$2$1;
for (var key$4 in modes$2)
  modes$2[key$4].module = modeModules[modes$2[key$4].mode];
var modes_1 = modes$2, aes$6 = {}, Buffer$h = safeBufferExports.Buffer;
function asUInt32Array(t) {
  Buffer$h.isBuffer(t) || (t = Buffer$h.from(t));
  for (var e = t.length / 4 | 0, n = new Array(e), a = 0; a < e; a++)
    n[a] = t.readUInt32BE(a * 4);
  return n;
}
function scrubVec(t) {
  for (var e = 0; e < t.length; t++)
    t[e] = 0;
}
function cryptBlock(t, e, n, a, c) {
  for (var o = n[0], d = n[1], m = n[2], w = n[3], S = t[0] ^ e[0], A = t[1] ^ e[1], B = t[2] ^ e[2], P = t[3] ^ e[3], I, O, L, C, z = 4, q = 1; q < c; q++)
    I = o[S >>> 24] ^ d[A >>> 16 & 255] ^ m[B >>> 8 & 255] ^ w[P & 255] ^ e[z++], O = o[A >>> 24] ^ d[B >>> 16 & 255] ^ m[P >>> 8 & 255] ^ w[S & 255] ^ e[z++], L = o[B >>> 24] ^ d[P >>> 16 & 255] ^ m[S >>> 8 & 255] ^ w[A & 255] ^ e[z++], C = o[P >>> 24] ^ d[S >>> 16 & 255] ^ m[A >>> 8 & 255] ^ w[B & 255] ^ e[z++], S = I, A = O, B = L, P = C;
  return I = (a[S >>> 24] << 24 | a[A >>> 16 & 255] << 16 | a[B >>> 8 & 255] << 8 | a[P & 255]) ^ e[z++], O = (a[A >>> 24] << 24 | a[B >>> 16 & 255] << 16 | a[P >>> 8 & 255] << 8 | a[S & 255]) ^ e[z++], L = (a[B >>> 24] << 24 | a[P >>> 16 & 255] << 16 | a[S >>> 8 & 255] << 8 | a[A & 255]) ^ e[z++], C = (a[P >>> 24] << 24 | a[S >>> 16 & 255] << 16 | a[A >>> 8 & 255] << 8 | a[B & 255]) ^ e[z++], I = I >>> 0, O = O >>> 0, L = L >>> 0, C = C >>> 0, [I, O, L, C];
}
var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54], G = function() {
  for (var t = new Array(256), e = 0; e < 256; e++)
    e < 128 ? t[e] = e << 1 : t[e] = e << 1 ^ 283;
  for (var n = [], a = [], c = [[], [], [], []], o = [[], [], [], []], d = 0, m = 0, w = 0; w < 256; ++w) {
    var S = m ^ m << 1 ^ m << 2 ^ m << 3 ^ m << 4;
    S = S >>> 8 ^ S & 255 ^ 99, n[d] = S, a[S] = d;
    var A = t[d], B = t[A], P = t[B], I = t[S] * 257 ^ S * 16843008;
    c[0][d] = I << 24 | I >>> 8, c[1][d] = I << 16 | I >>> 16, c[2][d] = I << 8 | I >>> 24, c[3][d] = I, I = P * 16843009 ^ B * 65537 ^ A * 257 ^ d * 16843008, o[0][S] = I << 24 | I >>> 8, o[1][S] = I << 16 | I >>> 16, o[2][S] = I << 8 | I >>> 24, o[3][S] = I, d === 0 ? d = m = 1 : (d = A ^ t[t[t[P ^ A]]], m ^= t[t[m]]);
  }
  return {
    SBOX: n,
    INV_SBOX: a,
    SUB_MIX: c,
    INV_SUB_MIX: o
  };
}();
function AES(t) {
  this._key = asUInt32Array(t), this._reset();
}
AES.blockSize = 4 * 4;
AES.keySize = 256 / 8;
AES.prototype.blockSize = AES.blockSize;
AES.prototype.keySize = AES.keySize;
AES.prototype._reset = function() {
  for (var t = this._key, e = t.length, n = e + 6, a = (n + 1) * 4, c = [], o = 0; o < e; o++)
    c[o] = t[o];
  for (o = e; o < a; o++) {
    var d = c[o - 1];
    o % e === 0 ? (d = d << 8 | d >>> 24, d = G.SBOX[d >>> 24] << 24 | G.SBOX[d >>> 16 & 255] << 16 | G.SBOX[d >>> 8 & 255] << 8 | G.SBOX[d & 255], d ^= RCON[o / e | 0] << 24) : e > 6 && o % e === 4 && (d = G.SBOX[d >>> 24] << 24 | G.SBOX[d >>> 16 & 255] << 16 | G.SBOX[d >>> 8 & 255] << 8 | G.SBOX[d & 255]), c[o] = c[o - e] ^ d;
  }
  for (var m = [], w = 0; w < a; w++) {
    var S = a - w, A = c[S - (w % 4 ? 0 : 4)];
    w < 4 || S <= 4 ? m[w] = A : m[w] = G.INV_SUB_MIX[0][G.SBOX[A >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[A >>> 16 & 255]] ^ G.INV_SUB_MIX[2][G.SBOX[A >>> 8 & 255]] ^ G.INV_SUB_MIX[3][G.SBOX[A & 255]];
  }
  this._nRounds = n, this._keySchedule = c, this._invKeySchedule = m;
};
AES.prototype.encryptBlockRaw = function(t) {
  return t = asUInt32Array(t), cryptBlock(t, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds);
};
AES.prototype.encryptBlock = function(t) {
  var e = this.encryptBlockRaw(t), n = Buffer$h.allocUnsafe(16);
  return n.writeUInt32BE(e[0], 0), n.writeUInt32BE(e[1], 4), n.writeUInt32BE(e[2], 8), n.writeUInt32BE(e[3], 12), n;
};
AES.prototype.decryptBlock = function(t) {
  t = asUInt32Array(t);
  var e = t[1];
  t[1] = t[3], t[3] = e;
  var n = cryptBlock(t, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds), a = Buffer$h.allocUnsafe(16);
  return a.writeUInt32BE(n[0], 0), a.writeUInt32BE(n[3], 4), a.writeUInt32BE(n[2], 8), a.writeUInt32BE(n[1], 12), a;
};
AES.prototype.scrub = function() {
  scrubVec(this._keySchedule), scrubVec(this._invKeySchedule), scrubVec(this._key);
};
aes$6.AES = AES;
var Buffer$g = safeBufferExports.Buffer, ZEROES = Buffer$g.alloc(16, 0);
function toArray$2(t) {
  return [
    t.readUInt32BE(0),
    t.readUInt32BE(4),
    t.readUInt32BE(8),
    t.readUInt32BE(12)
  ];
}
function fromArray(t) {
  var e = Buffer$g.allocUnsafe(16);
  return e.writeUInt32BE(t[0] >>> 0, 0), e.writeUInt32BE(t[1] >>> 0, 4), e.writeUInt32BE(t[2] >>> 0, 8), e.writeUInt32BE(t[3] >>> 0, 12), e;
}
function GHASH$1(t) {
  this.h = t, this.state = Buffer$g.alloc(16, 0), this.cache = Buffer$g.allocUnsafe(0);
}
GHASH$1.prototype.ghash = function(t) {
  for (var e = -1; ++e < t.length; )
    this.state[e] ^= t[e];
  this._multiply();
};
GHASH$1.prototype._multiply = function() {
  for (var t = toArray$2(this.h), e = [0, 0, 0, 0], n, a, c, o = -1; ++o < 128; ) {
    for (a = (this.state[~~(o / 8)] & 1 << 7 - o % 8) !== 0, a && (e[0] ^= t[0], e[1] ^= t[1], e[2] ^= t[2], e[3] ^= t[3]), c = (t[3] & 1) !== 0, n = 3; n > 0; n--)
      t[n] = t[n] >>> 1 | (t[n - 1] & 1) << 31;
    t[0] = t[0] >>> 1, c && (t[0] = t[0] ^ 225 << 24);
  }
  this.state = fromArray(e);
};
GHASH$1.prototype.update = function(t) {
  this.cache = Buffer$g.concat([this.cache, t]);
  for (var e; this.cache.length >= 16; )
    e = this.cache.slice(0, 16), this.cache = this.cache.slice(16), this.ghash(e);
};
GHASH$1.prototype.final = function(t, e) {
  return this.cache.length && this.ghash(Buffer$g.concat([this.cache, ZEROES], 16)), this.ghash(fromArray([0, t, 0, e])), this.state;
};
var ghash = GHASH$1, aes$5 = aes$6, Buffer$f = safeBufferExports.Buffer, Transform$5 = cipherBase, inherits$f = inherits_browserExports, GHASH = ghash, xor$3 = bufferXor, incr32 = incr32_1;
function xorTest(t, e) {
  var n = 0;
  t.length !== e.length && n++;
  for (var a = Math.min(t.length, e.length), c = 0; c < a; ++c)
    n += t[c] ^ e[c];
  return n;
}
function calcIv(t, e, n) {
  if (e.length === 12)
    return t._finID = Buffer$f.concat([e, Buffer$f.from([0, 0, 0, 1])]), Buffer$f.concat([e, Buffer$f.from([0, 0, 0, 2])]);
  var a = new GHASH(n), c = e.length, o = c % 16;
  a.update(e), o && (o = 16 - o, a.update(Buffer$f.alloc(o, 0))), a.update(Buffer$f.alloc(8, 0));
  var d = c * 8, m = Buffer$f.alloc(8);
  m.writeUIntBE(d, 0, 8), a.update(m), t._finID = a.state;
  var w = Buffer$f.from(t._finID);
  return incr32(w), w;
}
function StreamCipher$3(t, e, n, a) {
  Transform$5.call(this);
  var c = Buffer$f.alloc(4, 0);
  this._cipher = new aes$5.AES(e);
  var o = this._cipher.encryptBlock(c);
  this._ghash = new GHASH(o), n = calcIv(this, n, o), this._prev = Buffer$f.from(n), this._cache = Buffer$f.allocUnsafe(0), this._secCache = Buffer$f.allocUnsafe(0), this._decrypt = a, this._alen = 0, this._len = 0, this._mode = t, this._authTag = null, this._called = !1;
}
inherits$f(StreamCipher$3, Transform$5);
StreamCipher$3.prototype._update = function(t) {
  if (!this._called && this._alen) {
    var e = 16 - this._alen % 16;
    e < 16 && (e = Buffer$f.alloc(e, 0), this._ghash.update(e));
  }
  this._called = !0;
  var n = this._mode.encrypt(this, t);
  return this._decrypt ? this._ghash.update(t) : this._ghash.update(n), this._len += t.length, n;
};
StreamCipher$3.prototype._final = function() {
  if (this._decrypt && !this._authTag)
    throw new Error("Unsupported state or unable to authenticate data");
  var t = xor$3(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
  if (this._decrypt && xorTest(t, this._authTag))
    throw new Error("Unsupported state or unable to authenticate data");
  this._authTag = t, this._cipher.scrub();
};
StreamCipher$3.prototype.getAuthTag = function() {
  if (this._decrypt || !Buffer$f.isBuffer(this._authTag))
    throw new Error("Attempting to get auth tag in unsupported state");
  return this._authTag;
};
StreamCipher$3.prototype.setAuthTag = function(e) {
  if (!this._decrypt)
    throw new Error("Attempting to set auth tag in unsupported state");
  this._authTag = e;
};
StreamCipher$3.prototype.setAAD = function(e) {
  if (this._called)
    throw new Error("Attempting to set AAD in unsupported state");
  this._ghash.update(e), this._alen += e.length;
};
var authCipher = StreamCipher$3, aes$4 = aes$6, Buffer$e = safeBufferExports.Buffer, Transform$4 = cipherBase, inherits$e = inherits_browserExports;
function StreamCipher$2(t, e, n, a) {
  Transform$4.call(this), this._cipher = new aes$4.AES(e), this._prev = Buffer$e.from(n), this._cache = Buffer$e.allocUnsafe(0), this._secCache = Buffer$e.allocUnsafe(0), this._decrypt = a, this._mode = t;
}
inherits$e(StreamCipher$2, Transform$4);
StreamCipher$2.prototype._update = function(t) {
  return this._mode.encrypt(this, t, this._decrypt);
};
StreamCipher$2.prototype._final = function() {
  this._cipher.scrub();
};
var streamCipher = StreamCipher$2, Buffer$d = safeBufferExports.Buffer, MD5 = md5_js;
function EVP_BytesToKey(t, e, n, a) {
  if (Buffer$d.isBuffer(t) || (t = Buffer$d.from(t, "binary")), e && (Buffer$d.isBuffer(e) || (e = Buffer$d.from(e, "binary")), e.length !== 8))
    throw new RangeError("salt should be Buffer with 8 byte length");
  for (var c = n / 8, o = Buffer$d.alloc(c), d = Buffer$d.alloc(a || 0), m = Buffer$d.alloc(0); c > 0 || a > 0; ) {
    var w = new MD5();
    w.update(m), w.update(t), e && w.update(e), m = w.digest();
    var S = 0;
    if (c > 0) {
      var A = o.length - c;
      S = Math.min(c, m.length), m.copy(o, A, 0, S), c -= S;
    }
    if (S < m.length && a > 0) {
      var B = d.length - a, P = Math.min(a, m.length - S);
      m.copy(d, B, S, S + P), a -= P;
    }
  }
  return m.fill(0), { key: o, iv: d };
}
var evp_bytestokey = EVP_BytesToKey, MODES$1 = modes_1, AuthCipher$1 = authCipher, Buffer$c = safeBufferExports.Buffer, StreamCipher$1 = streamCipher, Transform$3 = cipherBase, aes$3 = aes$6, ebtk$2 = evp_bytestokey, inherits$d = inherits_browserExports;
function Cipher(t, e, n) {
  Transform$3.call(this), this._cache = new Splitter$1(), this._cipher = new aes$3.AES(e), this._prev = Buffer$c.from(n), this._mode = t, this._autopadding = !0;
}
inherits$d(Cipher, Transform$3);
Cipher.prototype._update = function(t) {
  this._cache.add(t);
  for (var e, n, a = []; e = this._cache.get(); )
    n = this._mode.encrypt(this, e), a.push(n);
  return Buffer$c.concat(a);
};
var PADDING = Buffer$c.alloc(16, 16);
Cipher.prototype._final = function() {
  var t = this._cache.flush();
  if (this._autopadding)
    return t = this._mode.encrypt(this, t), this._cipher.scrub(), t;
  if (!t.equals(PADDING))
    throw this._cipher.scrub(), new Error("data not multiple of block length");
};
Cipher.prototype.setAutoPadding = function(t) {
  return this._autopadding = !!t, this;
};
function Splitter$1() {
  this.cache = Buffer$c.allocUnsafe(0);
}
Splitter$1.prototype.add = function(t) {
  this.cache = Buffer$c.concat([this.cache, t]);
};
Splitter$1.prototype.get = function() {
  if (this.cache.length > 15) {
    var t = this.cache.slice(0, 16);
    return this.cache = this.cache.slice(16), t;
  }
  return null;
};
Splitter$1.prototype.flush = function() {
  for (var t = 16 - this.cache.length, e = Buffer$c.allocUnsafe(t), n = -1; ++n < t; )
    e.writeUInt8(t, n);
  return Buffer$c.concat([this.cache, e]);
};
function createCipheriv$1(t, e, n) {
  var a = MODES$1[t.toLowerCase()];
  if (!a)
    throw new TypeError("invalid suite type");
  if (typeof e == "string" && (e = Buffer$c.from(e)), e.length !== a.key / 8)
    throw new TypeError("invalid key length " + e.length);
  if (typeof n == "string" && (n = Buffer$c.from(n)), a.mode !== "GCM" && n.length !== a.iv)
    throw new TypeError("invalid iv length " + n.length);
  return a.type === "stream" ? new StreamCipher$1(a.module, e, n) : a.type === "auth" ? new AuthCipher$1(a.module, e, n) : new Cipher(a.module, e, n);
}
function createCipher$1(t, e) {
  var n = MODES$1[t.toLowerCase()];
  if (!n)
    throw new TypeError("invalid suite type");
  var a = ebtk$2(e, !1, n.key, n.iv);
  return createCipheriv$1(t, a.key, a.iv);
}
encrypter.createCipheriv = createCipheriv$1;
encrypter.createCipher = createCipher$1;
var decrypter = {}, AuthCipher = authCipher, Buffer$b = safeBufferExports.Buffer, MODES = modes_1, StreamCipher = streamCipher, Transform$2 = cipherBase, aes$2 = aes$6, ebtk$1 = evp_bytestokey, inherits$c = inherits_browserExports;
function Decipher(t, e, n) {
  Transform$2.call(this), this._cache = new Splitter(), this._last = void 0, this._cipher = new aes$2.AES(e), this._prev = Buffer$b.from(n), this._mode = t, this._autopadding = !0;
}
inherits$c(Decipher, Transform$2);
Decipher.prototype._update = function(t) {
  this._cache.add(t);
  for (var e, n, a = []; e = this._cache.get(this._autopadding); )
    n = this._mode.decrypt(this, e), a.push(n);
  return Buffer$b.concat(a);
};
Decipher.prototype._final = function() {
  var t = this._cache.flush();
  if (this._autopadding)
    return unpad(this._mode.decrypt(this, t));
  if (t)
    throw new Error("data not multiple of block length");
};
Decipher.prototype.setAutoPadding = function(t) {
  return this._autopadding = !!t, this;
};
function Splitter() {
  this.cache = Buffer$b.allocUnsafe(0);
}
Splitter.prototype.add = function(t) {
  this.cache = Buffer$b.concat([this.cache, t]);
};
Splitter.prototype.get = function(t) {
  var e;
  if (t) {
    if (this.cache.length > 16)
      return e = this.cache.slice(0, 16), this.cache = this.cache.slice(16), e;
  } else if (this.cache.length >= 16)
    return e = this.cache.slice(0, 16), this.cache = this.cache.slice(16), e;
  return null;
};
Splitter.prototype.flush = function() {
  if (this.cache.length)
    return this.cache;
};
function unpad(t) {
  var e = t[15];
  if (e < 1 || e > 16)
    throw new Error("unable to decrypt data");
  for (var n = -1; ++n < e; )
    if (t[n + (16 - e)] !== e)
      throw new Error("unable to decrypt data");
  if (e !== 16)
    return t.slice(0, 16 - e);
}
function createDecipheriv$1(t, e, n) {
  var a = MODES[t.toLowerCase()];
  if (!a)
    throw new TypeError("invalid suite type");
  if (typeof n == "string" && (n = Buffer$b.from(n)), a.mode !== "GCM" && n.length !== a.iv)
    throw new TypeError("invalid iv length " + n.length);
  if (typeof e == "string" && (e = Buffer$b.from(e)), e.length !== a.key / 8)
    throw new TypeError("invalid key length " + e.length);
  return a.type === "stream" ? new StreamCipher(a.module, e, n, !0) : a.type === "auth" ? new AuthCipher(a.module, e, n, !0) : new Decipher(a.module, e, n);
}
function createDecipher$1(t, e) {
  var n = MODES[t.toLowerCase()];
  if (!n)
    throw new TypeError("invalid suite type");
  var a = ebtk$1(e, !1, n.key, n.iv);
  return createDecipheriv$1(t, a.key, a.iv);
}
decrypter.createDecipher = createDecipher$1;
decrypter.createDecipheriv = createDecipheriv$1;
var ciphers$2 = encrypter, deciphers = decrypter, modes$1 = require$$2$1;
function getCiphers$1() {
  return Object.keys(modes$1);
}
browser$8.createCipher = browser$8.Cipher = ciphers$2.createCipher;
browser$8.createCipheriv = browser$8.Cipheriv = ciphers$2.createCipheriv;
browser$8.createDecipher = browser$8.Decipher = deciphers.createDecipher;
browser$8.createDecipheriv = browser$8.Decipheriv = deciphers.createDecipheriv;
browser$8.listCiphers = browser$8.getCiphers = getCiphers$1;
var modes = {};
(function(t) {
  t["des-ecb"] = {
    key: 8,
    iv: 0
  }, t["des-cbc"] = t.des = {
    key: 8,
    iv: 8
  }, t["des-ede3-cbc"] = t.des3 = {
    key: 24,
    iv: 8
  }, t["des-ede3"] = {
    key: 24,
    iv: 0
  }, t["des-ede-cbc"] = {
    key: 16,
    iv: 8
  }, t["des-ede"] = {
    key: 16,
    iv: 0
  };
})(modes);
var DES = browserifyDes, aes$1 = browser$8, aesModes = modes_1, desModes = modes, ebtk = evp_bytestokey;
function createCipher(t, e) {
  t = t.toLowerCase();
  var n, a;
  if (aesModes[t])
    n = aesModes[t].key, a = aesModes[t].iv;
  else if (desModes[t])
    n = desModes[t].key * 8, a = desModes[t].iv;
  else
    throw new TypeError("invalid suite type");
  var c = ebtk(e, !1, n, a);
  return createCipheriv(t, c.key, c.iv);
}
function createDecipher(t, e) {
  t = t.toLowerCase();
  var n, a;
  if (aesModes[t])
    n = aesModes[t].key, a = aesModes[t].iv;
  else if (desModes[t])
    n = desModes[t].key * 8, a = desModes[t].iv;
  else
    throw new TypeError("invalid suite type");
  var c = ebtk(e, !1, n, a);
  return createDecipheriv(t, c.key, c.iv);
}
function createCipheriv(t, e, n) {
  if (t = t.toLowerCase(), aesModes[t])
    return aes$1.createCipheriv(t, e, n);
  if (desModes[t])
    return new DES({ key: e, iv: n, mode: t });
  throw new TypeError("invalid suite type");
}
function createDecipheriv(t, e, n) {
  if (t = t.toLowerCase(), aesModes[t])
    return aes$1.createDecipheriv(t, e, n);
  if (desModes[t])
    return new DES({ key: e, iv: n, mode: t, decrypt: !0 });
  throw new TypeError("invalid suite type");
}
function getCiphers() {
  return Object.keys(desModes).concat(aes$1.getCiphers());
}
browser$9.createCipher = browser$9.Cipher = createCipher;
browser$9.createCipheriv = browser$9.Cipheriv = createCipheriv;
browser$9.createDecipher = browser$9.Decipher = createDecipher;
browser$9.createDecipheriv = browser$9.Decipheriv = createDecipheriv;
browser$9.listCiphers = browser$9.getCiphers = getCiphers;
var browser$7 = {}, bn$6 = { exports: {} };
bn$6.exports;
(function(t) {
  (function(e, n) {
    function a(_, u) {
      if (!_)
        throw new Error(u || "Assertion failed");
    }
    function c(_, u) {
      _.super_ = u;
      var h = function() {
      };
      h.prototype = u.prototype, _.prototype = new h(), _.prototype.constructor = _;
    }
    function o(_, u, h) {
      if (o.isBN(_))
        return _;
      this.negative = 0, this.words = null, this.length = 0, this.red = null, _ !== null && ((u === "le" || u === "be") && (h = u, u = 10), this._init(_ || 0, u || 10, h || "be"));
    }
    typeof e == "object" ? e.exports = o : n.BN = o, o.BN = o, o.wordSize = 26;
    var d;
    try {
      typeof window < "u" && typeof window.Buffer < "u" ? d = window.Buffer : d = require$$0$2.Buffer;
    } catch {
    }
    o.isBN = function(u) {
      return u instanceof o ? !0 : u !== null && typeof u == "object" && u.constructor.wordSize === o.wordSize && Array.isArray(u.words);
    }, o.max = function(u, h) {
      return u.cmp(h) > 0 ? u : h;
    }, o.min = function(u, h) {
      return u.cmp(h) < 0 ? u : h;
    }, o.prototype._init = function(u, h, p) {
      if (typeof u == "number")
        return this._initNumber(u, h, p);
      if (typeof u == "object")
        return this._initArray(u, h, p);
      h === "hex" && (h = 16), a(h === (h | 0) && h >= 2 && h <= 36), u = u.toString().replace(/\s+/g, "");
      var y = 0;
      u[0] === "-" && (y++, this.negative = 1), y < u.length && (h === 16 ? this._parseHex(u, y, p) : (this._parseBase(u, h, y), p === "le" && this._initArray(this.toArray(), h, p)));
    }, o.prototype._initNumber = function(u, h, p) {
      u < 0 && (this.negative = 1, u = -u), u < 67108864 ? (this.words = [u & 67108863], this.length = 1) : u < 4503599627370496 ? (this.words = [
        u & 67108863,
        u / 67108864 & 67108863
      ], this.length = 2) : (a(u < 9007199254740992), this.words = [
        u & 67108863,
        u / 67108864 & 67108863,
        1
      ], this.length = 3), p === "le" && this._initArray(this.toArray(), h, p);
    }, o.prototype._initArray = function(u, h, p) {
      if (a(typeof u.length == "number"), u.length <= 0)
        return this.words = [0], this.length = 1, this;
      this.length = Math.ceil(u.length / 3), this.words = new Array(this.length);
      for (var y = 0; y < this.length; y++)
        this.words[y] = 0;
      var v, $, E = 0;
      if (p === "be")
        for (y = u.length - 1, v = 0; y >= 0; y -= 3)
          $ = u[y] | u[y - 1] << 8 | u[y - 2] << 16, this.words[v] |= $ << E & 67108863, this.words[v + 1] = $ >>> 26 - E & 67108863, E += 24, E >= 26 && (E -= 26, v++);
      else if (p === "le")
        for (y = 0, v = 0; y < u.length; y += 3)
          $ = u[y] | u[y + 1] << 8 | u[y + 2] << 16, this.words[v] |= $ << E & 67108863, this.words[v + 1] = $ >>> 26 - E & 67108863, E += 24, E >= 26 && (E -= 26, v++);
      return this.strip();
    };
    function m(_, u) {
      var h = _.charCodeAt(u);
      return h >= 65 && h <= 70 ? h - 55 : h >= 97 && h <= 102 ? h - 87 : h - 48 & 15;
    }
    function w(_, u, h) {
      var p = m(_, h);
      return h - 1 >= u && (p |= m(_, h - 1) << 4), p;
    }
    o.prototype._parseHex = function(u, h, p) {
      this.length = Math.ceil((u.length - h) / 6), this.words = new Array(this.length);
      for (var y = 0; y < this.length; y++)
        this.words[y] = 0;
      var v = 0, $ = 0, E;
      if (p === "be")
        for (y = u.length - 1; y >= h; y -= 2)
          E = w(u, h, y) << v, this.words[$] |= E & 67108863, v >= 18 ? (v -= 18, $ += 1, this.words[$] |= E >>> 26) : v += 8;
      else {
        var x = u.length - h;
        for (y = x % 2 === 0 ? h + 1 : h; y < u.length; y += 2)
          E = w(u, h, y) << v, this.words[$] |= E & 67108863, v >= 18 ? (v -= 18, $ += 1, this.words[$] |= E >>> 26) : v += 8;
      }
      this.strip();
    };
    function S(_, u, h, p) {
      for (var y = 0, v = Math.min(_.length, h), $ = u; $ < v; $++) {
        var E = _.charCodeAt($) - 48;
        y *= p, E >= 49 ? y += E - 49 + 10 : E >= 17 ? y += E - 17 + 10 : y += E;
      }
      return y;
    }
    o.prototype._parseBase = function(u, h, p) {
      this.words = [0], this.length = 1;
      for (var y = 0, v = 1; v <= 67108863; v *= h)
        y++;
      y--, v = v / h | 0;
      for (var $ = u.length - p, E = $ % y, x = Math.min($, $ - E) + p, l = 0, b = p; b < x; b += y)
        l = S(u, b, b + y, h), this.imuln(v), this.words[0] + l < 67108864 ? this.words[0] += l : this._iaddn(l);
      if (E !== 0) {
        var M = 1;
        for (l = S(u, b, u.length, h), b = 0; b < E; b++)
          M *= h;
        this.imuln(M), this.words[0] + l < 67108864 ? this.words[0] += l : this._iaddn(l);
      }
      this.strip();
    }, o.prototype.copy = function(u) {
      u.words = new Array(this.length);
      for (var h = 0; h < this.length; h++)
        u.words[h] = this.words[h];
      u.length = this.length, u.negative = this.negative, u.red = this.red;
    }, o.prototype.clone = function() {
      var u = new o(null);
      return this.copy(u), u;
    }, o.prototype._expand = function(u) {
      for (; this.length < u; )
        this.words[this.length++] = 0;
      return this;
    }, o.prototype.strip = function() {
      for (; this.length > 1 && this.words[this.length - 1] === 0; )
        this.length--;
      return this._normSign();
    }, o.prototype._normSign = function() {
      return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
    }, o.prototype.inspect = function() {
      return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    var A = [
      "",
      "0",
      "00",
      "000",
      "0000",
      "00000",
      "000000",
      "0000000",
      "00000000",
      "000000000",
      "0000000000",
      "00000000000",
      "000000000000",
      "0000000000000",
      "00000000000000",
      "000000000000000",
      "0000000000000000",
      "00000000000000000",
      "000000000000000000",
      "0000000000000000000",
      "00000000000000000000",
      "000000000000000000000",
      "0000000000000000000000",
      "00000000000000000000000",
      "000000000000000000000000",
      "0000000000000000000000000"
    ], B = [
      0,
      0,
      25,
      16,
      12,
      11,
      10,
      9,
      8,
      8,
      7,
      7,
      7,
      7,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5
    ], P = [
      0,
      0,
      33554432,
      43046721,
      16777216,
      48828125,
      60466176,
      40353607,
      16777216,
      43046721,
      1e7,
      19487171,
      35831808,
      62748517,
      7529536,
      11390625,
      16777216,
      24137569,
      34012224,
      47045881,
      64e6,
      4084101,
      5153632,
      6436343,
      7962624,
      9765625,
      11881376,
      14348907,
      17210368,
      20511149,
      243e5,
      28629151,
      33554432,
      39135393,
      45435424,
      52521875,
      60466176
    ];
    o.prototype.toString = function(u, h) {
      u = u || 10, h = h | 0 || 1;
      var p;
      if (u === 16 || u === "hex") {
        p = "";
        for (var y = 0, v = 0, $ = 0; $ < this.length; $++) {
          var E = this.words[$], x = ((E << y | v) & 16777215).toString(16);
          v = E >>> 24 - y & 16777215, v !== 0 || $ !== this.length - 1 ? p = A[6 - x.length] + x + p : p = x + p, y += 2, y >= 26 && (y -= 26, $--);
        }
        for (v !== 0 && (p = v.toString(16) + p); p.length % h !== 0; )
          p = "0" + p;
        return this.negative !== 0 && (p = "-" + p), p;
      }
      if (u === (u | 0) && u >= 2 && u <= 36) {
        var l = B[u], b = P[u];
        p = "";
        var M = this.clone();
        for (M.negative = 0; !M.isZero(); ) {
          var k = M.modn(b).toString(u);
          M = M.idivn(b), M.isZero() ? p = k + p : p = A[l - k.length] + k + p;
        }
        for (this.isZero() && (p = "0" + p); p.length % h !== 0; )
          p = "0" + p;
        return this.negative !== 0 && (p = "-" + p), p;
      }
      a(!1, "Base should be between 2 and 36");
    }, o.prototype.toNumber = function() {
      var u = this.words[0];
      return this.length === 2 ? u += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? u += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && a(!1, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -u : u;
    }, o.prototype.toJSON = function() {
      return this.toString(16);
    }, o.prototype.toBuffer = function(u, h) {
      return a(typeof d < "u"), this.toArrayLike(d, u, h);
    }, o.prototype.toArray = function(u, h) {
      return this.toArrayLike(Array, u, h);
    }, o.prototype.toArrayLike = function(u, h, p) {
      var y = this.byteLength(), v = p || Math.max(1, y);
      a(y <= v, "byte array longer than desired length"), a(v > 0, "Requested array length <= 0"), this.strip();
      var $ = h === "le", E = new u(v), x, l, b = this.clone();
      if ($) {
        for (l = 0; !b.isZero(); l++)
          x = b.andln(255), b.iushrn(8), E[l] = x;
        for (; l < v; l++)
          E[l] = 0;
      } else {
        for (l = 0; l < v - y; l++)
          E[l] = 0;
        for (l = 0; !b.isZero(); l++)
          x = b.andln(255), b.iushrn(8), E[v - l - 1] = x;
      }
      return E;
    }, Math.clz32 ? o.prototype._countBits = function(u) {
      return 32 - Math.clz32(u);
    } : o.prototype._countBits = function(u) {
      var h = u, p = 0;
      return h >= 4096 && (p += 13, h >>>= 13), h >= 64 && (p += 7, h >>>= 7), h >= 8 && (p += 4, h >>>= 4), h >= 2 && (p += 2, h >>>= 2), p + h;
    }, o.prototype._zeroBits = function(u) {
      if (u === 0)
        return 26;
      var h = u, p = 0;
      return h & 8191 || (p += 13, h >>>= 13), h & 127 || (p += 7, h >>>= 7), h & 15 || (p += 4, h >>>= 4), h & 3 || (p += 2, h >>>= 2), h & 1 || p++, p;
    }, o.prototype.bitLength = function() {
      var u = this.words[this.length - 1], h = this._countBits(u);
      return (this.length - 1) * 26 + h;
    };
    function I(_) {
      for (var u = new Array(_.bitLength()), h = 0; h < u.length; h++) {
        var p = h / 26 | 0, y = h % 26;
        u[h] = (_.words[p] & 1 << y) >>> y;
      }
      return u;
    }
    o.prototype.zeroBits = function() {
      if (this.isZero())
        return 0;
      for (var u = 0, h = 0; h < this.length; h++) {
        var p = this._zeroBits(this.words[h]);
        if (u += p, p !== 26)
          break;
      }
      return u;
    }, o.prototype.byteLength = function() {
      return Math.ceil(this.bitLength() / 8);
    }, o.prototype.toTwos = function(u) {
      return this.negative !== 0 ? this.abs().inotn(u).iaddn(1) : this.clone();
    }, o.prototype.fromTwos = function(u) {
      return this.testn(u - 1) ? this.notn(u).iaddn(1).ineg() : this.clone();
    }, o.prototype.isNeg = function() {
      return this.negative !== 0;
    }, o.prototype.neg = function() {
      return this.clone().ineg();
    }, o.prototype.ineg = function() {
      return this.isZero() || (this.negative ^= 1), this;
    }, o.prototype.iuor = function(u) {
      for (; this.length < u.length; )
        this.words[this.length++] = 0;
      for (var h = 0; h < u.length; h++)
        this.words[h] = this.words[h] | u.words[h];
      return this.strip();
    }, o.prototype.ior = function(u) {
      return a((this.negative | u.negative) === 0), this.iuor(u);
    }, o.prototype.or = function(u) {
      return this.length > u.length ? this.clone().ior(u) : u.clone().ior(this);
    }, o.prototype.uor = function(u) {
      return this.length > u.length ? this.clone().iuor(u) : u.clone().iuor(this);
    }, o.prototype.iuand = function(u) {
      var h;
      this.length > u.length ? h = u : h = this;
      for (var p = 0; p < h.length; p++)
        this.words[p] = this.words[p] & u.words[p];
      return this.length = h.length, this.strip();
    }, o.prototype.iand = function(u) {
      return a((this.negative | u.negative) === 0), this.iuand(u);
    }, o.prototype.and = function(u) {
      return this.length > u.length ? this.clone().iand(u) : u.clone().iand(this);
    }, o.prototype.uand = function(u) {
      return this.length > u.length ? this.clone().iuand(u) : u.clone().iuand(this);
    }, o.prototype.iuxor = function(u) {
      var h, p;
      this.length > u.length ? (h = this, p = u) : (h = u, p = this);
      for (var y = 0; y < p.length; y++)
        this.words[y] = h.words[y] ^ p.words[y];
      if (this !== h)
        for (; y < h.length; y++)
          this.words[y] = h.words[y];
      return this.length = h.length, this.strip();
    }, o.prototype.ixor = function(u) {
      return a((this.negative | u.negative) === 0), this.iuxor(u);
    }, o.prototype.xor = function(u) {
      return this.length > u.length ? this.clone().ixor(u) : u.clone().ixor(this);
    }, o.prototype.uxor = function(u) {
      return this.length > u.length ? this.clone().iuxor(u) : u.clone().iuxor(this);
    }, o.prototype.inotn = function(u) {
      a(typeof u == "number" && u >= 0);
      var h = Math.ceil(u / 26) | 0, p = u % 26;
      this._expand(h), p > 0 && h--;
      for (var y = 0; y < h; y++)
        this.words[y] = ~this.words[y] & 67108863;
      return p > 0 && (this.words[y] = ~this.words[y] & 67108863 >> 26 - p), this.strip();
    }, o.prototype.notn = function(u) {
      return this.clone().inotn(u);
    }, o.prototype.setn = function(u, h) {
      a(typeof u == "number" && u >= 0);
      var p = u / 26 | 0, y = u % 26;
      return this._expand(p + 1), h ? this.words[p] = this.words[p] | 1 << y : this.words[p] = this.words[p] & ~(1 << y), this.strip();
    }, o.prototype.iadd = function(u) {
      var h;
      if (this.negative !== 0 && u.negative === 0)
        return this.negative = 0, h = this.isub(u), this.negative ^= 1, this._normSign();
      if (this.negative === 0 && u.negative !== 0)
        return u.negative = 0, h = this.isub(u), u.negative = 1, h._normSign();
      var p, y;
      this.length > u.length ? (p = this, y = u) : (p = u, y = this);
      for (var v = 0, $ = 0; $ < y.length; $++)
        h = (p.words[$] | 0) + (y.words[$] | 0) + v, this.words[$] = h & 67108863, v = h >>> 26;
      for (; v !== 0 && $ < p.length; $++)
        h = (p.words[$] | 0) + v, this.words[$] = h & 67108863, v = h >>> 26;
      if (this.length = p.length, v !== 0)
        this.words[this.length] = v, this.length++;
      else if (p !== this)
        for (; $ < p.length; $++)
          this.words[$] = p.words[$];
      return this;
    }, o.prototype.add = function(u) {
      var h;
      return u.negative !== 0 && this.negative === 0 ? (u.negative = 0, h = this.sub(u), u.negative ^= 1, h) : u.negative === 0 && this.negative !== 0 ? (this.negative = 0, h = u.sub(this), this.negative = 1, h) : this.length > u.length ? this.clone().iadd(u) : u.clone().iadd(this);
    }, o.prototype.isub = function(u) {
      if (u.negative !== 0) {
        u.negative = 0;
        var h = this.iadd(u);
        return u.negative = 1, h._normSign();
      } else if (this.negative !== 0)
        return this.negative = 0, this.iadd(u), this.negative = 1, this._normSign();
      var p = this.cmp(u);
      if (p === 0)
        return this.negative = 0, this.length = 1, this.words[0] = 0, this;
      var y, v;
      p > 0 ? (y = this, v = u) : (y = u, v = this);
      for (var $ = 0, E = 0; E < v.length; E++)
        h = (y.words[E] | 0) - (v.words[E] | 0) + $, $ = h >> 26, this.words[E] = h & 67108863;
      for (; $ !== 0 && E < y.length; E++)
        h = (y.words[E] | 0) + $, $ = h >> 26, this.words[E] = h & 67108863;
      if ($ === 0 && E < y.length && y !== this)
        for (; E < y.length; E++)
          this.words[E] = y.words[E];
      return this.length = Math.max(this.length, E), y !== this && (this.negative = 1), this.strip();
    }, o.prototype.sub = function(u) {
      return this.clone().isub(u);
    };
    function O(_, u, h) {
      h.negative = u.negative ^ _.negative;
      var p = _.length + u.length | 0;
      h.length = p, p = p - 1 | 0;
      var y = _.words[0] | 0, v = u.words[0] | 0, $ = y * v, E = $ & 67108863, x = $ / 67108864 | 0;
      h.words[0] = E;
      for (var l = 1; l < p; l++) {
        for (var b = x >>> 26, M = x & 67108863, k = Math.min(l, u.length - 1), U = Math.max(0, l - _.length + 1); U <= k; U++) {
          var T = l - U | 0;
          y = _.words[T] | 0, v = u.words[U] | 0, $ = y * v + M, b += $ / 67108864 | 0, M = $ & 67108863;
        }
        h.words[l] = M | 0, x = b | 0;
      }
      return x !== 0 ? h.words[l] = x | 0 : h.length--, h.strip();
    }
    var L = function(u, h, p) {
      var y = u.words, v = h.words, $ = p.words, E = 0, x, l, b, M = y[0] | 0, k = M & 8191, U = M >>> 13, T = y[1] | 0, H = T & 8191, Y = T >>> 13, le = y[2] | 0, ce = le & 8191, de = le >>> 13, ue = y[3] | 0, re = ue & 8191, ge = ue >>> 13, Ae = y[4] | 0, xe = Ae & 8191, Ee = Ae >>> 13, at = y[5] | 0, Re = at & 8191, ve = at >>> 13, xt = y[6] | 0, Ne = xt & 8191, qe = xt >>> 13, wt = y[7] | 0, Te = wt & 8191, De = wt >>> 13, vt = y[8] | 0, ke = vt & 8191, Ue = vt >>> 13, $t = y[9] | 0, ee = $t & 8191, F = $t >>> 13, J = v[0] | 0, oe = J & 8191, he = J >>> 13, Se = v[1] | 0, me = Se & 8191, Be = Se >>> 13, gt = v[2] | 0, Me = gt & 8191, Oe = gt >>> 13, ht = v[3] | 0, He = ht & 8191, Ge = ht >>> 13, _t = v[4] | 0, Le = _t & 8191, Ke = _t >>> 13, Et = v[5] | 0, Fe = Et & 8191, ze = Et >>> 13, At = v[6] | 0, Pe = At & 8191, je = At >>> 13, Q = v[7] | 0, te = Q & 8191, ne = Q >>> 13, D = v[8] | 0, se = D & 8191, pe = D >>> 13, $e = v[9] | 0, be = $e & 8191, _e = $e >>> 13;
      p.negative = u.negative ^ h.negative, p.length = 19, x = Math.imul(k, oe), l = Math.imul(k, he), l = l + Math.imul(U, oe) | 0, b = Math.imul(U, he);
      var Je = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, x = Math.imul(H, oe), l = Math.imul(H, he), l = l + Math.imul(Y, oe) | 0, b = Math.imul(Y, he), x = x + Math.imul(k, me) | 0, l = l + Math.imul(k, Be) | 0, l = l + Math.imul(U, me) | 0, b = b + Math.imul(U, Be) | 0;
      var We = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, x = Math.imul(ce, oe), l = Math.imul(ce, he), l = l + Math.imul(de, oe) | 0, b = Math.imul(de, he), x = x + Math.imul(H, me) | 0, l = l + Math.imul(H, Be) | 0, l = l + Math.imul(Y, me) | 0, b = b + Math.imul(Y, Be) | 0, x = x + Math.imul(k, Me) | 0, l = l + Math.imul(k, Oe) | 0, l = l + Math.imul(U, Me) | 0, b = b + Math.imul(U, Oe) | 0;
      var bt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (bt >>> 26) | 0, bt &= 67108863, x = Math.imul(re, oe), l = Math.imul(re, he), l = l + Math.imul(ge, oe) | 0, b = Math.imul(ge, he), x = x + Math.imul(ce, me) | 0, l = l + Math.imul(ce, Be) | 0, l = l + Math.imul(de, me) | 0, b = b + Math.imul(de, Be) | 0, x = x + Math.imul(H, Me) | 0, l = l + Math.imul(H, Oe) | 0, l = l + Math.imul(Y, Me) | 0, b = b + Math.imul(Y, Oe) | 0, x = x + Math.imul(k, He) | 0, l = l + Math.imul(k, Ge) | 0, l = l + Math.imul(U, He) | 0, b = b + Math.imul(U, Ge) | 0;
      var Ye = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, x = Math.imul(xe, oe), l = Math.imul(xe, he), l = l + Math.imul(Ee, oe) | 0, b = Math.imul(Ee, he), x = x + Math.imul(re, me) | 0, l = l + Math.imul(re, Be) | 0, l = l + Math.imul(ge, me) | 0, b = b + Math.imul(ge, Be) | 0, x = x + Math.imul(ce, Me) | 0, l = l + Math.imul(ce, Oe) | 0, l = l + Math.imul(de, Me) | 0, b = b + Math.imul(de, Oe) | 0, x = x + Math.imul(H, He) | 0, l = l + Math.imul(H, Ge) | 0, l = l + Math.imul(Y, He) | 0, b = b + Math.imul(Y, Ge) | 0, x = x + Math.imul(k, Le) | 0, l = l + Math.imul(k, Ke) | 0, l = l + Math.imul(U, Le) | 0, b = b + Math.imul(U, Ke) | 0;
      var ot = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (ot >>> 26) | 0, ot &= 67108863, x = Math.imul(Re, oe), l = Math.imul(Re, he), l = l + Math.imul(ve, oe) | 0, b = Math.imul(ve, he), x = x + Math.imul(xe, me) | 0, l = l + Math.imul(xe, Be) | 0, l = l + Math.imul(Ee, me) | 0, b = b + Math.imul(Ee, Be) | 0, x = x + Math.imul(re, Me) | 0, l = l + Math.imul(re, Oe) | 0, l = l + Math.imul(ge, Me) | 0, b = b + Math.imul(ge, Oe) | 0, x = x + Math.imul(ce, He) | 0, l = l + Math.imul(ce, Ge) | 0, l = l + Math.imul(de, He) | 0, b = b + Math.imul(de, Ge) | 0, x = x + Math.imul(H, Le) | 0, l = l + Math.imul(H, Ke) | 0, l = l + Math.imul(Y, Le) | 0, b = b + Math.imul(Y, Ke) | 0, x = x + Math.imul(k, Fe) | 0, l = l + Math.imul(k, ze) | 0, l = l + Math.imul(U, Fe) | 0, b = b + Math.imul(U, ze) | 0;
      var ct = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (ct >>> 26) | 0, ct &= 67108863, x = Math.imul(Ne, oe), l = Math.imul(Ne, he), l = l + Math.imul(qe, oe) | 0, b = Math.imul(qe, he), x = x + Math.imul(Re, me) | 0, l = l + Math.imul(Re, Be) | 0, l = l + Math.imul(ve, me) | 0, b = b + Math.imul(ve, Be) | 0, x = x + Math.imul(xe, Me) | 0, l = l + Math.imul(xe, Oe) | 0, l = l + Math.imul(Ee, Me) | 0, b = b + Math.imul(Ee, Oe) | 0, x = x + Math.imul(re, He) | 0, l = l + Math.imul(re, Ge) | 0, l = l + Math.imul(ge, He) | 0, b = b + Math.imul(ge, Ge) | 0, x = x + Math.imul(ce, Le) | 0, l = l + Math.imul(ce, Ke) | 0, l = l + Math.imul(de, Le) | 0, b = b + Math.imul(de, Ke) | 0, x = x + Math.imul(H, Fe) | 0, l = l + Math.imul(H, ze) | 0, l = l + Math.imul(Y, Fe) | 0, b = b + Math.imul(Y, ze) | 0, x = x + Math.imul(k, Pe) | 0, l = l + Math.imul(k, je) | 0, l = l + Math.imul(U, Pe) | 0, b = b + Math.imul(U, je) | 0;
      var lt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (lt >>> 26) | 0, lt &= 67108863, x = Math.imul(Te, oe), l = Math.imul(Te, he), l = l + Math.imul(De, oe) | 0, b = Math.imul(De, he), x = x + Math.imul(Ne, me) | 0, l = l + Math.imul(Ne, Be) | 0, l = l + Math.imul(qe, me) | 0, b = b + Math.imul(qe, Be) | 0, x = x + Math.imul(Re, Me) | 0, l = l + Math.imul(Re, Oe) | 0, l = l + Math.imul(ve, Me) | 0, b = b + Math.imul(ve, Oe) | 0, x = x + Math.imul(xe, He) | 0, l = l + Math.imul(xe, Ge) | 0, l = l + Math.imul(Ee, He) | 0, b = b + Math.imul(Ee, Ge) | 0, x = x + Math.imul(re, Le) | 0, l = l + Math.imul(re, Ke) | 0, l = l + Math.imul(ge, Le) | 0, b = b + Math.imul(ge, Ke) | 0, x = x + Math.imul(ce, Fe) | 0, l = l + Math.imul(ce, ze) | 0, l = l + Math.imul(de, Fe) | 0, b = b + Math.imul(de, ze) | 0, x = x + Math.imul(H, Pe) | 0, l = l + Math.imul(H, je) | 0, l = l + Math.imul(Y, Pe) | 0, b = b + Math.imul(Y, je) | 0, x = x + Math.imul(k, te) | 0, l = l + Math.imul(k, ne) | 0, l = l + Math.imul(U, te) | 0, b = b + Math.imul(U, ne) | 0;
      var mt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (mt >>> 26) | 0, mt &= 67108863, x = Math.imul(ke, oe), l = Math.imul(ke, he), l = l + Math.imul(Ue, oe) | 0, b = Math.imul(Ue, he), x = x + Math.imul(Te, me) | 0, l = l + Math.imul(Te, Be) | 0, l = l + Math.imul(De, me) | 0, b = b + Math.imul(De, Be) | 0, x = x + Math.imul(Ne, Me) | 0, l = l + Math.imul(Ne, Oe) | 0, l = l + Math.imul(qe, Me) | 0, b = b + Math.imul(qe, Oe) | 0, x = x + Math.imul(Re, He) | 0, l = l + Math.imul(Re, Ge) | 0, l = l + Math.imul(ve, He) | 0, b = b + Math.imul(ve, Ge) | 0, x = x + Math.imul(xe, Le) | 0, l = l + Math.imul(xe, Ke) | 0, l = l + Math.imul(Ee, Le) | 0, b = b + Math.imul(Ee, Ke) | 0, x = x + Math.imul(re, Fe) | 0, l = l + Math.imul(re, ze) | 0, l = l + Math.imul(ge, Fe) | 0, b = b + Math.imul(ge, ze) | 0, x = x + Math.imul(ce, Pe) | 0, l = l + Math.imul(ce, je) | 0, l = l + Math.imul(de, Pe) | 0, b = b + Math.imul(de, je) | 0, x = x + Math.imul(H, te) | 0, l = l + Math.imul(H, ne) | 0, l = l + Math.imul(Y, te) | 0, b = b + Math.imul(Y, ne) | 0, x = x + Math.imul(k, se) | 0, l = l + Math.imul(k, pe) | 0, l = l + Math.imul(U, se) | 0, b = b + Math.imul(U, pe) | 0;
      var dt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (dt >>> 26) | 0, dt &= 67108863, x = Math.imul(ee, oe), l = Math.imul(ee, he), l = l + Math.imul(F, oe) | 0, b = Math.imul(F, he), x = x + Math.imul(ke, me) | 0, l = l + Math.imul(ke, Be) | 0, l = l + Math.imul(Ue, me) | 0, b = b + Math.imul(Ue, Be) | 0, x = x + Math.imul(Te, Me) | 0, l = l + Math.imul(Te, Oe) | 0, l = l + Math.imul(De, Me) | 0, b = b + Math.imul(De, Oe) | 0, x = x + Math.imul(Ne, He) | 0, l = l + Math.imul(Ne, Ge) | 0, l = l + Math.imul(qe, He) | 0, b = b + Math.imul(qe, Ge) | 0, x = x + Math.imul(Re, Le) | 0, l = l + Math.imul(Re, Ke) | 0, l = l + Math.imul(ve, Le) | 0, b = b + Math.imul(ve, Ke) | 0, x = x + Math.imul(xe, Fe) | 0, l = l + Math.imul(xe, ze) | 0, l = l + Math.imul(Ee, Fe) | 0, b = b + Math.imul(Ee, ze) | 0, x = x + Math.imul(re, Pe) | 0, l = l + Math.imul(re, je) | 0, l = l + Math.imul(ge, Pe) | 0, b = b + Math.imul(ge, je) | 0, x = x + Math.imul(ce, te) | 0, l = l + Math.imul(ce, ne) | 0, l = l + Math.imul(de, te) | 0, b = b + Math.imul(de, ne) | 0, x = x + Math.imul(H, se) | 0, l = l + Math.imul(H, pe) | 0, l = l + Math.imul(Y, se) | 0, b = b + Math.imul(Y, pe) | 0, x = x + Math.imul(k, be) | 0, l = l + Math.imul(k, _e) | 0, l = l + Math.imul(U, be) | 0, b = b + Math.imul(U, _e) | 0;
      var yt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (yt >>> 26) | 0, yt &= 67108863, x = Math.imul(ee, me), l = Math.imul(ee, Be), l = l + Math.imul(F, me) | 0, b = Math.imul(F, Be), x = x + Math.imul(ke, Me) | 0, l = l + Math.imul(ke, Oe) | 0, l = l + Math.imul(Ue, Me) | 0, b = b + Math.imul(Ue, Oe) | 0, x = x + Math.imul(Te, He) | 0, l = l + Math.imul(Te, Ge) | 0, l = l + Math.imul(De, He) | 0, b = b + Math.imul(De, Ge) | 0, x = x + Math.imul(Ne, Le) | 0, l = l + Math.imul(Ne, Ke) | 0, l = l + Math.imul(qe, Le) | 0, b = b + Math.imul(qe, Ke) | 0, x = x + Math.imul(Re, Fe) | 0, l = l + Math.imul(Re, ze) | 0, l = l + Math.imul(ve, Fe) | 0, b = b + Math.imul(ve, ze) | 0, x = x + Math.imul(xe, Pe) | 0, l = l + Math.imul(xe, je) | 0, l = l + Math.imul(Ee, Pe) | 0, b = b + Math.imul(Ee, je) | 0, x = x + Math.imul(re, te) | 0, l = l + Math.imul(re, ne) | 0, l = l + Math.imul(ge, te) | 0, b = b + Math.imul(ge, ne) | 0, x = x + Math.imul(ce, se) | 0, l = l + Math.imul(ce, pe) | 0, l = l + Math.imul(de, se) | 0, b = b + Math.imul(de, pe) | 0, x = x + Math.imul(H, be) | 0, l = l + Math.imul(H, _e) | 0, l = l + Math.imul(Y, be) | 0, b = b + Math.imul(Y, _e) | 0;
      var pt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (pt >>> 26) | 0, pt &= 67108863, x = Math.imul(ee, Me), l = Math.imul(ee, Oe), l = l + Math.imul(F, Me) | 0, b = Math.imul(F, Oe), x = x + Math.imul(ke, He) | 0, l = l + Math.imul(ke, Ge) | 0, l = l + Math.imul(Ue, He) | 0, b = b + Math.imul(Ue, Ge) | 0, x = x + Math.imul(Te, Le) | 0, l = l + Math.imul(Te, Ke) | 0, l = l + Math.imul(De, Le) | 0, b = b + Math.imul(De, Ke) | 0, x = x + Math.imul(Ne, Fe) | 0, l = l + Math.imul(Ne, ze) | 0, l = l + Math.imul(qe, Fe) | 0, b = b + Math.imul(qe, ze) | 0, x = x + Math.imul(Re, Pe) | 0, l = l + Math.imul(Re, je) | 0, l = l + Math.imul(ve, Pe) | 0, b = b + Math.imul(ve, je) | 0, x = x + Math.imul(xe, te) | 0, l = l + Math.imul(xe, ne) | 0, l = l + Math.imul(Ee, te) | 0, b = b + Math.imul(Ee, ne) | 0, x = x + Math.imul(re, se) | 0, l = l + Math.imul(re, pe) | 0, l = l + Math.imul(ge, se) | 0, b = b + Math.imul(ge, pe) | 0, x = x + Math.imul(ce, be) | 0, l = l + Math.imul(ce, _e) | 0, l = l + Math.imul(de, be) | 0, b = b + Math.imul(de, _e) | 0;
      var tt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, x = Math.imul(ee, He), l = Math.imul(ee, Ge), l = l + Math.imul(F, He) | 0, b = Math.imul(F, Ge), x = x + Math.imul(ke, Le) | 0, l = l + Math.imul(ke, Ke) | 0, l = l + Math.imul(Ue, Le) | 0, b = b + Math.imul(Ue, Ke) | 0, x = x + Math.imul(Te, Fe) | 0, l = l + Math.imul(Te, ze) | 0, l = l + Math.imul(De, Fe) | 0, b = b + Math.imul(De, ze) | 0, x = x + Math.imul(Ne, Pe) | 0, l = l + Math.imul(Ne, je) | 0, l = l + Math.imul(qe, Pe) | 0, b = b + Math.imul(qe, je) | 0, x = x + Math.imul(Re, te) | 0, l = l + Math.imul(Re, ne) | 0, l = l + Math.imul(ve, te) | 0, b = b + Math.imul(ve, ne) | 0, x = x + Math.imul(xe, se) | 0, l = l + Math.imul(xe, pe) | 0, l = l + Math.imul(Ee, se) | 0, b = b + Math.imul(Ee, pe) | 0, x = x + Math.imul(re, be) | 0, l = l + Math.imul(re, _e) | 0, l = l + Math.imul(ge, be) | 0, b = b + Math.imul(ge, _e) | 0;
      var st = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (st >>> 26) | 0, st &= 67108863, x = Math.imul(ee, Le), l = Math.imul(ee, Ke), l = l + Math.imul(F, Le) | 0, b = Math.imul(F, Ke), x = x + Math.imul(ke, Fe) | 0, l = l + Math.imul(ke, ze) | 0, l = l + Math.imul(Ue, Fe) | 0, b = b + Math.imul(Ue, ze) | 0, x = x + Math.imul(Te, Pe) | 0, l = l + Math.imul(Te, je) | 0, l = l + Math.imul(De, Pe) | 0, b = b + Math.imul(De, je) | 0, x = x + Math.imul(Ne, te) | 0, l = l + Math.imul(Ne, ne) | 0, l = l + Math.imul(qe, te) | 0, b = b + Math.imul(qe, ne) | 0, x = x + Math.imul(Re, se) | 0, l = l + Math.imul(Re, pe) | 0, l = l + Math.imul(ve, se) | 0, b = b + Math.imul(ve, pe) | 0, x = x + Math.imul(xe, be) | 0, l = l + Math.imul(xe, _e) | 0, l = l + Math.imul(Ee, be) | 0, b = b + Math.imul(Ee, _e) | 0;
      var Qe = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, x = Math.imul(ee, Fe), l = Math.imul(ee, ze), l = l + Math.imul(F, Fe) | 0, b = Math.imul(F, ze), x = x + Math.imul(ke, Pe) | 0, l = l + Math.imul(ke, je) | 0, l = l + Math.imul(Ue, Pe) | 0, b = b + Math.imul(Ue, je) | 0, x = x + Math.imul(Te, te) | 0, l = l + Math.imul(Te, ne) | 0, l = l + Math.imul(De, te) | 0, b = b + Math.imul(De, ne) | 0, x = x + Math.imul(Ne, se) | 0, l = l + Math.imul(Ne, pe) | 0, l = l + Math.imul(qe, se) | 0, b = b + Math.imul(qe, pe) | 0, x = x + Math.imul(Re, be) | 0, l = l + Math.imul(Re, _e) | 0, l = l + Math.imul(ve, be) | 0, b = b + Math.imul(ve, _e) | 0;
      var rt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, x = Math.imul(ee, Pe), l = Math.imul(ee, je), l = l + Math.imul(F, Pe) | 0, b = Math.imul(F, je), x = x + Math.imul(ke, te) | 0, l = l + Math.imul(ke, ne) | 0, l = l + Math.imul(Ue, te) | 0, b = b + Math.imul(Ue, ne) | 0, x = x + Math.imul(Te, se) | 0, l = l + Math.imul(Te, pe) | 0, l = l + Math.imul(De, se) | 0, b = b + Math.imul(De, pe) | 0, x = x + Math.imul(Ne, be) | 0, l = l + Math.imul(Ne, _e) | 0, l = l + Math.imul(qe, be) | 0, b = b + Math.imul(qe, _e) | 0;
      var it = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (it >>> 26) | 0, it &= 67108863, x = Math.imul(ee, te), l = Math.imul(ee, ne), l = l + Math.imul(F, te) | 0, b = Math.imul(F, ne), x = x + Math.imul(ke, se) | 0, l = l + Math.imul(ke, pe) | 0, l = l + Math.imul(Ue, se) | 0, b = b + Math.imul(Ue, pe) | 0, x = x + Math.imul(Te, be) | 0, l = l + Math.imul(Te, _e) | 0, l = l + Math.imul(De, be) | 0, b = b + Math.imul(De, _e) | 0;
      var et = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, x = Math.imul(ee, se), l = Math.imul(ee, pe), l = l + Math.imul(F, se) | 0, b = Math.imul(F, pe), x = x + Math.imul(ke, be) | 0, l = l + Math.imul(ke, _e) | 0, l = l + Math.imul(Ue, be) | 0, b = b + Math.imul(Ue, _e) | 0;
      var Ie = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (Ie >>> 26) | 0, Ie &= 67108863, x = Math.imul(ee, be), l = Math.imul(ee, _e), l = l + Math.imul(F, be) | 0, b = Math.imul(F, _e);
      var Ce = (E + x | 0) + ((l & 8191) << 13) | 0;
      return E = (b + (l >>> 13) | 0) + (Ce >>> 26) | 0, Ce &= 67108863, $[0] = Je, $[1] = We, $[2] = bt, $[3] = Ye, $[4] = ot, $[5] = ct, $[6] = lt, $[7] = mt, $[8] = dt, $[9] = yt, $[10] = pt, $[11] = tt, $[12] = st, $[13] = Qe, $[14] = rt, $[15] = it, $[16] = et, $[17] = Ie, $[18] = Ce, E !== 0 && ($[19] = E, p.length++), p;
    };
    Math.imul || (L = O);
    function C(_, u, h) {
      h.negative = u.negative ^ _.negative, h.length = _.length + u.length;
      for (var p = 0, y = 0, v = 0; v < h.length - 1; v++) {
        var $ = y;
        y = 0;
        for (var E = p & 67108863, x = Math.min(v, u.length - 1), l = Math.max(0, v - _.length + 1); l <= x; l++) {
          var b = v - l, M = _.words[b] | 0, k = u.words[l] | 0, U = M * k, T = U & 67108863;
          $ = $ + (U / 67108864 | 0) | 0, T = T + E | 0, E = T & 67108863, $ = $ + (T >>> 26) | 0, y += $ >>> 26, $ &= 67108863;
        }
        h.words[v] = E, p = $, $ = y;
      }
      return p !== 0 ? h.words[v] = p : h.length--, h.strip();
    }
    function z(_, u, h) {
      var p = new q();
      return p.mulp(_, u, h);
    }
    o.prototype.mulTo = function(u, h) {
      var p, y = this.length + u.length;
      return this.length === 10 && u.length === 10 ? p = L(this, u, h) : y < 63 ? p = O(this, u, h) : y < 1024 ? p = C(this, u, h) : p = z(this, u, h), p;
    };
    function q(_, u) {
      this.x = _, this.y = u;
    }
    q.prototype.makeRBT = function(u) {
      for (var h = new Array(u), p = o.prototype._countBits(u) - 1, y = 0; y < u; y++)
        h[y] = this.revBin(y, p, u);
      return h;
    }, q.prototype.revBin = function(u, h, p) {
      if (u === 0 || u === p - 1)
        return u;
      for (var y = 0, v = 0; v < h; v++)
        y |= (u & 1) << h - v - 1, u >>= 1;
      return y;
    }, q.prototype.permute = function(u, h, p, y, v, $) {
      for (var E = 0; E < $; E++)
        y[E] = h[u[E]], v[E] = p[u[E]];
    }, q.prototype.transform = function(u, h, p, y, v, $) {
      this.permute($, u, h, p, y, v);
      for (var E = 1; E < v; E <<= 1)
        for (var x = E << 1, l = Math.cos(2 * Math.PI / x), b = Math.sin(2 * Math.PI / x), M = 0; M < v; M += x)
          for (var k = l, U = b, T = 0; T < E; T++) {
            var H = p[M + T], Y = y[M + T], le = p[M + T + E], ce = y[M + T + E], de = k * le - U * ce;
            ce = k * ce + U * le, le = de, p[M + T] = H + le, y[M + T] = Y + ce, p[M + T + E] = H - le, y[M + T + E] = Y - ce, T !== x && (de = l * k - b * U, U = l * U + b * k, k = de);
          }
    }, q.prototype.guessLen13b = function(u, h) {
      var p = Math.max(h, u) | 1, y = p & 1, v = 0;
      for (p = p / 2 | 0; p; p = p >>> 1)
        v++;
      return 1 << v + 1 + y;
    }, q.prototype.conjugate = function(u, h, p) {
      if (!(p <= 1))
        for (var y = 0; y < p / 2; y++) {
          var v = u[y];
          u[y] = u[p - y - 1], u[p - y - 1] = v, v = h[y], h[y] = -h[p - y - 1], h[p - y - 1] = -v;
        }
    }, q.prototype.normalize13b = function(u, h) {
      for (var p = 0, y = 0; y < h / 2; y++) {
        var v = Math.round(u[2 * y + 1] / h) * 8192 + Math.round(u[2 * y] / h) + p;
        u[y] = v & 67108863, v < 67108864 ? p = 0 : p = v / 67108864 | 0;
      }
      return u;
    }, q.prototype.convert13b = function(u, h, p, y) {
      for (var v = 0, $ = 0; $ < h; $++)
        v = v + (u[$] | 0), p[2 * $] = v & 8191, v = v >>> 13, p[2 * $ + 1] = v & 8191, v = v >>> 13;
      for ($ = 2 * h; $ < y; ++$)
        p[$] = 0;
      a(v === 0), a((v & -8192) === 0);
    }, q.prototype.stub = function(u) {
      for (var h = new Array(u), p = 0; p < u; p++)
        h[p] = 0;
      return h;
    }, q.prototype.mulp = function(u, h, p) {
      var y = 2 * this.guessLen13b(u.length, h.length), v = this.makeRBT(y), $ = this.stub(y), E = new Array(y), x = new Array(y), l = new Array(y), b = new Array(y), M = new Array(y), k = new Array(y), U = p.words;
      U.length = y, this.convert13b(u.words, u.length, E, y), this.convert13b(h.words, h.length, b, y), this.transform(E, $, x, l, y, v), this.transform(b, $, M, k, y, v);
      for (var T = 0; T < y; T++) {
        var H = x[T] * M[T] - l[T] * k[T];
        l[T] = x[T] * k[T] + l[T] * M[T], x[T] = H;
      }
      return this.conjugate(x, l, y), this.transform(x, l, U, $, y, v), this.conjugate(U, $, y), this.normalize13b(U, y), p.negative = u.negative ^ h.negative, p.length = u.length + h.length, p.strip();
    }, o.prototype.mul = function(u) {
      var h = new o(null);
      return h.words = new Array(this.length + u.length), this.mulTo(u, h);
    }, o.prototype.mulf = function(u) {
      var h = new o(null);
      return h.words = new Array(this.length + u.length), z(this, u, h);
    }, o.prototype.imul = function(u) {
      return this.clone().mulTo(u, this);
    }, o.prototype.imuln = function(u) {
      a(typeof u == "number"), a(u < 67108864);
      for (var h = 0, p = 0; p < this.length; p++) {
        var y = (this.words[p] | 0) * u, v = (y & 67108863) + (h & 67108863);
        h >>= 26, h += y / 67108864 | 0, h += v >>> 26, this.words[p] = v & 67108863;
      }
      return h !== 0 && (this.words[p] = h, this.length++), this;
    }, o.prototype.muln = function(u) {
      return this.clone().imuln(u);
    }, o.prototype.sqr = function() {
      return this.mul(this);
    }, o.prototype.isqr = function() {
      return this.imul(this.clone());
    }, o.prototype.pow = function(u) {
      var h = I(u);
      if (h.length === 0)
        return new o(1);
      for (var p = this, y = 0; y < h.length && h[y] === 0; y++, p = p.sqr())
        ;
      if (++y < h.length)
        for (var v = p.sqr(); y < h.length; y++, v = v.sqr())
          h[y] !== 0 && (p = p.mul(v));
      return p;
    }, o.prototype.iushln = function(u) {
      a(typeof u == "number" && u >= 0);
      var h = u % 26, p = (u - h) / 26, y = 67108863 >>> 26 - h << 26 - h, v;
      if (h !== 0) {
        var $ = 0;
        for (v = 0; v < this.length; v++) {
          var E = this.words[v] & y, x = (this.words[v] | 0) - E << h;
          this.words[v] = x | $, $ = E >>> 26 - h;
        }
        $ && (this.words[v] = $, this.length++);
      }
      if (p !== 0) {
        for (v = this.length - 1; v >= 0; v--)
          this.words[v + p] = this.words[v];
        for (v = 0; v < p; v++)
          this.words[v] = 0;
        this.length += p;
      }
      return this.strip();
    }, o.prototype.ishln = function(u) {
      return a(this.negative === 0), this.iushln(u);
    }, o.prototype.iushrn = function(u, h, p) {
      a(typeof u == "number" && u >= 0);
      var y;
      h ? y = (h - h % 26) / 26 : y = 0;
      var v = u % 26, $ = Math.min((u - v) / 26, this.length), E = 67108863 ^ 67108863 >>> v << v, x = p;
      if (y -= $, y = Math.max(0, y), x) {
        for (var l = 0; l < $; l++)
          x.words[l] = this.words[l];
        x.length = $;
      }
      if ($ !== 0)
        if (this.length > $)
          for (this.length -= $, l = 0; l < this.length; l++)
            this.words[l] = this.words[l + $];
        else
          this.words[0] = 0, this.length = 1;
      var b = 0;
      for (l = this.length - 1; l >= 0 && (b !== 0 || l >= y); l--) {
        var M = this.words[l] | 0;
        this.words[l] = b << 26 - v | M >>> v, b = M & E;
      }
      return x && b !== 0 && (x.words[x.length++] = b), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
    }, o.prototype.ishrn = function(u, h, p) {
      return a(this.negative === 0), this.iushrn(u, h, p);
    }, o.prototype.shln = function(u) {
      return this.clone().ishln(u);
    }, o.prototype.ushln = function(u) {
      return this.clone().iushln(u);
    }, o.prototype.shrn = function(u) {
      return this.clone().ishrn(u);
    }, o.prototype.ushrn = function(u) {
      return this.clone().iushrn(u);
    }, o.prototype.testn = function(u) {
      a(typeof u == "number" && u >= 0);
      var h = u % 26, p = (u - h) / 26, y = 1 << h;
      if (this.length <= p)
        return !1;
      var v = this.words[p];
      return !!(v & y);
    }, o.prototype.imaskn = function(u) {
      a(typeof u == "number" && u >= 0);
      var h = u % 26, p = (u - h) / 26;
      if (a(this.negative === 0, "imaskn works only with positive numbers"), this.length <= p)
        return this;
      if (h !== 0 && p++, this.length = Math.min(p, this.length), h !== 0) {
        var y = 67108863 ^ 67108863 >>> h << h;
        this.words[this.length - 1] &= y;
      }
      return this.strip();
    }, o.prototype.maskn = function(u) {
      return this.clone().imaskn(u);
    }, o.prototype.iaddn = function(u) {
      return a(typeof u == "number"), a(u < 67108864), u < 0 ? this.isubn(-u) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < u ? (this.words[0] = u - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(u), this.negative = 1, this) : this._iaddn(u);
    }, o.prototype._iaddn = function(u) {
      this.words[0] += u;
      for (var h = 0; h < this.length && this.words[h] >= 67108864; h++)
        this.words[h] -= 67108864, h === this.length - 1 ? this.words[h + 1] = 1 : this.words[h + 1]++;
      return this.length = Math.max(this.length, h + 1), this;
    }, o.prototype.isubn = function(u) {
      if (a(typeof u == "number"), a(u < 67108864), u < 0)
        return this.iaddn(-u);
      if (this.negative !== 0)
        return this.negative = 0, this.iaddn(u), this.negative = 1, this;
      if (this.words[0] -= u, this.length === 1 && this.words[0] < 0)
        this.words[0] = -this.words[0], this.negative = 1;
      else
        for (var h = 0; h < this.length && this.words[h] < 0; h++)
          this.words[h] += 67108864, this.words[h + 1] -= 1;
      return this.strip();
    }, o.prototype.addn = function(u) {
      return this.clone().iaddn(u);
    }, o.prototype.subn = function(u) {
      return this.clone().isubn(u);
    }, o.prototype.iabs = function() {
      return this.negative = 0, this;
    }, o.prototype.abs = function() {
      return this.clone().iabs();
    }, o.prototype._ishlnsubmul = function(u, h, p) {
      var y = u.length + p, v;
      this._expand(y);
      var $, E = 0;
      for (v = 0; v < u.length; v++) {
        $ = (this.words[v + p] | 0) + E;
        var x = (u.words[v] | 0) * h;
        $ -= x & 67108863, E = ($ >> 26) - (x / 67108864 | 0), this.words[v + p] = $ & 67108863;
      }
      for (; v < this.length - p; v++)
        $ = (this.words[v + p] | 0) + E, E = $ >> 26, this.words[v + p] = $ & 67108863;
      if (E === 0)
        return this.strip();
      for (a(E === -1), E = 0, v = 0; v < this.length; v++)
        $ = -(this.words[v] | 0) + E, E = $ >> 26, this.words[v] = $ & 67108863;
      return this.negative = 1, this.strip();
    }, o.prototype._wordDiv = function(u, h) {
      var p = this.length - u.length, y = this.clone(), v = u, $ = v.words[v.length - 1] | 0, E = this._countBits($);
      p = 26 - E, p !== 0 && (v = v.ushln(p), y.iushln(p), $ = v.words[v.length - 1] | 0);
      var x = y.length - v.length, l;
      if (h !== "mod") {
        l = new o(null), l.length = x + 1, l.words = new Array(l.length);
        for (var b = 0; b < l.length; b++)
          l.words[b] = 0;
      }
      var M = y.clone()._ishlnsubmul(v, 1, x);
      M.negative === 0 && (y = M, l && (l.words[x] = 1));
      for (var k = x - 1; k >= 0; k--) {
        var U = (y.words[v.length + k] | 0) * 67108864 + (y.words[v.length + k - 1] | 0);
        for (U = Math.min(U / $ | 0, 67108863), y._ishlnsubmul(v, U, k); y.negative !== 0; )
          U--, y.negative = 0, y._ishlnsubmul(v, 1, k), y.isZero() || (y.negative ^= 1);
        l && (l.words[k] = U);
      }
      return l && l.strip(), y.strip(), h !== "div" && p !== 0 && y.iushrn(p), {
        div: l || null,
        mod: y
      };
    }, o.prototype.divmod = function(u, h, p) {
      if (a(!u.isZero()), this.isZero())
        return {
          div: new o(0),
          mod: new o(0)
        };
      var y, v, $;
      return this.negative !== 0 && u.negative === 0 ? ($ = this.neg().divmod(u, h), h !== "mod" && (y = $.div.neg()), h !== "div" && (v = $.mod.neg(), p && v.negative !== 0 && v.iadd(u)), {
        div: y,
        mod: v
      }) : this.negative === 0 && u.negative !== 0 ? ($ = this.divmod(u.neg(), h), h !== "mod" && (y = $.div.neg()), {
        div: y,
        mod: $.mod
      }) : this.negative & u.negative ? ($ = this.neg().divmod(u.neg(), h), h !== "div" && (v = $.mod.neg(), p && v.negative !== 0 && v.isub(u)), {
        div: $.div,
        mod: v
      }) : u.length > this.length || this.cmp(u) < 0 ? {
        div: new o(0),
        mod: this
      } : u.length === 1 ? h === "div" ? {
        div: this.divn(u.words[0]),
        mod: null
      } : h === "mod" ? {
        div: null,
        mod: new o(this.modn(u.words[0]))
      } : {
        div: this.divn(u.words[0]),
        mod: new o(this.modn(u.words[0]))
      } : this._wordDiv(u, h);
    }, o.prototype.div = function(u) {
      return this.divmod(u, "div", !1).div;
    }, o.prototype.mod = function(u) {
      return this.divmod(u, "mod", !1).mod;
    }, o.prototype.umod = function(u) {
      return this.divmod(u, "mod", !0).mod;
    }, o.prototype.divRound = function(u) {
      var h = this.divmod(u);
      if (h.mod.isZero())
        return h.div;
      var p = h.div.negative !== 0 ? h.mod.isub(u) : h.mod, y = u.ushrn(1), v = u.andln(1), $ = p.cmp(y);
      return $ < 0 || v === 1 && $ === 0 ? h.div : h.div.negative !== 0 ? h.div.isubn(1) : h.div.iaddn(1);
    }, o.prototype.modn = function(u) {
      a(u <= 67108863);
      for (var h = (1 << 26) % u, p = 0, y = this.length - 1; y >= 0; y--)
        p = (h * p + (this.words[y] | 0)) % u;
      return p;
    }, o.prototype.idivn = function(u) {
      a(u <= 67108863);
      for (var h = 0, p = this.length - 1; p >= 0; p--) {
        var y = (this.words[p] | 0) + h * 67108864;
        this.words[p] = y / u | 0, h = y % u;
      }
      return this.strip();
    }, o.prototype.divn = function(u) {
      return this.clone().idivn(u);
    }, o.prototype.egcd = function(u) {
      a(u.negative === 0), a(!u.isZero());
      var h = this, p = u.clone();
      h.negative !== 0 ? h = h.umod(u) : h = h.clone();
      for (var y = new o(1), v = new o(0), $ = new o(0), E = new o(1), x = 0; h.isEven() && p.isEven(); )
        h.iushrn(1), p.iushrn(1), ++x;
      for (var l = p.clone(), b = h.clone(); !h.isZero(); ) {
        for (var M = 0, k = 1; !(h.words[0] & k) && M < 26; ++M, k <<= 1)
          ;
        if (M > 0)
          for (h.iushrn(M); M-- > 0; )
            (y.isOdd() || v.isOdd()) && (y.iadd(l), v.isub(b)), y.iushrn(1), v.iushrn(1);
        for (var U = 0, T = 1; !(p.words[0] & T) && U < 26; ++U, T <<= 1)
          ;
        if (U > 0)
          for (p.iushrn(U); U-- > 0; )
            ($.isOdd() || E.isOdd()) && ($.iadd(l), E.isub(b)), $.iushrn(1), E.iushrn(1);
        h.cmp(p) >= 0 ? (h.isub(p), y.isub($), v.isub(E)) : (p.isub(h), $.isub(y), E.isub(v));
      }
      return {
        a: $,
        b: E,
        gcd: p.iushln(x)
      };
    }, o.prototype._invmp = function(u) {
      a(u.negative === 0), a(!u.isZero());
      var h = this, p = u.clone();
      h.negative !== 0 ? h = h.umod(u) : h = h.clone();
      for (var y = new o(1), v = new o(0), $ = p.clone(); h.cmpn(1) > 0 && p.cmpn(1) > 0; ) {
        for (var E = 0, x = 1; !(h.words[0] & x) && E < 26; ++E, x <<= 1)
          ;
        if (E > 0)
          for (h.iushrn(E); E-- > 0; )
            y.isOdd() && y.iadd($), y.iushrn(1);
        for (var l = 0, b = 1; !(p.words[0] & b) && l < 26; ++l, b <<= 1)
          ;
        if (l > 0)
          for (p.iushrn(l); l-- > 0; )
            v.isOdd() && v.iadd($), v.iushrn(1);
        h.cmp(p) >= 0 ? (h.isub(p), y.isub(v)) : (p.isub(h), v.isub(y));
      }
      var M;
      return h.cmpn(1) === 0 ? M = y : M = v, M.cmpn(0) < 0 && M.iadd(u), M;
    }, o.prototype.gcd = function(u) {
      if (this.isZero())
        return u.abs();
      if (u.isZero())
        return this.abs();
      var h = this.clone(), p = u.clone();
      h.negative = 0, p.negative = 0;
      for (var y = 0; h.isEven() && p.isEven(); y++)
        h.iushrn(1), p.iushrn(1);
      do {
        for (; h.isEven(); )
          h.iushrn(1);
        for (; p.isEven(); )
          p.iushrn(1);
        var v = h.cmp(p);
        if (v < 0) {
          var $ = h;
          h = p, p = $;
        } else if (v === 0 || p.cmpn(1) === 0)
          break;
        h.isub(p);
      } while (!0);
      return p.iushln(y);
    }, o.prototype.invm = function(u) {
      return this.egcd(u).a.umod(u);
    }, o.prototype.isEven = function() {
      return (this.words[0] & 1) === 0;
    }, o.prototype.isOdd = function() {
      return (this.words[0] & 1) === 1;
    }, o.prototype.andln = function(u) {
      return this.words[0] & u;
    }, o.prototype.bincn = function(u) {
      a(typeof u == "number");
      var h = u % 26, p = (u - h) / 26, y = 1 << h;
      if (this.length <= p)
        return this._expand(p + 1), this.words[p] |= y, this;
      for (var v = y, $ = p; v !== 0 && $ < this.length; $++) {
        var E = this.words[$] | 0;
        E += v, v = E >>> 26, E &= 67108863, this.words[$] = E;
      }
      return v !== 0 && (this.words[$] = v, this.length++), this;
    }, o.prototype.isZero = function() {
      return this.length === 1 && this.words[0] === 0;
    }, o.prototype.cmpn = function(u) {
      var h = u < 0;
      if (this.negative !== 0 && !h)
        return -1;
      if (this.negative === 0 && h)
        return 1;
      this.strip();
      var p;
      if (this.length > 1)
        p = 1;
      else {
        h && (u = -u), a(u <= 67108863, "Number is too big");
        var y = this.words[0] | 0;
        p = y === u ? 0 : y < u ? -1 : 1;
      }
      return this.negative !== 0 ? -p | 0 : p;
    }, o.prototype.cmp = function(u) {
      if (this.negative !== 0 && u.negative === 0)
        return -1;
      if (this.negative === 0 && u.negative !== 0)
        return 1;
      var h = this.ucmp(u);
      return this.negative !== 0 ? -h | 0 : h;
    }, o.prototype.ucmp = function(u) {
      if (this.length > u.length)
        return 1;
      if (this.length < u.length)
        return -1;
      for (var h = 0, p = this.length - 1; p >= 0; p--) {
        var y = this.words[p] | 0, v = u.words[p] | 0;
        if (y !== v) {
          y < v ? h = -1 : y > v && (h = 1);
          break;
        }
      }
      return h;
    }, o.prototype.gtn = function(u) {
      return this.cmpn(u) === 1;
    }, o.prototype.gt = function(u) {
      return this.cmp(u) === 1;
    }, o.prototype.gten = function(u) {
      return this.cmpn(u) >= 0;
    }, o.prototype.gte = function(u) {
      return this.cmp(u) >= 0;
    }, o.prototype.ltn = function(u) {
      return this.cmpn(u) === -1;
    }, o.prototype.lt = function(u) {
      return this.cmp(u) === -1;
    }, o.prototype.lten = function(u) {
      return this.cmpn(u) <= 0;
    }, o.prototype.lte = function(u) {
      return this.cmp(u) <= 0;
    }, o.prototype.eqn = function(u) {
      return this.cmpn(u) === 0;
    }, o.prototype.eq = function(u) {
      return this.cmp(u) === 0;
    }, o.red = function(u) {
      return new V(u);
    }, o.prototype.toRed = function(u) {
      return a(!this.red, "Already a number in reduction context"), a(this.negative === 0, "red works only with positives"), u.convertTo(this)._forceRed(u);
    }, o.prototype.fromRed = function() {
      return a(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
    }, o.prototype._forceRed = function(u) {
      return this.red = u, this;
    }, o.prototype.forceRed = function(u) {
      return a(!this.red, "Already a number in reduction context"), this._forceRed(u);
    }, o.prototype.redAdd = function(u) {
      return a(this.red, "redAdd works only with red numbers"), this.red.add(this, u);
    }, o.prototype.redIAdd = function(u) {
      return a(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, u);
    }, o.prototype.redSub = function(u) {
      return a(this.red, "redSub works only with red numbers"), this.red.sub(this, u);
    }, o.prototype.redISub = function(u) {
      return a(this.red, "redISub works only with red numbers"), this.red.isub(this, u);
    }, o.prototype.redShl = function(u) {
      return a(this.red, "redShl works only with red numbers"), this.red.shl(this, u);
    }, o.prototype.redMul = function(u) {
      return a(this.red, "redMul works only with red numbers"), this.red._verify2(this, u), this.red.mul(this, u);
    }, o.prototype.redIMul = function(u) {
      return a(this.red, "redMul works only with red numbers"), this.red._verify2(this, u), this.red.imul(this, u);
    }, o.prototype.redSqr = function() {
      return a(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
    }, o.prototype.redISqr = function() {
      return a(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
    }, o.prototype.redSqrt = function() {
      return a(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
    }, o.prototype.redInvm = function() {
      return a(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
    }, o.prototype.redNeg = function() {
      return a(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
    }, o.prototype.redPow = function(u) {
      return a(this.red && !u.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, u);
    };
    var Z = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function X(_, u) {
      this.name = _, this.p = new o(u, 16), this.n = this.p.bitLength(), this.k = new o(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
    }
    X.prototype._tmp = function() {
      var u = new o(null);
      return u.words = new Array(Math.ceil(this.n / 13)), u;
    }, X.prototype.ireduce = function(u) {
      var h = u, p;
      do
        this.split(h, this.tmp), h = this.imulK(h), h = h.iadd(this.tmp), p = h.bitLength();
      while (p > this.n);
      var y = p < this.n ? -1 : h.ucmp(this.p);
      return y === 0 ? (h.words[0] = 0, h.length = 1) : y > 0 ? h.isub(this.p) : h.strip !== void 0 ? h.strip() : h._strip(), h;
    }, X.prototype.split = function(u, h) {
      u.iushrn(this.n, 0, h);
    }, X.prototype.imulK = function(u) {
      return u.imul(this.k);
    };
    function ie() {
      X.call(
        this,
        "k256",
        "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
      );
    }
    c(ie, X), ie.prototype.split = function(u, h) {
      for (var p = 4194303, y = Math.min(u.length, 9), v = 0; v < y; v++)
        h.words[v] = u.words[v];
      if (h.length = y, u.length <= 9) {
        u.words[0] = 0, u.length = 1;
        return;
      }
      var $ = u.words[9];
      for (h.words[h.length++] = $ & p, v = 10; v < u.length; v++) {
        var E = u.words[v] | 0;
        u.words[v - 10] = (E & p) << 4 | $ >>> 22, $ = E;
      }
      $ >>>= 22, u.words[v - 10] = $, $ === 0 && u.length > 10 ? u.length -= 10 : u.length -= 9;
    }, ie.prototype.imulK = function(u) {
      u.words[u.length] = 0, u.words[u.length + 1] = 0, u.length += 2;
      for (var h = 0, p = 0; p < u.length; p++) {
        var y = u.words[p] | 0;
        h += y * 977, u.words[p] = h & 67108863, h = y * 64 + (h / 67108864 | 0);
      }
      return u.words[u.length - 1] === 0 && (u.length--, u.words[u.length - 1] === 0 && u.length--), u;
    };
    function fe() {
      X.call(
        this,
        "p224",
        "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
      );
    }
    c(fe, X);
    function ye() {
      X.call(
        this,
        "p192",
        "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
      );
    }
    c(ye, X);
    function j() {
      X.call(
        this,
        "25519",
        "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
      );
    }
    c(j, X), j.prototype.imulK = function(u) {
      for (var h = 0, p = 0; p < u.length; p++) {
        var y = (u.words[p] | 0) * 19 + h, v = y & 67108863;
        y >>>= 26, u.words[p] = v, h = y;
      }
      return h !== 0 && (u.words[u.length++] = h), u;
    }, o._prime = function(u) {
      if (Z[u])
        return Z[u];
      var h;
      if (u === "k256")
        h = new ie();
      else if (u === "p224")
        h = new fe();
      else if (u === "p192")
        h = new ye();
      else if (u === "p25519")
        h = new j();
      else
        throw new Error("Unknown prime " + u);
      return Z[u] = h, h;
    };
    function V(_) {
      if (typeof _ == "string") {
        var u = o._prime(_);
        this.m = u.p, this.prime = u;
      } else
        a(_.gtn(1), "modulus must be greater than 1"), this.m = _, this.prime = null;
    }
    V.prototype._verify1 = function(u) {
      a(u.negative === 0, "red works only with positives"), a(u.red, "red works only with red numbers");
    }, V.prototype._verify2 = function(u, h) {
      a((u.negative | h.negative) === 0, "red works only with positives"), a(
        u.red && u.red === h.red,
        "red works only with red numbers"
      );
    }, V.prototype.imod = function(u) {
      return this.prime ? this.prime.ireduce(u)._forceRed(this) : u.umod(this.m)._forceRed(this);
    }, V.prototype.neg = function(u) {
      return u.isZero() ? u.clone() : this.m.sub(u)._forceRed(this);
    }, V.prototype.add = function(u, h) {
      this._verify2(u, h);
      var p = u.add(h);
      return p.cmp(this.m) >= 0 && p.isub(this.m), p._forceRed(this);
    }, V.prototype.iadd = function(u, h) {
      this._verify2(u, h);
      var p = u.iadd(h);
      return p.cmp(this.m) >= 0 && p.isub(this.m), p;
    }, V.prototype.sub = function(u, h) {
      this._verify2(u, h);
      var p = u.sub(h);
      return p.cmpn(0) < 0 && p.iadd(this.m), p._forceRed(this);
    }, V.prototype.isub = function(u, h) {
      this._verify2(u, h);
      var p = u.isub(h);
      return p.cmpn(0) < 0 && p.iadd(this.m), p;
    }, V.prototype.shl = function(u, h) {
      return this._verify1(u), this.imod(u.ushln(h));
    }, V.prototype.imul = function(u, h) {
      return this._verify2(u, h), this.imod(u.imul(h));
    }, V.prototype.mul = function(u, h) {
      return this._verify2(u, h), this.imod(u.mul(h));
    }, V.prototype.isqr = function(u) {
      return this.imul(u, u.clone());
    }, V.prototype.sqr = function(u) {
      return this.mul(u, u);
    }, V.prototype.sqrt = function(u) {
      if (u.isZero())
        return u.clone();
      var h = this.m.andln(3);
      if (a(h % 2 === 1), h === 3) {
        var p = this.m.add(new o(1)).iushrn(2);
        return this.pow(u, p);
      }
      for (var y = this.m.subn(1), v = 0; !y.isZero() && y.andln(1) === 0; )
        v++, y.iushrn(1);
      a(!y.isZero());
      var $ = new o(1).toRed(this), E = $.redNeg(), x = this.m.subn(1).iushrn(1), l = this.m.bitLength();
      for (l = new o(2 * l * l).toRed(this); this.pow(l, x).cmp(E) !== 0; )
        l.redIAdd(E);
      for (var b = this.pow(l, y), M = this.pow(u, y.addn(1).iushrn(1)), k = this.pow(u, y), U = v; k.cmp($) !== 0; ) {
        for (var T = k, H = 0; T.cmp($) !== 0; H++)
          T = T.redSqr();
        a(H < U);
        var Y = this.pow(b, new o(1).iushln(U - H - 1));
        M = M.redMul(Y), b = Y.redSqr(), k = k.redMul(b), U = H;
      }
      return M;
    }, V.prototype.invm = function(u) {
      var h = u._invmp(this.m);
      return h.negative !== 0 ? (h.negative = 0, this.imod(h).redNeg()) : this.imod(h);
    }, V.prototype.pow = function(u, h) {
      if (h.isZero())
        return new o(1).toRed(this);
      if (h.cmpn(1) === 0)
        return u.clone();
      var p = 4, y = new Array(1 << p);
      y[0] = new o(1).toRed(this), y[1] = u;
      for (var v = 2; v < y.length; v++)
        y[v] = this.mul(y[v - 1], u);
      var $ = y[0], E = 0, x = 0, l = h.bitLength() % 26;
      for (l === 0 && (l = 26), v = h.length - 1; v >= 0; v--) {
        for (var b = h.words[v], M = l - 1; M >= 0; M--) {
          var k = b >> M & 1;
          if ($ !== y[0] && ($ = this.sqr($)), k === 0 && E === 0) {
            x = 0;
            continue;
          }
          E <<= 1, E |= k, x++, !(x !== p && (v !== 0 || M !== 0)) && ($ = this.mul($, y[E]), x = 0, E = 0);
        }
        l = 26;
      }
      return $;
    }, V.prototype.convertTo = function(u) {
      var h = u.umod(this.m);
      return h === u ? h.clone() : h;
    }, V.prototype.convertFrom = function(u) {
      var h = u.clone();
      return h.red = null, h;
    }, o.mont = function(u) {
      return new ae(u);
    };
    function ae(_) {
      V.call(this, _), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new o(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
    }
    c(ae, V), ae.prototype.convertTo = function(u) {
      return this.imod(u.ushln(this.shift));
    }, ae.prototype.convertFrom = function(u) {
      var h = this.imod(u.mul(this.rinv));
      return h.red = null, h;
    }, ae.prototype.imul = function(u, h) {
      if (u.isZero() || h.isZero())
        return u.words[0] = 0, u.length = 1, u;
      var p = u.imul(h), y = p.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), v = p.isub(y).iushrn(this.shift), $ = v;
      return v.cmp(this.m) >= 0 ? $ = v.isub(this.m) : v.cmpn(0) < 0 && ($ = v.iadd(this.m)), $._forceRed(this);
    }, ae.prototype.mul = function(u, h) {
      if (u.isZero() || h.isZero())
        return new o(0)._forceRed(this);
      var p = u.mul(h), y = p.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), v = p.isub(y).iushrn(this.shift), $ = v;
      return v.cmp(this.m) >= 0 ? $ = v.isub(this.m) : v.cmpn(0) < 0 && ($ = v.iadd(this.m)), $._forceRed(this);
    }, ae.prototype.invm = function(u) {
      var h = this.imod(u._invmp(this.m).mul(this.r2));
      return h._forceRed(this);
    };
  })(t, commonjsGlobal);
})(bn$6);
var bnExports$6 = bn$6.exports, bn$5 = { exports: {} };
bn$5.exports;
(function(t) {
  (function(e, n) {
    function a(_, u) {
      if (!_)
        throw new Error(u || "Assertion failed");
    }
    function c(_, u) {
      _.super_ = u;
      var h = function() {
      };
      h.prototype = u.prototype, _.prototype = new h(), _.prototype.constructor = _;
    }
    function o(_, u, h) {
      if (o.isBN(_))
        return _;
      this.negative = 0, this.words = null, this.length = 0, this.red = null, _ !== null && ((u === "le" || u === "be") && (h = u, u = 10), this._init(_ || 0, u || 10, h || "be"));
    }
    typeof e == "object" ? e.exports = o : n.BN = o, o.BN = o, o.wordSize = 26;
    var d;
    try {
      typeof window < "u" && typeof window.Buffer < "u" ? d = window.Buffer : d = require$$0$2.Buffer;
    } catch {
    }
    o.isBN = function(u) {
      return u instanceof o ? !0 : u !== null && typeof u == "object" && u.constructor.wordSize === o.wordSize && Array.isArray(u.words);
    }, o.max = function(u, h) {
      return u.cmp(h) > 0 ? u : h;
    }, o.min = function(u, h) {
      return u.cmp(h) < 0 ? u : h;
    }, o.prototype._init = function(u, h, p) {
      if (typeof u == "number")
        return this._initNumber(u, h, p);
      if (typeof u == "object")
        return this._initArray(u, h, p);
      h === "hex" && (h = 16), a(h === (h | 0) && h >= 2 && h <= 36), u = u.toString().replace(/\s+/g, "");
      var y = 0;
      u[0] === "-" && (y++, this.negative = 1), y < u.length && (h === 16 ? this._parseHex(u, y, p) : (this._parseBase(u, h, y), p === "le" && this._initArray(this.toArray(), h, p)));
    }, o.prototype._initNumber = function(u, h, p) {
      u < 0 && (this.negative = 1, u = -u), u < 67108864 ? (this.words = [u & 67108863], this.length = 1) : u < 4503599627370496 ? (this.words = [
        u & 67108863,
        u / 67108864 & 67108863
      ], this.length = 2) : (a(u < 9007199254740992), this.words = [
        u & 67108863,
        u / 67108864 & 67108863,
        1
      ], this.length = 3), p === "le" && this._initArray(this.toArray(), h, p);
    }, o.prototype._initArray = function(u, h, p) {
      if (a(typeof u.length == "number"), u.length <= 0)
        return this.words = [0], this.length = 1, this;
      this.length = Math.ceil(u.length / 3), this.words = new Array(this.length);
      for (var y = 0; y < this.length; y++)
        this.words[y] = 0;
      var v, $, E = 0;
      if (p === "be")
        for (y = u.length - 1, v = 0; y >= 0; y -= 3)
          $ = u[y] | u[y - 1] << 8 | u[y - 2] << 16, this.words[v] |= $ << E & 67108863, this.words[v + 1] = $ >>> 26 - E & 67108863, E += 24, E >= 26 && (E -= 26, v++);
      else if (p === "le")
        for (y = 0, v = 0; y < u.length; y += 3)
          $ = u[y] | u[y + 1] << 8 | u[y + 2] << 16, this.words[v] |= $ << E & 67108863, this.words[v + 1] = $ >>> 26 - E & 67108863, E += 24, E >= 26 && (E -= 26, v++);
      return this.strip();
    };
    function m(_, u) {
      var h = _.charCodeAt(u);
      return h >= 65 && h <= 70 ? h - 55 : h >= 97 && h <= 102 ? h - 87 : h - 48 & 15;
    }
    function w(_, u, h) {
      var p = m(_, h);
      return h - 1 >= u && (p |= m(_, h - 1) << 4), p;
    }
    o.prototype._parseHex = function(u, h, p) {
      this.length = Math.ceil((u.length - h) / 6), this.words = new Array(this.length);
      for (var y = 0; y < this.length; y++)
        this.words[y] = 0;
      var v = 0, $ = 0, E;
      if (p === "be")
        for (y = u.length - 1; y >= h; y -= 2)
          E = w(u, h, y) << v, this.words[$] |= E & 67108863, v >= 18 ? (v -= 18, $ += 1, this.words[$] |= E >>> 26) : v += 8;
      else {
        var x = u.length - h;
        for (y = x % 2 === 0 ? h + 1 : h; y < u.length; y += 2)
          E = w(u, h, y) << v, this.words[$] |= E & 67108863, v >= 18 ? (v -= 18, $ += 1, this.words[$] |= E >>> 26) : v += 8;
      }
      this.strip();
    };
    function S(_, u, h, p) {
      for (var y = 0, v = Math.min(_.length, h), $ = u; $ < v; $++) {
        var E = _.charCodeAt($) - 48;
        y *= p, E >= 49 ? y += E - 49 + 10 : E >= 17 ? y += E - 17 + 10 : y += E;
      }
      return y;
    }
    o.prototype._parseBase = function(u, h, p) {
      this.words = [0], this.length = 1;
      for (var y = 0, v = 1; v <= 67108863; v *= h)
        y++;
      y--, v = v / h | 0;
      for (var $ = u.length - p, E = $ % y, x = Math.min($, $ - E) + p, l = 0, b = p; b < x; b += y)
        l = S(u, b, b + y, h), this.imuln(v), this.words[0] + l < 67108864 ? this.words[0] += l : this._iaddn(l);
      if (E !== 0) {
        var M = 1;
        for (l = S(u, b, u.length, h), b = 0; b < E; b++)
          M *= h;
        this.imuln(M), this.words[0] + l < 67108864 ? this.words[0] += l : this._iaddn(l);
      }
      this.strip();
    }, o.prototype.copy = function(u) {
      u.words = new Array(this.length);
      for (var h = 0; h < this.length; h++)
        u.words[h] = this.words[h];
      u.length = this.length, u.negative = this.negative, u.red = this.red;
    }, o.prototype.clone = function() {
      var u = new o(null);
      return this.copy(u), u;
    }, o.prototype._expand = function(u) {
      for (; this.length < u; )
        this.words[this.length++] = 0;
      return this;
    }, o.prototype.strip = function() {
      for (; this.length > 1 && this.words[this.length - 1] === 0; )
        this.length--;
      return this._normSign();
    }, o.prototype._normSign = function() {
      return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
    }, o.prototype.inspect = function() {
      return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    var A = [
      "",
      "0",
      "00",
      "000",
      "0000",
      "00000",
      "000000",
      "0000000",
      "00000000",
      "000000000",
      "0000000000",
      "00000000000",
      "000000000000",
      "0000000000000",
      "00000000000000",
      "000000000000000",
      "0000000000000000",
      "00000000000000000",
      "000000000000000000",
      "0000000000000000000",
      "00000000000000000000",
      "000000000000000000000",
      "0000000000000000000000",
      "00000000000000000000000",
      "000000000000000000000000",
      "0000000000000000000000000"
    ], B = [
      0,
      0,
      25,
      16,
      12,
      11,
      10,
      9,
      8,
      8,
      7,
      7,
      7,
      7,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5
    ], P = [
      0,
      0,
      33554432,
      43046721,
      16777216,
      48828125,
      60466176,
      40353607,
      16777216,
      43046721,
      1e7,
      19487171,
      35831808,
      62748517,
      7529536,
      11390625,
      16777216,
      24137569,
      34012224,
      47045881,
      64e6,
      4084101,
      5153632,
      6436343,
      7962624,
      9765625,
      11881376,
      14348907,
      17210368,
      20511149,
      243e5,
      28629151,
      33554432,
      39135393,
      45435424,
      52521875,
      60466176
    ];
    o.prototype.toString = function(u, h) {
      u = u || 10, h = h | 0 || 1;
      var p;
      if (u === 16 || u === "hex") {
        p = "";
        for (var y = 0, v = 0, $ = 0; $ < this.length; $++) {
          var E = this.words[$], x = ((E << y | v) & 16777215).toString(16);
          v = E >>> 24 - y & 16777215, v !== 0 || $ !== this.length - 1 ? p = A[6 - x.length] + x + p : p = x + p, y += 2, y >= 26 && (y -= 26, $--);
        }
        for (v !== 0 && (p = v.toString(16) + p); p.length % h !== 0; )
          p = "0" + p;
        return this.negative !== 0 && (p = "-" + p), p;
      }
      if (u === (u | 0) && u >= 2 && u <= 36) {
        var l = B[u], b = P[u];
        p = "";
        var M = this.clone();
        for (M.negative = 0; !M.isZero(); ) {
          var k = M.modn(b).toString(u);
          M = M.idivn(b), M.isZero() ? p = k + p : p = A[l - k.length] + k + p;
        }
        for (this.isZero() && (p = "0" + p); p.length % h !== 0; )
          p = "0" + p;
        return this.negative !== 0 && (p = "-" + p), p;
      }
      a(!1, "Base should be between 2 and 36");
    }, o.prototype.toNumber = function() {
      var u = this.words[0];
      return this.length === 2 ? u += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? u += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && a(!1, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -u : u;
    }, o.prototype.toJSON = function() {
      return this.toString(16);
    }, o.prototype.toBuffer = function(u, h) {
      return a(typeof d < "u"), this.toArrayLike(d, u, h);
    }, o.prototype.toArray = function(u, h) {
      return this.toArrayLike(Array, u, h);
    }, o.prototype.toArrayLike = function(u, h, p) {
      var y = this.byteLength(), v = p || Math.max(1, y);
      a(y <= v, "byte array longer than desired length"), a(v > 0, "Requested array length <= 0"), this.strip();
      var $ = h === "le", E = new u(v), x, l, b = this.clone();
      if ($) {
        for (l = 0; !b.isZero(); l++)
          x = b.andln(255), b.iushrn(8), E[l] = x;
        for (; l < v; l++)
          E[l] = 0;
      } else {
        for (l = 0; l < v - y; l++)
          E[l] = 0;
        for (l = 0; !b.isZero(); l++)
          x = b.andln(255), b.iushrn(8), E[v - l - 1] = x;
      }
      return E;
    }, Math.clz32 ? o.prototype._countBits = function(u) {
      return 32 - Math.clz32(u);
    } : o.prototype._countBits = function(u) {
      var h = u, p = 0;
      return h >= 4096 && (p += 13, h >>>= 13), h >= 64 && (p += 7, h >>>= 7), h >= 8 && (p += 4, h >>>= 4), h >= 2 && (p += 2, h >>>= 2), p + h;
    }, o.prototype._zeroBits = function(u) {
      if (u === 0)
        return 26;
      var h = u, p = 0;
      return h & 8191 || (p += 13, h >>>= 13), h & 127 || (p += 7, h >>>= 7), h & 15 || (p += 4, h >>>= 4), h & 3 || (p += 2, h >>>= 2), h & 1 || p++, p;
    }, o.prototype.bitLength = function() {
      var u = this.words[this.length - 1], h = this._countBits(u);
      return (this.length - 1) * 26 + h;
    };
    function I(_) {
      for (var u = new Array(_.bitLength()), h = 0; h < u.length; h++) {
        var p = h / 26 | 0, y = h % 26;
        u[h] = (_.words[p] & 1 << y) >>> y;
      }
      return u;
    }
    o.prototype.zeroBits = function() {
      if (this.isZero())
        return 0;
      for (var u = 0, h = 0; h < this.length; h++) {
        var p = this._zeroBits(this.words[h]);
        if (u += p, p !== 26)
          break;
      }
      return u;
    }, o.prototype.byteLength = function() {
      return Math.ceil(this.bitLength() / 8);
    }, o.prototype.toTwos = function(u) {
      return this.negative !== 0 ? this.abs().inotn(u).iaddn(1) : this.clone();
    }, o.prototype.fromTwos = function(u) {
      return this.testn(u - 1) ? this.notn(u).iaddn(1).ineg() : this.clone();
    }, o.prototype.isNeg = function() {
      return this.negative !== 0;
    }, o.prototype.neg = function() {
      return this.clone().ineg();
    }, o.prototype.ineg = function() {
      return this.isZero() || (this.negative ^= 1), this;
    }, o.prototype.iuor = function(u) {
      for (; this.length < u.length; )
        this.words[this.length++] = 0;
      for (var h = 0; h < u.length; h++)
        this.words[h] = this.words[h] | u.words[h];
      return this.strip();
    }, o.prototype.ior = function(u) {
      return a((this.negative | u.negative) === 0), this.iuor(u);
    }, o.prototype.or = function(u) {
      return this.length > u.length ? this.clone().ior(u) : u.clone().ior(this);
    }, o.prototype.uor = function(u) {
      return this.length > u.length ? this.clone().iuor(u) : u.clone().iuor(this);
    }, o.prototype.iuand = function(u) {
      var h;
      this.length > u.length ? h = u : h = this;
      for (var p = 0; p < h.length; p++)
        this.words[p] = this.words[p] & u.words[p];
      return this.length = h.length, this.strip();
    }, o.prototype.iand = function(u) {
      return a((this.negative | u.negative) === 0), this.iuand(u);
    }, o.prototype.and = function(u) {
      return this.length > u.length ? this.clone().iand(u) : u.clone().iand(this);
    }, o.prototype.uand = function(u) {
      return this.length > u.length ? this.clone().iuand(u) : u.clone().iuand(this);
    }, o.prototype.iuxor = function(u) {
      var h, p;
      this.length > u.length ? (h = this, p = u) : (h = u, p = this);
      for (var y = 0; y < p.length; y++)
        this.words[y] = h.words[y] ^ p.words[y];
      if (this !== h)
        for (; y < h.length; y++)
          this.words[y] = h.words[y];
      return this.length = h.length, this.strip();
    }, o.prototype.ixor = function(u) {
      return a((this.negative | u.negative) === 0), this.iuxor(u);
    }, o.prototype.xor = function(u) {
      return this.length > u.length ? this.clone().ixor(u) : u.clone().ixor(this);
    }, o.prototype.uxor = function(u) {
      return this.length > u.length ? this.clone().iuxor(u) : u.clone().iuxor(this);
    }, o.prototype.inotn = function(u) {
      a(typeof u == "number" && u >= 0);
      var h = Math.ceil(u / 26) | 0, p = u % 26;
      this._expand(h), p > 0 && h--;
      for (var y = 0; y < h; y++)
        this.words[y] = ~this.words[y] & 67108863;
      return p > 0 && (this.words[y] = ~this.words[y] & 67108863 >> 26 - p), this.strip();
    }, o.prototype.notn = function(u) {
      return this.clone().inotn(u);
    }, o.prototype.setn = function(u, h) {
      a(typeof u == "number" && u >= 0);
      var p = u / 26 | 0, y = u % 26;
      return this._expand(p + 1), h ? this.words[p] = this.words[p] | 1 << y : this.words[p] = this.words[p] & ~(1 << y), this.strip();
    }, o.prototype.iadd = function(u) {
      var h;
      if (this.negative !== 0 && u.negative === 0)
        return this.negative = 0, h = this.isub(u), this.negative ^= 1, this._normSign();
      if (this.negative === 0 && u.negative !== 0)
        return u.negative = 0, h = this.isub(u), u.negative = 1, h._normSign();
      var p, y;
      this.length > u.length ? (p = this, y = u) : (p = u, y = this);
      for (var v = 0, $ = 0; $ < y.length; $++)
        h = (p.words[$] | 0) + (y.words[$] | 0) + v, this.words[$] = h & 67108863, v = h >>> 26;
      for (; v !== 0 && $ < p.length; $++)
        h = (p.words[$] | 0) + v, this.words[$] = h & 67108863, v = h >>> 26;
      if (this.length = p.length, v !== 0)
        this.words[this.length] = v, this.length++;
      else if (p !== this)
        for (; $ < p.length; $++)
          this.words[$] = p.words[$];
      return this;
    }, o.prototype.add = function(u) {
      var h;
      return u.negative !== 0 && this.negative === 0 ? (u.negative = 0, h = this.sub(u), u.negative ^= 1, h) : u.negative === 0 && this.negative !== 0 ? (this.negative = 0, h = u.sub(this), this.negative = 1, h) : this.length > u.length ? this.clone().iadd(u) : u.clone().iadd(this);
    }, o.prototype.isub = function(u) {
      if (u.negative !== 0) {
        u.negative = 0;
        var h = this.iadd(u);
        return u.negative = 1, h._normSign();
      } else if (this.negative !== 0)
        return this.negative = 0, this.iadd(u), this.negative = 1, this._normSign();
      var p = this.cmp(u);
      if (p === 0)
        return this.negative = 0, this.length = 1, this.words[0] = 0, this;
      var y, v;
      p > 0 ? (y = this, v = u) : (y = u, v = this);
      for (var $ = 0, E = 0; E < v.length; E++)
        h = (y.words[E] | 0) - (v.words[E] | 0) + $, $ = h >> 26, this.words[E] = h & 67108863;
      for (; $ !== 0 && E < y.length; E++)
        h = (y.words[E] | 0) + $, $ = h >> 26, this.words[E] = h & 67108863;
      if ($ === 0 && E < y.length && y !== this)
        for (; E < y.length; E++)
          this.words[E] = y.words[E];
      return this.length = Math.max(this.length, E), y !== this && (this.negative = 1), this.strip();
    }, o.prototype.sub = function(u) {
      return this.clone().isub(u);
    };
    function O(_, u, h) {
      h.negative = u.negative ^ _.negative;
      var p = _.length + u.length | 0;
      h.length = p, p = p - 1 | 0;
      var y = _.words[0] | 0, v = u.words[0] | 0, $ = y * v, E = $ & 67108863, x = $ / 67108864 | 0;
      h.words[0] = E;
      for (var l = 1; l < p; l++) {
        for (var b = x >>> 26, M = x & 67108863, k = Math.min(l, u.length - 1), U = Math.max(0, l - _.length + 1); U <= k; U++) {
          var T = l - U | 0;
          y = _.words[T] | 0, v = u.words[U] | 0, $ = y * v + M, b += $ / 67108864 | 0, M = $ & 67108863;
        }
        h.words[l] = M | 0, x = b | 0;
      }
      return x !== 0 ? h.words[l] = x | 0 : h.length--, h.strip();
    }
    var L = function(u, h, p) {
      var y = u.words, v = h.words, $ = p.words, E = 0, x, l, b, M = y[0] | 0, k = M & 8191, U = M >>> 13, T = y[1] | 0, H = T & 8191, Y = T >>> 13, le = y[2] | 0, ce = le & 8191, de = le >>> 13, ue = y[3] | 0, re = ue & 8191, ge = ue >>> 13, Ae = y[4] | 0, xe = Ae & 8191, Ee = Ae >>> 13, at = y[5] | 0, Re = at & 8191, ve = at >>> 13, xt = y[6] | 0, Ne = xt & 8191, qe = xt >>> 13, wt = y[7] | 0, Te = wt & 8191, De = wt >>> 13, vt = y[8] | 0, ke = vt & 8191, Ue = vt >>> 13, $t = y[9] | 0, ee = $t & 8191, F = $t >>> 13, J = v[0] | 0, oe = J & 8191, he = J >>> 13, Se = v[1] | 0, me = Se & 8191, Be = Se >>> 13, gt = v[2] | 0, Me = gt & 8191, Oe = gt >>> 13, ht = v[3] | 0, He = ht & 8191, Ge = ht >>> 13, _t = v[4] | 0, Le = _t & 8191, Ke = _t >>> 13, Et = v[5] | 0, Fe = Et & 8191, ze = Et >>> 13, At = v[6] | 0, Pe = At & 8191, je = At >>> 13, Q = v[7] | 0, te = Q & 8191, ne = Q >>> 13, D = v[8] | 0, se = D & 8191, pe = D >>> 13, $e = v[9] | 0, be = $e & 8191, _e = $e >>> 13;
      p.negative = u.negative ^ h.negative, p.length = 19, x = Math.imul(k, oe), l = Math.imul(k, he), l = l + Math.imul(U, oe) | 0, b = Math.imul(U, he);
      var Je = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, x = Math.imul(H, oe), l = Math.imul(H, he), l = l + Math.imul(Y, oe) | 0, b = Math.imul(Y, he), x = x + Math.imul(k, me) | 0, l = l + Math.imul(k, Be) | 0, l = l + Math.imul(U, me) | 0, b = b + Math.imul(U, Be) | 0;
      var We = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, x = Math.imul(ce, oe), l = Math.imul(ce, he), l = l + Math.imul(de, oe) | 0, b = Math.imul(de, he), x = x + Math.imul(H, me) | 0, l = l + Math.imul(H, Be) | 0, l = l + Math.imul(Y, me) | 0, b = b + Math.imul(Y, Be) | 0, x = x + Math.imul(k, Me) | 0, l = l + Math.imul(k, Oe) | 0, l = l + Math.imul(U, Me) | 0, b = b + Math.imul(U, Oe) | 0;
      var bt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (bt >>> 26) | 0, bt &= 67108863, x = Math.imul(re, oe), l = Math.imul(re, he), l = l + Math.imul(ge, oe) | 0, b = Math.imul(ge, he), x = x + Math.imul(ce, me) | 0, l = l + Math.imul(ce, Be) | 0, l = l + Math.imul(de, me) | 0, b = b + Math.imul(de, Be) | 0, x = x + Math.imul(H, Me) | 0, l = l + Math.imul(H, Oe) | 0, l = l + Math.imul(Y, Me) | 0, b = b + Math.imul(Y, Oe) | 0, x = x + Math.imul(k, He) | 0, l = l + Math.imul(k, Ge) | 0, l = l + Math.imul(U, He) | 0, b = b + Math.imul(U, Ge) | 0;
      var Ye = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, x = Math.imul(xe, oe), l = Math.imul(xe, he), l = l + Math.imul(Ee, oe) | 0, b = Math.imul(Ee, he), x = x + Math.imul(re, me) | 0, l = l + Math.imul(re, Be) | 0, l = l + Math.imul(ge, me) | 0, b = b + Math.imul(ge, Be) | 0, x = x + Math.imul(ce, Me) | 0, l = l + Math.imul(ce, Oe) | 0, l = l + Math.imul(de, Me) | 0, b = b + Math.imul(de, Oe) | 0, x = x + Math.imul(H, He) | 0, l = l + Math.imul(H, Ge) | 0, l = l + Math.imul(Y, He) | 0, b = b + Math.imul(Y, Ge) | 0, x = x + Math.imul(k, Le) | 0, l = l + Math.imul(k, Ke) | 0, l = l + Math.imul(U, Le) | 0, b = b + Math.imul(U, Ke) | 0;
      var ot = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (ot >>> 26) | 0, ot &= 67108863, x = Math.imul(Re, oe), l = Math.imul(Re, he), l = l + Math.imul(ve, oe) | 0, b = Math.imul(ve, he), x = x + Math.imul(xe, me) | 0, l = l + Math.imul(xe, Be) | 0, l = l + Math.imul(Ee, me) | 0, b = b + Math.imul(Ee, Be) | 0, x = x + Math.imul(re, Me) | 0, l = l + Math.imul(re, Oe) | 0, l = l + Math.imul(ge, Me) | 0, b = b + Math.imul(ge, Oe) | 0, x = x + Math.imul(ce, He) | 0, l = l + Math.imul(ce, Ge) | 0, l = l + Math.imul(de, He) | 0, b = b + Math.imul(de, Ge) | 0, x = x + Math.imul(H, Le) | 0, l = l + Math.imul(H, Ke) | 0, l = l + Math.imul(Y, Le) | 0, b = b + Math.imul(Y, Ke) | 0, x = x + Math.imul(k, Fe) | 0, l = l + Math.imul(k, ze) | 0, l = l + Math.imul(U, Fe) | 0, b = b + Math.imul(U, ze) | 0;
      var ct = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (ct >>> 26) | 0, ct &= 67108863, x = Math.imul(Ne, oe), l = Math.imul(Ne, he), l = l + Math.imul(qe, oe) | 0, b = Math.imul(qe, he), x = x + Math.imul(Re, me) | 0, l = l + Math.imul(Re, Be) | 0, l = l + Math.imul(ve, me) | 0, b = b + Math.imul(ve, Be) | 0, x = x + Math.imul(xe, Me) | 0, l = l + Math.imul(xe, Oe) | 0, l = l + Math.imul(Ee, Me) | 0, b = b + Math.imul(Ee, Oe) | 0, x = x + Math.imul(re, He) | 0, l = l + Math.imul(re, Ge) | 0, l = l + Math.imul(ge, He) | 0, b = b + Math.imul(ge, Ge) | 0, x = x + Math.imul(ce, Le) | 0, l = l + Math.imul(ce, Ke) | 0, l = l + Math.imul(de, Le) | 0, b = b + Math.imul(de, Ke) | 0, x = x + Math.imul(H, Fe) | 0, l = l + Math.imul(H, ze) | 0, l = l + Math.imul(Y, Fe) | 0, b = b + Math.imul(Y, ze) | 0, x = x + Math.imul(k, Pe) | 0, l = l + Math.imul(k, je) | 0, l = l + Math.imul(U, Pe) | 0, b = b + Math.imul(U, je) | 0;
      var lt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (lt >>> 26) | 0, lt &= 67108863, x = Math.imul(Te, oe), l = Math.imul(Te, he), l = l + Math.imul(De, oe) | 0, b = Math.imul(De, he), x = x + Math.imul(Ne, me) | 0, l = l + Math.imul(Ne, Be) | 0, l = l + Math.imul(qe, me) | 0, b = b + Math.imul(qe, Be) | 0, x = x + Math.imul(Re, Me) | 0, l = l + Math.imul(Re, Oe) | 0, l = l + Math.imul(ve, Me) | 0, b = b + Math.imul(ve, Oe) | 0, x = x + Math.imul(xe, He) | 0, l = l + Math.imul(xe, Ge) | 0, l = l + Math.imul(Ee, He) | 0, b = b + Math.imul(Ee, Ge) | 0, x = x + Math.imul(re, Le) | 0, l = l + Math.imul(re, Ke) | 0, l = l + Math.imul(ge, Le) | 0, b = b + Math.imul(ge, Ke) | 0, x = x + Math.imul(ce, Fe) | 0, l = l + Math.imul(ce, ze) | 0, l = l + Math.imul(de, Fe) | 0, b = b + Math.imul(de, ze) | 0, x = x + Math.imul(H, Pe) | 0, l = l + Math.imul(H, je) | 0, l = l + Math.imul(Y, Pe) | 0, b = b + Math.imul(Y, je) | 0, x = x + Math.imul(k, te) | 0, l = l + Math.imul(k, ne) | 0, l = l + Math.imul(U, te) | 0, b = b + Math.imul(U, ne) | 0;
      var mt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (mt >>> 26) | 0, mt &= 67108863, x = Math.imul(ke, oe), l = Math.imul(ke, he), l = l + Math.imul(Ue, oe) | 0, b = Math.imul(Ue, he), x = x + Math.imul(Te, me) | 0, l = l + Math.imul(Te, Be) | 0, l = l + Math.imul(De, me) | 0, b = b + Math.imul(De, Be) | 0, x = x + Math.imul(Ne, Me) | 0, l = l + Math.imul(Ne, Oe) | 0, l = l + Math.imul(qe, Me) | 0, b = b + Math.imul(qe, Oe) | 0, x = x + Math.imul(Re, He) | 0, l = l + Math.imul(Re, Ge) | 0, l = l + Math.imul(ve, He) | 0, b = b + Math.imul(ve, Ge) | 0, x = x + Math.imul(xe, Le) | 0, l = l + Math.imul(xe, Ke) | 0, l = l + Math.imul(Ee, Le) | 0, b = b + Math.imul(Ee, Ke) | 0, x = x + Math.imul(re, Fe) | 0, l = l + Math.imul(re, ze) | 0, l = l + Math.imul(ge, Fe) | 0, b = b + Math.imul(ge, ze) | 0, x = x + Math.imul(ce, Pe) | 0, l = l + Math.imul(ce, je) | 0, l = l + Math.imul(de, Pe) | 0, b = b + Math.imul(de, je) | 0, x = x + Math.imul(H, te) | 0, l = l + Math.imul(H, ne) | 0, l = l + Math.imul(Y, te) | 0, b = b + Math.imul(Y, ne) | 0, x = x + Math.imul(k, se) | 0, l = l + Math.imul(k, pe) | 0, l = l + Math.imul(U, se) | 0, b = b + Math.imul(U, pe) | 0;
      var dt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (dt >>> 26) | 0, dt &= 67108863, x = Math.imul(ee, oe), l = Math.imul(ee, he), l = l + Math.imul(F, oe) | 0, b = Math.imul(F, he), x = x + Math.imul(ke, me) | 0, l = l + Math.imul(ke, Be) | 0, l = l + Math.imul(Ue, me) | 0, b = b + Math.imul(Ue, Be) | 0, x = x + Math.imul(Te, Me) | 0, l = l + Math.imul(Te, Oe) | 0, l = l + Math.imul(De, Me) | 0, b = b + Math.imul(De, Oe) | 0, x = x + Math.imul(Ne, He) | 0, l = l + Math.imul(Ne, Ge) | 0, l = l + Math.imul(qe, He) | 0, b = b + Math.imul(qe, Ge) | 0, x = x + Math.imul(Re, Le) | 0, l = l + Math.imul(Re, Ke) | 0, l = l + Math.imul(ve, Le) | 0, b = b + Math.imul(ve, Ke) | 0, x = x + Math.imul(xe, Fe) | 0, l = l + Math.imul(xe, ze) | 0, l = l + Math.imul(Ee, Fe) | 0, b = b + Math.imul(Ee, ze) | 0, x = x + Math.imul(re, Pe) | 0, l = l + Math.imul(re, je) | 0, l = l + Math.imul(ge, Pe) | 0, b = b + Math.imul(ge, je) | 0, x = x + Math.imul(ce, te) | 0, l = l + Math.imul(ce, ne) | 0, l = l + Math.imul(de, te) | 0, b = b + Math.imul(de, ne) | 0, x = x + Math.imul(H, se) | 0, l = l + Math.imul(H, pe) | 0, l = l + Math.imul(Y, se) | 0, b = b + Math.imul(Y, pe) | 0, x = x + Math.imul(k, be) | 0, l = l + Math.imul(k, _e) | 0, l = l + Math.imul(U, be) | 0, b = b + Math.imul(U, _e) | 0;
      var yt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (yt >>> 26) | 0, yt &= 67108863, x = Math.imul(ee, me), l = Math.imul(ee, Be), l = l + Math.imul(F, me) | 0, b = Math.imul(F, Be), x = x + Math.imul(ke, Me) | 0, l = l + Math.imul(ke, Oe) | 0, l = l + Math.imul(Ue, Me) | 0, b = b + Math.imul(Ue, Oe) | 0, x = x + Math.imul(Te, He) | 0, l = l + Math.imul(Te, Ge) | 0, l = l + Math.imul(De, He) | 0, b = b + Math.imul(De, Ge) | 0, x = x + Math.imul(Ne, Le) | 0, l = l + Math.imul(Ne, Ke) | 0, l = l + Math.imul(qe, Le) | 0, b = b + Math.imul(qe, Ke) | 0, x = x + Math.imul(Re, Fe) | 0, l = l + Math.imul(Re, ze) | 0, l = l + Math.imul(ve, Fe) | 0, b = b + Math.imul(ve, ze) | 0, x = x + Math.imul(xe, Pe) | 0, l = l + Math.imul(xe, je) | 0, l = l + Math.imul(Ee, Pe) | 0, b = b + Math.imul(Ee, je) | 0, x = x + Math.imul(re, te) | 0, l = l + Math.imul(re, ne) | 0, l = l + Math.imul(ge, te) | 0, b = b + Math.imul(ge, ne) | 0, x = x + Math.imul(ce, se) | 0, l = l + Math.imul(ce, pe) | 0, l = l + Math.imul(de, se) | 0, b = b + Math.imul(de, pe) | 0, x = x + Math.imul(H, be) | 0, l = l + Math.imul(H, _e) | 0, l = l + Math.imul(Y, be) | 0, b = b + Math.imul(Y, _e) | 0;
      var pt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (pt >>> 26) | 0, pt &= 67108863, x = Math.imul(ee, Me), l = Math.imul(ee, Oe), l = l + Math.imul(F, Me) | 0, b = Math.imul(F, Oe), x = x + Math.imul(ke, He) | 0, l = l + Math.imul(ke, Ge) | 0, l = l + Math.imul(Ue, He) | 0, b = b + Math.imul(Ue, Ge) | 0, x = x + Math.imul(Te, Le) | 0, l = l + Math.imul(Te, Ke) | 0, l = l + Math.imul(De, Le) | 0, b = b + Math.imul(De, Ke) | 0, x = x + Math.imul(Ne, Fe) | 0, l = l + Math.imul(Ne, ze) | 0, l = l + Math.imul(qe, Fe) | 0, b = b + Math.imul(qe, ze) | 0, x = x + Math.imul(Re, Pe) | 0, l = l + Math.imul(Re, je) | 0, l = l + Math.imul(ve, Pe) | 0, b = b + Math.imul(ve, je) | 0, x = x + Math.imul(xe, te) | 0, l = l + Math.imul(xe, ne) | 0, l = l + Math.imul(Ee, te) | 0, b = b + Math.imul(Ee, ne) | 0, x = x + Math.imul(re, se) | 0, l = l + Math.imul(re, pe) | 0, l = l + Math.imul(ge, se) | 0, b = b + Math.imul(ge, pe) | 0, x = x + Math.imul(ce, be) | 0, l = l + Math.imul(ce, _e) | 0, l = l + Math.imul(de, be) | 0, b = b + Math.imul(de, _e) | 0;
      var tt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, x = Math.imul(ee, He), l = Math.imul(ee, Ge), l = l + Math.imul(F, He) | 0, b = Math.imul(F, Ge), x = x + Math.imul(ke, Le) | 0, l = l + Math.imul(ke, Ke) | 0, l = l + Math.imul(Ue, Le) | 0, b = b + Math.imul(Ue, Ke) | 0, x = x + Math.imul(Te, Fe) | 0, l = l + Math.imul(Te, ze) | 0, l = l + Math.imul(De, Fe) | 0, b = b + Math.imul(De, ze) | 0, x = x + Math.imul(Ne, Pe) | 0, l = l + Math.imul(Ne, je) | 0, l = l + Math.imul(qe, Pe) | 0, b = b + Math.imul(qe, je) | 0, x = x + Math.imul(Re, te) | 0, l = l + Math.imul(Re, ne) | 0, l = l + Math.imul(ve, te) | 0, b = b + Math.imul(ve, ne) | 0, x = x + Math.imul(xe, se) | 0, l = l + Math.imul(xe, pe) | 0, l = l + Math.imul(Ee, se) | 0, b = b + Math.imul(Ee, pe) | 0, x = x + Math.imul(re, be) | 0, l = l + Math.imul(re, _e) | 0, l = l + Math.imul(ge, be) | 0, b = b + Math.imul(ge, _e) | 0;
      var st = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (st >>> 26) | 0, st &= 67108863, x = Math.imul(ee, Le), l = Math.imul(ee, Ke), l = l + Math.imul(F, Le) | 0, b = Math.imul(F, Ke), x = x + Math.imul(ke, Fe) | 0, l = l + Math.imul(ke, ze) | 0, l = l + Math.imul(Ue, Fe) | 0, b = b + Math.imul(Ue, ze) | 0, x = x + Math.imul(Te, Pe) | 0, l = l + Math.imul(Te, je) | 0, l = l + Math.imul(De, Pe) | 0, b = b + Math.imul(De, je) | 0, x = x + Math.imul(Ne, te) | 0, l = l + Math.imul(Ne, ne) | 0, l = l + Math.imul(qe, te) | 0, b = b + Math.imul(qe, ne) | 0, x = x + Math.imul(Re, se) | 0, l = l + Math.imul(Re, pe) | 0, l = l + Math.imul(ve, se) | 0, b = b + Math.imul(ve, pe) | 0, x = x + Math.imul(xe, be) | 0, l = l + Math.imul(xe, _e) | 0, l = l + Math.imul(Ee, be) | 0, b = b + Math.imul(Ee, _e) | 0;
      var Qe = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, x = Math.imul(ee, Fe), l = Math.imul(ee, ze), l = l + Math.imul(F, Fe) | 0, b = Math.imul(F, ze), x = x + Math.imul(ke, Pe) | 0, l = l + Math.imul(ke, je) | 0, l = l + Math.imul(Ue, Pe) | 0, b = b + Math.imul(Ue, je) | 0, x = x + Math.imul(Te, te) | 0, l = l + Math.imul(Te, ne) | 0, l = l + Math.imul(De, te) | 0, b = b + Math.imul(De, ne) | 0, x = x + Math.imul(Ne, se) | 0, l = l + Math.imul(Ne, pe) | 0, l = l + Math.imul(qe, se) | 0, b = b + Math.imul(qe, pe) | 0, x = x + Math.imul(Re, be) | 0, l = l + Math.imul(Re, _e) | 0, l = l + Math.imul(ve, be) | 0, b = b + Math.imul(ve, _e) | 0;
      var rt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, x = Math.imul(ee, Pe), l = Math.imul(ee, je), l = l + Math.imul(F, Pe) | 0, b = Math.imul(F, je), x = x + Math.imul(ke, te) | 0, l = l + Math.imul(ke, ne) | 0, l = l + Math.imul(Ue, te) | 0, b = b + Math.imul(Ue, ne) | 0, x = x + Math.imul(Te, se) | 0, l = l + Math.imul(Te, pe) | 0, l = l + Math.imul(De, se) | 0, b = b + Math.imul(De, pe) | 0, x = x + Math.imul(Ne, be) | 0, l = l + Math.imul(Ne, _e) | 0, l = l + Math.imul(qe, be) | 0, b = b + Math.imul(qe, _e) | 0;
      var it = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (it >>> 26) | 0, it &= 67108863, x = Math.imul(ee, te), l = Math.imul(ee, ne), l = l + Math.imul(F, te) | 0, b = Math.imul(F, ne), x = x + Math.imul(ke, se) | 0, l = l + Math.imul(ke, pe) | 0, l = l + Math.imul(Ue, se) | 0, b = b + Math.imul(Ue, pe) | 0, x = x + Math.imul(Te, be) | 0, l = l + Math.imul(Te, _e) | 0, l = l + Math.imul(De, be) | 0, b = b + Math.imul(De, _e) | 0;
      var et = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, x = Math.imul(ee, se), l = Math.imul(ee, pe), l = l + Math.imul(F, se) | 0, b = Math.imul(F, pe), x = x + Math.imul(ke, be) | 0, l = l + Math.imul(ke, _e) | 0, l = l + Math.imul(Ue, be) | 0, b = b + Math.imul(Ue, _e) | 0;
      var Ie = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (Ie >>> 26) | 0, Ie &= 67108863, x = Math.imul(ee, be), l = Math.imul(ee, _e), l = l + Math.imul(F, be) | 0, b = Math.imul(F, _e);
      var Ce = (E + x | 0) + ((l & 8191) << 13) | 0;
      return E = (b + (l >>> 13) | 0) + (Ce >>> 26) | 0, Ce &= 67108863, $[0] = Je, $[1] = We, $[2] = bt, $[3] = Ye, $[4] = ot, $[5] = ct, $[6] = lt, $[7] = mt, $[8] = dt, $[9] = yt, $[10] = pt, $[11] = tt, $[12] = st, $[13] = Qe, $[14] = rt, $[15] = it, $[16] = et, $[17] = Ie, $[18] = Ce, E !== 0 && ($[19] = E, p.length++), p;
    };
    Math.imul || (L = O);
    function C(_, u, h) {
      h.negative = u.negative ^ _.negative, h.length = _.length + u.length;
      for (var p = 0, y = 0, v = 0; v < h.length - 1; v++) {
        var $ = y;
        y = 0;
        for (var E = p & 67108863, x = Math.min(v, u.length - 1), l = Math.max(0, v - _.length + 1); l <= x; l++) {
          var b = v - l, M = _.words[b] | 0, k = u.words[l] | 0, U = M * k, T = U & 67108863;
          $ = $ + (U / 67108864 | 0) | 0, T = T + E | 0, E = T & 67108863, $ = $ + (T >>> 26) | 0, y += $ >>> 26, $ &= 67108863;
        }
        h.words[v] = E, p = $, $ = y;
      }
      return p !== 0 ? h.words[v] = p : h.length--, h.strip();
    }
    function z(_, u, h) {
      var p = new q();
      return p.mulp(_, u, h);
    }
    o.prototype.mulTo = function(u, h) {
      var p, y = this.length + u.length;
      return this.length === 10 && u.length === 10 ? p = L(this, u, h) : y < 63 ? p = O(this, u, h) : y < 1024 ? p = C(this, u, h) : p = z(this, u, h), p;
    };
    function q(_, u) {
      this.x = _, this.y = u;
    }
    q.prototype.makeRBT = function(u) {
      for (var h = new Array(u), p = o.prototype._countBits(u) - 1, y = 0; y < u; y++)
        h[y] = this.revBin(y, p, u);
      return h;
    }, q.prototype.revBin = function(u, h, p) {
      if (u === 0 || u === p - 1)
        return u;
      for (var y = 0, v = 0; v < h; v++)
        y |= (u & 1) << h - v - 1, u >>= 1;
      return y;
    }, q.prototype.permute = function(u, h, p, y, v, $) {
      for (var E = 0; E < $; E++)
        y[E] = h[u[E]], v[E] = p[u[E]];
    }, q.prototype.transform = function(u, h, p, y, v, $) {
      this.permute($, u, h, p, y, v);
      for (var E = 1; E < v; E <<= 1)
        for (var x = E << 1, l = Math.cos(2 * Math.PI / x), b = Math.sin(2 * Math.PI / x), M = 0; M < v; M += x)
          for (var k = l, U = b, T = 0; T < E; T++) {
            var H = p[M + T], Y = y[M + T], le = p[M + T + E], ce = y[M + T + E], de = k * le - U * ce;
            ce = k * ce + U * le, le = de, p[M + T] = H + le, y[M + T] = Y + ce, p[M + T + E] = H - le, y[M + T + E] = Y - ce, T !== x && (de = l * k - b * U, U = l * U + b * k, k = de);
          }
    }, q.prototype.guessLen13b = function(u, h) {
      var p = Math.max(h, u) | 1, y = p & 1, v = 0;
      for (p = p / 2 | 0; p; p = p >>> 1)
        v++;
      return 1 << v + 1 + y;
    }, q.prototype.conjugate = function(u, h, p) {
      if (!(p <= 1))
        for (var y = 0; y < p / 2; y++) {
          var v = u[y];
          u[y] = u[p - y - 1], u[p - y - 1] = v, v = h[y], h[y] = -h[p - y - 1], h[p - y - 1] = -v;
        }
    }, q.prototype.normalize13b = function(u, h) {
      for (var p = 0, y = 0; y < h / 2; y++) {
        var v = Math.round(u[2 * y + 1] / h) * 8192 + Math.round(u[2 * y] / h) + p;
        u[y] = v & 67108863, v < 67108864 ? p = 0 : p = v / 67108864 | 0;
      }
      return u;
    }, q.prototype.convert13b = function(u, h, p, y) {
      for (var v = 0, $ = 0; $ < h; $++)
        v = v + (u[$] | 0), p[2 * $] = v & 8191, v = v >>> 13, p[2 * $ + 1] = v & 8191, v = v >>> 13;
      for ($ = 2 * h; $ < y; ++$)
        p[$] = 0;
      a(v === 0), a((v & -8192) === 0);
    }, q.prototype.stub = function(u) {
      for (var h = new Array(u), p = 0; p < u; p++)
        h[p] = 0;
      return h;
    }, q.prototype.mulp = function(u, h, p) {
      var y = 2 * this.guessLen13b(u.length, h.length), v = this.makeRBT(y), $ = this.stub(y), E = new Array(y), x = new Array(y), l = new Array(y), b = new Array(y), M = new Array(y), k = new Array(y), U = p.words;
      U.length = y, this.convert13b(u.words, u.length, E, y), this.convert13b(h.words, h.length, b, y), this.transform(E, $, x, l, y, v), this.transform(b, $, M, k, y, v);
      for (var T = 0; T < y; T++) {
        var H = x[T] * M[T] - l[T] * k[T];
        l[T] = x[T] * k[T] + l[T] * M[T], x[T] = H;
      }
      return this.conjugate(x, l, y), this.transform(x, l, U, $, y, v), this.conjugate(U, $, y), this.normalize13b(U, y), p.negative = u.negative ^ h.negative, p.length = u.length + h.length, p.strip();
    }, o.prototype.mul = function(u) {
      var h = new o(null);
      return h.words = new Array(this.length + u.length), this.mulTo(u, h);
    }, o.prototype.mulf = function(u) {
      var h = new o(null);
      return h.words = new Array(this.length + u.length), z(this, u, h);
    }, o.prototype.imul = function(u) {
      return this.clone().mulTo(u, this);
    }, o.prototype.imuln = function(u) {
      a(typeof u == "number"), a(u < 67108864);
      for (var h = 0, p = 0; p < this.length; p++) {
        var y = (this.words[p] | 0) * u, v = (y & 67108863) + (h & 67108863);
        h >>= 26, h += y / 67108864 | 0, h += v >>> 26, this.words[p] = v & 67108863;
      }
      return h !== 0 && (this.words[p] = h, this.length++), this;
    }, o.prototype.muln = function(u) {
      return this.clone().imuln(u);
    }, o.prototype.sqr = function() {
      return this.mul(this);
    }, o.prototype.isqr = function() {
      return this.imul(this.clone());
    }, o.prototype.pow = function(u) {
      var h = I(u);
      if (h.length === 0)
        return new o(1);
      for (var p = this, y = 0; y < h.length && h[y] === 0; y++, p = p.sqr())
        ;
      if (++y < h.length)
        for (var v = p.sqr(); y < h.length; y++, v = v.sqr())
          h[y] !== 0 && (p = p.mul(v));
      return p;
    }, o.prototype.iushln = function(u) {
      a(typeof u == "number" && u >= 0);
      var h = u % 26, p = (u - h) / 26, y = 67108863 >>> 26 - h << 26 - h, v;
      if (h !== 0) {
        var $ = 0;
        for (v = 0; v < this.length; v++) {
          var E = this.words[v] & y, x = (this.words[v] | 0) - E << h;
          this.words[v] = x | $, $ = E >>> 26 - h;
        }
        $ && (this.words[v] = $, this.length++);
      }
      if (p !== 0) {
        for (v = this.length - 1; v >= 0; v--)
          this.words[v + p] = this.words[v];
        for (v = 0; v < p; v++)
          this.words[v] = 0;
        this.length += p;
      }
      return this.strip();
    }, o.prototype.ishln = function(u) {
      return a(this.negative === 0), this.iushln(u);
    }, o.prototype.iushrn = function(u, h, p) {
      a(typeof u == "number" && u >= 0);
      var y;
      h ? y = (h - h % 26) / 26 : y = 0;
      var v = u % 26, $ = Math.min((u - v) / 26, this.length), E = 67108863 ^ 67108863 >>> v << v, x = p;
      if (y -= $, y = Math.max(0, y), x) {
        for (var l = 0; l < $; l++)
          x.words[l] = this.words[l];
        x.length = $;
      }
      if ($ !== 0)
        if (this.length > $)
          for (this.length -= $, l = 0; l < this.length; l++)
            this.words[l] = this.words[l + $];
        else
          this.words[0] = 0, this.length = 1;
      var b = 0;
      for (l = this.length - 1; l >= 0 && (b !== 0 || l >= y); l--) {
        var M = this.words[l] | 0;
        this.words[l] = b << 26 - v | M >>> v, b = M & E;
      }
      return x && b !== 0 && (x.words[x.length++] = b), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
    }, o.prototype.ishrn = function(u, h, p) {
      return a(this.negative === 0), this.iushrn(u, h, p);
    }, o.prototype.shln = function(u) {
      return this.clone().ishln(u);
    }, o.prototype.ushln = function(u) {
      return this.clone().iushln(u);
    }, o.prototype.shrn = function(u) {
      return this.clone().ishrn(u);
    }, o.prototype.ushrn = function(u) {
      return this.clone().iushrn(u);
    }, o.prototype.testn = function(u) {
      a(typeof u == "number" && u >= 0);
      var h = u % 26, p = (u - h) / 26, y = 1 << h;
      if (this.length <= p)
        return !1;
      var v = this.words[p];
      return !!(v & y);
    }, o.prototype.imaskn = function(u) {
      a(typeof u == "number" && u >= 0);
      var h = u % 26, p = (u - h) / 26;
      if (a(this.negative === 0, "imaskn works only with positive numbers"), this.length <= p)
        return this;
      if (h !== 0 && p++, this.length = Math.min(p, this.length), h !== 0) {
        var y = 67108863 ^ 67108863 >>> h << h;
        this.words[this.length - 1] &= y;
      }
      return this.strip();
    }, o.prototype.maskn = function(u) {
      return this.clone().imaskn(u);
    }, o.prototype.iaddn = function(u) {
      return a(typeof u == "number"), a(u < 67108864), u < 0 ? this.isubn(-u) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < u ? (this.words[0] = u - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(u), this.negative = 1, this) : this._iaddn(u);
    }, o.prototype._iaddn = function(u) {
      this.words[0] += u;
      for (var h = 0; h < this.length && this.words[h] >= 67108864; h++)
        this.words[h] -= 67108864, h === this.length - 1 ? this.words[h + 1] = 1 : this.words[h + 1]++;
      return this.length = Math.max(this.length, h + 1), this;
    }, o.prototype.isubn = function(u) {
      if (a(typeof u == "number"), a(u < 67108864), u < 0)
        return this.iaddn(-u);
      if (this.negative !== 0)
        return this.negative = 0, this.iaddn(u), this.negative = 1, this;
      if (this.words[0] -= u, this.length === 1 && this.words[0] < 0)
        this.words[0] = -this.words[0], this.negative = 1;
      else
        for (var h = 0; h < this.length && this.words[h] < 0; h++)
          this.words[h] += 67108864, this.words[h + 1] -= 1;
      return this.strip();
    }, o.prototype.addn = function(u) {
      return this.clone().iaddn(u);
    }, o.prototype.subn = function(u) {
      return this.clone().isubn(u);
    }, o.prototype.iabs = function() {
      return this.negative = 0, this;
    }, o.prototype.abs = function() {
      return this.clone().iabs();
    }, o.prototype._ishlnsubmul = function(u, h, p) {
      var y = u.length + p, v;
      this._expand(y);
      var $, E = 0;
      for (v = 0; v < u.length; v++) {
        $ = (this.words[v + p] | 0) + E;
        var x = (u.words[v] | 0) * h;
        $ -= x & 67108863, E = ($ >> 26) - (x / 67108864 | 0), this.words[v + p] = $ & 67108863;
      }
      for (; v < this.length - p; v++)
        $ = (this.words[v + p] | 0) + E, E = $ >> 26, this.words[v + p] = $ & 67108863;
      if (E === 0)
        return this.strip();
      for (a(E === -1), E = 0, v = 0; v < this.length; v++)
        $ = -(this.words[v] | 0) + E, E = $ >> 26, this.words[v] = $ & 67108863;
      return this.negative = 1, this.strip();
    }, o.prototype._wordDiv = function(u, h) {
      var p = this.length - u.length, y = this.clone(), v = u, $ = v.words[v.length - 1] | 0, E = this._countBits($);
      p = 26 - E, p !== 0 && (v = v.ushln(p), y.iushln(p), $ = v.words[v.length - 1] | 0);
      var x = y.length - v.length, l;
      if (h !== "mod") {
        l = new o(null), l.length = x + 1, l.words = new Array(l.length);
        for (var b = 0; b < l.length; b++)
          l.words[b] = 0;
      }
      var M = y.clone()._ishlnsubmul(v, 1, x);
      M.negative === 0 && (y = M, l && (l.words[x] = 1));
      for (var k = x - 1; k >= 0; k--) {
        var U = (y.words[v.length + k] | 0) * 67108864 + (y.words[v.length + k - 1] | 0);
        for (U = Math.min(U / $ | 0, 67108863), y._ishlnsubmul(v, U, k); y.negative !== 0; )
          U--, y.negative = 0, y._ishlnsubmul(v, 1, k), y.isZero() || (y.negative ^= 1);
        l && (l.words[k] = U);
      }
      return l && l.strip(), y.strip(), h !== "div" && p !== 0 && y.iushrn(p), {
        div: l || null,
        mod: y
      };
    }, o.prototype.divmod = function(u, h, p) {
      if (a(!u.isZero()), this.isZero())
        return {
          div: new o(0),
          mod: new o(0)
        };
      var y, v, $;
      return this.negative !== 0 && u.negative === 0 ? ($ = this.neg().divmod(u, h), h !== "mod" && (y = $.div.neg()), h !== "div" && (v = $.mod.neg(), p && v.negative !== 0 && v.iadd(u)), {
        div: y,
        mod: v
      }) : this.negative === 0 && u.negative !== 0 ? ($ = this.divmod(u.neg(), h), h !== "mod" && (y = $.div.neg()), {
        div: y,
        mod: $.mod
      }) : this.negative & u.negative ? ($ = this.neg().divmod(u.neg(), h), h !== "div" && (v = $.mod.neg(), p && v.negative !== 0 && v.isub(u)), {
        div: $.div,
        mod: v
      }) : u.length > this.length || this.cmp(u) < 0 ? {
        div: new o(0),
        mod: this
      } : u.length === 1 ? h === "div" ? {
        div: this.divn(u.words[0]),
        mod: null
      } : h === "mod" ? {
        div: null,
        mod: new o(this.modn(u.words[0]))
      } : {
        div: this.divn(u.words[0]),
        mod: new o(this.modn(u.words[0]))
      } : this._wordDiv(u, h);
    }, o.prototype.div = function(u) {
      return this.divmod(u, "div", !1).div;
    }, o.prototype.mod = function(u) {
      return this.divmod(u, "mod", !1).mod;
    }, o.prototype.umod = function(u) {
      return this.divmod(u, "mod", !0).mod;
    }, o.prototype.divRound = function(u) {
      var h = this.divmod(u);
      if (h.mod.isZero())
        return h.div;
      var p = h.div.negative !== 0 ? h.mod.isub(u) : h.mod, y = u.ushrn(1), v = u.andln(1), $ = p.cmp(y);
      return $ < 0 || v === 1 && $ === 0 ? h.div : h.div.negative !== 0 ? h.div.isubn(1) : h.div.iaddn(1);
    }, o.prototype.modn = function(u) {
      a(u <= 67108863);
      for (var h = (1 << 26) % u, p = 0, y = this.length - 1; y >= 0; y--)
        p = (h * p + (this.words[y] | 0)) % u;
      return p;
    }, o.prototype.idivn = function(u) {
      a(u <= 67108863);
      for (var h = 0, p = this.length - 1; p >= 0; p--) {
        var y = (this.words[p] | 0) + h * 67108864;
        this.words[p] = y / u | 0, h = y % u;
      }
      return this.strip();
    }, o.prototype.divn = function(u) {
      return this.clone().idivn(u);
    }, o.prototype.egcd = function(u) {
      a(u.negative === 0), a(!u.isZero());
      var h = this, p = u.clone();
      h.negative !== 0 ? h = h.umod(u) : h = h.clone();
      for (var y = new o(1), v = new o(0), $ = new o(0), E = new o(1), x = 0; h.isEven() && p.isEven(); )
        h.iushrn(1), p.iushrn(1), ++x;
      for (var l = p.clone(), b = h.clone(); !h.isZero(); ) {
        for (var M = 0, k = 1; !(h.words[0] & k) && M < 26; ++M, k <<= 1)
          ;
        if (M > 0)
          for (h.iushrn(M); M-- > 0; )
            (y.isOdd() || v.isOdd()) && (y.iadd(l), v.isub(b)), y.iushrn(1), v.iushrn(1);
        for (var U = 0, T = 1; !(p.words[0] & T) && U < 26; ++U, T <<= 1)
          ;
        if (U > 0)
          for (p.iushrn(U); U-- > 0; )
            ($.isOdd() || E.isOdd()) && ($.iadd(l), E.isub(b)), $.iushrn(1), E.iushrn(1);
        h.cmp(p) >= 0 ? (h.isub(p), y.isub($), v.isub(E)) : (p.isub(h), $.isub(y), E.isub(v));
      }
      return {
        a: $,
        b: E,
        gcd: p.iushln(x)
      };
    }, o.prototype._invmp = function(u) {
      a(u.negative === 0), a(!u.isZero());
      var h = this, p = u.clone();
      h.negative !== 0 ? h = h.umod(u) : h = h.clone();
      for (var y = new o(1), v = new o(0), $ = p.clone(); h.cmpn(1) > 0 && p.cmpn(1) > 0; ) {
        for (var E = 0, x = 1; !(h.words[0] & x) && E < 26; ++E, x <<= 1)
          ;
        if (E > 0)
          for (h.iushrn(E); E-- > 0; )
            y.isOdd() && y.iadd($), y.iushrn(1);
        for (var l = 0, b = 1; !(p.words[0] & b) && l < 26; ++l, b <<= 1)
          ;
        if (l > 0)
          for (p.iushrn(l); l-- > 0; )
            v.isOdd() && v.iadd($), v.iushrn(1);
        h.cmp(p) >= 0 ? (h.isub(p), y.isub(v)) : (p.isub(h), v.isub(y));
      }
      var M;
      return h.cmpn(1) === 0 ? M = y : M = v, M.cmpn(0) < 0 && M.iadd(u), M;
    }, o.prototype.gcd = function(u) {
      if (this.isZero())
        return u.abs();
      if (u.isZero())
        return this.abs();
      var h = this.clone(), p = u.clone();
      h.negative = 0, p.negative = 0;
      for (var y = 0; h.isEven() && p.isEven(); y++)
        h.iushrn(1), p.iushrn(1);
      do {
        for (; h.isEven(); )
          h.iushrn(1);
        for (; p.isEven(); )
          p.iushrn(1);
        var v = h.cmp(p);
        if (v < 0) {
          var $ = h;
          h = p, p = $;
        } else if (v === 0 || p.cmpn(1) === 0)
          break;
        h.isub(p);
      } while (!0);
      return p.iushln(y);
    }, o.prototype.invm = function(u) {
      return this.egcd(u).a.umod(u);
    }, o.prototype.isEven = function() {
      return (this.words[0] & 1) === 0;
    }, o.prototype.isOdd = function() {
      return (this.words[0] & 1) === 1;
    }, o.prototype.andln = function(u) {
      return this.words[0] & u;
    }, o.prototype.bincn = function(u) {
      a(typeof u == "number");
      var h = u % 26, p = (u - h) / 26, y = 1 << h;
      if (this.length <= p)
        return this._expand(p + 1), this.words[p] |= y, this;
      for (var v = y, $ = p; v !== 0 && $ < this.length; $++) {
        var E = this.words[$] | 0;
        E += v, v = E >>> 26, E &= 67108863, this.words[$] = E;
      }
      return v !== 0 && (this.words[$] = v, this.length++), this;
    }, o.prototype.isZero = function() {
      return this.length === 1 && this.words[0] === 0;
    }, o.prototype.cmpn = function(u) {
      var h = u < 0;
      if (this.negative !== 0 && !h)
        return -1;
      if (this.negative === 0 && h)
        return 1;
      this.strip();
      var p;
      if (this.length > 1)
        p = 1;
      else {
        h && (u = -u), a(u <= 67108863, "Number is too big");
        var y = this.words[0] | 0;
        p = y === u ? 0 : y < u ? -1 : 1;
      }
      return this.negative !== 0 ? -p | 0 : p;
    }, o.prototype.cmp = function(u) {
      if (this.negative !== 0 && u.negative === 0)
        return -1;
      if (this.negative === 0 && u.negative !== 0)
        return 1;
      var h = this.ucmp(u);
      return this.negative !== 0 ? -h | 0 : h;
    }, o.prototype.ucmp = function(u) {
      if (this.length > u.length)
        return 1;
      if (this.length < u.length)
        return -1;
      for (var h = 0, p = this.length - 1; p >= 0; p--) {
        var y = this.words[p] | 0, v = u.words[p] | 0;
        if (y !== v) {
          y < v ? h = -1 : y > v && (h = 1);
          break;
        }
      }
      return h;
    }, o.prototype.gtn = function(u) {
      return this.cmpn(u) === 1;
    }, o.prototype.gt = function(u) {
      return this.cmp(u) === 1;
    }, o.prototype.gten = function(u) {
      return this.cmpn(u) >= 0;
    }, o.prototype.gte = function(u) {
      return this.cmp(u) >= 0;
    }, o.prototype.ltn = function(u) {
      return this.cmpn(u) === -1;
    }, o.prototype.lt = function(u) {
      return this.cmp(u) === -1;
    }, o.prototype.lten = function(u) {
      return this.cmpn(u) <= 0;
    }, o.prototype.lte = function(u) {
      return this.cmp(u) <= 0;
    }, o.prototype.eqn = function(u) {
      return this.cmpn(u) === 0;
    }, o.prototype.eq = function(u) {
      return this.cmp(u) === 0;
    }, o.red = function(u) {
      return new V(u);
    }, o.prototype.toRed = function(u) {
      return a(!this.red, "Already a number in reduction context"), a(this.negative === 0, "red works only with positives"), u.convertTo(this)._forceRed(u);
    }, o.prototype.fromRed = function() {
      return a(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
    }, o.prototype._forceRed = function(u) {
      return this.red = u, this;
    }, o.prototype.forceRed = function(u) {
      return a(!this.red, "Already a number in reduction context"), this._forceRed(u);
    }, o.prototype.redAdd = function(u) {
      return a(this.red, "redAdd works only with red numbers"), this.red.add(this, u);
    }, o.prototype.redIAdd = function(u) {
      return a(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, u);
    }, o.prototype.redSub = function(u) {
      return a(this.red, "redSub works only with red numbers"), this.red.sub(this, u);
    }, o.prototype.redISub = function(u) {
      return a(this.red, "redISub works only with red numbers"), this.red.isub(this, u);
    }, o.prototype.redShl = function(u) {
      return a(this.red, "redShl works only with red numbers"), this.red.shl(this, u);
    }, o.prototype.redMul = function(u) {
      return a(this.red, "redMul works only with red numbers"), this.red._verify2(this, u), this.red.mul(this, u);
    }, o.prototype.redIMul = function(u) {
      return a(this.red, "redMul works only with red numbers"), this.red._verify2(this, u), this.red.imul(this, u);
    }, o.prototype.redSqr = function() {
      return a(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
    }, o.prototype.redISqr = function() {
      return a(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
    }, o.prototype.redSqrt = function() {
      return a(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
    }, o.prototype.redInvm = function() {
      return a(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
    }, o.prototype.redNeg = function() {
      return a(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
    }, o.prototype.redPow = function(u) {
      return a(this.red && !u.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, u);
    };
    var Z = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function X(_, u) {
      this.name = _, this.p = new o(u, 16), this.n = this.p.bitLength(), this.k = new o(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
    }
    X.prototype._tmp = function() {
      var u = new o(null);
      return u.words = new Array(Math.ceil(this.n / 13)), u;
    }, X.prototype.ireduce = function(u) {
      var h = u, p;
      do
        this.split(h, this.tmp), h = this.imulK(h), h = h.iadd(this.tmp), p = h.bitLength();
      while (p > this.n);
      var y = p < this.n ? -1 : h.ucmp(this.p);
      return y === 0 ? (h.words[0] = 0, h.length = 1) : y > 0 ? h.isub(this.p) : h.strip !== void 0 ? h.strip() : h._strip(), h;
    }, X.prototype.split = function(u, h) {
      u.iushrn(this.n, 0, h);
    }, X.prototype.imulK = function(u) {
      return u.imul(this.k);
    };
    function ie() {
      X.call(
        this,
        "k256",
        "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
      );
    }
    c(ie, X), ie.prototype.split = function(u, h) {
      for (var p = 4194303, y = Math.min(u.length, 9), v = 0; v < y; v++)
        h.words[v] = u.words[v];
      if (h.length = y, u.length <= 9) {
        u.words[0] = 0, u.length = 1;
        return;
      }
      var $ = u.words[9];
      for (h.words[h.length++] = $ & p, v = 10; v < u.length; v++) {
        var E = u.words[v] | 0;
        u.words[v - 10] = (E & p) << 4 | $ >>> 22, $ = E;
      }
      $ >>>= 22, u.words[v - 10] = $, $ === 0 && u.length > 10 ? u.length -= 10 : u.length -= 9;
    }, ie.prototype.imulK = function(u) {
      u.words[u.length] = 0, u.words[u.length + 1] = 0, u.length += 2;
      for (var h = 0, p = 0; p < u.length; p++) {
        var y = u.words[p] | 0;
        h += y * 977, u.words[p] = h & 67108863, h = y * 64 + (h / 67108864 | 0);
      }
      return u.words[u.length - 1] === 0 && (u.length--, u.words[u.length - 1] === 0 && u.length--), u;
    };
    function fe() {
      X.call(
        this,
        "p224",
        "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
      );
    }
    c(fe, X);
    function ye() {
      X.call(
        this,
        "p192",
        "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
      );
    }
    c(ye, X);
    function j() {
      X.call(
        this,
        "25519",
        "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
      );
    }
    c(j, X), j.prototype.imulK = function(u) {
      for (var h = 0, p = 0; p < u.length; p++) {
        var y = (u.words[p] | 0) * 19 + h, v = y & 67108863;
        y >>>= 26, u.words[p] = v, h = y;
      }
      return h !== 0 && (u.words[u.length++] = h), u;
    }, o._prime = function(u) {
      if (Z[u])
        return Z[u];
      var h;
      if (u === "k256")
        h = new ie();
      else if (u === "p224")
        h = new fe();
      else if (u === "p192")
        h = new ye();
      else if (u === "p25519")
        h = new j();
      else
        throw new Error("Unknown prime " + u);
      return Z[u] = h, h;
    };
    function V(_) {
      if (typeof _ == "string") {
        var u = o._prime(_);
        this.m = u.p, this.prime = u;
      } else
        a(_.gtn(1), "modulus must be greater than 1"), this.m = _, this.prime = null;
    }
    V.prototype._verify1 = function(u) {
      a(u.negative === 0, "red works only with positives"), a(u.red, "red works only with red numbers");
    }, V.prototype._verify2 = function(u, h) {
      a((u.negative | h.negative) === 0, "red works only with positives"), a(
        u.red && u.red === h.red,
        "red works only with red numbers"
      );
    }, V.prototype.imod = function(u) {
      return this.prime ? this.prime.ireduce(u)._forceRed(this) : u.umod(this.m)._forceRed(this);
    }, V.prototype.neg = function(u) {
      return u.isZero() ? u.clone() : this.m.sub(u)._forceRed(this);
    }, V.prototype.add = function(u, h) {
      this._verify2(u, h);
      var p = u.add(h);
      return p.cmp(this.m) >= 0 && p.isub(this.m), p._forceRed(this);
    }, V.prototype.iadd = function(u, h) {
      this._verify2(u, h);
      var p = u.iadd(h);
      return p.cmp(this.m) >= 0 && p.isub(this.m), p;
    }, V.prototype.sub = function(u, h) {
      this._verify2(u, h);
      var p = u.sub(h);
      return p.cmpn(0) < 0 && p.iadd(this.m), p._forceRed(this);
    }, V.prototype.isub = function(u, h) {
      this._verify2(u, h);
      var p = u.isub(h);
      return p.cmpn(0) < 0 && p.iadd(this.m), p;
    }, V.prototype.shl = function(u, h) {
      return this._verify1(u), this.imod(u.ushln(h));
    }, V.prototype.imul = function(u, h) {
      return this._verify2(u, h), this.imod(u.imul(h));
    }, V.prototype.mul = function(u, h) {
      return this._verify2(u, h), this.imod(u.mul(h));
    }, V.prototype.isqr = function(u) {
      return this.imul(u, u.clone());
    }, V.prototype.sqr = function(u) {
      return this.mul(u, u);
    }, V.prototype.sqrt = function(u) {
      if (u.isZero())
        return u.clone();
      var h = this.m.andln(3);
      if (a(h % 2 === 1), h === 3) {
        var p = this.m.add(new o(1)).iushrn(2);
        return this.pow(u, p);
      }
      for (var y = this.m.subn(1), v = 0; !y.isZero() && y.andln(1) === 0; )
        v++, y.iushrn(1);
      a(!y.isZero());
      var $ = new o(1).toRed(this), E = $.redNeg(), x = this.m.subn(1).iushrn(1), l = this.m.bitLength();
      for (l = new o(2 * l * l).toRed(this); this.pow(l, x).cmp(E) !== 0; )
        l.redIAdd(E);
      for (var b = this.pow(l, y), M = this.pow(u, y.addn(1).iushrn(1)), k = this.pow(u, y), U = v; k.cmp($) !== 0; ) {
        for (var T = k, H = 0; T.cmp($) !== 0; H++)
          T = T.redSqr();
        a(H < U);
        var Y = this.pow(b, new o(1).iushln(U - H - 1));
        M = M.redMul(Y), b = Y.redSqr(), k = k.redMul(b), U = H;
      }
      return M;
    }, V.prototype.invm = function(u) {
      var h = u._invmp(this.m);
      return h.negative !== 0 ? (h.negative = 0, this.imod(h).redNeg()) : this.imod(h);
    }, V.prototype.pow = function(u, h) {
      if (h.isZero())
        return new o(1).toRed(this);
      if (h.cmpn(1) === 0)
        return u.clone();
      var p = 4, y = new Array(1 << p);
      y[0] = new o(1).toRed(this), y[1] = u;
      for (var v = 2; v < y.length; v++)
        y[v] = this.mul(y[v - 1], u);
      var $ = y[0], E = 0, x = 0, l = h.bitLength() % 26;
      for (l === 0 && (l = 26), v = h.length - 1; v >= 0; v--) {
        for (var b = h.words[v], M = l - 1; M >= 0; M--) {
          var k = b >> M & 1;
          if ($ !== y[0] && ($ = this.sqr($)), k === 0 && E === 0) {
            x = 0;
            continue;
          }
          E <<= 1, E |= k, x++, !(x !== p && (v !== 0 || M !== 0)) && ($ = this.mul($, y[E]), x = 0, E = 0);
        }
        l = 26;
      }
      return $;
    }, V.prototype.convertTo = function(u) {
      var h = u.umod(this.m);
      return h === u ? h.clone() : h;
    }, V.prototype.convertFrom = function(u) {
      var h = u.clone();
      return h.red = null, h;
    }, o.mont = function(u) {
      return new ae(u);
    };
    function ae(_) {
      V.call(this, _), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new o(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
    }
    c(ae, V), ae.prototype.convertTo = function(u) {
      return this.imod(u.ushln(this.shift));
    }, ae.prototype.convertFrom = function(u) {
      var h = this.imod(u.mul(this.rinv));
      return h.red = null, h;
    }, ae.prototype.imul = function(u, h) {
      if (u.isZero() || h.isZero())
        return u.words[0] = 0, u.length = 1, u;
      var p = u.imul(h), y = p.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), v = p.isub(y).iushrn(this.shift), $ = v;
      return v.cmp(this.m) >= 0 ? $ = v.isub(this.m) : v.cmpn(0) < 0 && ($ = v.iadd(this.m)), $._forceRed(this);
    }, ae.prototype.mul = function(u, h) {
      if (u.isZero() || h.isZero())
        return new o(0)._forceRed(this);
      var p = u.mul(h), y = p.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), v = p.isub(y).iushrn(this.shift), $ = v;
      return v.cmp(this.m) >= 0 ? $ = v.isub(this.m) : v.cmpn(0) < 0 && ($ = v.iadd(this.m)), $._forceRed(this);
    }, ae.prototype.invm = function(u) {
      var h = this.imod(u._invmp(this.m).mul(this.r2));
      return h._forceRed(this);
    };
  })(t, commonjsGlobal);
})(bn$5);
var bnExports$5 = bn$5.exports, brorand = { exports: {} }, hasRequiredBrorand;
function requireBrorand() {
  if (hasRequiredBrorand)
    return brorand.exports;
  hasRequiredBrorand = 1;
  var t;
  brorand.exports = function(c) {
    return t || (t = new e(null)), t.generate(c);
  };
  function e(a) {
    this.rand = a;
  }
  if (brorand.exports.Rand = e, e.prototype.generate = function(c) {
    return this._rand(c);
  }, e.prototype._rand = function(c) {
    if (this.rand.getBytes)
      return this.rand.getBytes(c);
    for (var o = new Uint8Array(c), d = 0; d < o.length; d++)
      o[d] = this.rand.getByte();
    return o;
  }, typeof self == "object")
    self.crypto && self.crypto.getRandomValues ? e.prototype._rand = function(c) {
      var o = new Uint8Array(c);
      return self.crypto.getRandomValues(o), o;
    } : self.msCrypto && self.msCrypto.getRandomValues ? e.prototype._rand = function(c) {
      var o = new Uint8Array(c);
      return self.msCrypto.getRandomValues(o), o;
    } : typeof window == "object" && (e.prototype._rand = function() {
      throw new Error("Not implemented yet");
    });
  else
    try {
      var n = requireCryptoBrowserify();
      if (typeof n.randomBytes != "function")
        throw new Error("Not supported");
      e.prototype._rand = function(c) {
        return n.randomBytes(c);
      };
    } catch {
    }
  return brorand.exports;
}
var mr, hasRequiredMr;
function requireMr() {
  if (hasRequiredMr)
    return mr;
  hasRequiredMr = 1;
  var t = bnExports$5, e = requireBrorand();
  function n(a) {
    this.rand = a || new e.Rand();
  }
  return mr = n, n.create = function(c) {
    return new n(c);
  }, n.prototype._randbelow = function(c) {
    var o = c.bitLength(), d = Math.ceil(o / 8);
    do
      var m = new t(this.rand.generate(d));
    while (m.cmp(c) >= 0);
    return m;
  }, n.prototype._randrange = function(c, o) {
    var d = o.sub(c);
    return c.add(this._randbelow(d));
  }, n.prototype.test = function(c, o, d) {
    var m = c.bitLength(), w = t.mont(c), S = new t(1).toRed(w);
    o || (o = Math.max(1, m / 48 | 0));
    for (var A = c.subn(1), B = 0; !A.testn(B); B++)
      ;
    for (var P = c.shrn(B), I = A.toRed(w), O = !0; o > 0; o--) {
      var L = this._randrange(new t(2), A);
      d && d(L);
      var C = L.toRed(w).redPow(P);
      if (!(C.cmp(S) === 0 || C.cmp(I) === 0)) {
        for (var z = 1; z < B; z++) {
          if (C = C.redSqr(), C.cmp(S) === 0)
            return !1;
          if (C.cmp(I) === 0)
            break;
        }
        if (z === B)
          return !1;
      }
    }
    return O;
  }, n.prototype.getDivisor = function(c, o) {
    var d = c.bitLength(), m = t.mont(c), w = new t(1).toRed(m);
    o || (o = Math.max(1, d / 48 | 0));
    for (var S = c.subn(1), A = 0; !S.testn(A); A++)
      ;
    for (var B = c.shrn(A), P = S.toRed(m); o > 0; o--) {
      var I = this._randrange(new t(2), S), O = c.gcd(I);
      if (O.cmpn(1) !== 0)
        return O;
      var L = I.toRed(m).redPow(B);
      if (!(L.cmp(w) === 0 || L.cmp(P) === 0)) {
        for (var C = 1; C < A; C++) {
          if (L = L.redSqr(), L.cmp(w) === 0)
            return L.fromRed().subn(1).gcd(c);
          if (L.cmp(P) === 0)
            break;
        }
        if (C === A)
          return L = L.redSqr(), L.fromRed().subn(1).gcd(c);
      }
    }
    return !1;
  }, mr;
}
var generatePrime, hasRequiredGeneratePrime;
function requireGeneratePrime() {
  if (hasRequiredGeneratePrime)
    return generatePrime;
  hasRequiredGeneratePrime = 1;
  var t = browserExports;
  generatePrime = C, C.simpleSieve = O, C.fermatTest = L;
  var e = bnExports$6, n = new e(24), a = requireMr(), c = new a(), o = new e(1), d = new e(2), m = new e(5);
  new e(16), new e(8);
  var w = new e(10), S = new e(3);
  new e(7);
  var A = new e(11), B = new e(4);
  new e(12);
  var P = null;
  function I() {
    if (P !== null)
      return P;
    var z = 1048576, q = [];
    q[0] = 2;
    for (var Z = 1, X = 3; X < z; X += 2) {
      for (var ie = Math.ceil(Math.sqrt(X)), fe = 0; fe < Z && q[fe] <= ie && X % q[fe] !== 0; fe++)
        ;
      Z !== fe && q[fe] <= ie || (q[Z++] = X);
    }
    return P = q, q;
  }
  function O(z) {
    for (var q = I(), Z = 0; Z < q.length; Z++)
      if (z.modn(q[Z]) === 0)
        return z.cmpn(q[Z]) === 0;
    return !0;
  }
  function L(z) {
    var q = e.mont(z);
    return d.toRed(q).redPow(z.subn(1)).fromRed().cmpn(1) === 0;
  }
  function C(z, q) {
    if (z < 16)
      return q === 2 || q === 5 ? new e([140, 123]) : new e([140, 39]);
    q = new e(q);
    for (var Z, X; ; ) {
      for (Z = new e(t(Math.ceil(z / 8))); Z.bitLength() > z; )
        Z.ishrn(1);
      if (Z.isEven() && Z.iadd(o), Z.testn(1) || Z.iadd(d), q.cmp(d)) {
        if (!q.cmp(m))
          for (; Z.mod(w).cmp(S); )
            Z.iadd(B);
      } else
        for (; Z.mod(n).cmp(A); )
          Z.iadd(B);
      if (X = Z.shrn(1), O(X) && O(Z) && L(X) && L(Z) && c.test(X) && c.test(Z))
        return Z;
    }
  }
  return generatePrime;
}
const modp1 = {
  gen: "02",
  prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
}, modp2 = {
  gen: "02",
  prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
}, modp5 = {
  gen: "02",
  prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
}, modp14 = {
  gen: "02",
  prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
}, modp15 = {
  gen: "02",
  prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
}, modp16 = {
  gen: "02",
  prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
}, modp17 = {
  gen: "02",
  prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
}, modp18 = {
  gen: "02",
  prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
}, require$$1$1 = {
  modp1,
  modp2,
  modp5,
  modp14,
  modp15,
  modp16,
  modp17,
  modp18
};
var dh, hasRequiredDh;
function requireDh() {
  if (hasRequiredDh)
    return dh;
  hasRequiredDh = 1;
  var t = bnExports$6, e = requireMr(), n = new e(), a = new t(24), c = new t(11), o = new t(10), d = new t(3), m = new t(7), w = requireGeneratePrime(), S = browserExports;
  dh = O;
  function A(C, z) {
    return z = z || "utf8", Buffer$F.isBuffer(C) || (C = new Buffer$F(C, z)), this._pub = new t(C), this;
  }
  function B(C, z) {
    return z = z || "utf8", Buffer$F.isBuffer(C) || (C = new Buffer$F(C, z)), this._priv = new t(C), this;
  }
  var P = {};
  function I(C, z) {
    var q = z.toString("hex"), Z = [q, C.toString(16)].join("_");
    if (Z in P)
      return P[Z];
    var X = 0;
    if (C.isEven() || !w.simpleSieve || !w.fermatTest(C) || !n.test(C))
      return X += 1, q === "02" || q === "05" ? X += 8 : X += 4, P[Z] = X, X;
    n.test(C.shrn(1)) || (X += 2);
    var ie;
    switch (q) {
      case "02":
        C.mod(a).cmp(c) && (X += 8);
        break;
      case "05":
        ie = C.mod(o), ie.cmp(d) && ie.cmp(m) && (X += 8);
        break;
      default:
        X += 4;
    }
    return P[Z] = X, X;
  }
  function O(C, z, q) {
    this.setGenerator(z), this.__prime = new t(C), this._prime = t.mont(this.__prime), this._primeLen = C.length, this._pub = void 0, this._priv = void 0, this._primeCode = void 0, q ? (this.setPublicKey = A, this.setPrivateKey = B) : this._primeCode = 8;
  }
  Object.defineProperty(O.prototype, "verifyError", {
    enumerable: !0,
    get: function() {
      return typeof this._primeCode != "number" && (this._primeCode = I(this.__prime, this.__gen)), this._primeCode;
    }
  }), O.prototype.generateKeys = function() {
    return this._priv || (this._priv = new t(S(this._primeLen))), this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed(), this.getPublicKey();
  }, O.prototype.computeSecret = function(C) {
    C = new t(C), C = C.toRed(this._prime);
    var z = C.redPow(this._priv).fromRed(), q = new Buffer$F(z.toArray()), Z = this.getPrime();
    if (q.length < Z.length) {
      var X = new Buffer$F(Z.length - q.length);
      X.fill(0), q = Buffer$F.concat([X, q]);
    }
    return q;
  }, O.prototype.getPublicKey = function(z) {
    return L(this._pub, z);
  }, O.prototype.getPrivateKey = function(z) {
    return L(this._priv, z);
  }, O.prototype.getPrime = function(C) {
    return L(this.__prime, C);
  }, O.prototype.getGenerator = function(C) {
    return L(this._gen, C);
  }, O.prototype.setGenerator = function(C, z) {
    return z = z || "utf8", Buffer$F.isBuffer(C) || (C = new Buffer$F(C, z)), this.__gen = C, this._gen = new t(C), this;
  };
  function L(C, z) {
    var q = new Buffer$F(C.toArray());
    return z ? q.toString(z) : q;
  }
  return dh;
}
var hasRequiredBrowser$2;
function requireBrowser$2() {
  if (hasRequiredBrowser$2)
    return browser$7;
  hasRequiredBrowser$2 = 1;
  var t = requireGeneratePrime(), e = require$$1$1, n = requireDh();
  function a(d) {
    var m = new Buffer$F(e[d].prime, "hex"), w = new Buffer$F(e[d].gen, "hex");
    return new n(m, w);
  }
  var c = {
    binary: !0,
    hex: !0,
    base64: !0
  };
  function o(d, m, w, S) {
    return Buffer$F.isBuffer(m) || c[m] === void 0 ? o(d, "binary", m, w) : (m = m || "binary", S = S || "binary", w = w || new Buffer$F([2]), Buffer$F.isBuffer(w) || (w = new Buffer$F(w, S)), typeof d == "number" ? new n(t(d, w), w, !0) : (Buffer$F.isBuffer(d) || (d = new Buffer$F(d, m)), new n(d, w, !0)));
  }
  return browser$7.DiffieHellmanGroup = browser$7.createDiffieHellmanGroup = browser$7.getDiffieHellman = a, browser$7.createDiffieHellman = browser$7.DiffieHellman = o, browser$7;
}
var sign$4 = { exports: {} }, bn$4 = { exports: {} };
bn$4.exports;
(function(t) {
  (function(e, n) {
    function a(h, p) {
      if (!h)
        throw new Error(p || "Assertion failed");
    }
    function c(h, p) {
      h.super_ = p;
      var y = function() {
      };
      y.prototype = p.prototype, h.prototype = new y(), h.prototype.constructor = h;
    }
    function o(h, p, y) {
      if (o.isBN(h))
        return h;
      this.negative = 0, this.words = null, this.length = 0, this.red = null, h !== null && ((p === "le" || p === "be") && (y = p, p = 10), this._init(h || 0, p || 10, y || "be"));
    }
    typeof e == "object" ? e.exports = o : n.BN = o, o.BN = o, o.wordSize = 26;
    var d;
    try {
      typeof window < "u" && typeof window.Buffer < "u" ? d = window.Buffer : d = require$$0$2.Buffer;
    } catch {
    }
    o.isBN = function(p) {
      return p instanceof o ? !0 : p !== null && typeof p == "object" && p.constructor.wordSize === o.wordSize && Array.isArray(p.words);
    }, o.max = function(p, y) {
      return p.cmp(y) > 0 ? p : y;
    }, o.min = function(p, y) {
      return p.cmp(y) < 0 ? p : y;
    }, o.prototype._init = function(p, y, v) {
      if (typeof p == "number")
        return this._initNumber(p, y, v);
      if (typeof p == "object")
        return this._initArray(p, y, v);
      y === "hex" && (y = 16), a(y === (y | 0) && y >= 2 && y <= 36), p = p.toString().replace(/\s+/g, "");
      var $ = 0;
      p[0] === "-" && ($++, this.negative = 1), $ < p.length && (y === 16 ? this._parseHex(p, $, v) : (this._parseBase(p, y, $), v === "le" && this._initArray(this.toArray(), y, v)));
    }, o.prototype._initNumber = function(p, y, v) {
      p < 0 && (this.negative = 1, p = -p), p < 67108864 ? (this.words = [p & 67108863], this.length = 1) : p < 4503599627370496 ? (this.words = [
        p & 67108863,
        p / 67108864 & 67108863
      ], this.length = 2) : (a(p < 9007199254740992), this.words = [
        p & 67108863,
        p / 67108864 & 67108863,
        1
      ], this.length = 3), v === "le" && this._initArray(this.toArray(), y, v);
    }, o.prototype._initArray = function(p, y, v) {
      if (a(typeof p.length == "number"), p.length <= 0)
        return this.words = [0], this.length = 1, this;
      this.length = Math.ceil(p.length / 3), this.words = new Array(this.length);
      for (var $ = 0; $ < this.length; $++)
        this.words[$] = 0;
      var E, x, l = 0;
      if (v === "be")
        for ($ = p.length - 1, E = 0; $ >= 0; $ -= 3)
          x = p[$] | p[$ - 1] << 8 | p[$ - 2] << 16, this.words[E] |= x << l & 67108863, this.words[E + 1] = x >>> 26 - l & 67108863, l += 24, l >= 26 && (l -= 26, E++);
      else if (v === "le")
        for ($ = 0, E = 0; $ < p.length; $ += 3)
          x = p[$] | p[$ + 1] << 8 | p[$ + 2] << 16, this.words[E] |= x << l & 67108863, this.words[E + 1] = x >>> 26 - l & 67108863, l += 24, l >= 26 && (l -= 26, E++);
      return this._strip();
    };
    function m(h, p) {
      var y = h.charCodeAt(p);
      if (y >= 48 && y <= 57)
        return y - 48;
      if (y >= 65 && y <= 70)
        return y - 55;
      if (y >= 97 && y <= 102)
        return y - 87;
      a(!1, "Invalid character in " + h);
    }
    function w(h, p, y) {
      var v = m(h, y);
      return y - 1 >= p && (v |= m(h, y - 1) << 4), v;
    }
    o.prototype._parseHex = function(p, y, v) {
      this.length = Math.ceil((p.length - y) / 6), this.words = new Array(this.length);
      for (var $ = 0; $ < this.length; $++)
        this.words[$] = 0;
      var E = 0, x = 0, l;
      if (v === "be")
        for ($ = p.length - 1; $ >= y; $ -= 2)
          l = w(p, y, $) << E, this.words[x] |= l & 67108863, E >= 18 ? (E -= 18, x += 1, this.words[x] |= l >>> 26) : E += 8;
      else {
        var b = p.length - y;
        for ($ = b % 2 === 0 ? y + 1 : y; $ < p.length; $ += 2)
          l = w(p, y, $) << E, this.words[x] |= l & 67108863, E >= 18 ? (E -= 18, x += 1, this.words[x] |= l >>> 26) : E += 8;
      }
      this._strip();
    };
    function S(h, p, y, v) {
      for (var $ = 0, E = 0, x = Math.min(h.length, y), l = p; l < x; l++) {
        var b = h.charCodeAt(l) - 48;
        $ *= v, b >= 49 ? E = b - 49 + 10 : b >= 17 ? E = b - 17 + 10 : E = b, a(b >= 0 && E < v, "Invalid character"), $ += E;
      }
      return $;
    }
    o.prototype._parseBase = function(p, y, v) {
      this.words = [0], this.length = 1;
      for (var $ = 0, E = 1; E <= 67108863; E *= y)
        $++;
      $--, E = E / y | 0;
      for (var x = p.length - v, l = x % $, b = Math.min(x, x - l) + v, M = 0, k = v; k < b; k += $)
        M = S(p, k, k + $, y), this.imuln(E), this.words[0] + M < 67108864 ? this.words[0] += M : this._iaddn(M);
      if (l !== 0) {
        var U = 1;
        for (M = S(p, k, p.length, y), k = 0; k < l; k++)
          U *= y;
        this.imuln(U), this.words[0] + M < 67108864 ? this.words[0] += M : this._iaddn(M);
      }
      this._strip();
    }, o.prototype.copy = function(p) {
      p.words = new Array(this.length);
      for (var y = 0; y < this.length; y++)
        p.words[y] = this.words[y];
      p.length = this.length, p.negative = this.negative, p.red = this.red;
    };
    function A(h, p) {
      h.words = p.words, h.length = p.length, h.negative = p.negative, h.red = p.red;
    }
    if (o.prototype._move = function(p) {
      A(p, this);
    }, o.prototype.clone = function() {
      var p = new o(null);
      return this.copy(p), p;
    }, o.prototype._expand = function(p) {
      for (; this.length < p; )
        this.words[this.length++] = 0;
      return this;
    }, o.prototype._strip = function() {
      for (; this.length > 1 && this.words[this.length - 1] === 0; )
        this.length--;
      return this._normSign();
    }, o.prototype._normSign = function() {
      return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
    }, typeof Symbol < "u" && typeof Symbol.for == "function")
      try {
        o.prototype[Symbol.for("nodejs.util.inspect.custom")] = B;
      } catch {
        o.prototype.inspect = B;
      }
    else
      o.prototype.inspect = B;
    function B() {
      return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    }
    var P = [
      "",
      "0",
      "00",
      "000",
      "0000",
      "00000",
      "000000",
      "0000000",
      "00000000",
      "000000000",
      "0000000000",
      "00000000000",
      "000000000000",
      "0000000000000",
      "00000000000000",
      "000000000000000",
      "0000000000000000",
      "00000000000000000",
      "000000000000000000",
      "0000000000000000000",
      "00000000000000000000",
      "000000000000000000000",
      "0000000000000000000000",
      "00000000000000000000000",
      "000000000000000000000000",
      "0000000000000000000000000"
    ], I = [
      0,
      0,
      25,
      16,
      12,
      11,
      10,
      9,
      8,
      8,
      7,
      7,
      7,
      7,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5
    ], O = [
      0,
      0,
      33554432,
      43046721,
      16777216,
      48828125,
      60466176,
      40353607,
      16777216,
      43046721,
      1e7,
      19487171,
      35831808,
      62748517,
      7529536,
      11390625,
      16777216,
      24137569,
      34012224,
      47045881,
      64e6,
      4084101,
      5153632,
      6436343,
      7962624,
      9765625,
      11881376,
      14348907,
      17210368,
      20511149,
      243e5,
      28629151,
      33554432,
      39135393,
      45435424,
      52521875,
      60466176
    ];
    o.prototype.toString = function(p, y) {
      p = p || 10, y = y | 0 || 1;
      var v;
      if (p === 16 || p === "hex") {
        v = "";
        for (var $ = 0, E = 0, x = 0; x < this.length; x++) {
          var l = this.words[x], b = ((l << $ | E) & 16777215).toString(16);
          E = l >>> 24 - $ & 16777215, $ += 2, $ >= 26 && ($ -= 26, x--), E !== 0 || x !== this.length - 1 ? v = P[6 - b.length] + b + v : v = b + v;
        }
        for (E !== 0 && (v = E.toString(16) + v); v.length % y !== 0; )
          v = "0" + v;
        return this.negative !== 0 && (v = "-" + v), v;
      }
      if (p === (p | 0) && p >= 2 && p <= 36) {
        var M = I[p], k = O[p];
        v = "";
        var U = this.clone();
        for (U.negative = 0; !U.isZero(); ) {
          var T = U.modrn(k).toString(p);
          U = U.idivn(k), U.isZero() ? v = T + v : v = P[M - T.length] + T + v;
        }
        for (this.isZero() && (v = "0" + v); v.length % y !== 0; )
          v = "0" + v;
        return this.negative !== 0 && (v = "-" + v), v;
      }
      a(!1, "Base should be between 2 and 36");
    }, o.prototype.toNumber = function() {
      var p = this.words[0];
      return this.length === 2 ? p += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? p += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && a(!1, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -p : p;
    }, o.prototype.toJSON = function() {
      return this.toString(16, 2);
    }, d && (o.prototype.toBuffer = function(p, y) {
      return this.toArrayLike(d, p, y);
    }), o.prototype.toArray = function(p, y) {
      return this.toArrayLike(Array, p, y);
    };
    var L = function(p, y) {
      return p.allocUnsafe ? p.allocUnsafe(y) : new p(y);
    };
    o.prototype.toArrayLike = function(p, y, v) {
      this._strip();
      var $ = this.byteLength(), E = v || Math.max(1, $);
      a($ <= E, "byte array longer than desired length"), a(E > 0, "Requested array length <= 0");
      var x = L(p, E), l = y === "le" ? "LE" : "BE";
      return this["_toArrayLike" + l](x, $), x;
    }, o.prototype._toArrayLikeLE = function(p, y) {
      for (var v = 0, $ = 0, E = 0, x = 0; E < this.length; E++) {
        var l = this.words[E] << x | $;
        p[v++] = l & 255, v < p.length && (p[v++] = l >> 8 & 255), v < p.length && (p[v++] = l >> 16 & 255), x === 6 ? (v < p.length && (p[v++] = l >> 24 & 255), $ = 0, x = 0) : ($ = l >>> 24, x += 2);
      }
      if (v < p.length)
        for (p[v++] = $; v < p.length; )
          p[v++] = 0;
    }, o.prototype._toArrayLikeBE = function(p, y) {
      for (var v = p.length - 1, $ = 0, E = 0, x = 0; E < this.length; E++) {
        var l = this.words[E] << x | $;
        p[v--] = l & 255, v >= 0 && (p[v--] = l >> 8 & 255), v >= 0 && (p[v--] = l >> 16 & 255), x === 6 ? (v >= 0 && (p[v--] = l >> 24 & 255), $ = 0, x = 0) : ($ = l >>> 24, x += 2);
      }
      if (v >= 0)
        for (p[v--] = $; v >= 0; )
          p[v--] = 0;
    }, Math.clz32 ? o.prototype._countBits = function(p) {
      return 32 - Math.clz32(p);
    } : o.prototype._countBits = function(p) {
      var y = p, v = 0;
      return y >= 4096 && (v += 13, y >>>= 13), y >= 64 && (v += 7, y >>>= 7), y >= 8 && (v += 4, y >>>= 4), y >= 2 && (v += 2, y >>>= 2), v + y;
    }, o.prototype._zeroBits = function(p) {
      if (p === 0)
        return 26;
      var y = p, v = 0;
      return y & 8191 || (v += 13, y >>>= 13), y & 127 || (v += 7, y >>>= 7), y & 15 || (v += 4, y >>>= 4), y & 3 || (v += 2, y >>>= 2), y & 1 || v++, v;
    }, o.prototype.bitLength = function() {
      var p = this.words[this.length - 1], y = this._countBits(p);
      return (this.length - 1) * 26 + y;
    };
    function C(h) {
      for (var p = new Array(h.bitLength()), y = 0; y < p.length; y++) {
        var v = y / 26 | 0, $ = y % 26;
        p[y] = h.words[v] >>> $ & 1;
      }
      return p;
    }
    o.prototype.zeroBits = function() {
      if (this.isZero())
        return 0;
      for (var p = 0, y = 0; y < this.length; y++) {
        var v = this._zeroBits(this.words[y]);
        if (p += v, v !== 26)
          break;
      }
      return p;
    }, o.prototype.byteLength = function() {
      return Math.ceil(this.bitLength() / 8);
    }, o.prototype.toTwos = function(p) {
      return this.negative !== 0 ? this.abs().inotn(p).iaddn(1) : this.clone();
    }, o.prototype.fromTwos = function(p) {
      return this.testn(p - 1) ? this.notn(p).iaddn(1).ineg() : this.clone();
    }, o.prototype.isNeg = function() {
      return this.negative !== 0;
    }, o.prototype.neg = function() {
      return this.clone().ineg();
    }, o.prototype.ineg = function() {
      return this.isZero() || (this.negative ^= 1), this;
    }, o.prototype.iuor = function(p) {
      for (; this.length < p.length; )
        this.words[this.length++] = 0;
      for (var y = 0; y < p.length; y++)
        this.words[y] = this.words[y] | p.words[y];
      return this._strip();
    }, o.prototype.ior = function(p) {
      return a((this.negative | p.negative) === 0), this.iuor(p);
    }, o.prototype.or = function(p) {
      return this.length > p.length ? this.clone().ior(p) : p.clone().ior(this);
    }, o.prototype.uor = function(p) {
      return this.length > p.length ? this.clone().iuor(p) : p.clone().iuor(this);
    }, o.prototype.iuand = function(p) {
      var y;
      this.length > p.length ? y = p : y = this;
      for (var v = 0; v < y.length; v++)
        this.words[v] = this.words[v] & p.words[v];
      return this.length = y.length, this._strip();
    }, o.prototype.iand = function(p) {
      return a((this.negative | p.negative) === 0), this.iuand(p);
    }, o.prototype.and = function(p) {
      return this.length > p.length ? this.clone().iand(p) : p.clone().iand(this);
    }, o.prototype.uand = function(p) {
      return this.length > p.length ? this.clone().iuand(p) : p.clone().iuand(this);
    }, o.prototype.iuxor = function(p) {
      var y, v;
      this.length > p.length ? (y = this, v = p) : (y = p, v = this);
      for (var $ = 0; $ < v.length; $++)
        this.words[$] = y.words[$] ^ v.words[$];
      if (this !== y)
        for (; $ < y.length; $++)
          this.words[$] = y.words[$];
      return this.length = y.length, this._strip();
    }, o.prototype.ixor = function(p) {
      return a((this.negative | p.negative) === 0), this.iuxor(p);
    }, o.prototype.xor = function(p) {
      return this.length > p.length ? this.clone().ixor(p) : p.clone().ixor(this);
    }, o.prototype.uxor = function(p) {
      return this.length > p.length ? this.clone().iuxor(p) : p.clone().iuxor(this);
    }, o.prototype.inotn = function(p) {
      a(typeof p == "number" && p >= 0);
      var y = Math.ceil(p / 26) | 0, v = p % 26;
      this._expand(y), v > 0 && y--;
      for (var $ = 0; $ < y; $++)
        this.words[$] = ~this.words[$] & 67108863;
      return v > 0 && (this.words[$] = ~this.words[$] & 67108863 >> 26 - v), this._strip();
    }, o.prototype.notn = function(p) {
      return this.clone().inotn(p);
    }, o.prototype.setn = function(p, y) {
      a(typeof p == "number" && p >= 0);
      var v = p / 26 | 0, $ = p % 26;
      return this._expand(v + 1), y ? this.words[v] = this.words[v] | 1 << $ : this.words[v] = this.words[v] & ~(1 << $), this._strip();
    }, o.prototype.iadd = function(p) {
      var y;
      if (this.negative !== 0 && p.negative === 0)
        return this.negative = 0, y = this.isub(p), this.negative ^= 1, this._normSign();
      if (this.negative === 0 && p.negative !== 0)
        return p.negative = 0, y = this.isub(p), p.negative = 1, y._normSign();
      var v, $;
      this.length > p.length ? (v = this, $ = p) : (v = p, $ = this);
      for (var E = 0, x = 0; x < $.length; x++)
        y = (v.words[x] | 0) + ($.words[x] | 0) + E, this.words[x] = y & 67108863, E = y >>> 26;
      for (; E !== 0 && x < v.length; x++)
        y = (v.words[x] | 0) + E, this.words[x] = y & 67108863, E = y >>> 26;
      if (this.length = v.length, E !== 0)
        this.words[this.length] = E, this.length++;
      else if (v !== this)
        for (; x < v.length; x++)
          this.words[x] = v.words[x];
      return this;
    }, o.prototype.add = function(p) {
      var y;
      return p.negative !== 0 && this.negative === 0 ? (p.negative = 0, y = this.sub(p), p.negative ^= 1, y) : p.negative === 0 && this.negative !== 0 ? (this.negative = 0, y = p.sub(this), this.negative = 1, y) : this.length > p.length ? this.clone().iadd(p) : p.clone().iadd(this);
    }, o.prototype.isub = function(p) {
      if (p.negative !== 0) {
        p.negative = 0;
        var y = this.iadd(p);
        return p.negative = 1, y._normSign();
      } else if (this.negative !== 0)
        return this.negative = 0, this.iadd(p), this.negative = 1, this._normSign();
      var v = this.cmp(p);
      if (v === 0)
        return this.negative = 0, this.length = 1, this.words[0] = 0, this;
      var $, E;
      v > 0 ? ($ = this, E = p) : ($ = p, E = this);
      for (var x = 0, l = 0; l < E.length; l++)
        y = ($.words[l] | 0) - (E.words[l] | 0) + x, x = y >> 26, this.words[l] = y & 67108863;
      for (; x !== 0 && l < $.length; l++)
        y = ($.words[l] | 0) + x, x = y >> 26, this.words[l] = y & 67108863;
      if (x === 0 && l < $.length && $ !== this)
        for (; l < $.length; l++)
          this.words[l] = $.words[l];
      return this.length = Math.max(this.length, l), $ !== this && (this.negative = 1), this._strip();
    }, o.prototype.sub = function(p) {
      return this.clone().isub(p);
    };
    function z(h, p, y) {
      y.negative = p.negative ^ h.negative;
      var v = h.length + p.length | 0;
      y.length = v, v = v - 1 | 0;
      var $ = h.words[0] | 0, E = p.words[0] | 0, x = $ * E, l = x & 67108863, b = x / 67108864 | 0;
      y.words[0] = l;
      for (var M = 1; M < v; M++) {
        for (var k = b >>> 26, U = b & 67108863, T = Math.min(M, p.length - 1), H = Math.max(0, M - h.length + 1); H <= T; H++) {
          var Y = M - H | 0;
          $ = h.words[Y] | 0, E = p.words[H] | 0, x = $ * E + U, k += x / 67108864 | 0, U = x & 67108863;
        }
        y.words[M] = U | 0, b = k | 0;
      }
      return b !== 0 ? y.words[M] = b | 0 : y.length--, y._strip();
    }
    var q = function(p, y, v) {
      var $ = p.words, E = y.words, x = v.words, l = 0, b, M, k, U = $[0] | 0, T = U & 8191, H = U >>> 13, Y = $[1] | 0, le = Y & 8191, ce = Y >>> 13, de = $[2] | 0, ue = de & 8191, re = de >>> 13, ge = $[3] | 0, Ae = ge & 8191, xe = ge >>> 13, Ee = $[4] | 0, at = Ee & 8191, Re = Ee >>> 13, ve = $[5] | 0, xt = ve & 8191, Ne = ve >>> 13, qe = $[6] | 0, wt = qe & 8191, Te = qe >>> 13, De = $[7] | 0, vt = De & 8191, ke = De >>> 13, Ue = $[8] | 0, $t = Ue & 8191, ee = Ue >>> 13, F = $[9] | 0, J = F & 8191, oe = F >>> 13, he = E[0] | 0, Se = he & 8191, me = he >>> 13, Be = E[1] | 0, gt = Be & 8191, Me = Be >>> 13, Oe = E[2] | 0, ht = Oe & 8191, He = Oe >>> 13, Ge = E[3] | 0, _t = Ge & 8191, Le = Ge >>> 13, Ke = E[4] | 0, Et = Ke & 8191, Fe = Ke >>> 13, ze = E[5] | 0, At = ze & 8191, Pe = ze >>> 13, je = E[6] | 0, Q = je & 8191, te = je >>> 13, ne = E[7] | 0, D = ne & 8191, se = ne >>> 13, pe = E[8] | 0, $e = pe & 8191, be = pe >>> 13, _e = E[9] | 0, Je = _e & 8191, We = _e >>> 13;
      v.negative = p.negative ^ y.negative, v.length = 19, b = Math.imul(T, Se), M = Math.imul(T, me), M = M + Math.imul(H, Se) | 0, k = Math.imul(H, me);
      var bt = (l + b | 0) + ((M & 8191) << 13) | 0;
      l = (k + (M >>> 13) | 0) + (bt >>> 26) | 0, bt &= 67108863, b = Math.imul(le, Se), M = Math.imul(le, me), M = M + Math.imul(ce, Se) | 0, k = Math.imul(ce, me), b = b + Math.imul(T, gt) | 0, M = M + Math.imul(T, Me) | 0, M = M + Math.imul(H, gt) | 0, k = k + Math.imul(H, Me) | 0;
      var Ye = (l + b | 0) + ((M & 8191) << 13) | 0;
      l = (k + (M >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, b = Math.imul(ue, Se), M = Math.imul(ue, me), M = M + Math.imul(re, Se) | 0, k = Math.imul(re, me), b = b + Math.imul(le, gt) | 0, M = M + Math.imul(le, Me) | 0, M = M + Math.imul(ce, gt) | 0, k = k + Math.imul(ce, Me) | 0, b = b + Math.imul(T, ht) | 0, M = M + Math.imul(T, He) | 0, M = M + Math.imul(H, ht) | 0, k = k + Math.imul(H, He) | 0;
      var ot = (l + b | 0) + ((M & 8191) << 13) | 0;
      l = (k + (M >>> 13) | 0) + (ot >>> 26) | 0, ot &= 67108863, b = Math.imul(Ae, Se), M = Math.imul(Ae, me), M = M + Math.imul(xe, Se) | 0, k = Math.imul(xe, me), b = b + Math.imul(ue, gt) | 0, M = M + Math.imul(ue, Me) | 0, M = M + Math.imul(re, gt) | 0, k = k + Math.imul(re, Me) | 0, b = b + Math.imul(le, ht) | 0, M = M + Math.imul(le, He) | 0, M = M + Math.imul(ce, ht) | 0, k = k + Math.imul(ce, He) | 0, b = b + Math.imul(T, _t) | 0, M = M + Math.imul(T, Le) | 0, M = M + Math.imul(H, _t) | 0, k = k + Math.imul(H, Le) | 0;
      var ct = (l + b | 0) + ((M & 8191) << 13) | 0;
      l = (k + (M >>> 13) | 0) + (ct >>> 26) | 0, ct &= 67108863, b = Math.imul(at, Se), M = Math.imul(at, me), M = M + Math.imul(Re, Se) | 0, k = Math.imul(Re, me), b = b + Math.imul(Ae, gt) | 0, M = M + Math.imul(Ae, Me) | 0, M = M + Math.imul(xe, gt) | 0, k = k + Math.imul(xe, Me) | 0, b = b + Math.imul(ue, ht) | 0, M = M + Math.imul(ue, He) | 0, M = M + Math.imul(re, ht) | 0, k = k + Math.imul(re, He) | 0, b = b + Math.imul(le, _t) | 0, M = M + Math.imul(le, Le) | 0, M = M + Math.imul(ce, _t) | 0, k = k + Math.imul(ce, Le) | 0, b = b + Math.imul(T, Et) | 0, M = M + Math.imul(T, Fe) | 0, M = M + Math.imul(H, Et) | 0, k = k + Math.imul(H, Fe) | 0;
      var lt = (l + b | 0) + ((M & 8191) << 13) | 0;
      l = (k + (M >>> 13) | 0) + (lt >>> 26) | 0, lt &= 67108863, b = Math.imul(xt, Se), M = Math.imul(xt, me), M = M + Math.imul(Ne, Se) | 0, k = Math.imul(Ne, me), b = b + Math.imul(at, gt) | 0, M = M + Math.imul(at, Me) | 0, M = M + Math.imul(Re, gt) | 0, k = k + Math.imul(Re, Me) | 0, b = b + Math.imul(Ae, ht) | 0, M = M + Math.imul(Ae, He) | 0, M = M + Math.imul(xe, ht) | 0, k = k + Math.imul(xe, He) | 0, b = b + Math.imul(ue, _t) | 0, M = M + Math.imul(ue, Le) | 0, M = M + Math.imul(re, _t) | 0, k = k + Math.imul(re, Le) | 0, b = b + Math.imul(le, Et) | 0, M = M + Math.imul(le, Fe) | 0, M = M + Math.imul(ce, Et) | 0, k = k + Math.imul(ce, Fe) | 0, b = b + Math.imul(T, At) | 0, M = M + Math.imul(T, Pe) | 0, M = M + Math.imul(H, At) | 0, k = k + Math.imul(H, Pe) | 0;
      var mt = (l + b | 0) + ((M & 8191) << 13) | 0;
      l = (k + (M >>> 13) | 0) + (mt >>> 26) | 0, mt &= 67108863, b = Math.imul(wt, Se), M = Math.imul(wt, me), M = M + Math.imul(Te, Se) | 0, k = Math.imul(Te, me), b = b + Math.imul(xt, gt) | 0, M = M + Math.imul(xt, Me) | 0, M = M + Math.imul(Ne, gt) | 0, k = k + Math.imul(Ne, Me) | 0, b = b + Math.imul(at, ht) | 0, M = M + Math.imul(at, He) | 0, M = M + Math.imul(Re, ht) | 0, k = k + Math.imul(Re, He) | 0, b = b + Math.imul(Ae, _t) | 0, M = M + Math.imul(Ae, Le) | 0, M = M + Math.imul(xe, _t) | 0, k = k + Math.imul(xe, Le) | 0, b = b + Math.imul(ue, Et) | 0, M = M + Math.imul(ue, Fe) | 0, M = M + Math.imul(re, Et) | 0, k = k + Math.imul(re, Fe) | 0, b = b + Math.imul(le, At) | 0, M = M + Math.imul(le, Pe) | 0, M = M + Math.imul(ce, At) | 0, k = k + Math.imul(ce, Pe) | 0, b = b + Math.imul(T, Q) | 0, M = M + Math.imul(T, te) | 0, M = M + Math.imul(H, Q) | 0, k = k + Math.imul(H, te) | 0;
      var dt = (l + b | 0) + ((M & 8191) << 13) | 0;
      l = (k + (M >>> 13) | 0) + (dt >>> 26) | 0, dt &= 67108863, b = Math.imul(vt, Se), M = Math.imul(vt, me), M = M + Math.imul(ke, Se) | 0, k = Math.imul(ke, me), b = b + Math.imul(wt, gt) | 0, M = M + Math.imul(wt, Me) | 0, M = M + Math.imul(Te, gt) | 0, k = k + Math.imul(Te, Me) | 0, b = b + Math.imul(xt, ht) | 0, M = M + Math.imul(xt, He) | 0, M = M + Math.imul(Ne, ht) | 0, k = k + Math.imul(Ne, He) | 0, b = b + Math.imul(at, _t) | 0, M = M + Math.imul(at, Le) | 0, M = M + Math.imul(Re, _t) | 0, k = k + Math.imul(Re, Le) | 0, b = b + Math.imul(Ae, Et) | 0, M = M + Math.imul(Ae, Fe) | 0, M = M + Math.imul(xe, Et) | 0, k = k + Math.imul(xe, Fe) | 0, b = b + Math.imul(ue, At) | 0, M = M + Math.imul(ue, Pe) | 0, M = M + Math.imul(re, At) | 0, k = k + Math.imul(re, Pe) | 0, b = b + Math.imul(le, Q) | 0, M = M + Math.imul(le, te) | 0, M = M + Math.imul(ce, Q) | 0, k = k + Math.imul(ce, te) | 0, b = b + Math.imul(T, D) | 0, M = M + Math.imul(T, se) | 0, M = M + Math.imul(H, D) | 0, k = k + Math.imul(H, se) | 0;
      var yt = (l + b | 0) + ((M & 8191) << 13) | 0;
      l = (k + (M >>> 13) | 0) + (yt >>> 26) | 0, yt &= 67108863, b = Math.imul($t, Se), M = Math.imul($t, me), M = M + Math.imul(ee, Se) | 0, k = Math.imul(ee, me), b = b + Math.imul(vt, gt) | 0, M = M + Math.imul(vt, Me) | 0, M = M + Math.imul(ke, gt) | 0, k = k + Math.imul(ke, Me) | 0, b = b + Math.imul(wt, ht) | 0, M = M + Math.imul(wt, He) | 0, M = M + Math.imul(Te, ht) | 0, k = k + Math.imul(Te, He) | 0, b = b + Math.imul(xt, _t) | 0, M = M + Math.imul(xt, Le) | 0, M = M + Math.imul(Ne, _t) | 0, k = k + Math.imul(Ne, Le) | 0, b = b + Math.imul(at, Et) | 0, M = M + Math.imul(at, Fe) | 0, M = M + Math.imul(Re, Et) | 0, k = k + Math.imul(Re, Fe) | 0, b = b + Math.imul(Ae, At) | 0, M = M + Math.imul(Ae, Pe) | 0, M = M + Math.imul(xe, At) | 0, k = k + Math.imul(xe, Pe) | 0, b = b + Math.imul(ue, Q) | 0, M = M + Math.imul(ue, te) | 0, M = M + Math.imul(re, Q) | 0, k = k + Math.imul(re, te) | 0, b = b + Math.imul(le, D) | 0, M = M + Math.imul(le, se) | 0, M = M + Math.imul(ce, D) | 0, k = k + Math.imul(ce, se) | 0, b = b + Math.imul(T, $e) | 0, M = M + Math.imul(T, be) | 0, M = M + Math.imul(H, $e) | 0, k = k + Math.imul(H, be) | 0;
      var pt = (l + b | 0) + ((M & 8191) << 13) | 0;
      l = (k + (M >>> 13) | 0) + (pt >>> 26) | 0, pt &= 67108863, b = Math.imul(J, Se), M = Math.imul(J, me), M = M + Math.imul(oe, Se) | 0, k = Math.imul(oe, me), b = b + Math.imul($t, gt) | 0, M = M + Math.imul($t, Me) | 0, M = M + Math.imul(ee, gt) | 0, k = k + Math.imul(ee, Me) | 0, b = b + Math.imul(vt, ht) | 0, M = M + Math.imul(vt, He) | 0, M = M + Math.imul(ke, ht) | 0, k = k + Math.imul(ke, He) | 0, b = b + Math.imul(wt, _t) | 0, M = M + Math.imul(wt, Le) | 0, M = M + Math.imul(Te, _t) | 0, k = k + Math.imul(Te, Le) | 0, b = b + Math.imul(xt, Et) | 0, M = M + Math.imul(xt, Fe) | 0, M = M + Math.imul(Ne, Et) | 0, k = k + Math.imul(Ne, Fe) | 0, b = b + Math.imul(at, At) | 0, M = M + Math.imul(at, Pe) | 0, M = M + Math.imul(Re, At) | 0, k = k + Math.imul(Re, Pe) | 0, b = b + Math.imul(Ae, Q) | 0, M = M + Math.imul(Ae, te) | 0, M = M + Math.imul(xe, Q) | 0, k = k + Math.imul(xe, te) | 0, b = b + Math.imul(ue, D) | 0, M = M + Math.imul(ue, se) | 0, M = M + Math.imul(re, D) | 0, k = k + Math.imul(re, se) | 0, b = b + Math.imul(le, $e) | 0, M = M + Math.imul(le, be) | 0, M = M + Math.imul(ce, $e) | 0, k = k + Math.imul(ce, be) | 0, b = b + Math.imul(T, Je) | 0, M = M + Math.imul(T, We) | 0, M = M + Math.imul(H, Je) | 0, k = k + Math.imul(H, We) | 0;
      var tt = (l + b | 0) + ((M & 8191) << 13) | 0;
      l = (k + (M >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, b = Math.imul(J, gt), M = Math.imul(J, Me), M = M + Math.imul(oe, gt) | 0, k = Math.imul(oe, Me), b = b + Math.imul($t, ht) | 0, M = M + Math.imul($t, He) | 0, M = M + Math.imul(ee, ht) | 0, k = k + Math.imul(ee, He) | 0, b = b + Math.imul(vt, _t) | 0, M = M + Math.imul(vt, Le) | 0, M = M + Math.imul(ke, _t) | 0, k = k + Math.imul(ke, Le) | 0, b = b + Math.imul(wt, Et) | 0, M = M + Math.imul(wt, Fe) | 0, M = M + Math.imul(Te, Et) | 0, k = k + Math.imul(Te, Fe) | 0, b = b + Math.imul(xt, At) | 0, M = M + Math.imul(xt, Pe) | 0, M = M + Math.imul(Ne, At) | 0, k = k + Math.imul(Ne, Pe) | 0, b = b + Math.imul(at, Q) | 0, M = M + Math.imul(at, te) | 0, M = M + Math.imul(Re, Q) | 0, k = k + Math.imul(Re, te) | 0, b = b + Math.imul(Ae, D) | 0, M = M + Math.imul(Ae, se) | 0, M = M + Math.imul(xe, D) | 0, k = k + Math.imul(xe, se) | 0, b = b + Math.imul(ue, $e) | 0, M = M + Math.imul(ue, be) | 0, M = M + Math.imul(re, $e) | 0, k = k + Math.imul(re, be) | 0, b = b + Math.imul(le, Je) | 0, M = M + Math.imul(le, We) | 0, M = M + Math.imul(ce, Je) | 0, k = k + Math.imul(ce, We) | 0;
      var st = (l + b | 0) + ((M & 8191) << 13) | 0;
      l = (k + (M >>> 13) | 0) + (st >>> 26) | 0, st &= 67108863, b = Math.imul(J, ht), M = Math.imul(J, He), M = M + Math.imul(oe, ht) | 0, k = Math.imul(oe, He), b = b + Math.imul($t, _t) | 0, M = M + Math.imul($t, Le) | 0, M = M + Math.imul(ee, _t) | 0, k = k + Math.imul(ee, Le) | 0, b = b + Math.imul(vt, Et) | 0, M = M + Math.imul(vt, Fe) | 0, M = M + Math.imul(ke, Et) | 0, k = k + Math.imul(ke, Fe) | 0, b = b + Math.imul(wt, At) | 0, M = M + Math.imul(wt, Pe) | 0, M = M + Math.imul(Te, At) | 0, k = k + Math.imul(Te, Pe) | 0, b = b + Math.imul(xt, Q) | 0, M = M + Math.imul(xt, te) | 0, M = M + Math.imul(Ne, Q) | 0, k = k + Math.imul(Ne, te) | 0, b = b + Math.imul(at, D) | 0, M = M + Math.imul(at, se) | 0, M = M + Math.imul(Re, D) | 0, k = k + Math.imul(Re, se) | 0, b = b + Math.imul(Ae, $e) | 0, M = M + Math.imul(Ae, be) | 0, M = M + Math.imul(xe, $e) | 0, k = k + Math.imul(xe, be) | 0, b = b + Math.imul(ue, Je) | 0, M = M + Math.imul(ue, We) | 0, M = M + Math.imul(re, Je) | 0, k = k + Math.imul(re, We) | 0;
      var Qe = (l + b | 0) + ((M & 8191) << 13) | 0;
      l = (k + (M >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, b = Math.imul(J, _t), M = Math.imul(J, Le), M = M + Math.imul(oe, _t) | 0, k = Math.imul(oe, Le), b = b + Math.imul($t, Et) | 0, M = M + Math.imul($t, Fe) | 0, M = M + Math.imul(ee, Et) | 0, k = k + Math.imul(ee, Fe) | 0, b = b + Math.imul(vt, At) | 0, M = M + Math.imul(vt, Pe) | 0, M = M + Math.imul(ke, At) | 0, k = k + Math.imul(ke, Pe) | 0, b = b + Math.imul(wt, Q) | 0, M = M + Math.imul(wt, te) | 0, M = M + Math.imul(Te, Q) | 0, k = k + Math.imul(Te, te) | 0, b = b + Math.imul(xt, D) | 0, M = M + Math.imul(xt, se) | 0, M = M + Math.imul(Ne, D) | 0, k = k + Math.imul(Ne, se) | 0, b = b + Math.imul(at, $e) | 0, M = M + Math.imul(at, be) | 0, M = M + Math.imul(Re, $e) | 0, k = k + Math.imul(Re, be) | 0, b = b + Math.imul(Ae, Je) | 0, M = M + Math.imul(Ae, We) | 0, M = M + Math.imul(xe, Je) | 0, k = k + Math.imul(xe, We) | 0;
      var rt = (l + b | 0) + ((M & 8191) << 13) | 0;
      l = (k + (M >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, b = Math.imul(J, Et), M = Math.imul(J, Fe), M = M + Math.imul(oe, Et) | 0, k = Math.imul(oe, Fe), b = b + Math.imul($t, At) | 0, M = M + Math.imul($t, Pe) | 0, M = M + Math.imul(ee, At) | 0, k = k + Math.imul(ee, Pe) | 0, b = b + Math.imul(vt, Q) | 0, M = M + Math.imul(vt, te) | 0, M = M + Math.imul(ke, Q) | 0, k = k + Math.imul(ke, te) | 0, b = b + Math.imul(wt, D) | 0, M = M + Math.imul(wt, se) | 0, M = M + Math.imul(Te, D) | 0, k = k + Math.imul(Te, se) | 0, b = b + Math.imul(xt, $e) | 0, M = M + Math.imul(xt, be) | 0, M = M + Math.imul(Ne, $e) | 0, k = k + Math.imul(Ne, be) | 0, b = b + Math.imul(at, Je) | 0, M = M + Math.imul(at, We) | 0, M = M + Math.imul(Re, Je) | 0, k = k + Math.imul(Re, We) | 0;
      var it = (l + b | 0) + ((M & 8191) << 13) | 0;
      l = (k + (M >>> 13) | 0) + (it >>> 26) | 0, it &= 67108863, b = Math.imul(J, At), M = Math.imul(J, Pe), M = M + Math.imul(oe, At) | 0, k = Math.imul(oe, Pe), b = b + Math.imul($t, Q) | 0, M = M + Math.imul($t, te) | 0, M = M + Math.imul(ee, Q) | 0, k = k + Math.imul(ee, te) | 0, b = b + Math.imul(vt, D) | 0, M = M + Math.imul(vt, se) | 0, M = M + Math.imul(ke, D) | 0, k = k + Math.imul(ke, se) | 0, b = b + Math.imul(wt, $e) | 0, M = M + Math.imul(wt, be) | 0, M = M + Math.imul(Te, $e) | 0, k = k + Math.imul(Te, be) | 0, b = b + Math.imul(xt, Je) | 0, M = M + Math.imul(xt, We) | 0, M = M + Math.imul(Ne, Je) | 0, k = k + Math.imul(Ne, We) | 0;
      var et = (l + b | 0) + ((M & 8191) << 13) | 0;
      l = (k + (M >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, b = Math.imul(J, Q), M = Math.imul(J, te), M = M + Math.imul(oe, Q) | 0, k = Math.imul(oe, te), b = b + Math.imul($t, D) | 0, M = M + Math.imul($t, se) | 0, M = M + Math.imul(ee, D) | 0, k = k + Math.imul(ee, se) | 0, b = b + Math.imul(vt, $e) | 0, M = M + Math.imul(vt, be) | 0, M = M + Math.imul(ke, $e) | 0, k = k + Math.imul(ke, be) | 0, b = b + Math.imul(wt, Je) | 0, M = M + Math.imul(wt, We) | 0, M = M + Math.imul(Te, Je) | 0, k = k + Math.imul(Te, We) | 0;
      var Ie = (l + b | 0) + ((M & 8191) << 13) | 0;
      l = (k + (M >>> 13) | 0) + (Ie >>> 26) | 0, Ie &= 67108863, b = Math.imul(J, D), M = Math.imul(J, se), M = M + Math.imul(oe, D) | 0, k = Math.imul(oe, se), b = b + Math.imul($t, $e) | 0, M = M + Math.imul($t, be) | 0, M = M + Math.imul(ee, $e) | 0, k = k + Math.imul(ee, be) | 0, b = b + Math.imul(vt, Je) | 0, M = M + Math.imul(vt, We) | 0, M = M + Math.imul(ke, Je) | 0, k = k + Math.imul(ke, We) | 0;
      var Ce = (l + b | 0) + ((M & 8191) << 13) | 0;
      l = (k + (M >>> 13) | 0) + (Ce >>> 26) | 0, Ce &= 67108863, b = Math.imul(J, $e), M = Math.imul(J, be), M = M + Math.imul(oe, $e) | 0, k = Math.imul(oe, be), b = b + Math.imul($t, Je) | 0, M = M + Math.imul($t, We) | 0, M = M + Math.imul(ee, Je) | 0, k = k + Math.imul(ee, We) | 0;
      var Xe = (l + b | 0) + ((M & 8191) << 13) | 0;
      l = (k + (M >>> 13) | 0) + (Xe >>> 26) | 0, Xe &= 67108863, b = Math.imul(J, Je), M = Math.imul(J, We), M = M + Math.imul(oe, Je) | 0, k = Math.imul(oe, We);
      var Ve = (l + b | 0) + ((M & 8191) << 13) | 0;
      return l = (k + (M >>> 13) | 0) + (Ve >>> 26) | 0, Ve &= 67108863, x[0] = bt, x[1] = Ye, x[2] = ot, x[3] = ct, x[4] = lt, x[5] = mt, x[6] = dt, x[7] = yt, x[8] = pt, x[9] = tt, x[10] = st, x[11] = Qe, x[12] = rt, x[13] = it, x[14] = et, x[15] = Ie, x[16] = Ce, x[17] = Xe, x[18] = Ve, l !== 0 && (x[19] = l, v.length++), v;
    };
    Math.imul || (q = z);
    function Z(h, p, y) {
      y.negative = p.negative ^ h.negative, y.length = h.length + p.length;
      for (var v = 0, $ = 0, E = 0; E < y.length - 1; E++) {
        var x = $;
        $ = 0;
        for (var l = v & 67108863, b = Math.min(E, p.length - 1), M = Math.max(0, E - h.length + 1); M <= b; M++) {
          var k = E - M, U = h.words[k] | 0, T = p.words[M] | 0, H = U * T, Y = H & 67108863;
          x = x + (H / 67108864 | 0) | 0, Y = Y + l | 0, l = Y & 67108863, x = x + (Y >>> 26) | 0, $ += x >>> 26, x &= 67108863;
        }
        y.words[E] = l, v = x, x = $;
      }
      return v !== 0 ? y.words[E] = v : y.length--, y._strip();
    }
    function X(h, p, y) {
      return Z(h, p, y);
    }
    o.prototype.mulTo = function(p, y) {
      var v, $ = this.length + p.length;
      return this.length === 10 && p.length === 10 ? v = q(this, p, y) : $ < 63 ? v = z(this, p, y) : $ < 1024 ? v = Z(this, p, y) : v = X(this, p, y), v;
    }, o.prototype.mul = function(p) {
      var y = new o(null);
      return y.words = new Array(this.length + p.length), this.mulTo(p, y);
    }, o.prototype.mulf = function(p) {
      var y = new o(null);
      return y.words = new Array(this.length + p.length), X(this, p, y);
    }, o.prototype.imul = function(p) {
      return this.clone().mulTo(p, this);
    }, o.prototype.imuln = function(p) {
      var y = p < 0;
      y && (p = -p), a(typeof p == "number"), a(p < 67108864);
      for (var v = 0, $ = 0; $ < this.length; $++) {
        var E = (this.words[$] | 0) * p, x = (E & 67108863) + (v & 67108863);
        v >>= 26, v += E / 67108864 | 0, v += x >>> 26, this.words[$] = x & 67108863;
      }
      return v !== 0 && (this.words[$] = v, this.length++), y ? this.ineg() : this;
    }, o.prototype.muln = function(p) {
      return this.clone().imuln(p);
    }, o.prototype.sqr = function() {
      return this.mul(this);
    }, o.prototype.isqr = function() {
      return this.imul(this.clone());
    }, o.prototype.pow = function(p) {
      var y = C(p);
      if (y.length === 0)
        return new o(1);
      for (var v = this, $ = 0; $ < y.length && y[$] === 0; $++, v = v.sqr())
        ;
      if (++$ < y.length)
        for (var E = v.sqr(); $ < y.length; $++, E = E.sqr())
          y[$] !== 0 && (v = v.mul(E));
      return v;
    }, o.prototype.iushln = function(p) {
      a(typeof p == "number" && p >= 0);
      var y = p % 26, v = (p - y) / 26, $ = 67108863 >>> 26 - y << 26 - y, E;
      if (y !== 0) {
        var x = 0;
        for (E = 0; E < this.length; E++) {
          var l = this.words[E] & $, b = (this.words[E] | 0) - l << y;
          this.words[E] = b | x, x = l >>> 26 - y;
        }
        x && (this.words[E] = x, this.length++);
      }
      if (v !== 0) {
        for (E = this.length - 1; E >= 0; E--)
          this.words[E + v] = this.words[E];
        for (E = 0; E < v; E++)
          this.words[E] = 0;
        this.length += v;
      }
      return this._strip();
    }, o.prototype.ishln = function(p) {
      return a(this.negative === 0), this.iushln(p);
    }, o.prototype.iushrn = function(p, y, v) {
      a(typeof p == "number" && p >= 0);
      var $;
      y ? $ = (y - y % 26) / 26 : $ = 0;
      var E = p % 26, x = Math.min((p - E) / 26, this.length), l = 67108863 ^ 67108863 >>> E << E, b = v;
      if ($ -= x, $ = Math.max(0, $), b) {
        for (var M = 0; M < x; M++)
          b.words[M] = this.words[M];
        b.length = x;
      }
      if (x !== 0)
        if (this.length > x)
          for (this.length -= x, M = 0; M < this.length; M++)
            this.words[M] = this.words[M + x];
        else
          this.words[0] = 0, this.length = 1;
      var k = 0;
      for (M = this.length - 1; M >= 0 && (k !== 0 || M >= $); M--) {
        var U = this.words[M] | 0;
        this.words[M] = k << 26 - E | U >>> E, k = U & l;
      }
      return b && k !== 0 && (b.words[b.length++] = k), this.length === 0 && (this.words[0] = 0, this.length = 1), this._strip();
    }, o.prototype.ishrn = function(p, y, v) {
      return a(this.negative === 0), this.iushrn(p, y, v);
    }, o.prototype.shln = function(p) {
      return this.clone().ishln(p);
    }, o.prototype.ushln = function(p) {
      return this.clone().iushln(p);
    }, o.prototype.shrn = function(p) {
      return this.clone().ishrn(p);
    }, o.prototype.ushrn = function(p) {
      return this.clone().iushrn(p);
    }, o.prototype.testn = function(p) {
      a(typeof p == "number" && p >= 0);
      var y = p % 26, v = (p - y) / 26, $ = 1 << y;
      if (this.length <= v)
        return !1;
      var E = this.words[v];
      return !!(E & $);
    }, o.prototype.imaskn = function(p) {
      a(typeof p == "number" && p >= 0);
      var y = p % 26, v = (p - y) / 26;
      if (a(this.negative === 0, "imaskn works only with positive numbers"), this.length <= v)
        return this;
      if (y !== 0 && v++, this.length = Math.min(v, this.length), y !== 0) {
        var $ = 67108863 ^ 67108863 >>> y << y;
        this.words[this.length - 1] &= $;
      }
      return this._strip();
    }, o.prototype.maskn = function(p) {
      return this.clone().imaskn(p);
    }, o.prototype.iaddn = function(p) {
      return a(typeof p == "number"), a(p < 67108864), p < 0 ? this.isubn(-p) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) <= p ? (this.words[0] = p - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(p), this.negative = 1, this) : this._iaddn(p);
    }, o.prototype._iaddn = function(p) {
      this.words[0] += p;
      for (var y = 0; y < this.length && this.words[y] >= 67108864; y++)
        this.words[y] -= 67108864, y === this.length - 1 ? this.words[y + 1] = 1 : this.words[y + 1]++;
      return this.length = Math.max(this.length, y + 1), this;
    }, o.prototype.isubn = function(p) {
      if (a(typeof p == "number"), a(p < 67108864), p < 0)
        return this.iaddn(-p);
      if (this.negative !== 0)
        return this.negative = 0, this.iaddn(p), this.negative = 1, this;
      if (this.words[0] -= p, this.length === 1 && this.words[0] < 0)
        this.words[0] = -this.words[0], this.negative = 1;
      else
        for (var y = 0; y < this.length && this.words[y] < 0; y++)
          this.words[y] += 67108864, this.words[y + 1] -= 1;
      return this._strip();
    }, o.prototype.addn = function(p) {
      return this.clone().iaddn(p);
    }, o.prototype.subn = function(p) {
      return this.clone().isubn(p);
    }, o.prototype.iabs = function() {
      return this.negative = 0, this;
    }, o.prototype.abs = function() {
      return this.clone().iabs();
    }, o.prototype._ishlnsubmul = function(p, y, v) {
      var $ = p.length + v, E;
      this._expand($);
      var x, l = 0;
      for (E = 0; E < p.length; E++) {
        x = (this.words[E + v] | 0) + l;
        var b = (p.words[E] | 0) * y;
        x -= b & 67108863, l = (x >> 26) - (b / 67108864 | 0), this.words[E + v] = x & 67108863;
      }
      for (; E < this.length - v; E++)
        x = (this.words[E + v] | 0) + l, l = x >> 26, this.words[E + v] = x & 67108863;
      if (l === 0)
        return this._strip();
      for (a(l === -1), l = 0, E = 0; E < this.length; E++)
        x = -(this.words[E] | 0) + l, l = x >> 26, this.words[E] = x & 67108863;
      return this.negative = 1, this._strip();
    }, o.prototype._wordDiv = function(p, y) {
      var v = this.length - p.length, $ = this.clone(), E = p, x = E.words[E.length - 1] | 0, l = this._countBits(x);
      v = 26 - l, v !== 0 && (E = E.ushln(v), $.iushln(v), x = E.words[E.length - 1] | 0);
      var b = $.length - E.length, M;
      if (y !== "mod") {
        M = new o(null), M.length = b + 1, M.words = new Array(M.length);
        for (var k = 0; k < M.length; k++)
          M.words[k] = 0;
      }
      var U = $.clone()._ishlnsubmul(E, 1, b);
      U.negative === 0 && ($ = U, M && (M.words[b] = 1));
      for (var T = b - 1; T >= 0; T--) {
        var H = ($.words[E.length + T] | 0) * 67108864 + ($.words[E.length + T - 1] | 0);
        for (H = Math.min(H / x | 0, 67108863), $._ishlnsubmul(E, H, T); $.negative !== 0; )
          H--, $.negative = 0, $._ishlnsubmul(E, 1, T), $.isZero() || ($.negative ^= 1);
        M && (M.words[T] = H);
      }
      return M && M._strip(), $._strip(), y !== "div" && v !== 0 && $.iushrn(v), {
        div: M || null,
        mod: $
      };
    }, o.prototype.divmod = function(p, y, v) {
      if (a(!p.isZero()), this.isZero())
        return {
          div: new o(0),
          mod: new o(0)
        };
      var $, E, x;
      return this.negative !== 0 && p.negative === 0 ? (x = this.neg().divmod(p, y), y !== "mod" && ($ = x.div.neg()), y !== "div" && (E = x.mod.neg(), v && E.negative !== 0 && E.iadd(p)), {
        div: $,
        mod: E
      }) : this.negative === 0 && p.negative !== 0 ? (x = this.divmod(p.neg(), y), y !== "mod" && ($ = x.div.neg()), {
        div: $,
        mod: x.mod
      }) : this.negative & p.negative ? (x = this.neg().divmod(p.neg(), y), y !== "div" && (E = x.mod.neg(), v && E.negative !== 0 && E.isub(p)), {
        div: x.div,
        mod: E
      }) : p.length > this.length || this.cmp(p) < 0 ? {
        div: new o(0),
        mod: this
      } : p.length === 1 ? y === "div" ? {
        div: this.divn(p.words[0]),
        mod: null
      } : y === "mod" ? {
        div: null,
        mod: new o(this.modrn(p.words[0]))
      } : {
        div: this.divn(p.words[0]),
        mod: new o(this.modrn(p.words[0]))
      } : this._wordDiv(p, y);
    }, o.prototype.div = function(p) {
      return this.divmod(p, "div", !1).div;
    }, o.prototype.mod = function(p) {
      return this.divmod(p, "mod", !1).mod;
    }, o.prototype.umod = function(p) {
      return this.divmod(p, "mod", !0).mod;
    }, o.prototype.divRound = function(p) {
      var y = this.divmod(p);
      if (y.mod.isZero())
        return y.div;
      var v = y.div.negative !== 0 ? y.mod.isub(p) : y.mod, $ = p.ushrn(1), E = p.andln(1), x = v.cmp($);
      return x < 0 || E === 1 && x === 0 ? y.div : y.div.negative !== 0 ? y.div.isubn(1) : y.div.iaddn(1);
    }, o.prototype.modrn = function(p) {
      var y = p < 0;
      y && (p = -p), a(p <= 67108863);
      for (var v = (1 << 26) % p, $ = 0, E = this.length - 1; E >= 0; E--)
        $ = (v * $ + (this.words[E] | 0)) % p;
      return y ? -$ : $;
    }, o.prototype.modn = function(p) {
      return this.modrn(p);
    }, o.prototype.idivn = function(p) {
      var y = p < 0;
      y && (p = -p), a(p <= 67108863);
      for (var v = 0, $ = this.length - 1; $ >= 0; $--) {
        var E = (this.words[$] | 0) + v * 67108864;
        this.words[$] = E / p | 0, v = E % p;
      }
      return this._strip(), y ? this.ineg() : this;
    }, o.prototype.divn = function(p) {
      return this.clone().idivn(p);
    }, o.prototype.egcd = function(p) {
      a(p.negative === 0), a(!p.isZero());
      var y = this, v = p.clone();
      y.negative !== 0 ? y = y.umod(p) : y = y.clone();
      for (var $ = new o(1), E = new o(0), x = new o(0), l = new o(1), b = 0; y.isEven() && v.isEven(); )
        y.iushrn(1), v.iushrn(1), ++b;
      for (var M = v.clone(), k = y.clone(); !y.isZero(); ) {
        for (var U = 0, T = 1; !(y.words[0] & T) && U < 26; ++U, T <<= 1)
          ;
        if (U > 0)
          for (y.iushrn(U); U-- > 0; )
            ($.isOdd() || E.isOdd()) && ($.iadd(M), E.isub(k)), $.iushrn(1), E.iushrn(1);
        for (var H = 0, Y = 1; !(v.words[0] & Y) && H < 26; ++H, Y <<= 1)
          ;
        if (H > 0)
          for (v.iushrn(H); H-- > 0; )
            (x.isOdd() || l.isOdd()) && (x.iadd(M), l.isub(k)), x.iushrn(1), l.iushrn(1);
        y.cmp(v) >= 0 ? (y.isub(v), $.isub(x), E.isub(l)) : (v.isub(y), x.isub($), l.isub(E));
      }
      return {
        a: x,
        b: l,
        gcd: v.iushln(b)
      };
    }, o.prototype._invmp = function(p) {
      a(p.negative === 0), a(!p.isZero());
      var y = this, v = p.clone();
      y.negative !== 0 ? y = y.umod(p) : y = y.clone();
      for (var $ = new o(1), E = new o(0), x = v.clone(); y.cmpn(1) > 0 && v.cmpn(1) > 0; ) {
        for (var l = 0, b = 1; !(y.words[0] & b) && l < 26; ++l, b <<= 1)
          ;
        if (l > 0)
          for (y.iushrn(l); l-- > 0; )
            $.isOdd() && $.iadd(x), $.iushrn(1);
        for (var M = 0, k = 1; !(v.words[0] & k) && M < 26; ++M, k <<= 1)
          ;
        if (M > 0)
          for (v.iushrn(M); M-- > 0; )
            E.isOdd() && E.iadd(x), E.iushrn(1);
        y.cmp(v) >= 0 ? (y.isub(v), $.isub(E)) : (v.isub(y), E.isub($));
      }
      var U;
      return y.cmpn(1) === 0 ? U = $ : U = E, U.cmpn(0) < 0 && U.iadd(p), U;
    }, o.prototype.gcd = function(p) {
      if (this.isZero())
        return p.abs();
      if (p.isZero())
        return this.abs();
      var y = this.clone(), v = p.clone();
      y.negative = 0, v.negative = 0;
      for (var $ = 0; y.isEven() && v.isEven(); $++)
        y.iushrn(1), v.iushrn(1);
      do {
        for (; y.isEven(); )
          y.iushrn(1);
        for (; v.isEven(); )
          v.iushrn(1);
        var E = y.cmp(v);
        if (E < 0) {
          var x = y;
          y = v, v = x;
        } else if (E === 0 || v.cmpn(1) === 0)
          break;
        y.isub(v);
      } while (!0);
      return v.iushln($);
    }, o.prototype.invm = function(p) {
      return this.egcd(p).a.umod(p);
    }, o.prototype.isEven = function() {
      return (this.words[0] & 1) === 0;
    }, o.prototype.isOdd = function() {
      return (this.words[0] & 1) === 1;
    }, o.prototype.andln = function(p) {
      return this.words[0] & p;
    }, o.prototype.bincn = function(p) {
      a(typeof p == "number");
      var y = p % 26, v = (p - y) / 26, $ = 1 << y;
      if (this.length <= v)
        return this._expand(v + 1), this.words[v] |= $, this;
      for (var E = $, x = v; E !== 0 && x < this.length; x++) {
        var l = this.words[x] | 0;
        l += E, E = l >>> 26, l &= 67108863, this.words[x] = l;
      }
      return E !== 0 && (this.words[x] = E, this.length++), this;
    }, o.prototype.isZero = function() {
      return this.length === 1 && this.words[0] === 0;
    }, o.prototype.cmpn = function(p) {
      var y = p < 0;
      if (this.negative !== 0 && !y)
        return -1;
      if (this.negative === 0 && y)
        return 1;
      this._strip();
      var v;
      if (this.length > 1)
        v = 1;
      else {
        y && (p = -p), a(p <= 67108863, "Number is too big");
        var $ = this.words[0] | 0;
        v = $ === p ? 0 : $ < p ? -1 : 1;
      }
      return this.negative !== 0 ? -v | 0 : v;
    }, o.prototype.cmp = function(p) {
      if (this.negative !== 0 && p.negative === 0)
        return -1;
      if (this.negative === 0 && p.negative !== 0)
        return 1;
      var y = this.ucmp(p);
      return this.negative !== 0 ? -y | 0 : y;
    }, o.prototype.ucmp = function(p) {
      if (this.length > p.length)
        return 1;
      if (this.length < p.length)
        return -1;
      for (var y = 0, v = this.length - 1; v >= 0; v--) {
        var $ = this.words[v] | 0, E = p.words[v] | 0;
        if ($ !== E) {
          $ < E ? y = -1 : $ > E && (y = 1);
          break;
        }
      }
      return y;
    }, o.prototype.gtn = function(p) {
      return this.cmpn(p) === 1;
    }, o.prototype.gt = function(p) {
      return this.cmp(p) === 1;
    }, o.prototype.gten = function(p) {
      return this.cmpn(p) >= 0;
    }, o.prototype.gte = function(p) {
      return this.cmp(p) >= 0;
    }, o.prototype.ltn = function(p) {
      return this.cmpn(p) === -1;
    }, o.prototype.lt = function(p) {
      return this.cmp(p) === -1;
    }, o.prototype.lten = function(p) {
      return this.cmpn(p) <= 0;
    }, o.prototype.lte = function(p) {
      return this.cmp(p) <= 0;
    }, o.prototype.eqn = function(p) {
      return this.cmpn(p) === 0;
    }, o.prototype.eq = function(p) {
      return this.cmp(p) === 0;
    }, o.red = function(p) {
      return new _(p);
    }, o.prototype.toRed = function(p) {
      return a(!this.red, "Already a number in reduction context"), a(this.negative === 0, "red works only with positives"), p.convertTo(this)._forceRed(p);
    }, o.prototype.fromRed = function() {
      return a(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
    }, o.prototype._forceRed = function(p) {
      return this.red = p, this;
    }, o.prototype.forceRed = function(p) {
      return a(!this.red, "Already a number in reduction context"), this._forceRed(p);
    }, o.prototype.redAdd = function(p) {
      return a(this.red, "redAdd works only with red numbers"), this.red.add(this, p);
    }, o.prototype.redIAdd = function(p) {
      return a(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, p);
    }, o.prototype.redSub = function(p) {
      return a(this.red, "redSub works only with red numbers"), this.red.sub(this, p);
    }, o.prototype.redISub = function(p) {
      return a(this.red, "redISub works only with red numbers"), this.red.isub(this, p);
    }, o.prototype.redShl = function(p) {
      return a(this.red, "redShl works only with red numbers"), this.red.shl(this, p);
    }, o.prototype.redMul = function(p) {
      return a(this.red, "redMul works only with red numbers"), this.red._verify2(this, p), this.red.mul(this, p);
    }, o.prototype.redIMul = function(p) {
      return a(this.red, "redMul works only with red numbers"), this.red._verify2(this, p), this.red.imul(this, p);
    }, o.prototype.redSqr = function() {
      return a(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
    }, o.prototype.redISqr = function() {
      return a(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
    }, o.prototype.redSqrt = function() {
      return a(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
    }, o.prototype.redInvm = function() {
      return a(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
    }, o.prototype.redNeg = function() {
      return a(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
    }, o.prototype.redPow = function(p) {
      return a(this.red && !p.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, p);
    };
    var ie = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function fe(h, p) {
      this.name = h, this.p = new o(p, 16), this.n = this.p.bitLength(), this.k = new o(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
    }
    fe.prototype._tmp = function() {
      var p = new o(null);
      return p.words = new Array(Math.ceil(this.n / 13)), p;
    }, fe.prototype.ireduce = function(p) {
      var y = p, v;
      do
        this.split(y, this.tmp), y = this.imulK(y), y = y.iadd(this.tmp), v = y.bitLength();
      while (v > this.n);
      var $ = v < this.n ? -1 : y.ucmp(this.p);
      return $ === 0 ? (y.words[0] = 0, y.length = 1) : $ > 0 ? y.isub(this.p) : y.strip !== void 0 ? y.strip() : y._strip(), y;
    }, fe.prototype.split = function(p, y) {
      p.iushrn(this.n, 0, y);
    }, fe.prototype.imulK = function(p) {
      return p.imul(this.k);
    };
    function ye() {
      fe.call(
        this,
        "k256",
        "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
      );
    }
    c(ye, fe), ye.prototype.split = function(p, y) {
      for (var v = 4194303, $ = Math.min(p.length, 9), E = 0; E < $; E++)
        y.words[E] = p.words[E];
      if (y.length = $, p.length <= 9) {
        p.words[0] = 0, p.length = 1;
        return;
      }
      var x = p.words[9];
      for (y.words[y.length++] = x & v, E = 10; E < p.length; E++) {
        var l = p.words[E] | 0;
        p.words[E - 10] = (l & v) << 4 | x >>> 22, x = l;
      }
      x >>>= 22, p.words[E - 10] = x, x === 0 && p.length > 10 ? p.length -= 10 : p.length -= 9;
    }, ye.prototype.imulK = function(p) {
      p.words[p.length] = 0, p.words[p.length + 1] = 0, p.length += 2;
      for (var y = 0, v = 0; v < p.length; v++) {
        var $ = p.words[v] | 0;
        y += $ * 977, p.words[v] = y & 67108863, y = $ * 64 + (y / 67108864 | 0);
      }
      return p.words[p.length - 1] === 0 && (p.length--, p.words[p.length - 1] === 0 && p.length--), p;
    };
    function j() {
      fe.call(
        this,
        "p224",
        "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
      );
    }
    c(j, fe);
    function V() {
      fe.call(
        this,
        "p192",
        "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
      );
    }
    c(V, fe);
    function ae() {
      fe.call(
        this,
        "25519",
        "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
      );
    }
    c(ae, fe), ae.prototype.imulK = function(p) {
      for (var y = 0, v = 0; v < p.length; v++) {
        var $ = (p.words[v] | 0) * 19 + y, E = $ & 67108863;
        $ >>>= 26, p.words[v] = E, y = $;
      }
      return y !== 0 && (p.words[p.length++] = y), p;
    }, o._prime = function(p) {
      if (ie[p])
        return ie[p];
      var y;
      if (p === "k256")
        y = new ye();
      else if (p === "p224")
        y = new j();
      else if (p === "p192")
        y = new V();
      else if (p === "p25519")
        y = new ae();
      else
        throw new Error("Unknown prime " + p);
      return ie[p] = y, y;
    };
    function _(h) {
      if (typeof h == "string") {
        var p = o._prime(h);
        this.m = p.p, this.prime = p;
      } else
        a(h.gtn(1), "modulus must be greater than 1"), this.m = h, this.prime = null;
    }
    _.prototype._verify1 = function(p) {
      a(p.negative === 0, "red works only with positives"), a(p.red, "red works only with red numbers");
    }, _.prototype._verify2 = function(p, y) {
      a((p.negative | y.negative) === 0, "red works only with positives"), a(
        p.red && p.red === y.red,
        "red works only with red numbers"
      );
    }, _.prototype.imod = function(p) {
      return this.prime ? this.prime.ireduce(p)._forceRed(this) : (A(p, p.umod(this.m)._forceRed(this)), p);
    }, _.prototype.neg = function(p) {
      return p.isZero() ? p.clone() : this.m.sub(p)._forceRed(this);
    }, _.prototype.add = function(p, y) {
      this._verify2(p, y);
      var v = p.add(y);
      return v.cmp(this.m) >= 0 && v.isub(this.m), v._forceRed(this);
    }, _.prototype.iadd = function(p, y) {
      this._verify2(p, y);
      var v = p.iadd(y);
      return v.cmp(this.m) >= 0 && v.isub(this.m), v;
    }, _.prototype.sub = function(p, y) {
      this._verify2(p, y);
      var v = p.sub(y);
      return v.cmpn(0) < 0 && v.iadd(this.m), v._forceRed(this);
    }, _.prototype.isub = function(p, y) {
      this._verify2(p, y);
      var v = p.isub(y);
      return v.cmpn(0) < 0 && v.iadd(this.m), v;
    }, _.prototype.shl = function(p, y) {
      return this._verify1(p), this.imod(p.ushln(y));
    }, _.prototype.imul = function(p, y) {
      return this._verify2(p, y), this.imod(p.imul(y));
    }, _.prototype.mul = function(p, y) {
      return this._verify2(p, y), this.imod(p.mul(y));
    }, _.prototype.isqr = function(p) {
      return this.imul(p, p.clone());
    }, _.prototype.sqr = function(p) {
      return this.mul(p, p);
    }, _.prototype.sqrt = function(p) {
      if (p.isZero())
        return p.clone();
      var y = this.m.andln(3);
      if (a(y % 2 === 1), y === 3) {
        var v = this.m.add(new o(1)).iushrn(2);
        return this.pow(p, v);
      }
      for (var $ = this.m.subn(1), E = 0; !$.isZero() && $.andln(1) === 0; )
        E++, $.iushrn(1);
      a(!$.isZero());
      var x = new o(1).toRed(this), l = x.redNeg(), b = this.m.subn(1).iushrn(1), M = this.m.bitLength();
      for (M = new o(2 * M * M).toRed(this); this.pow(M, b).cmp(l) !== 0; )
        M.redIAdd(l);
      for (var k = this.pow(M, $), U = this.pow(p, $.addn(1).iushrn(1)), T = this.pow(p, $), H = E; T.cmp(x) !== 0; ) {
        for (var Y = T, le = 0; Y.cmp(x) !== 0; le++)
          Y = Y.redSqr();
        a(le < H);
        var ce = this.pow(k, new o(1).iushln(H - le - 1));
        U = U.redMul(ce), k = ce.redSqr(), T = T.redMul(k), H = le;
      }
      return U;
    }, _.prototype.invm = function(p) {
      var y = p._invmp(this.m);
      return y.negative !== 0 ? (y.negative = 0, this.imod(y).redNeg()) : this.imod(y);
    }, _.prototype.pow = function(p, y) {
      if (y.isZero())
        return new o(1).toRed(this);
      if (y.cmpn(1) === 0)
        return p.clone();
      var v = 4, $ = new Array(1 << v);
      $[0] = new o(1).toRed(this), $[1] = p;
      for (var E = 2; E < $.length; E++)
        $[E] = this.mul($[E - 1], p);
      var x = $[0], l = 0, b = 0, M = y.bitLength() % 26;
      for (M === 0 && (M = 26), E = y.length - 1; E >= 0; E--) {
        for (var k = y.words[E], U = M - 1; U >= 0; U--) {
          var T = k >> U & 1;
          if (x !== $[0] && (x = this.sqr(x)), T === 0 && l === 0) {
            b = 0;
            continue;
          }
          l <<= 1, l |= T, b++, !(b !== v && (E !== 0 || U !== 0)) && (x = this.mul(x, $[l]), b = 0, l = 0);
        }
        M = 26;
      }
      return x;
    }, _.prototype.convertTo = function(p) {
      var y = p.umod(this.m);
      return y === p ? y.clone() : y;
    }, _.prototype.convertFrom = function(p) {
      var y = p.clone();
      return y.red = null, y;
    }, o.mont = function(p) {
      return new u(p);
    };
    function u(h) {
      _.call(this, h), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new o(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
    }
    c(u, _), u.prototype.convertTo = function(p) {
      return this.imod(p.ushln(this.shift));
    }, u.prototype.convertFrom = function(p) {
      var y = this.imod(p.mul(this.rinv));
      return y.red = null, y;
    }, u.prototype.imul = function(p, y) {
      if (p.isZero() || y.isZero())
        return p.words[0] = 0, p.length = 1, p;
      var v = p.imul(y), $ = v.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), E = v.isub($).iushrn(this.shift), x = E;
      return E.cmp(this.m) >= 0 ? x = E.isub(this.m) : E.cmpn(0) < 0 && (x = E.iadd(this.m)), x._forceRed(this);
    }, u.prototype.mul = function(p, y) {
      if (p.isZero() || y.isZero())
        return new o(0)._forceRed(this);
      var v = p.mul(y), $ = v.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), E = v.isub($).iushrn(this.shift), x = E;
      return E.cmp(this.m) >= 0 ? x = E.isub(this.m) : E.cmpn(0) < 0 && (x = E.iadd(this.m)), x._forceRed(this);
    }, u.prototype.invm = function(p) {
      var y = this.imod(p._invmp(this.m).mul(this.r2));
      return y._forceRed(this);
    };
  })(t, commonjsGlobal);
})(bn$4);
var bnExports$4 = bn$4.exports;
const BN$d = /* @__PURE__ */ getDefaultExportFromCjs$2(bnExports$4);
var BN$c = bnExports$4, randomBytes$3 = browserExports;
function blind(t) {
  var e = getr(t), n = e.toRed(BN$c.mont(t.modulus)).redPow(new BN$c(t.publicExponent)).fromRed();
  return { blinder: n, unblinder: e.invm(t.modulus) };
}
function getr(t) {
  var e = t.modulus.byteLength(), n;
  do
    n = new BN$c(randomBytes$3(e));
  while (n.cmp(t.modulus) >= 0 || !n.umod(t.prime1) || !n.umod(t.prime2));
  return n;
}
function crt$2(t, e) {
  var n = blind(e), a = e.modulus.byteLength(), c = new BN$c(t).mul(n.blinder).umod(e.modulus), o = c.toRed(BN$c.mont(e.prime1)), d = c.toRed(BN$c.mont(e.prime2)), m = e.coefficient, w = e.prime1, S = e.prime2, A = o.redPow(e.exponent1).fromRed(), B = d.redPow(e.exponent2).fromRed(), P = A.isub(B).imul(m).umod(w).imul(S);
  return B.iadd(P).imul(n.unblinder).umod(e.modulus).toArrayLike(Buffer$F, "be", a);
}
crt$2.getr = getr;
var browserifyRsa = crt$2, elliptic$2 = {};
const name = "elliptic", version$l = "6.5.4", description = "EC cryptography", main = "lib/elliptic.js", files = [
  "lib"
], scripts = {
  lint: "eslint lib test",
  "lint:fix": "npm run lint -- --fix",
  unit: "istanbul test _mocha --reporter=spec test/index.js",
  test: "npm run lint && npm run unit",
  version: "grunt dist && git add dist/"
}, repository = {
  type: "git",
  url: "git@github.com:indutny/elliptic"
}, keywords = [
  "EC",
  "Elliptic",
  "curve",
  "Cryptography"
], author = "Fedor Indutny <fedor@indutny.com>", license = "MIT", bugs = {
  url: "https://github.com/indutny/elliptic/issues"
}, homepage = "https://github.com/indutny/elliptic", devDependencies = {
  brfs: "^2.0.2",
  coveralls: "^3.1.0",
  eslint: "^7.6.0",
  grunt: "^1.2.1",
  "grunt-browserify": "^5.3.0",
  "grunt-cli": "^1.3.2",
  "grunt-contrib-connect": "^3.0.0",
  "grunt-contrib-copy": "^1.0.0",
  "grunt-contrib-uglify": "^5.0.0",
  "grunt-mocha-istanbul": "^5.0.2",
  "grunt-saucelabs": "^9.0.1",
  istanbul: "^0.4.5",
  mocha: "^8.0.1"
}, dependencies = {
  "bn.js": "^4.11.9",
  brorand: "^1.1.0",
  "hash.js": "^1.0.0",
  "hmac-drbg": "^1.0.1",
  inherits: "^2.0.4",
  "minimalistic-assert": "^1.0.1",
  "minimalistic-crypto-utils": "^1.0.1"
}, require$$0$1 = {
  name,
  version: version$l,
  description,
  main,
  files,
  scripts,
  repository,
  keywords,
  author,
  license,
  bugs,
  homepage,
  devDependencies,
  dependencies
};
var utils$A = {}, bn$3 = { exports: {} };
bn$3.exports;
(function(t) {
  (function(e, n) {
    function a(_, u) {
      if (!_)
        throw new Error(u || "Assertion failed");
    }
    function c(_, u) {
      _.super_ = u;
      var h = function() {
      };
      h.prototype = u.prototype, _.prototype = new h(), _.prototype.constructor = _;
    }
    function o(_, u, h) {
      if (o.isBN(_))
        return _;
      this.negative = 0, this.words = null, this.length = 0, this.red = null, _ !== null && ((u === "le" || u === "be") && (h = u, u = 10), this._init(_ || 0, u || 10, h || "be"));
    }
    typeof e == "object" ? e.exports = o : n.BN = o, o.BN = o, o.wordSize = 26;
    var d;
    try {
      typeof window < "u" && typeof window.Buffer < "u" ? d = window.Buffer : d = require$$0$2.Buffer;
    } catch {
    }
    o.isBN = function(u) {
      return u instanceof o ? !0 : u !== null && typeof u == "object" && u.constructor.wordSize === o.wordSize && Array.isArray(u.words);
    }, o.max = function(u, h) {
      return u.cmp(h) > 0 ? u : h;
    }, o.min = function(u, h) {
      return u.cmp(h) < 0 ? u : h;
    }, o.prototype._init = function(u, h, p) {
      if (typeof u == "number")
        return this._initNumber(u, h, p);
      if (typeof u == "object")
        return this._initArray(u, h, p);
      h === "hex" && (h = 16), a(h === (h | 0) && h >= 2 && h <= 36), u = u.toString().replace(/\s+/g, "");
      var y = 0;
      u[0] === "-" && (y++, this.negative = 1), y < u.length && (h === 16 ? this._parseHex(u, y, p) : (this._parseBase(u, h, y), p === "le" && this._initArray(this.toArray(), h, p)));
    }, o.prototype._initNumber = function(u, h, p) {
      u < 0 && (this.negative = 1, u = -u), u < 67108864 ? (this.words = [u & 67108863], this.length = 1) : u < 4503599627370496 ? (this.words = [
        u & 67108863,
        u / 67108864 & 67108863
      ], this.length = 2) : (a(u < 9007199254740992), this.words = [
        u & 67108863,
        u / 67108864 & 67108863,
        1
      ], this.length = 3), p === "le" && this._initArray(this.toArray(), h, p);
    }, o.prototype._initArray = function(u, h, p) {
      if (a(typeof u.length == "number"), u.length <= 0)
        return this.words = [0], this.length = 1, this;
      this.length = Math.ceil(u.length / 3), this.words = new Array(this.length);
      for (var y = 0; y < this.length; y++)
        this.words[y] = 0;
      var v, $, E = 0;
      if (p === "be")
        for (y = u.length - 1, v = 0; y >= 0; y -= 3)
          $ = u[y] | u[y - 1] << 8 | u[y - 2] << 16, this.words[v] |= $ << E & 67108863, this.words[v + 1] = $ >>> 26 - E & 67108863, E += 24, E >= 26 && (E -= 26, v++);
      else if (p === "le")
        for (y = 0, v = 0; y < u.length; y += 3)
          $ = u[y] | u[y + 1] << 8 | u[y + 2] << 16, this.words[v] |= $ << E & 67108863, this.words[v + 1] = $ >>> 26 - E & 67108863, E += 24, E >= 26 && (E -= 26, v++);
      return this.strip();
    };
    function m(_, u) {
      var h = _.charCodeAt(u);
      return h >= 65 && h <= 70 ? h - 55 : h >= 97 && h <= 102 ? h - 87 : h - 48 & 15;
    }
    function w(_, u, h) {
      var p = m(_, h);
      return h - 1 >= u && (p |= m(_, h - 1) << 4), p;
    }
    o.prototype._parseHex = function(u, h, p) {
      this.length = Math.ceil((u.length - h) / 6), this.words = new Array(this.length);
      for (var y = 0; y < this.length; y++)
        this.words[y] = 0;
      var v = 0, $ = 0, E;
      if (p === "be")
        for (y = u.length - 1; y >= h; y -= 2)
          E = w(u, h, y) << v, this.words[$] |= E & 67108863, v >= 18 ? (v -= 18, $ += 1, this.words[$] |= E >>> 26) : v += 8;
      else {
        var x = u.length - h;
        for (y = x % 2 === 0 ? h + 1 : h; y < u.length; y += 2)
          E = w(u, h, y) << v, this.words[$] |= E & 67108863, v >= 18 ? (v -= 18, $ += 1, this.words[$] |= E >>> 26) : v += 8;
      }
      this.strip();
    };
    function S(_, u, h, p) {
      for (var y = 0, v = Math.min(_.length, h), $ = u; $ < v; $++) {
        var E = _.charCodeAt($) - 48;
        y *= p, E >= 49 ? y += E - 49 + 10 : E >= 17 ? y += E - 17 + 10 : y += E;
      }
      return y;
    }
    o.prototype._parseBase = function(u, h, p) {
      this.words = [0], this.length = 1;
      for (var y = 0, v = 1; v <= 67108863; v *= h)
        y++;
      y--, v = v / h | 0;
      for (var $ = u.length - p, E = $ % y, x = Math.min($, $ - E) + p, l = 0, b = p; b < x; b += y)
        l = S(u, b, b + y, h), this.imuln(v), this.words[0] + l < 67108864 ? this.words[0] += l : this._iaddn(l);
      if (E !== 0) {
        var M = 1;
        for (l = S(u, b, u.length, h), b = 0; b < E; b++)
          M *= h;
        this.imuln(M), this.words[0] + l < 67108864 ? this.words[0] += l : this._iaddn(l);
      }
      this.strip();
    }, o.prototype.copy = function(u) {
      u.words = new Array(this.length);
      for (var h = 0; h < this.length; h++)
        u.words[h] = this.words[h];
      u.length = this.length, u.negative = this.negative, u.red = this.red;
    }, o.prototype.clone = function() {
      var u = new o(null);
      return this.copy(u), u;
    }, o.prototype._expand = function(u) {
      for (; this.length < u; )
        this.words[this.length++] = 0;
      return this;
    }, o.prototype.strip = function() {
      for (; this.length > 1 && this.words[this.length - 1] === 0; )
        this.length--;
      return this._normSign();
    }, o.prototype._normSign = function() {
      return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
    }, o.prototype.inspect = function() {
      return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    var A = [
      "",
      "0",
      "00",
      "000",
      "0000",
      "00000",
      "000000",
      "0000000",
      "00000000",
      "000000000",
      "0000000000",
      "00000000000",
      "000000000000",
      "0000000000000",
      "00000000000000",
      "000000000000000",
      "0000000000000000",
      "00000000000000000",
      "000000000000000000",
      "0000000000000000000",
      "00000000000000000000",
      "000000000000000000000",
      "0000000000000000000000",
      "00000000000000000000000",
      "000000000000000000000000",
      "0000000000000000000000000"
    ], B = [
      0,
      0,
      25,
      16,
      12,
      11,
      10,
      9,
      8,
      8,
      7,
      7,
      7,
      7,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5
    ], P = [
      0,
      0,
      33554432,
      43046721,
      16777216,
      48828125,
      60466176,
      40353607,
      16777216,
      43046721,
      1e7,
      19487171,
      35831808,
      62748517,
      7529536,
      11390625,
      16777216,
      24137569,
      34012224,
      47045881,
      64e6,
      4084101,
      5153632,
      6436343,
      7962624,
      9765625,
      11881376,
      14348907,
      17210368,
      20511149,
      243e5,
      28629151,
      33554432,
      39135393,
      45435424,
      52521875,
      60466176
    ];
    o.prototype.toString = function(u, h) {
      u = u || 10, h = h | 0 || 1;
      var p;
      if (u === 16 || u === "hex") {
        p = "";
        for (var y = 0, v = 0, $ = 0; $ < this.length; $++) {
          var E = this.words[$], x = ((E << y | v) & 16777215).toString(16);
          v = E >>> 24 - y & 16777215, v !== 0 || $ !== this.length - 1 ? p = A[6 - x.length] + x + p : p = x + p, y += 2, y >= 26 && (y -= 26, $--);
        }
        for (v !== 0 && (p = v.toString(16) + p); p.length % h !== 0; )
          p = "0" + p;
        return this.negative !== 0 && (p = "-" + p), p;
      }
      if (u === (u | 0) && u >= 2 && u <= 36) {
        var l = B[u], b = P[u];
        p = "";
        var M = this.clone();
        for (M.negative = 0; !M.isZero(); ) {
          var k = M.modn(b).toString(u);
          M = M.idivn(b), M.isZero() ? p = k + p : p = A[l - k.length] + k + p;
        }
        for (this.isZero() && (p = "0" + p); p.length % h !== 0; )
          p = "0" + p;
        return this.negative !== 0 && (p = "-" + p), p;
      }
      a(!1, "Base should be between 2 and 36");
    }, o.prototype.toNumber = function() {
      var u = this.words[0];
      return this.length === 2 ? u += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? u += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && a(!1, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -u : u;
    }, o.prototype.toJSON = function() {
      return this.toString(16);
    }, o.prototype.toBuffer = function(u, h) {
      return a(typeof d < "u"), this.toArrayLike(d, u, h);
    }, o.prototype.toArray = function(u, h) {
      return this.toArrayLike(Array, u, h);
    }, o.prototype.toArrayLike = function(u, h, p) {
      var y = this.byteLength(), v = p || Math.max(1, y);
      a(y <= v, "byte array longer than desired length"), a(v > 0, "Requested array length <= 0"), this.strip();
      var $ = h === "le", E = new u(v), x, l, b = this.clone();
      if ($) {
        for (l = 0; !b.isZero(); l++)
          x = b.andln(255), b.iushrn(8), E[l] = x;
        for (; l < v; l++)
          E[l] = 0;
      } else {
        for (l = 0; l < v - y; l++)
          E[l] = 0;
        for (l = 0; !b.isZero(); l++)
          x = b.andln(255), b.iushrn(8), E[v - l - 1] = x;
      }
      return E;
    }, Math.clz32 ? o.prototype._countBits = function(u) {
      return 32 - Math.clz32(u);
    } : o.prototype._countBits = function(u) {
      var h = u, p = 0;
      return h >= 4096 && (p += 13, h >>>= 13), h >= 64 && (p += 7, h >>>= 7), h >= 8 && (p += 4, h >>>= 4), h >= 2 && (p += 2, h >>>= 2), p + h;
    }, o.prototype._zeroBits = function(u) {
      if (u === 0)
        return 26;
      var h = u, p = 0;
      return h & 8191 || (p += 13, h >>>= 13), h & 127 || (p += 7, h >>>= 7), h & 15 || (p += 4, h >>>= 4), h & 3 || (p += 2, h >>>= 2), h & 1 || p++, p;
    }, o.prototype.bitLength = function() {
      var u = this.words[this.length - 1], h = this._countBits(u);
      return (this.length - 1) * 26 + h;
    };
    function I(_) {
      for (var u = new Array(_.bitLength()), h = 0; h < u.length; h++) {
        var p = h / 26 | 0, y = h % 26;
        u[h] = (_.words[p] & 1 << y) >>> y;
      }
      return u;
    }
    o.prototype.zeroBits = function() {
      if (this.isZero())
        return 0;
      for (var u = 0, h = 0; h < this.length; h++) {
        var p = this._zeroBits(this.words[h]);
        if (u += p, p !== 26)
          break;
      }
      return u;
    }, o.prototype.byteLength = function() {
      return Math.ceil(this.bitLength() / 8);
    }, o.prototype.toTwos = function(u) {
      return this.negative !== 0 ? this.abs().inotn(u).iaddn(1) : this.clone();
    }, o.prototype.fromTwos = function(u) {
      return this.testn(u - 1) ? this.notn(u).iaddn(1).ineg() : this.clone();
    }, o.prototype.isNeg = function() {
      return this.negative !== 0;
    }, o.prototype.neg = function() {
      return this.clone().ineg();
    }, o.prototype.ineg = function() {
      return this.isZero() || (this.negative ^= 1), this;
    }, o.prototype.iuor = function(u) {
      for (; this.length < u.length; )
        this.words[this.length++] = 0;
      for (var h = 0; h < u.length; h++)
        this.words[h] = this.words[h] | u.words[h];
      return this.strip();
    }, o.prototype.ior = function(u) {
      return a((this.negative | u.negative) === 0), this.iuor(u);
    }, o.prototype.or = function(u) {
      return this.length > u.length ? this.clone().ior(u) : u.clone().ior(this);
    }, o.prototype.uor = function(u) {
      return this.length > u.length ? this.clone().iuor(u) : u.clone().iuor(this);
    }, o.prototype.iuand = function(u) {
      var h;
      this.length > u.length ? h = u : h = this;
      for (var p = 0; p < h.length; p++)
        this.words[p] = this.words[p] & u.words[p];
      return this.length = h.length, this.strip();
    }, o.prototype.iand = function(u) {
      return a((this.negative | u.negative) === 0), this.iuand(u);
    }, o.prototype.and = function(u) {
      return this.length > u.length ? this.clone().iand(u) : u.clone().iand(this);
    }, o.prototype.uand = function(u) {
      return this.length > u.length ? this.clone().iuand(u) : u.clone().iuand(this);
    }, o.prototype.iuxor = function(u) {
      var h, p;
      this.length > u.length ? (h = this, p = u) : (h = u, p = this);
      for (var y = 0; y < p.length; y++)
        this.words[y] = h.words[y] ^ p.words[y];
      if (this !== h)
        for (; y < h.length; y++)
          this.words[y] = h.words[y];
      return this.length = h.length, this.strip();
    }, o.prototype.ixor = function(u) {
      return a((this.negative | u.negative) === 0), this.iuxor(u);
    }, o.prototype.xor = function(u) {
      return this.length > u.length ? this.clone().ixor(u) : u.clone().ixor(this);
    }, o.prototype.uxor = function(u) {
      return this.length > u.length ? this.clone().iuxor(u) : u.clone().iuxor(this);
    }, o.prototype.inotn = function(u) {
      a(typeof u == "number" && u >= 0);
      var h = Math.ceil(u / 26) | 0, p = u % 26;
      this._expand(h), p > 0 && h--;
      for (var y = 0; y < h; y++)
        this.words[y] = ~this.words[y] & 67108863;
      return p > 0 && (this.words[y] = ~this.words[y] & 67108863 >> 26 - p), this.strip();
    }, o.prototype.notn = function(u) {
      return this.clone().inotn(u);
    }, o.prototype.setn = function(u, h) {
      a(typeof u == "number" && u >= 0);
      var p = u / 26 | 0, y = u % 26;
      return this._expand(p + 1), h ? this.words[p] = this.words[p] | 1 << y : this.words[p] = this.words[p] & ~(1 << y), this.strip();
    }, o.prototype.iadd = function(u) {
      var h;
      if (this.negative !== 0 && u.negative === 0)
        return this.negative = 0, h = this.isub(u), this.negative ^= 1, this._normSign();
      if (this.negative === 0 && u.negative !== 0)
        return u.negative = 0, h = this.isub(u), u.negative = 1, h._normSign();
      var p, y;
      this.length > u.length ? (p = this, y = u) : (p = u, y = this);
      for (var v = 0, $ = 0; $ < y.length; $++)
        h = (p.words[$] | 0) + (y.words[$] | 0) + v, this.words[$] = h & 67108863, v = h >>> 26;
      for (; v !== 0 && $ < p.length; $++)
        h = (p.words[$] | 0) + v, this.words[$] = h & 67108863, v = h >>> 26;
      if (this.length = p.length, v !== 0)
        this.words[this.length] = v, this.length++;
      else if (p !== this)
        for (; $ < p.length; $++)
          this.words[$] = p.words[$];
      return this;
    }, o.prototype.add = function(u) {
      var h;
      return u.negative !== 0 && this.negative === 0 ? (u.negative = 0, h = this.sub(u), u.negative ^= 1, h) : u.negative === 0 && this.negative !== 0 ? (this.negative = 0, h = u.sub(this), this.negative = 1, h) : this.length > u.length ? this.clone().iadd(u) : u.clone().iadd(this);
    }, o.prototype.isub = function(u) {
      if (u.negative !== 0) {
        u.negative = 0;
        var h = this.iadd(u);
        return u.negative = 1, h._normSign();
      } else if (this.negative !== 0)
        return this.negative = 0, this.iadd(u), this.negative = 1, this._normSign();
      var p = this.cmp(u);
      if (p === 0)
        return this.negative = 0, this.length = 1, this.words[0] = 0, this;
      var y, v;
      p > 0 ? (y = this, v = u) : (y = u, v = this);
      for (var $ = 0, E = 0; E < v.length; E++)
        h = (y.words[E] | 0) - (v.words[E] | 0) + $, $ = h >> 26, this.words[E] = h & 67108863;
      for (; $ !== 0 && E < y.length; E++)
        h = (y.words[E] | 0) + $, $ = h >> 26, this.words[E] = h & 67108863;
      if ($ === 0 && E < y.length && y !== this)
        for (; E < y.length; E++)
          this.words[E] = y.words[E];
      return this.length = Math.max(this.length, E), y !== this && (this.negative = 1), this.strip();
    }, o.prototype.sub = function(u) {
      return this.clone().isub(u);
    };
    function O(_, u, h) {
      h.negative = u.negative ^ _.negative;
      var p = _.length + u.length | 0;
      h.length = p, p = p - 1 | 0;
      var y = _.words[0] | 0, v = u.words[0] | 0, $ = y * v, E = $ & 67108863, x = $ / 67108864 | 0;
      h.words[0] = E;
      for (var l = 1; l < p; l++) {
        for (var b = x >>> 26, M = x & 67108863, k = Math.min(l, u.length - 1), U = Math.max(0, l - _.length + 1); U <= k; U++) {
          var T = l - U | 0;
          y = _.words[T] | 0, v = u.words[U] | 0, $ = y * v + M, b += $ / 67108864 | 0, M = $ & 67108863;
        }
        h.words[l] = M | 0, x = b | 0;
      }
      return x !== 0 ? h.words[l] = x | 0 : h.length--, h.strip();
    }
    var L = function(u, h, p) {
      var y = u.words, v = h.words, $ = p.words, E = 0, x, l, b, M = y[0] | 0, k = M & 8191, U = M >>> 13, T = y[1] | 0, H = T & 8191, Y = T >>> 13, le = y[2] | 0, ce = le & 8191, de = le >>> 13, ue = y[3] | 0, re = ue & 8191, ge = ue >>> 13, Ae = y[4] | 0, xe = Ae & 8191, Ee = Ae >>> 13, at = y[5] | 0, Re = at & 8191, ve = at >>> 13, xt = y[6] | 0, Ne = xt & 8191, qe = xt >>> 13, wt = y[7] | 0, Te = wt & 8191, De = wt >>> 13, vt = y[8] | 0, ke = vt & 8191, Ue = vt >>> 13, $t = y[9] | 0, ee = $t & 8191, F = $t >>> 13, J = v[0] | 0, oe = J & 8191, he = J >>> 13, Se = v[1] | 0, me = Se & 8191, Be = Se >>> 13, gt = v[2] | 0, Me = gt & 8191, Oe = gt >>> 13, ht = v[3] | 0, He = ht & 8191, Ge = ht >>> 13, _t = v[4] | 0, Le = _t & 8191, Ke = _t >>> 13, Et = v[5] | 0, Fe = Et & 8191, ze = Et >>> 13, At = v[6] | 0, Pe = At & 8191, je = At >>> 13, Q = v[7] | 0, te = Q & 8191, ne = Q >>> 13, D = v[8] | 0, se = D & 8191, pe = D >>> 13, $e = v[9] | 0, be = $e & 8191, _e = $e >>> 13;
      p.negative = u.negative ^ h.negative, p.length = 19, x = Math.imul(k, oe), l = Math.imul(k, he), l = l + Math.imul(U, oe) | 0, b = Math.imul(U, he);
      var Je = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, x = Math.imul(H, oe), l = Math.imul(H, he), l = l + Math.imul(Y, oe) | 0, b = Math.imul(Y, he), x = x + Math.imul(k, me) | 0, l = l + Math.imul(k, Be) | 0, l = l + Math.imul(U, me) | 0, b = b + Math.imul(U, Be) | 0;
      var We = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, x = Math.imul(ce, oe), l = Math.imul(ce, he), l = l + Math.imul(de, oe) | 0, b = Math.imul(de, he), x = x + Math.imul(H, me) | 0, l = l + Math.imul(H, Be) | 0, l = l + Math.imul(Y, me) | 0, b = b + Math.imul(Y, Be) | 0, x = x + Math.imul(k, Me) | 0, l = l + Math.imul(k, Oe) | 0, l = l + Math.imul(U, Me) | 0, b = b + Math.imul(U, Oe) | 0;
      var bt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (bt >>> 26) | 0, bt &= 67108863, x = Math.imul(re, oe), l = Math.imul(re, he), l = l + Math.imul(ge, oe) | 0, b = Math.imul(ge, he), x = x + Math.imul(ce, me) | 0, l = l + Math.imul(ce, Be) | 0, l = l + Math.imul(de, me) | 0, b = b + Math.imul(de, Be) | 0, x = x + Math.imul(H, Me) | 0, l = l + Math.imul(H, Oe) | 0, l = l + Math.imul(Y, Me) | 0, b = b + Math.imul(Y, Oe) | 0, x = x + Math.imul(k, He) | 0, l = l + Math.imul(k, Ge) | 0, l = l + Math.imul(U, He) | 0, b = b + Math.imul(U, Ge) | 0;
      var Ye = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, x = Math.imul(xe, oe), l = Math.imul(xe, he), l = l + Math.imul(Ee, oe) | 0, b = Math.imul(Ee, he), x = x + Math.imul(re, me) | 0, l = l + Math.imul(re, Be) | 0, l = l + Math.imul(ge, me) | 0, b = b + Math.imul(ge, Be) | 0, x = x + Math.imul(ce, Me) | 0, l = l + Math.imul(ce, Oe) | 0, l = l + Math.imul(de, Me) | 0, b = b + Math.imul(de, Oe) | 0, x = x + Math.imul(H, He) | 0, l = l + Math.imul(H, Ge) | 0, l = l + Math.imul(Y, He) | 0, b = b + Math.imul(Y, Ge) | 0, x = x + Math.imul(k, Le) | 0, l = l + Math.imul(k, Ke) | 0, l = l + Math.imul(U, Le) | 0, b = b + Math.imul(U, Ke) | 0;
      var ot = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (ot >>> 26) | 0, ot &= 67108863, x = Math.imul(Re, oe), l = Math.imul(Re, he), l = l + Math.imul(ve, oe) | 0, b = Math.imul(ve, he), x = x + Math.imul(xe, me) | 0, l = l + Math.imul(xe, Be) | 0, l = l + Math.imul(Ee, me) | 0, b = b + Math.imul(Ee, Be) | 0, x = x + Math.imul(re, Me) | 0, l = l + Math.imul(re, Oe) | 0, l = l + Math.imul(ge, Me) | 0, b = b + Math.imul(ge, Oe) | 0, x = x + Math.imul(ce, He) | 0, l = l + Math.imul(ce, Ge) | 0, l = l + Math.imul(de, He) | 0, b = b + Math.imul(de, Ge) | 0, x = x + Math.imul(H, Le) | 0, l = l + Math.imul(H, Ke) | 0, l = l + Math.imul(Y, Le) | 0, b = b + Math.imul(Y, Ke) | 0, x = x + Math.imul(k, Fe) | 0, l = l + Math.imul(k, ze) | 0, l = l + Math.imul(U, Fe) | 0, b = b + Math.imul(U, ze) | 0;
      var ct = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (ct >>> 26) | 0, ct &= 67108863, x = Math.imul(Ne, oe), l = Math.imul(Ne, he), l = l + Math.imul(qe, oe) | 0, b = Math.imul(qe, he), x = x + Math.imul(Re, me) | 0, l = l + Math.imul(Re, Be) | 0, l = l + Math.imul(ve, me) | 0, b = b + Math.imul(ve, Be) | 0, x = x + Math.imul(xe, Me) | 0, l = l + Math.imul(xe, Oe) | 0, l = l + Math.imul(Ee, Me) | 0, b = b + Math.imul(Ee, Oe) | 0, x = x + Math.imul(re, He) | 0, l = l + Math.imul(re, Ge) | 0, l = l + Math.imul(ge, He) | 0, b = b + Math.imul(ge, Ge) | 0, x = x + Math.imul(ce, Le) | 0, l = l + Math.imul(ce, Ke) | 0, l = l + Math.imul(de, Le) | 0, b = b + Math.imul(de, Ke) | 0, x = x + Math.imul(H, Fe) | 0, l = l + Math.imul(H, ze) | 0, l = l + Math.imul(Y, Fe) | 0, b = b + Math.imul(Y, ze) | 0, x = x + Math.imul(k, Pe) | 0, l = l + Math.imul(k, je) | 0, l = l + Math.imul(U, Pe) | 0, b = b + Math.imul(U, je) | 0;
      var lt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (lt >>> 26) | 0, lt &= 67108863, x = Math.imul(Te, oe), l = Math.imul(Te, he), l = l + Math.imul(De, oe) | 0, b = Math.imul(De, he), x = x + Math.imul(Ne, me) | 0, l = l + Math.imul(Ne, Be) | 0, l = l + Math.imul(qe, me) | 0, b = b + Math.imul(qe, Be) | 0, x = x + Math.imul(Re, Me) | 0, l = l + Math.imul(Re, Oe) | 0, l = l + Math.imul(ve, Me) | 0, b = b + Math.imul(ve, Oe) | 0, x = x + Math.imul(xe, He) | 0, l = l + Math.imul(xe, Ge) | 0, l = l + Math.imul(Ee, He) | 0, b = b + Math.imul(Ee, Ge) | 0, x = x + Math.imul(re, Le) | 0, l = l + Math.imul(re, Ke) | 0, l = l + Math.imul(ge, Le) | 0, b = b + Math.imul(ge, Ke) | 0, x = x + Math.imul(ce, Fe) | 0, l = l + Math.imul(ce, ze) | 0, l = l + Math.imul(de, Fe) | 0, b = b + Math.imul(de, ze) | 0, x = x + Math.imul(H, Pe) | 0, l = l + Math.imul(H, je) | 0, l = l + Math.imul(Y, Pe) | 0, b = b + Math.imul(Y, je) | 0, x = x + Math.imul(k, te) | 0, l = l + Math.imul(k, ne) | 0, l = l + Math.imul(U, te) | 0, b = b + Math.imul(U, ne) | 0;
      var mt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (mt >>> 26) | 0, mt &= 67108863, x = Math.imul(ke, oe), l = Math.imul(ke, he), l = l + Math.imul(Ue, oe) | 0, b = Math.imul(Ue, he), x = x + Math.imul(Te, me) | 0, l = l + Math.imul(Te, Be) | 0, l = l + Math.imul(De, me) | 0, b = b + Math.imul(De, Be) | 0, x = x + Math.imul(Ne, Me) | 0, l = l + Math.imul(Ne, Oe) | 0, l = l + Math.imul(qe, Me) | 0, b = b + Math.imul(qe, Oe) | 0, x = x + Math.imul(Re, He) | 0, l = l + Math.imul(Re, Ge) | 0, l = l + Math.imul(ve, He) | 0, b = b + Math.imul(ve, Ge) | 0, x = x + Math.imul(xe, Le) | 0, l = l + Math.imul(xe, Ke) | 0, l = l + Math.imul(Ee, Le) | 0, b = b + Math.imul(Ee, Ke) | 0, x = x + Math.imul(re, Fe) | 0, l = l + Math.imul(re, ze) | 0, l = l + Math.imul(ge, Fe) | 0, b = b + Math.imul(ge, ze) | 0, x = x + Math.imul(ce, Pe) | 0, l = l + Math.imul(ce, je) | 0, l = l + Math.imul(de, Pe) | 0, b = b + Math.imul(de, je) | 0, x = x + Math.imul(H, te) | 0, l = l + Math.imul(H, ne) | 0, l = l + Math.imul(Y, te) | 0, b = b + Math.imul(Y, ne) | 0, x = x + Math.imul(k, se) | 0, l = l + Math.imul(k, pe) | 0, l = l + Math.imul(U, se) | 0, b = b + Math.imul(U, pe) | 0;
      var dt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (dt >>> 26) | 0, dt &= 67108863, x = Math.imul(ee, oe), l = Math.imul(ee, he), l = l + Math.imul(F, oe) | 0, b = Math.imul(F, he), x = x + Math.imul(ke, me) | 0, l = l + Math.imul(ke, Be) | 0, l = l + Math.imul(Ue, me) | 0, b = b + Math.imul(Ue, Be) | 0, x = x + Math.imul(Te, Me) | 0, l = l + Math.imul(Te, Oe) | 0, l = l + Math.imul(De, Me) | 0, b = b + Math.imul(De, Oe) | 0, x = x + Math.imul(Ne, He) | 0, l = l + Math.imul(Ne, Ge) | 0, l = l + Math.imul(qe, He) | 0, b = b + Math.imul(qe, Ge) | 0, x = x + Math.imul(Re, Le) | 0, l = l + Math.imul(Re, Ke) | 0, l = l + Math.imul(ve, Le) | 0, b = b + Math.imul(ve, Ke) | 0, x = x + Math.imul(xe, Fe) | 0, l = l + Math.imul(xe, ze) | 0, l = l + Math.imul(Ee, Fe) | 0, b = b + Math.imul(Ee, ze) | 0, x = x + Math.imul(re, Pe) | 0, l = l + Math.imul(re, je) | 0, l = l + Math.imul(ge, Pe) | 0, b = b + Math.imul(ge, je) | 0, x = x + Math.imul(ce, te) | 0, l = l + Math.imul(ce, ne) | 0, l = l + Math.imul(de, te) | 0, b = b + Math.imul(de, ne) | 0, x = x + Math.imul(H, se) | 0, l = l + Math.imul(H, pe) | 0, l = l + Math.imul(Y, se) | 0, b = b + Math.imul(Y, pe) | 0, x = x + Math.imul(k, be) | 0, l = l + Math.imul(k, _e) | 0, l = l + Math.imul(U, be) | 0, b = b + Math.imul(U, _e) | 0;
      var yt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (yt >>> 26) | 0, yt &= 67108863, x = Math.imul(ee, me), l = Math.imul(ee, Be), l = l + Math.imul(F, me) | 0, b = Math.imul(F, Be), x = x + Math.imul(ke, Me) | 0, l = l + Math.imul(ke, Oe) | 0, l = l + Math.imul(Ue, Me) | 0, b = b + Math.imul(Ue, Oe) | 0, x = x + Math.imul(Te, He) | 0, l = l + Math.imul(Te, Ge) | 0, l = l + Math.imul(De, He) | 0, b = b + Math.imul(De, Ge) | 0, x = x + Math.imul(Ne, Le) | 0, l = l + Math.imul(Ne, Ke) | 0, l = l + Math.imul(qe, Le) | 0, b = b + Math.imul(qe, Ke) | 0, x = x + Math.imul(Re, Fe) | 0, l = l + Math.imul(Re, ze) | 0, l = l + Math.imul(ve, Fe) | 0, b = b + Math.imul(ve, ze) | 0, x = x + Math.imul(xe, Pe) | 0, l = l + Math.imul(xe, je) | 0, l = l + Math.imul(Ee, Pe) | 0, b = b + Math.imul(Ee, je) | 0, x = x + Math.imul(re, te) | 0, l = l + Math.imul(re, ne) | 0, l = l + Math.imul(ge, te) | 0, b = b + Math.imul(ge, ne) | 0, x = x + Math.imul(ce, se) | 0, l = l + Math.imul(ce, pe) | 0, l = l + Math.imul(de, se) | 0, b = b + Math.imul(de, pe) | 0, x = x + Math.imul(H, be) | 0, l = l + Math.imul(H, _e) | 0, l = l + Math.imul(Y, be) | 0, b = b + Math.imul(Y, _e) | 0;
      var pt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (pt >>> 26) | 0, pt &= 67108863, x = Math.imul(ee, Me), l = Math.imul(ee, Oe), l = l + Math.imul(F, Me) | 0, b = Math.imul(F, Oe), x = x + Math.imul(ke, He) | 0, l = l + Math.imul(ke, Ge) | 0, l = l + Math.imul(Ue, He) | 0, b = b + Math.imul(Ue, Ge) | 0, x = x + Math.imul(Te, Le) | 0, l = l + Math.imul(Te, Ke) | 0, l = l + Math.imul(De, Le) | 0, b = b + Math.imul(De, Ke) | 0, x = x + Math.imul(Ne, Fe) | 0, l = l + Math.imul(Ne, ze) | 0, l = l + Math.imul(qe, Fe) | 0, b = b + Math.imul(qe, ze) | 0, x = x + Math.imul(Re, Pe) | 0, l = l + Math.imul(Re, je) | 0, l = l + Math.imul(ve, Pe) | 0, b = b + Math.imul(ve, je) | 0, x = x + Math.imul(xe, te) | 0, l = l + Math.imul(xe, ne) | 0, l = l + Math.imul(Ee, te) | 0, b = b + Math.imul(Ee, ne) | 0, x = x + Math.imul(re, se) | 0, l = l + Math.imul(re, pe) | 0, l = l + Math.imul(ge, se) | 0, b = b + Math.imul(ge, pe) | 0, x = x + Math.imul(ce, be) | 0, l = l + Math.imul(ce, _e) | 0, l = l + Math.imul(de, be) | 0, b = b + Math.imul(de, _e) | 0;
      var tt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, x = Math.imul(ee, He), l = Math.imul(ee, Ge), l = l + Math.imul(F, He) | 0, b = Math.imul(F, Ge), x = x + Math.imul(ke, Le) | 0, l = l + Math.imul(ke, Ke) | 0, l = l + Math.imul(Ue, Le) | 0, b = b + Math.imul(Ue, Ke) | 0, x = x + Math.imul(Te, Fe) | 0, l = l + Math.imul(Te, ze) | 0, l = l + Math.imul(De, Fe) | 0, b = b + Math.imul(De, ze) | 0, x = x + Math.imul(Ne, Pe) | 0, l = l + Math.imul(Ne, je) | 0, l = l + Math.imul(qe, Pe) | 0, b = b + Math.imul(qe, je) | 0, x = x + Math.imul(Re, te) | 0, l = l + Math.imul(Re, ne) | 0, l = l + Math.imul(ve, te) | 0, b = b + Math.imul(ve, ne) | 0, x = x + Math.imul(xe, se) | 0, l = l + Math.imul(xe, pe) | 0, l = l + Math.imul(Ee, se) | 0, b = b + Math.imul(Ee, pe) | 0, x = x + Math.imul(re, be) | 0, l = l + Math.imul(re, _e) | 0, l = l + Math.imul(ge, be) | 0, b = b + Math.imul(ge, _e) | 0;
      var st = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (st >>> 26) | 0, st &= 67108863, x = Math.imul(ee, Le), l = Math.imul(ee, Ke), l = l + Math.imul(F, Le) | 0, b = Math.imul(F, Ke), x = x + Math.imul(ke, Fe) | 0, l = l + Math.imul(ke, ze) | 0, l = l + Math.imul(Ue, Fe) | 0, b = b + Math.imul(Ue, ze) | 0, x = x + Math.imul(Te, Pe) | 0, l = l + Math.imul(Te, je) | 0, l = l + Math.imul(De, Pe) | 0, b = b + Math.imul(De, je) | 0, x = x + Math.imul(Ne, te) | 0, l = l + Math.imul(Ne, ne) | 0, l = l + Math.imul(qe, te) | 0, b = b + Math.imul(qe, ne) | 0, x = x + Math.imul(Re, se) | 0, l = l + Math.imul(Re, pe) | 0, l = l + Math.imul(ve, se) | 0, b = b + Math.imul(ve, pe) | 0, x = x + Math.imul(xe, be) | 0, l = l + Math.imul(xe, _e) | 0, l = l + Math.imul(Ee, be) | 0, b = b + Math.imul(Ee, _e) | 0;
      var Qe = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, x = Math.imul(ee, Fe), l = Math.imul(ee, ze), l = l + Math.imul(F, Fe) | 0, b = Math.imul(F, ze), x = x + Math.imul(ke, Pe) | 0, l = l + Math.imul(ke, je) | 0, l = l + Math.imul(Ue, Pe) | 0, b = b + Math.imul(Ue, je) | 0, x = x + Math.imul(Te, te) | 0, l = l + Math.imul(Te, ne) | 0, l = l + Math.imul(De, te) | 0, b = b + Math.imul(De, ne) | 0, x = x + Math.imul(Ne, se) | 0, l = l + Math.imul(Ne, pe) | 0, l = l + Math.imul(qe, se) | 0, b = b + Math.imul(qe, pe) | 0, x = x + Math.imul(Re, be) | 0, l = l + Math.imul(Re, _e) | 0, l = l + Math.imul(ve, be) | 0, b = b + Math.imul(ve, _e) | 0;
      var rt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, x = Math.imul(ee, Pe), l = Math.imul(ee, je), l = l + Math.imul(F, Pe) | 0, b = Math.imul(F, je), x = x + Math.imul(ke, te) | 0, l = l + Math.imul(ke, ne) | 0, l = l + Math.imul(Ue, te) | 0, b = b + Math.imul(Ue, ne) | 0, x = x + Math.imul(Te, se) | 0, l = l + Math.imul(Te, pe) | 0, l = l + Math.imul(De, se) | 0, b = b + Math.imul(De, pe) | 0, x = x + Math.imul(Ne, be) | 0, l = l + Math.imul(Ne, _e) | 0, l = l + Math.imul(qe, be) | 0, b = b + Math.imul(qe, _e) | 0;
      var it = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (it >>> 26) | 0, it &= 67108863, x = Math.imul(ee, te), l = Math.imul(ee, ne), l = l + Math.imul(F, te) | 0, b = Math.imul(F, ne), x = x + Math.imul(ke, se) | 0, l = l + Math.imul(ke, pe) | 0, l = l + Math.imul(Ue, se) | 0, b = b + Math.imul(Ue, pe) | 0, x = x + Math.imul(Te, be) | 0, l = l + Math.imul(Te, _e) | 0, l = l + Math.imul(De, be) | 0, b = b + Math.imul(De, _e) | 0;
      var et = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, x = Math.imul(ee, se), l = Math.imul(ee, pe), l = l + Math.imul(F, se) | 0, b = Math.imul(F, pe), x = x + Math.imul(ke, be) | 0, l = l + Math.imul(ke, _e) | 0, l = l + Math.imul(Ue, be) | 0, b = b + Math.imul(Ue, _e) | 0;
      var Ie = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (Ie >>> 26) | 0, Ie &= 67108863, x = Math.imul(ee, be), l = Math.imul(ee, _e), l = l + Math.imul(F, be) | 0, b = Math.imul(F, _e);
      var Ce = (E + x | 0) + ((l & 8191) << 13) | 0;
      return E = (b + (l >>> 13) | 0) + (Ce >>> 26) | 0, Ce &= 67108863, $[0] = Je, $[1] = We, $[2] = bt, $[3] = Ye, $[4] = ot, $[5] = ct, $[6] = lt, $[7] = mt, $[8] = dt, $[9] = yt, $[10] = pt, $[11] = tt, $[12] = st, $[13] = Qe, $[14] = rt, $[15] = it, $[16] = et, $[17] = Ie, $[18] = Ce, E !== 0 && ($[19] = E, p.length++), p;
    };
    Math.imul || (L = O);
    function C(_, u, h) {
      h.negative = u.negative ^ _.negative, h.length = _.length + u.length;
      for (var p = 0, y = 0, v = 0; v < h.length - 1; v++) {
        var $ = y;
        y = 0;
        for (var E = p & 67108863, x = Math.min(v, u.length - 1), l = Math.max(0, v - _.length + 1); l <= x; l++) {
          var b = v - l, M = _.words[b] | 0, k = u.words[l] | 0, U = M * k, T = U & 67108863;
          $ = $ + (U / 67108864 | 0) | 0, T = T + E | 0, E = T & 67108863, $ = $ + (T >>> 26) | 0, y += $ >>> 26, $ &= 67108863;
        }
        h.words[v] = E, p = $, $ = y;
      }
      return p !== 0 ? h.words[v] = p : h.length--, h.strip();
    }
    function z(_, u, h) {
      var p = new q();
      return p.mulp(_, u, h);
    }
    o.prototype.mulTo = function(u, h) {
      var p, y = this.length + u.length;
      return this.length === 10 && u.length === 10 ? p = L(this, u, h) : y < 63 ? p = O(this, u, h) : y < 1024 ? p = C(this, u, h) : p = z(this, u, h), p;
    };
    function q(_, u) {
      this.x = _, this.y = u;
    }
    q.prototype.makeRBT = function(u) {
      for (var h = new Array(u), p = o.prototype._countBits(u) - 1, y = 0; y < u; y++)
        h[y] = this.revBin(y, p, u);
      return h;
    }, q.prototype.revBin = function(u, h, p) {
      if (u === 0 || u === p - 1)
        return u;
      for (var y = 0, v = 0; v < h; v++)
        y |= (u & 1) << h - v - 1, u >>= 1;
      return y;
    }, q.prototype.permute = function(u, h, p, y, v, $) {
      for (var E = 0; E < $; E++)
        y[E] = h[u[E]], v[E] = p[u[E]];
    }, q.prototype.transform = function(u, h, p, y, v, $) {
      this.permute($, u, h, p, y, v);
      for (var E = 1; E < v; E <<= 1)
        for (var x = E << 1, l = Math.cos(2 * Math.PI / x), b = Math.sin(2 * Math.PI / x), M = 0; M < v; M += x)
          for (var k = l, U = b, T = 0; T < E; T++) {
            var H = p[M + T], Y = y[M + T], le = p[M + T + E], ce = y[M + T + E], de = k * le - U * ce;
            ce = k * ce + U * le, le = de, p[M + T] = H + le, y[M + T] = Y + ce, p[M + T + E] = H - le, y[M + T + E] = Y - ce, T !== x && (de = l * k - b * U, U = l * U + b * k, k = de);
          }
    }, q.prototype.guessLen13b = function(u, h) {
      var p = Math.max(h, u) | 1, y = p & 1, v = 0;
      for (p = p / 2 | 0; p; p = p >>> 1)
        v++;
      return 1 << v + 1 + y;
    }, q.prototype.conjugate = function(u, h, p) {
      if (!(p <= 1))
        for (var y = 0; y < p / 2; y++) {
          var v = u[y];
          u[y] = u[p - y - 1], u[p - y - 1] = v, v = h[y], h[y] = -h[p - y - 1], h[p - y - 1] = -v;
        }
    }, q.prototype.normalize13b = function(u, h) {
      for (var p = 0, y = 0; y < h / 2; y++) {
        var v = Math.round(u[2 * y + 1] / h) * 8192 + Math.round(u[2 * y] / h) + p;
        u[y] = v & 67108863, v < 67108864 ? p = 0 : p = v / 67108864 | 0;
      }
      return u;
    }, q.prototype.convert13b = function(u, h, p, y) {
      for (var v = 0, $ = 0; $ < h; $++)
        v = v + (u[$] | 0), p[2 * $] = v & 8191, v = v >>> 13, p[2 * $ + 1] = v & 8191, v = v >>> 13;
      for ($ = 2 * h; $ < y; ++$)
        p[$] = 0;
      a(v === 0), a((v & -8192) === 0);
    }, q.prototype.stub = function(u) {
      for (var h = new Array(u), p = 0; p < u; p++)
        h[p] = 0;
      return h;
    }, q.prototype.mulp = function(u, h, p) {
      var y = 2 * this.guessLen13b(u.length, h.length), v = this.makeRBT(y), $ = this.stub(y), E = new Array(y), x = new Array(y), l = new Array(y), b = new Array(y), M = new Array(y), k = new Array(y), U = p.words;
      U.length = y, this.convert13b(u.words, u.length, E, y), this.convert13b(h.words, h.length, b, y), this.transform(E, $, x, l, y, v), this.transform(b, $, M, k, y, v);
      for (var T = 0; T < y; T++) {
        var H = x[T] * M[T] - l[T] * k[T];
        l[T] = x[T] * k[T] + l[T] * M[T], x[T] = H;
      }
      return this.conjugate(x, l, y), this.transform(x, l, U, $, y, v), this.conjugate(U, $, y), this.normalize13b(U, y), p.negative = u.negative ^ h.negative, p.length = u.length + h.length, p.strip();
    }, o.prototype.mul = function(u) {
      var h = new o(null);
      return h.words = new Array(this.length + u.length), this.mulTo(u, h);
    }, o.prototype.mulf = function(u) {
      var h = new o(null);
      return h.words = new Array(this.length + u.length), z(this, u, h);
    }, o.prototype.imul = function(u) {
      return this.clone().mulTo(u, this);
    }, o.prototype.imuln = function(u) {
      a(typeof u == "number"), a(u < 67108864);
      for (var h = 0, p = 0; p < this.length; p++) {
        var y = (this.words[p] | 0) * u, v = (y & 67108863) + (h & 67108863);
        h >>= 26, h += y / 67108864 | 0, h += v >>> 26, this.words[p] = v & 67108863;
      }
      return h !== 0 && (this.words[p] = h, this.length++), this;
    }, o.prototype.muln = function(u) {
      return this.clone().imuln(u);
    }, o.prototype.sqr = function() {
      return this.mul(this);
    }, o.prototype.isqr = function() {
      return this.imul(this.clone());
    }, o.prototype.pow = function(u) {
      var h = I(u);
      if (h.length === 0)
        return new o(1);
      for (var p = this, y = 0; y < h.length && h[y] === 0; y++, p = p.sqr())
        ;
      if (++y < h.length)
        for (var v = p.sqr(); y < h.length; y++, v = v.sqr())
          h[y] !== 0 && (p = p.mul(v));
      return p;
    }, o.prototype.iushln = function(u) {
      a(typeof u == "number" && u >= 0);
      var h = u % 26, p = (u - h) / 26, y = 67108863 >>> 26 - h << 26 - h, v;
      if (h !== 0) {
        var $ = 0;
        for (v = 0; v < this.length; v++) {
          var E = this.words[v] & y, x = (this.words[v] | 0) - E << h;
          this.words[v] = x | $, $ = E >>> 26 - h;
        }
        $ && (this.words[v] = $, this.length++);
      }
      if (p !== 0) {
        for (v = this.length - 1; v >= 0; v--)
          this.words[v + p] = this.words[v];
        for (v = 0; v < p; v++)
          this.words[v] = 0;
        this.length += p;
      }
      return this.strip();
    }, o.prototype.ishln = function(u) {
      return a(this.negative === 0), this.iushln(u);
    }, o.prototype.iushrn = function(u, h, p) {
      a(typeof u == "number" && u >= 0);
      var y;
      h ? y = (h - h % 26) / 26 : y = 0;
      var v = u % 26, $ = Math.min((u - v) / 26, this.length), E = 67108863 ^ 67108863 >>> v << v, x = p;
      if (y -= $, y = Math.max(0, y), x) {
        for (var l = 0; l < $; l++)
          x.words[l] = this.words[l];
        x.length = $;
      }
      if ($ !== 0)
        if (this.length > $)
          for (this.length -= $, l = 0; l < this.length; l++)
            this.words[l] = this.words[l + $];
        else
          this.words[0] = 0, this.length = 1;
      var b = 0;
      for (l = this.length - 1; l >= 0 && (b !== 0 || l >= y); l--) {
        var M = this.words[l] | 0;
        this.words[l] = b << 26 - v | M >>> v, b = M & E;
      }
      return x && b !== 0 && (x.words[x.length++] = b), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
    }, o.prototype.ishrn = function(u, h, p) {
      return a(this.negative === 0), this.iushrn(u, h, p);
    }, o.prototype.shln = function(u) {
      return this.clone().ishln(u);
    }, o.prototype.ushln = function(u) {
      return this.clone().iushln(u);
    }, o.prototype.shrn = function(u) {
      return this.clone().ishrn(u);
    }, o.prototype.ushrn = function(u) {
      return this.clone().iushrn(u);
    }, o.prototype.testn = function(u) {
      a(typeof u == "number" && u >= 0);
      var h = u % 26, p = (u - h) / 26, y = 1 << h;
      if (this.length <= p)
        return !1;
      var v = this.words[p];
      return !!(v & y);
    }, o.prototype.imaskn = function(u) {
      a(typeof u == "number" && u >= 0);
      var h = u % 26, p = (u - h) / 26;
      if (a(this.negative === 0, "imaskn works only with positive numbers"), this.length <= p)
        return this;
      if (h !== 0 && p++, this.length = Math.min(p, this.length), h !== 0) {
        var y = 67108863 ^ 67108863 >>> h << h;
        this.words[this.length - 1] &= y;
      }
      return this.strip();
    }, o.prototype.maskn = function(u) {
      return this.clone().imaskn(u);
    }, o.prototype.iaddn = function(u) {
      return a(typeof u == "number"), a(u < 67108864), u < 0 ? this.isubn(-u) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < u ? (this.words[0] = u - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(u), this.negative = 1, this) : this._iaddn(u);
    }, o.prototype._iaddn = function(u) {
      this.words[0] += u;
      for (var h = 0; h < this.length && this.words[h] >= 67108864; h++)
        this.words[h] -= 67108864, h === this.length - 1 ? this.words[h + 1] = 1 : this.words[h + 1]++;
      return this.length = Math.max(this.length, h + 1), this;
    }, o.prototype.isubn = function(u) {
      if (a(typeof u == "number"), a(u < 67108864), u < 0)
        return this.iaddn(-u);
      if (this.negative !== 0)
        return this.negative = 0, this.iaddn(u), this.negative = 1, this;
      if (this.words[0] -= u, this.length === 1 && this.words[0] < 0)
        this.words[0] = -this.words[0], this.negative = 1;
      else
        for (var h = 0; h < this.length && this.words[h] < 0; h++)
          this.words[h] += 67108864, this.words[h + 1] -= 1;
      return this.strip();
    }, o.prototype.addn = function(u) {
      return this.clone().iaddn(u);
    }, o.prototype.subn = function(u) {
      return this.clone().isubn(u);
    }, o.prototype.iabs = function() {
      return this.negative = 0, this;
    }, o.prototype.abs = function() {
      return this.clone().iabs();
    }, o.prototype._ishlnsubmul = function(u, h, p) {
      var y = u.length + p, v;
      this._expand(y);
      var $, E = 0;
      for (v = 0; v < u.length; v++) {
        $ = (this.words[v + p] | 0) + E;
        var x = (u.words[v] | 0) * h;
        $ -= x & 67108863, E = ($ >> 26) - (x / 67108864 | 0), this.words[v + p] = $ & 67108863;
      }
      for (; v < this.length - p; v++)
        $ = (this.words[v + p] | 0) + E, E = $ >> 26, this.words[v + p] = $ & 67108863;
      if (E === 0)
        return this.strip();
      for (a(E === -1), E = 0, v = 0; v < this.length; v++)
        $ = -(this.words[v] | 0) + E, E = $ >> 26, this.words[v] = $ & 67108863;
      return this.negative = 1, this.strip();
    }, o.prototype._wordDiv = function(u, h) {
      var p = this.length - u.length, y = this.clone(), v = u, $ = v.words[v.length - 1] | 0, E = this._countBits($);
      p = 26 - E, p !== 0 && (v = v.ushln(p), y.iushln(p), $ = v.words[v.length - 1] | 0);
      var x = y.length - v.length, l;
      if (h !== "mod") {
        l = new o(null), l.length = x + 1, l.words = new Array(l.length);
        for (var b = 0; b < l.length; b++)
          l.words[b] = 0;
      }
      var M = y.clone()._ishlnsubmul(v, 1, x);
      M.negative === 0 && (y = M, l && (l.words[x] = 1));
      for (var k = x - 1; k >= 0; k--) {
        var U = (y.words[v.length + k] | 0) * 67108864 + (y.words[v.length + k - 1] | 0);
        for (U = Math.min(U / $ | 0, 67108863), y._ishlnsubmul(v, U, k); y.negative !== 0; )
          U--, y.negative = 0, y._ishlnsubmul(v, 1, k), y.isZero() || (y.negative ^= 1);
        l && (l.words[k] = U);
      }
      return l && l.strip(), y.strip(), h !== "div" && p !== 0 && y.iushrn(p), {
        div: l || null,
        mod: y
      };
    }, o.prototype.divmod = function(u, h, p) {
      if (a(!u.isZero()), this.isZero())
        return {
          div: new o(0),
          mod: new o(0)
        };
      var y, v, $;
      return this.negative !== 0 && u.negative === 0 ? ($ = this.neg().divmod(u, h), h !== "mod" && (y = $.div.neg()), h !== "div" && (v = $.mod.neg(), p && v.negative !== 0 && v.iadd(u)), {
        div: y,
        mod: v
      }) : this.negative === 0 && u.negative !== 0 ? ($ = this.divmod(u.neg(), h), h !== "mod" && (y = $.div.neg()), {
        div: y,
        mod: $.mod
      }) : this.negative & u.negative ? ($ = this.neg().divmod(u.neg(), h), h !== "div" && (v = $.mod.neg(), p && v.negative !== 0 && v.isub(u)), {
        div: $.div,
        mod: v
      }) : u.length > this.length || this.cmp(u) < 0 ? {
        div: new o(0),
        mod: this
      } : u.length === 1 ? h === "div" ? {
        div: this.divn(u.words[0]),
        mod: null
      } : h === "mod" ? {
        div: null,
        mod: new o(this.modn(u.words[0]))
      } : {
        div: this.divn(u.words[0]),
        mod: new o(this.modn(u.words[0]))
      } : this._wordDiv(u, h);
    }, o.prototype.div = function(u) {
      return this.divmod(u, "div", !1).div;
    }, o.prototype.mod = function(u) {
      return this.divmod(u, "mod", !1).mod;
    }, o.prototype.umod = function(u) {
      return this.divmod(u, "mod", !0).mod;
    }, o.prototype.divRound = function(u) {
      var h = this.divmod(u);
      if (h.mod.isZero())
        return h.div;
      var p = h.div.negative !== 0 ? h.mod.isub(u) : h.mod, y = u.ushrn(1), v = u.andln(1), $ = p.cmp(y);
      return $ < 0 || v === 1 && $ === 0 ? h.div : h.div.negative !== 0 ? h.div.isubn(1) : h.div.iaddn(1);
    }, o.prototype.modn = function(u) {
      a(u <= 67108863);
      for (var h = (1 << 26) % u, p = 0, y = this.length - 1; y >= 0; y--)
        p = (h * p + (this.words[y] | 0)) % u;
      return p;
    }, o.prototype.idivn = function(u) {
      a(u <= 67108863);
      for (var h = 0, p = this.length - 1; p >= 0; p--) {
        var y = (this.words[p] | 0) + h * 67108864;
        this.words[p] = y / u | 0, h = y % u;
      }
      return this.strip();
    }, o.prototype.divn = function(u) {
      return this.clone().idivn(u);
    }, o.prototype.egcd = function(u) {
      a(u.negative === 0), a(!u.isZero());
      var h = this, p = u.clone();
      h.negative !== 0 ? h = h.umod(u) : h = h.clone();
      for (var y = new o(1), v = new o(0), $ = new o(0), E = new o(1), x = 0; h.isEven() && p.isEven(); )
        h.iushrn(1), p.iushrn(1), ++x;
      for (var l = p.clone(), b = h.clone(); !h.isZero(); ) {
        for (var M = 0, k = 1; !(h.words[0] & k) && M < 26; ++M, k <<= 1)
          ;
        if (M > 0)
          for (h.iushrn(M); M-- > 0; )
            (y.isOdd() || v.isOdd()) && (y.iadd(l), v.isub(b)), y.iushrn(1), v.iushrn(1);
        for (var U = 0, T = 1; !(p.words[0] & T) && U < 26; ++U, T <<= 1)
          ;
        if (U > 0)
          for (p.iushrn(U); U-- > 0; )
            ($.isOdd() || E.isOdd()) && ($.iadd(l), E.isub(b)), $.iushrn(1), E.iushrn(1);
        h.cmp(p) >= 0 ? (h.isub(p), y.isub($), v.isub(E)) : (p.isub(h), $.isub(y), E.isub(v));
      }
      return {
        a: $,
        b: E,
        gcd: p.iushln(x)
      };
    }, o.prototype._invmp = function(u) {
      a(u.negative === 0), a(!u.isZero());
      var h = this, p = u.clone();
      h.negative !== 0 ? h = h.umod(u) : h = h.clone();
      for (var y = new o(1), v = new o(0), $ = p.clone(); h.cmpn(1) > 0 && p.cmpn(1) > 0; ) {
        for (var E = 0, x = 1; !(h.words[0] & x) && E < 26; ++E, x <<= 1)
          ;
        if (E > 0)
          for (h.iushrn(E); E-- > 0; )
            y.isOdd() && y.iadd($), y.iushrn(1);
        for (var l = 0, b = 1; !(p.words[0] & b) && l < 26; ++l, b <<= 1)
          ;
        if (l > 0)
          for (p.iushrn(l); l-- > 0; )
            v.isOdd() && v.iadd($), v.iushrn(1);
        h.cmp(p) >= 0 ? (h.isub(p), y.isub(v)) : (p.isub(h), v.isub(y));
      }
      var M;
      return h.cmpn(1) === 0 ? M = y : M = v, M.cmpn(0) < 0 && M.iadd(u), M;
    }, o.prototype.gcd = function(u) {
      if (this.isZero())
        return u.abs();
      if (u.isZero())
        return this.abs();
      var h = this.clone(), p = u.clone();
      h.negative = 0, p.negative = 0;
      for (var y = 0; h.isEven() && p.isEven(); y++)
        h.iushrn(1), p.iushrn(1);
      do {
        for (; h.isEven(); )
          h.iushrn(1);
        for (; p.isEven(); )
          p.iushrn(1);
        var v = h.cmp(p);
        if (v < 0) {
          var $ = h;
          h = p, p = $;
        } else if (v === 0 || p.cmpn(1) === 0)
          break;
        h.isub(p);
      } while (!0);
      return p.iushln(y);
    }, o.prototype.invm = function(u) {
      return this.egcd(u).a.umod(u);
    }, o.prototype.isEven = function() {
      return (this.words[0] & 1) === 0;
    }, o.prototype.isOdd = function() {
      return (this.words[0] & 1) === 1;
    }, o.prototype.andln = function(u) {
      return this.words[0] & u;
    }, o.prototype.bincn = function(u) {
      a(typeof u == "number");
      var h = u % 26, p = (u - h) / 26, y = 1 << h;
      if (this.length <= p)
        return this._expand(p + 1), this.words[p] |= y, this;
      for (var v = y, $ = p; v !== 0 && $ < this.length; $++) {
        var E = this.words[$] | 0;
        E += v, v = E >>> 26, E &= 67108863, this.words[$] = E;
      }
      return v !== 0 && (this.words[$] = v, this.length++), this;
    }, o.prototype.isZero = function() {
      return this.length === 1 && this.words[0] === 0;
    }, o.prototype.cmpn = function(u) {
      var h = u < 0;
      if (this.negative !== 0 && !h)
        return -1;
      if (this.negative === 0 && h)
        return 1;
      this.strip();
      var p;
      if (this.length > 1)
        p = 1;
      else {
        h && (u = -u), a(u <= 67108863, "Number is too big");
        var y = this.words[0] | 0;
        p = y === u ? 0 : y < u ? -1 : 1;
      }
      return this.negative !== 0 ? -p | 0 : p;
    }, o.prototype.cmp = function(u) {
      if (this.negative !== 0 && u.negative === 0)
        return -1;
      if (this.negative === 0 && u.negative !== 0)
        return 1;
      var h = this.ucmp(u);
      return this.negative !== 0 ? -h | 0 : h;
    }, o.prototype.ucmp = function(u) {
      if (this.length > u.length)
        return 1;
      if (this.length < u.length)
        return -1;
      for (var h = 0, p = this.length - 1; p >= 0; p--) {
        var y = this.words[p] | 0, v = u.words[p] | 0;
        if (y !== v) {
          y < v ? h = -1 : y > v && (h = 1);
          break;
        }
      }
      return h;
    }, o.prototype.gtn = function(u) {
      return this.cmpn(u) === 1;
    }, o.prototype.gt = function(u) {
      return this.cmp(u) === 1;
    }, o.prototype.gten = function(u) {
      return this.cmpn(u) >= 0;
    }, o.prototype.gte = function(u) {
      return this.cmp(u) >= 0;
    }, o.prototype.ltn = function(u) {
      return this.cmpn(u) === -1;
    }, o.prototype.lt = function(u) {
      return this.cmp(u) === -1;
    }, o.prototype.lten = function(u) {
      return this.cmpn(u) <= 0;
    }, o.prototype.lte = function(u) {
      return this.cmp(u) <= 0;
    }, o.prototype.eqn = function(u) {
      return this.cmpn(u) === 0;
    }, o.prototype.eq = function(u) {
      return this.cmp(u) === 0;
    }, o.red = function(u) {
      return new V(u);
    }, o.prototype.toRed = function(u) {
      return a(!this.red, "Already a number in reduction context"), a(this.negative === 0, "red works only with positives"), u.convertTo(this)._forceRed(u);
    }, o.prototype.fromRed = function() {
      return a(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
    }, o.prototype._forceRed = function(u) {
      return this.red = u, this;
    }, o.prototype.forceRed = function(u) {
      return a(!this.red, "Already a number in reduction context"), this._forceRed(u);
    }, o.prototype.redAdd = function(u) {
      return a(this.red, "redAdd works only with red numbers"), this.red.add(this, u);
    }, o.prototype.redIAdd = function(u) {
      return a(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, u);
    }, o.prototype.redSub = function(u) {
      return a(this.red, "redSub works only with red numbers"), this.red.sub(this, u);
    }, o.prototype.redISub = function(u) {
      return a(this.red, "redISub works only with red numbers"), this.red.isub(this, u);
    }, o.prototype.redShl = function(u) {
      return a(this.red, "redShl works only with red numbers"), this.red.shl(this, u);
    }, o.prototype.redMul = function(u) {
      return a(this.red, "redMul works only with red numbers"), this.red._verify2(this, u), this.red.mul(this, u);
    }, o.prototype.redIMul = function(u) {
      return a(this.red, "redMul works only with red numbers"), this.red._verify2(this, u), this.red.imul(this, u);
    }, o.prototype.redSqr = function() {
      return a(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
    }, o.prototype.redISqr = function() {
      return a(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
    }, o.prototype.redSqrt = function() {
      return a(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
    }, o.prototype.redInvm = function() {
      return a(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
    }, o.prototype.redNeg = function() {
      return a(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
    }, o.prototype.redPow = function(u) {
      return a(this.red && !u.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, u);
    };
    var Z = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function X(_, u) {
      this.name = _, this.p = new o(u, 16), this.n = this.p.bitLength(), this.k = new o(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
    }
    X.prototype._tmp = function() {
      var u = new o(null);
      return u.words = new Array(Math.ceil(this.n / 13)), u;
    }, X.prototype.ireduce = function(u) {
      var h = u, p;
      do
        this.split(h, this.tmp), h = this.imulK(h), h = h.iadd(this.tmp), p = h.bitLength();
      while (p > this.n);
      var y = p < this.n ? -1 : h.ucmp(this.p);
      return y === 0 ? (h.words[0] = 0, h.length = 1) : y > 0 ? h.isub(this.p) : h.strip !== void 0 ? h.strip() : h._strip(), h;
    }, X.prototype.split = function(u, h) {
      u.iushrn(this.n, 0, h);
    }, X.prototype.imulK = function(u) {
      return u.imul(this.k);
    };
    function ie() {
      X.call(
        this,
        "k256",
        "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
      );
    }
    c(ie, X), ie.prototype.split = function(u, h) {
      for (var p = 4194303, y = Math.min(u.length, 9), v = 0; v < y; v++)
        h.words[v] = u.words[v];
      if (h.length = y, u.length <= 9) {
        u.words[0] = 0, u.length = 1;
        return;
      }
      var $ = u.words[9];
      for (h.words[h.length++] = $ & p, v = 10; v < u.length; v++) {
        var E = u.words[v] | 0;
        u.words[v - 10] = (E & p) << 4 | $ >>> 22, $ = E;
      }
      $ >>>= 22, u.words[v - 10] = $, $ === 0 && u.length > 10 ? u.length -= 10 : u.length -= 9;
    }, ie.prototype.imulK = function(u) {
      u.words[u.length] = 0, u.words[u.length + 1] = 0, u.length += 2;
      for (var h = 0, p = 0; p < u.length; p++) {
        var y = u.words[p] | 0;
        h += y * 977, u.words[p] = h & 67108863, h = y * 64 + (h / 67108864 | 0);
      }
      return u.words[u.length - 1] === 0 && (u.length--, u.words[u.length - 1] === 0 && u.length--), u;
    };
    function fe() {
      X.call(
        this,
        "p224",
        "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
      );
    }
    c(fe, X);
    function ye() {
      X.call(
        this,
        "p192",
        "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
      );
    }
    c(ye, X);
    function j() {
      X.call(
        this,
        "25519",
        "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
      );
    }
    c(j, X), j.prototype.imulK = function(u) {
      for (var h = 0, p = 0; p < u.length; p++) {
        var y = (u.words[p] | 0) * 19 + h, v = y & 67108863;
        y >>>= 26, u.words[p] = v, h = y;
      }
      return h !== 0 && (u.words[u.length++] = h), u;
    }, o._prime = function(u) {
      if (Z[u])
        return Z[u];
      var h;
      if (u === "k256")
        h = new ie();
      else if (u === "p224")
        h = new fe();
      else if (u === "p192")
        h = new ye();
      else if (u === "p25519")
        h = new j();
      else
        throw new Error("Unknown prime " + u);
      return Z[u] = h, h;
    };
    function V(_) {
      if (typeof _ == "string") {
        var u = o._prime(_);
        this.m = u.p, this.prime = u;
      } else
        a(_.gtn(1), "modulus must be greater than 1"), this.m = _, this.prime = null;
    }
    V.prototype._verify1 = function(u) {
      a(u.negative === 0, "red works only with positives"), a(u.red, "red works only with red numbers");
    }, V.prototype._verify2 = function(u, h) {
      a((u.negative | h.negative) === 0, "red works only with positives"), a(
        u.red && u.red === h.red,
        "red works only with red numbers"
      );
    }, V.prototype.imod = function(u) {
      return this.prime ? this.prime.ireduce(u)._forceRed(this) : u.umod(this.m)._forceRed(this);
    }, V.prototype.neg = function(u) {
      return u.isZero() ? u.clone() : this.m.sub(u)._forceRed(this);
    }, V.prototype.add = function(u, h) {
      this._verify2(u, h);
      var p = u.add(h);
      return p.cmp(this.m) >= 0 && p.isub(this.m), p._forceRed(this);
    }, V.prototype.iadd = function(u, h) {
      this._verify2(u, h);
      var p = u.iadd(h);
      return p.cmp(this.m) >= 0 && p.isub(this.m), p;
    }, V.prototype.sub = function(u, h) {
      this._verify2(u, h);
      var p = u.sub(h);
      return p.cmpn(0) < 0 && p.iadd(this.m), p._forceRed(this);
    }, V.prototype.isub = function(u, h) {
      this._verify2(u, h);
      var p = u.isub(h);
      return p.cmpn(0) < 0 && p.iadd(this.m), p;
    }, V.prototype.shl = function(u, h) {
      return this._verify1(u), this.imod(u.ushln(h));
    }, V.prototype.imul = function(u, h) {
      return this._verify2(u, h), this.imod(u.imul(h));
    }, V.prototype.mul = function(u, h) {
      return this._verify2(u, h), this.imod(u.mul(h));
    }, V.prototype.isqr = function(u) {
      return this.imul(u, u.clone());
    }, V.prototype.sqr = function(u) {
      return this.mul(u, u);
    }, V.prototype.sqrt = function(u) {
      if (u.isZero())
        return u.clone();
      var h = this.m.andln(3);
      if (a(h % 2 === 1), h === 3) {
        var p = this.m.add(new o(1)).iushrn(2);
        return this.pow(u, p);
      }
      for (var y = this.m.subn(1), v = 0; !y.isZero() && y.andln(1) === 0; )
        v++, y.iushrn(1);
      a(!y.isZero());
      var $ = new o(1).toRed(this), E = $.redNeg(), x = this.m.subn(1).iushrn(1), l = this.m.bitLength();
      for (l = new o(2 * l * l).toRed(this); this.pow(l, x).cmp(E) !== 0; )
        l.redIAdd(E);
      for (var b = this.pow(l, y), M = this.pow(u, y.addn(1).iushrn(1)), k = this.pow(u, y), U = v; k.cmp($) !== 0; ) {
        for (var T = k, H = 0; T.cmp($) !== 0; H++)
          T = T.redSqr();
        a(H < U);
        var Y = this.pow(b, new o(1).iushln(U - H - 1));
        M = M.redMul(Y), b = Y.redSqr(), k = k.redMul(b), U = H;
      }
      return M;
    }, V.prototype.invm = function(u) {
      var h = u._invmp(this.m);
      return h.negative !== 0 ? (h.negative = 0, this.imod(h).redNeg()) : this.imod(h);
    }, V.prototype.pow = function(u, h) {
      if (h.isZero())
        return new o(1).toRed(this);
      if (h.cmpn(1) === 0)
        return u.clone();
      var p = 4, y = new Array(1 << p);
      y[0] = new o(1).toRed(this), y[1] = u;
      for (var v = 2; v < y.length; v++)
        y[v] = this.mul(y[v - 1], u);
      var $ = y[0], E = 0, x = 0, l = h.bitLength() % 26;
      for (l === 0 && (l = 26), v = h.length - 1; v >= 0; v--) {
        for (var b = h.words[v], M = l - 1; M >= 0; M--) {
          var k = b >> M & 1;
          if ($ !== y[0] && ($ = this.sqr($)), k === 0 && E === 0) {
            x = 0;
            continue;
          }
          E <<= 1, E |= k, x++, !(x !== p && (v !== 0 || M !== 0)) && ($ = this.mul($, y[E]), x = 0, E = 0);
        }
        l = 26;
      }
      return $;
    }, V.prototype.convertTo = function(u) {
      var h = u.umod(this.m);
      return h === u ? h.clone() : h;
    }, V.prototype.convertFrom = function(u) {
      var h = u.clone();
      return h.red = null, h;
    }, o.mont = function(u) {
      return new ae(u);
    };
    function ae(_) {
      V.call(this, _), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new o(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
    }
    c(ae, V), ae.prototype.convertTo = function(u) {
      return this.imod(u.ushln(this.shift));
    }, ae.prototype.convertFrom = function(u) {
      var h = this.imod(u.mul(this.rinv));
      return h.red = null, h;
    }, ae.prototype.imul = function(u, h) {
      if (u.isZero() || h.isZero())
        return u.words[0] = 0, u.length = 1, u;
      var p = u.imul(h), y = p.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), v = p.isub(y).iushrn(this.shift), $ = v;
      return v.cmp(this.m) >= 0 ? $ = v.isub(this.m) : v.cmpn(0) < 0 && ($ = v.iadd(this.m)), $._forceRed(this);
    }, ae.prototype.mul = function(u, h) {
      if (u.isZero() || h.isZero())
        return new o(0)._forceRed(this);
      var p = u.mul(h), y = p.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), v = p.isub(y).iushrn(this.shift), $ = v;
      return v.cmp(this.m) >= 0 ? $ = v.isub(this.m) : v.cmpn(0) < 0 && ($ = v.iadd(this.m)), $._forceRed(this);
    }, ae.prototype.invm = function(u) {
      var h = this.imod(u._invmp(this.m).mul(this.r2));
      return h._forceRed(this);
    };
  })(t, commonjsGlobal);
})(bn$3);
var bnExports$3 = bn$3.exports, utils$z = {};
(function(t) {
  var e = t;
  function n(o, d) {
    if (Array.isArray(o))
      return o.slice();
    if (!o)
      return [];
    var m = [];
    if (typeof o != "string") {
      for (var w = 0; w < o.length; w++)
        m[w] = o[w] | 0;
      return m;
    }
    if (d === "hex") {
      o = o.replace(/[^a-z0-9]+/ig, ""), o.length % 2 !== 0 && (o = "0" + o);
      for (var w = 0; w < o.length; w += 2)
        m.push(parseInt(o[w] + o[w + 1], 16));
    } else
      for (var w = 0; w < o.length; w++) {
        var S = o.charCodeAt(w), A = S >> 8, B = S & 255;
        A ? m.push(A, B) : m.push(B);
      }
    return m;
  }
  e.toArray = n;
  function a(o) {
    return o.length === 1 ? "0" + o : o;
  }
  e.zero2 = a;
  function c(o) {
    for (var d = "", m = 0; m < o.length; m++)
      d += a(o[m].toString(16));
    return d;
  }
  e.toHex = c, e.encode = function(d, m) {
    return m === "hex" ? c(d) : d;
  };
})(utils$z);
(function(t) {
  var e = t, n = bnExports$3, a = minimalisticAssert$1, c = utils$z;
  e.assert = a, e.toArray = c.toArray, e.zero2 = c.zero2, e.toHex = c.toHex, e.encode = c.encode;
  function o(A, B, P) {
    var I = new Array(Math.max(A.bitLength(), P) + 1);
    I.fill(0);
    for (var O = 1 << B + 1, L = A.clone(), C = 0; C < I.length; C++) {
      var z, q = L.andln(O - 1);
      L.isOdd() ? (q > (O >> 1) - 1 ? z = (O >> 1) - q : z = q, L.isubn(z)) : z = 0, I[C] = z, L.iushrn(1);
    }
    return I;
  }
  e.getNAF = o;
  function d(A, B) {
    var P = [
      [],
      []
    ];
    A = A.clone(), B = B.clone();
    for (var I = 0, O = 0, L; A.cmpn(-I) > 0 || B.cmpn(-O) > 0; ) {
      var C = A.andln(3) + I & 3, z = B.andln(3) + O & 3;
      C === 3 && (C = -1), z === 3 && (z = -1);
      var q;
      C & 1 ? (L = A.andln(7) + I & 7, (L === 3 || L === 5) && z === 2 ? q = -C : q = C) : q = 0, P[0].push(q);
      var Z;
      z & 1 ? (L = B.andln(7) + O & 7, (L === 3 || L === 5) && C === 2 ? Z = -z : Z = z) : Z = 0, P[1].push(Z), 2 * I === q + 1 && (I = 1 - I), 2 * O === Z + 1 && (O = 1 - O), A.iushrn(1), B.iushrn(1);
    }
    return P;
  }
  e.getJSF = d;
  function m(A, B, P) {
    var I = "_" + B;
    A.prototype[B] = function() {
      return this[I] !== void 0 ? this[I] : this[I] = P.call(this);
    };
  }
  e.cachedProperty = m;
  function w(A) {
    return typeof A == "string" ? e.toArray(A, "hex") : A;
  }
  e.parseBytes = w;
  function S(A) {
    return new n(A, "hex", "le");
  }
  e.intFromLE = S;
})(utils$A);
var curve = {}, BN$b = bnExports$3, utils$y = utils$A, getNAF$1 = utils$y.getNAF, getJSF$1 = utils$y.getJSF, assert$k = utils$y.assert;
function BaseCurve$1(t, e) {
  this.type = t, this.p = new BN$b(e.p, 16), this.red = e.prime ? BN$b.red(e.prime) : BN$b.mont(this.p), this.zero = new BN$b(0).toRed(this.red), this.one = new BN$b(1).toRed(this.red), this.two = new BN$b(2).toRed(this.red), this.n = e.n && new BN$b(e.n, 16), this.g = e.g && this.pointFromJSON(e.g, e.gRed), this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;
  var n = this.n && this.p.div(this.n);
  !n || n.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = !0, this.redN = this.n.toRed(this.red));
}
var base$6 = BaseCurve$1;
BaseCurve$1.prototype.point = function() {
  throw new Error("Not implemented");
};
BaseCurve$1.prototype.validate = function() {
  throw new Error("Not implemented");
};
BaseCurve$1.prototype._fixedNafMul = function(e, n) {
  assert$k(e.precomputed);
  var a = e._getDoubles(), c = getNAF$1(n, 1, this._bitLength), o = (1 << a.step + 1) - (a.step % 2 === 0 ? 2 : 1);
  o /= 3;
  var d = [], m, w;
  for (m = 0; m < c.length; m += a.step) {
    w = 0;
    for (var S = m + a.step - 1; S >= m; S--)
      w = (w << 1) + c[S];
    d.push(w);
  }
  for (var A = this.jpoint(null, null, null), B = this.jpoint(null, null, null), P = o; P > 0; P--) {
    for (m = 0; m < d.length; m++)
      w = d[m], w === P ? B = B.mixedAdd(a.points[m]) : w === -P && (B = B.mixedAdd(a.points[m].neg()));
    A = A.add(B);
  }
  return A.toP();
};
BaseCurve$1.prototype._wnafMul = function(e, n) {
  var a = 4, c = e._getNAFPoints(a);
  a = c.wnd;
  for (var o = c.points, d = getNAF$1(n, a, this._bitLength), m = this.jpoint(null, null, null), w = d.length - 1; w >= 0; w--) {
    for (var S = 0; w >= 0 && d[w] === 0; w--)
      S++;
    if (w >= 0 && S++, m = m.dblp(S), w < 0)
      break;
    var A = d[w];
    assert$k(A !== 0), e.type === "affine" ? A > 0 ? m = m.mixedAdd(o[A - 1 >> 1]) : m = m.mixedAdd(o[-A - 1 >> 1].neg()) : A > 0 ? m = m.add(o[A - 1 >> 1]) : m = m.add(o[-A - 1 >> 1].neg());
  }
  return e.type === "affine" ? m.toP() : m;
};
BaseCurve$1.prototype._wnafMulAdd = function(e, n, a, c, o) {
  var d = this._wnafT1, m = this._wnafT2, w = this._wnafT3, S = 0, A, B, P;
  for (A = 0; A < c; A++) {
    P = n[A];
    var I = P._getNAFPoints(e);
    d[A] = I.wnd, m[A] = I.points;
  }
  for (A = c - 1; A >= 1; A -= 2) {
    var O = A - 1, L = A;
    if (d[O] !== 1 || d[L] !== 1) {
      w[O] = getNAF$1(a[O], d[O], this._bitLength), w[L] = getNAF$1(a[L], d[L], this._bitLength), S = Math.max(w[O].length, S), S = Math.max(w[L].length, S);
      continue;
    }
    var C = [
      n[O],
      /* 1 */
      null,
      /* 3 */
      null,
      /* 5 */
      n[L]
      /* 7 */
    ];
    n[O].y.cmp(n[L].y) === 0 ? (C[1] = n[O].add(n[L]), C[2] = n[O].toJ().mixedAdd(n[L].neg())) : n[O].y.cmp(n[L].y.redNeg()) === 0 ? (C[1] = n[O].toJ().mixedAdd(n[L]), C[2] = n[O].add(n[L].neg())) : (C[1] = n[O].toJ().mixedAdd(n[L]), C[2] = n[O].toJ().mixedAdd(n[L].neg()));
    var z = [
      -3,
      /* -1 -1 */
      -1,
      /* -1 0 */
      -5,
      /* -1 1 */
      -7,
      /* 0 -1 */
      0,
      /* 0 0 */
      7,
      /* 0 1 */
      5,
      /* 1 -1 */
      1,
      /* 1 0 */
      3
      /* 1 1 */
    ], q = getJSF$1(a[O], a[L]);
    for (S = Math.max(q[0].length, S), w[O] = new Array(S), w[L] = new Array(S), B = 0; B < S; B++) {
      var Z = q[0][B] | 0, X = q[1][B] | 0;
      w[O][B] = z[(Z + 1) * 3 + (X + 1)], w[L][B] = 0, m[O] = C;
    }
  }
  var ie = this.jpoint(null, null, null), fe = this._wnafT4;
  for (A = S; A >= 0; A--) {
    for (var ye = 0; A >= 0; ) {
      var j = !0;
      for (B = 0; B < c; B++)
        fe[B] = w[B][A] | 0, fe[B] !== 0 && (j = !1);
      if (!j)
        break;
      ye++, A--;
    }
    if (A >= 0 && ye++, ie = ie.dblp(ye), A < 0)
      break;
    for (B = 0; B < c; B++) {
      var V = fe[B];
      V !== 0 && (V > 0 ? P = m[B][V - 1 >> 1] : V < 0 && (P = m[B][-V - 1 >> 1].neg()), P.type === "affine" ? ie = ie.mixedAdd(P) : ie = ie.add(P));
    }
  }
  for (A = 0; A < c; A++)
    m[A] = null;
  return o ? ie : ie.toP();
};
function BasePoint$1(t, e) {
  this.curve = t, this.type = e, this.precomputed = null;
}
BaseCurve$1.BasePoint = BasePoint$1;
BasePoint$1.prototype.eq = function() {
  throw new Error("Not implemented");
};
BasePoint$1.prototype.validate = function() {
  return this.curve.validate(this);
};
BaseCurve$1.prototype.decodePoint = function(e, n) {
  e = utils$y.toArray(e, n);
  var a = this.p.byteLength();
  if ((e[0] === 4 || e[0] === 6 || e[0] === 7) && e.length - 1 === 2 * a) {
    e[0] === 6 ? assert$k(e[e.length - 1] % 2 === 0) : e[0] === 7 && assert$k(e[e.length - 1] % 2 === 1);
    var c = this.point(
      e.slice(1, 1 + a),
      e.slice(1 + a, 1 + 2 * a)
    );
    return c;
  } else if ((e[0] === 2 || e[0] === 3) && e.length - 1 === a)
    return this.pointFromX(e.slice(1, 1 + a), e[0] === 3);
  throw new Error("Unknown point format");
};
BasePoint$1.prototype.encodeCompressed = function(e) {
  return this.encode(e, !0);
};
BasePoint$1.prototype._encode = function(e) {
  var n = this.curve.p.byteLength(), a = this.getX().toArray("be", n);
  return e ? [this.getY().isEven() ? 2 : 3].concat(a) : [4].concat(a, this.getY().toArray("be", n));
};
BasePoint$1.prototype.encode = function(e, n) {
  return utils$y.encode(this._encode(n), e);
};
BasePoint$1.prototype.precompute = function(e) {
  if (this.precomputed)
    return this;
  var n = {
    doubles: null,
    naf: null,
    beta: null
  };
  return n.naf = this._getNAFPoints(8), n.doubles = this._getDoubles(4, e), n.beta = this._getBeta(), this.precomputed = n, this;
};
BasePoint$1.prototype._hasDoubles = function(e) {
  if (!this.precomputed)
    return !1;
  var n = this.precomputed.doubles;
  return n ? n.points.length >= Math.ceil((e.bitLength() + 1) / n.step) : !1;
};
BasePoint$1.prototype._getDoubles = function(e, n) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;
  for (var a = [this], c = this, o = 0; o < n; o += e) {
    for (var d = 0; d < e; d++)
      c = c.dbl();
    a.push(c);
  }
  return {
    step: e,
    points: a
  };
};
BasePoint$1.prototype._getNAFPoints = function(e) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;
  for (var n = [this], a = (1 << e) - 1, c = a === 1 ? null : this.dbl(), o = 1; o < a; o++)
    n[o] = n[o - 1].add(c);
  return {
    wnd: e,
    points: n
  };
};
BasePoint$1.prototype._getBeta = function() {
  return null;
};
BasePoint$1.prototype.dblp = function(e) {
  for (var n = this, a = 0; a < e; a++)
    n = n.dbl();
  return n;
};
var utils$x = utils$A, BN$a = bnExports$3, inherits$b = inherits_browserExports, Base$2 = base$6, assert$j = utils$x.assert;
function ShortCurve$1(t) {
  Base$2.call(this, "short", t), this.a = new BN$a(t.a, 16).toRed(this.red), this.b = new BN$a(t.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = this.a.fromRed().cmpn(0) === 0, this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0, this.endo = this._getEndomorphism(t), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
}
inherits$b(ShortCurve$1, Base$2);
var short = ShortCurve$1;
ShortCurve$1.prototype._getEndomorphism = function(e) {
  if (!(!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)) {
    var n, a;
    if (e.beta)
      n = new BN$a(e.beta, 16).toRed(this.red);
    else {
      var c = this._getEndoRoots(this.p);
      n = c[0].cmp(c[1]) < 0 ? c[0] : c[1], n = n.toRed(this.red);
    }
    if (e.lambda)
      a = new BN$a(e.lambda, 16);
    else {
      var o = this._getEndoRoots(this.n);
      this.g.mul(o[0]).x.cmp(this.g.x.redMul(n)) === 0 ? a = o[0] : (a = o[1], assert$j(this.g.mul(a).x.cmp(this.g.x.redMul(n)) === 0));
    }
    var d;
    return e.basis ? d = e.basis.map(function(m) {
      return {
        a: new BN$a(m.a, 16),
        b: new BN$a(m.b, 16)
      };
    }) : d = this._getEndoBasis(a), {
      beta: n,
      lambda: a,
      basis: d
    };
  }
};
ShortCurve$1.prototype._getEndoRoots = function(e) {
  var n = e === this.p ? this.red : BN$a.mont(e), a = new BN$a(2).toRed(n).redInvm(), c = a.redNeg(), o = new BN$a(3).toRed(n).redNeg().redSqrt().redMul(a), d = c.redAdd(o).fromRed(), m = c.redSub(o).fromRed();
  return [d, m];
};
ShortCurve$1.prototype._getEndoBasis = function(e) {
  for (var n = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), a = e, c = this.n.clone(), o = new BN$a(1), d = new BN$a(0), m = new BN$a(0), w = new BN$a(1), S, A, B, P, I, O, L, C = 0, z, q; a.cmpn(0) !== 0; ) {
    var Z = c.div(a);
    z = c.sub(Z.mul(a)), q = m.sub(Z.mul(o));
    var X = w.sub(Z.mul(d));
    if (!B && z.cmp(n) < 0)
      S = L.neg(), A = o, B = z.neg(), P = q;
    else if (B && ++C === 2)
      break;
    L = z, c = a, a = z, m = o, o = q, w = d, d = X;
  }
  I = z.neg(), O = q;
  var ie = B.sqr().add(P.sqr()), fe = I.sqr().add(O.sqr());
  return fe.cmp(ie) >= 0 && (I = S, O = A), B.negative && (B = B.neg(), P = P.neg()), I.negative && (I = I.neg(), O = O.neg()), [
    { a: B, b: P },
    { a: I, b: O }
  ];
};
ShortCurve$1.prototype._endoSplit = function(e) {
  var n = this.endo.basis, a = n[0], c = n[1], o = c.b.mul(e).divRound(this.n), d = a.b.neg().mul(e).divRound(this.n), m = o.mul(a.a), w = d.mul(c.a), S = o.mul(a.b), A = d.mul(c.b), B = e.sub(m).sub(w), P = S.add(A).neg();
  return { k1: B, k2: P };
};
ShortCurve$1.prototype.pointFromX = function(e, n) {
  e = new BN$a(e, 16), e.red || (e = e.toRed(this.red));
  var a = e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b), c = a.redSqrt();
  if (c.redSqr().redSub(a).cmp(this.zero) !== 0)
    throw new Error("invalid point");
  var o = c.fromRed().isOdd();
  return (n && !o || !n && o) && (c = c.redNeg()), this.point(e, c);
};
ShortCurve$1.prototype.validate = function(e) {
  if (e.inf)
    return !0;
  var n = e.x, a = e.y, c = this.a.redMul(n), o = n.redSqr().redMul(n).redIAdd(c).redIAdd(this.b);
  return a.redSqr().redISub(o).cmpn(0) === 0;
};
ShortCurve$1.prototype._endoWnafMulAdd = function(e, n, a) {
  for (var c = this._endoWnafT1, o = this._endoWnafT2, d = 0; d < e.length; d++) {
    var m = this._endoSplit(n[d]), w = e[d], S = w._getBeta();
    m.k1.negative && (m.k1.ineg(), w = w.neg(!0)), m.k2.negative && (m.k2.ineg(), S = S.neg(!0)), c[d * 2] = w, c[d * 2 + 1] = S, o[d * 2] = m.k1, o[d * 2 + 1] = m.k2;
  }
  for (var A = this._wnafMulAdd(1, c, o, d * 2, a), B = 0; B < d * 2; B++)
    c[B] = null, o[B] = null;
  return A;
};
function Point$4(t, e, n, a) {
  Base$2.BasePoint.call(this, t, "affine"), e === null && n === null ? (this.x = null, this.y = null, this.inf = !0) : (this.x = new BN$a(e, 16), this.y = new BN$a(n, 16), a && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = !1);
}
inherits$b(Point$4, Base$2.BasePoint);
ShortCurve$1.prototype.point = function(e, n, a) {
  return new Point$4(this, e, n, a);
};
ShortCurve$1.prototype.pointFromJSON = function(e, n) {
  return Point$4.fromJSON(this, e, n);
};
Point$4.prototype._getBeta = function() {
  if (this.curve.endo) {
    var e = this.precomputed;
    if (e && e.beta)
      return e.beta;
    var n = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (e) {
      var a = this.curve, c = function(o) {
        return a.point(o.x.redMul(a.endo.beta), o.y);
      };
      e.beta = n, n.precomputed = {
        beta: null,
        naf: e.naf && {
          wnd: e.naf.wnd,
          points: e.naf.points.map(c)
        },
        doubles: e.doubles && {
          step: e.doubles.step,
          points: e.doubles.points.map(c)
        }
      };
    }
    return n;
  }
};
Point$4.prototype.toJSON = function() {
  return this.precomputed ? [this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  }] : [this.x, this.y];
};
Point$4.fromJSON = function(e, n, a) {
  typeof n == "string" && (n = JSON.parse(n));
  var c = e.point(n[0], n[1], a);
  if (!n[2])
    return c;
  function o(m) {
    return e.point(m[0], m[1], a);
  }
  var d = n[2];
  return c.precomputed = {
    beta: null,
    doubles: d.doubles && {
      step: d.doubles.step,
      points: [c].concat(d.doubles.points.map(o))
    },
    naf: d.naf && {
      wnd: d.naf.wnd,
      points: [c].concat(d.naf.points.map(o))
    }
  }, c;
};
Point$4.prototype.inspect = function() {
  return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
};
Point$4.prototype.isInfinity = function() {
  return this.inf;
};
Point$4.prototype.add = function(e) {
  if (this.inf)
    return e;
  if (e.inf)
    return this;
  if (this.eq(e))
    return this.dbl();
  if (this.neg().eq(e))
    return this.curve.point(null, null);
  if (this.x.cmp(e.x) === 0)
    return this.curve.point(null, null);
  var n = this.y.redSub(e.y);
  n.cmpn(0) !== 0 && (n = n.redMul(this.x.redSub(e.x).redInvm()));
  var a = n.redSqr().redISub(this.x).redISub(e.x), c = n.redMul(this.x.redSub(a)).redISub(this.y);
  return this.curve.point(a, c);
};
Point$4.prototype.dbl = function() {
  if (this.inf)
    return this;
  var e = this.y.redAdd(this.y);
  if (e.cmpn(0) === 0)
    return this.curve.point(null, null);
  var n = this.curve.a, a = this.x.redSqr(), c = e.redInvm(), o = a.redAdd(a).redIAdd(a).redIAdd(n).redMul(c), d = o.redSqr().redISub(this.x.redAdd(this.x)), m = o.redMul(this.x.redSub(d)).redISub(this.y);
  return this.curve.point(d, m);
};
Point$4.prototype.getX = function() {
  return this.x.fromRed();
};
Point$4.prototype.getY = function() {
  return this.y.fromRed();
};
Point$4.prototype.mul = function(e) {
  return e = new BN$a(e, 16), this.isInfinity() ? this : this._hasDoubles(e) ? this.curve._fixedNafMul(this, e) : this.curve.endo ? this.curve._endoWnafMulAdd([this], [e]) : this.curve._wnafMul(this, e);
};
Point$4.prototype.mulAdd = function(e, n, a) {
  var c = [this, n], o = [e, a];
  return this.curve.endo ? this.curve._endoWnafMulAdd(c, o) : this.curve._wnafMulAdd(1, c, o, 2);
};
Point$4.prototype.jmulAdd = function(e, n, a) {
  var c = [this, n], o = [e, a];
  return this.curve.endo ? this.curve._endoWnafMulAdd(c, o, !0) : this.curve._wnafMulAdd(1, c, o, 2, !0);
};
Point$4.prototype.eq = function(e) {
  return this === e || this.inf === e.inf && (this.inf || this.x.cmp(e.x) === 0 && this.y.cmp(e.y) === 0);
};
Point$4.prototype.neg = function(e) {
  if (this.inf)
    return this;
  var n = this.curve.point(this.x, this.y.redNeg());
  if (e && this.precomputed) {
    var a = this.precomputed, c = function(o) {
      return o.neg();
    };
    n.precomputed = {
      naf: a.naf && {
        wnd: a.naf.wnd,
        points: a.naf.points.map(c)
      },
      doubles: a.doubles && {
        step: a.doubles.step,
        points: a.doubles.points.map(c)
      }
    };
  }
  return n;
};
Point$4.prototype.toJ = function() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);
  var e = this.curve.jpoint(this.x, this.y, this.curve.one);
  return e;
};
function JPoint$1(t, e, n, a) {
  Base$2.BasePoint.call(this, t, "jacobian"), e === null && n === null && a === null ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new BN$a(0)) : (this.x = new BN$a(e, 16), this.y = new BN$a(n, 16), this.z = new BN$a(a, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
}
inherits$b(JPoint$1, Base$2.BasePoint);
ShortCurve$1.prototype.jpoint = function(e, n, a) {
  return new JPoint$1(this, e, n, a);
};
JPoint$1.prototype.toP = function() {
  if (this.isInfinity())
    return this.curve.point(null, null);
  var e = this.z.redInvm(), n = e.redSqr(), a = this.x.redMul(n), c = this.y.redMul(n).redMul(e);
  return this.curve.point(a, c);
};
JPoint$1.prototype.neg = function() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};
JPoint$1.prototype.add = function(e) {
  if (this.isInfinity())
    return e;
  if (e.isInfinity())
    return this;
  var n = e.z.redSqr(), a = this.z.redSqr(), c = this.x.redMul(n), o = e.x.redMul(a), d = this.y.redMul(n.redMul(e.z)), m = e.y.redMul(a.redMul(this.z)), w = c.redSub(o), S = d.redSub(m);
  if (w.cmpn(0) === 0)
    return S.cmpn(0) !== 0 ? this.curve.jpoint(null, null, null) : this.dbl();
  var A = w.redSqr(), B = A.redMul(w), P = c.redMul(A), I = S.redSqr().redIAdd(B).redISub(P).redISub(P), O = S.redMul(P.redISub(I)).redISub(d.redMul(B)), L = this.z.redMul(e.z).redMul(w);
  return this.curve.jpoint(I, O, L);
};
JPoint$1.prototype.mixedAdd = function(e) {
  if (this.isInfinity())
    return e.toJ();
  if (e.isInfinity())
    return this;
  var n = this.z.redSqr(), a = this.x, c = e.x.redMul(n), o = this.y, d = e.y.redMul(n).redMul(this.z), m = a.redSub(c), w = o.redSub(d);
  if (m.cmpn(0) === 0)
    return w.cmpn(0) !== 0 ? this.curve.jpoint(null, null, null) : this.dbl();
  var S = m.redSqr(), A = S.redMul(m), B = a.redMul(S), P = w.redSqr().redIAdd(A).redISub(B).redISub(B), I = w.redMul(B.redISub(P)).redISub(o.redMul(A)), O = this.z.redMul(m);
  return this.curve.jpoint(P, I, O);
};
JPoint$1.prototype.dblp = function(e) {
  if (e === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!e)
    return this.dbl();
  var n;
  if (this.curve.zeroA || this.curve.threeA) {
    var a = this;
    for (n = 0; n < e; n++)
      a = a.dbl();
    return a;
  }
  var c = this.curve.a, o = this.curve.tinv, d = this.x, m = this.y, w = this.z, S = w.redSqr().redSqr(), A = m.redAdd(m);
  for (n = 0; n < e; n++) {
    var B = d.redSqr(), P = A.redSqr(), I = P.redSqr(), O = B.redAdd(B).redIAdd(B).redIAdd(c.redMul(S)), L = d.redMul(P), C = O.redSqr().redISub(L.redAdd(L)), z = L.redISub(C), q = O.redMul(z);
    q = q.redIAdd(q).redISub(I);
    var Z = A.redMul(w);
    n + 1 < e && (S = S.redMul(I)), d = C, w = Z, A = q;
  }
  return this.curve.jpoint(d, A.redMul(o), w);
};
JPoint$1.prototype.dbl = function() {
  return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
};
JPoint$1.prototype._zeroDbl = function() {
  var e, n, a;
  if (this.zOne) {
    var c = this.x.redSqr(), o = this.y.redSqr(), d = o.redSqr(), m = this.x.redAdd(o).redSqr().redISub(c).redISub(d);
    m = m.redIAdd(m);
    var w = c.redAdd(c).redIAdd(c), S = w.redSqr().redISub(m).redISub(m), A = d.redIAdd(d);
    A = A.redIAdd(A), A = A.redIAdd(A), e = S, n = w.redMul(m.redISub(S)).redISub(A), a = this.y.redAdd(this.y);
  } else {
    var B = this.x.redSqr(), P = this.y.redSqr(), I = P.redSqr(), O = this.x.redAdd(P).redSqr().redISub(B).redISub(I);
    O = O.redIAdd(O);
    var L = B.redAdd(B).redIAdd(B), C = L.redSqr(), z = I.redIAdd(I);
    z = z.redIAdd(z), z = z.redIAdd(z), e = C.redISub(O).redISub(O), n = L.redMul(O.redISub(e)).redISub(z), a = this.y.redMul(this.z), a = a.redIAdd(a);
  }
  return this.curve.jpoint(e, n, a);
};
JPoint$1.prototype._threeDbl = function() {
  var e, n, a;
  if (this.zOne) {
    var c = this.x.redSqr(), o = this.y.redSqr(), d = o.redSqr(), m = this.x.redAdd(o).redSqr().redISub(c).redISub(d);
    m = m.redIAdd(m);
    var w = c.redAdd(c).redIAdd(c).redIAdd(this.curve.a), S = w.redSqr().redISub(m).redISub(m);
    e = S;
    var A = d.redIAdd(d);
    A = A.redIAdd(A), A = A.redIAdd(A), n = w.redMul(m.redISub(S)).redISub(A), a = this.y.redAdd(this.y);
  } else {
    var B = this.z.redSqr(), P = this.y.redSqr(), I = this.x.redMul(P), O = this.x.redSub(B).redMul(this.x.redAdd(B));
    O = O.redAdd(O).redIAdd(O);
    var L = I.redIAdd(I);
    L = L.redIAdd(L);
    var C = L.redAdd(L);
    e = O.redSqr().redISub(C), a = this.y.redAdd(this.z).redSqr().redISub(P).redISub(B);
    var z = P.redSqr();
    z = z.redIAdd(z), z = z.redIAdd(z), z = z.redIAdd(z), n = O.redMul(L.redISub(e)).redISub(z);
  }
  return this.curve.jpoint(e, n, a);
};
JPoint$1.prototype._dbl = function() {
  var e = this.curve.a, n = this.x, a = this.y, c = this.z, o = c.redSqr().redSqr(), d = n.redSqr(), m = a.redSqr(), w = d.redAdd(d).redIAdd(d).redIAdd(e.redMul(o)), S = n.redAdd(n);
  S = S.redIAdd(S);
  var A = S.redMul(m), B = w.redSqr().redISub(A.redAdd(A)), P = A.redISub(B), I = m.redSqr();
  I = I.redIAdd(I), I = I.redIAdd(I), I = I.redIAdd(I);
  var O = w.redMul(P).redISub(I), L = a.redAdd(a).redMul(c);
  return this.curve.jpoint(B, O, L);
};
JPoint$1.prototype.trpl = function() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);
  var e = this.x.redSqr(), n = this.y.redSqr(), a = this.z.redSqr(), c = n.redSqr(), o = e.redAdd(e).redIAdd(e), d = o.redSqr(), m = this.x.redAdd(n).redSqr().redISub(e).redISub(c);
  m = m.redIAdd(m), m = m.redAdd(m).redIAdd(m), m = m.redISub(d);
  var w = m.redSqr(), S = c.redIAdd(c);
  S = S.redIAdd(S), S = S.redIAdd(S), S = S.redIAdd(S);
  var A = o.redIAdd(m).redSqr().redISub(d).redISub(w).redISub(S), B = n.redMul(A);
  B = B.redIAdd(B), B = B.redIAdd(B);
  var P = this.x.redMul(w).redISub(B);
  P = P.redIAdd(P), P = P.redIAdd(P);
  var I = this.y.redMul(A.redMul(S.redISub(A)).redISub(m.redMul(w)));
  I = I.redIAdd(I), I = I.redIAdd(I), I = I.redIAdd(I);
  var O = this.z.redAdd(m).redSqr().redISub(a).redISub(w);
  return this.curve.jpoint(P, I, O);
};
JPoint$1.prototype.mul = function(e, n) {
  return e = new BN$a(e, n), this.curve._wnafMul(this, e);
};
JPoint$1.prototype.eq = function(e) {
  if (e.type === "affine")
    return this.eq(e.toJ());
  if (this === e)
    return !0;
  var n = this.z.redSqr(), a = e.z.redSqr();
  if (this.x.redMul(a).redISub(e.x.redMul(n)).cmpn(0) !== 0)
    return !1;
  var c = n.redMul(this.z), o = a.redMul(e.z);
  return this.y.redMul(o).redISub(e.y.redMul(c)).cmpn(0) === 0;
};
JPoint$1.prototype.eqXToP = function(e) {
  var n = this.z.redSqr(), a = e.toRed(this.curve.red).redMul(n);
  if (this.x.cmp(a) === 0)
    return !0;
  for (var c = e.clone(), o = this.curve.redN.redMul(n); ; ) {
    if (c.iadd(this.curve.n), c.cmp(this.curve.p) >= 0)
      return !1;
    if (a.redIAdd(o), this.x.cmp(a) === 0)
      return !0;
  }
};
JPoint$1.prototype.inspect = function() {
  return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
};
JPoint$1.prototype.isInfinity = function() {
  return this.z.cmpn(0) === 0;
};
var BN$9 = bnExports$3, inherits$a = inherits_browserExports, Base$1 = base$6, utils$w = utils$A;
function MontCurve(t) {
  Base$1.call(this, "mont", t), this.a = new BN$9(t.a, 16).toRed(this.red), this.b = new BN$9(t.b, 16).toRed(this.red), this.i4 = new BN$9(4).toRed(this.red).redInvm(), this.two = new BN$9(2).toRed(this.red), this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits$a(MontCurve, Base$1);
var mont = MontCurve;
MontCurve.prototype.validate = function(e) {
  var n = e.normalize().x, a = n.redSqr(), c = a.redMul(n).redAdd(a.redMul(this.a)).redAdd(n), o = c.redSqrt();
  return o.redSqr().cmp(c) === 0;
};
function Point$3(t, e, n) {
  Base$1.BasePoint.call(this, t, "projective"), e === null && n === null ? (this.x = this.curve.one, this.z = this.curve.zero) : (this.x = new BN$9(e, 16), this.z = new BN$9(n, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)));
}
inherits$a(Point$3, Base$1.BasePoint);
MontCurve.prototype.decodePoint = function(e, n) {
  return this.point(utils$w.toArray(e, n), 1);
};
MontCurve.prototype.point = function(e, n) {
  return new Point$3(this, e, n);
};
MontCurve.prototype.pointFromJSON = function(e) {
  return Point$3.fromJSON(this, e);
};
Point$3.prototype.precompute = function() {
};
Point$3.prototype._encode = function() {
  return this.getX().toArray("be", this.curve.p.byteLength());
};
Point$3.fromJSON = function(e, n) {
  return new Point$3(e, n[0], n[1] || e.one);
};
Point$3.prototype.inspect = function() {
  return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
};
Point$3.prototype.isInfinity = function() {
  return this.z.cmpn(0) === 0;
};
Point$3.prototype.dbl = function() {
  var e = this.x.redAdd(this.z), n = e.redSqr(), a = this.x.redSub(this.z), c = a.redSqr(), o = n.redSub(c), d = n.redMul(c), m = o.redMul(c.redAdd(this.curve.a24.redMul(o)));
  return this.curve.point(d, m);
};
Point$3.prototype.add = function() {
  throw new Error("Not supported on Montgomery curve");
};
Point$3.prototype.diffAdd = function(e, n) {
  var a = this.x.redAdd(this.z), c = this.x.redSub(this.z), o = e.x.redAdd(e.z), d = e.x.redSub(e.z), m = d.redMul(a), w = o.redMul(c), S = n.z.redMul(m.redAdd(w).redSqr()), A = n.x.redMul(m.redISub(w).redSqr());
  return this.curve.point(S, A);
};
Point$3.prototype.mul = function(e) {
  for (var n = e.clone(), a = this, c = this.curve.point(null, null), o = this, d = []; n.cmpn(0) !== 0; n.iushrn(1))
    d.push(n.andln(1));
  for (var m = d.length - 1; m >= 0; m--)
    d[m] === 0 ? (a = a.diffAdd(c, o), c = c.dbl()) : (c = a.diffAdd(c, o), a = a.dbl());
  return c;
};
Point$3.prototype.mulAdd = function() {
  throw new Error("Not supported on Montgomery curve");
};
Point$3.prototype.jumlAdd = function() {
  throw new Error("Not supported on Montgomery curve");
};
Point$3.prototype.eq = function(e) {
  return this.getX().cmp(e.getX()) === 0;
};
Point$3.prototype.normalize = function() {
  return this.x = this.x.redMul(this.z.redInvm()), this.z = this.curve.one, this;
};
Point$3.prototype.getX = function() {
  return this.normalize(), this.x.fromRed();
};
var utils$v = utils$A, BN$8 = bnExports$3, inherits$9 = inherits_browserExports, Base = base$6, assert$i = utils$v.assert;
function EdwardsCurve(t) {
  this.twisted = (t.a | 0) !== 1, this.mOneA = this.twisted && (t.a | 0) === -1, this.extended = this.mOneA, Base.call(this, "edwards", t), this.a = new BN$8(t.a, 16).umod(this.red.m), this.a = this.a.toRed(this.red), this.c = new BN$8(t.c, 16).toRed(this.red), this.c2 = this.c.redSqr(), this.d = new BN$8(t.d, 16).toRed(this.red), this.dd = this.d.redAdd(this.d), assert$i(!this.twisted || this.c.fromRed().cmpn(1) === 0), this.oneC = (t.c | 0) === 1;
}
inherits$9(EdwardsCurve, Base);
var edwards = EdwardsCurve;
EdwardsCurve.prototype._mulA = function(e) {
  return this.mOneA ? e.redNeg() : this.a.redMul(e);
};
EdwardsCurve.prototype._mulC = function(e) {
  return this.oneC ? e : this.c.redMul(e);
};
EdwardsCurve.prototype.jpoint = function(e, n, a, c) {
  return this.point(e, n, a, c);
};
EdwardsCurve.prototype.pointFromX = function(e, n) {
  e = new BN$8(e, 16), e.red || (e = e.toRed(this.red));
  var a = e.redSqr(), c = this.c2.redSub(this.a.redMul(a)), o = this.one.redSub(this.c2.redMul(this.d).redMul(a)), d = c.redMul(o.redInvm()), m = d.redSqrt();
  if (m.redSqr().redSub(d).cmp(this.zero) !== 0)
    throw new Error("invalid point");
  var w = m.fromRed().isOdd();
  return (n && !w || !n && w) && (m = m.redNeg()), this.point(e, m);
};
EdwardsCurve.prototype.pointFromY = function(e, n) {
  e = new BN$8(e, 16), e.red || (e = e.toRed(this.red));
  var a = e.redSqr(), c = a.redSub(this.c2), o = a.redMul(this.d).redMul(this.c2).redSub(this.a), d = c.redMul(o.redInvm());
  if (d.cmp(this.zero) === 0) {
    if (n)
      throw new Error("invalid point");
    return this.point(this.zero, e);
  }
  var m = d.redSqrt();
  if (m.redSqr().redSub(d).cmp(this.zero) !== 0)
    throw new Error("invalid point");
  return m.fromRed().isOdd() !== n && (m = m.redNeg()), this.point(m, e);
};
EdwardsCurve.prototype.validate = function(e) {
  if (e.isInfinity())
    return !0;
  e.normalize();
  var n = e.x.redSqr(), a = e.y.redSqr(), c = n.redMul(this.a).redAdd(a), o = this.c2.redMul(this.one.redAdd(this.d.redMul(n).redMul(a)));
  return c.cmp(o) === 0;
};
function Point$2(t, e, n, a, c) {
  Base.BasePoint.call(this, t, "projective"), e === null && n === null && a === null ? (this.x = this.curve.zero, this.y = this.curve.one, this.z = this.curve.one, this.t = this.curve.zero, this.zOne = !0) : (this.x = new BN$8(e, 16), this.y = new BN$8(n, 16), this.z = a ? new BN$8(a, 16) : this.curve.one, this.t = c && new BN$8(c, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.t && !this.t.red && (this.t = this.t.toRed(this.curve.red)), this.zOne = this.z === this.curve.one, this.curve.extended && !this.t && (this.t = this.x.redMul(this.y), this.zOne || (this.t = this.t.redMul(this.z.redInvm()))));
}
inherits$9(Point$2, Base.BasePoint);
EdwardsCurve.prototype.pointFromJSON = function(e) {
  return Point$2.fromJSON(this, e);
};
EdwardsCurve.prototype.point = function(e, n, a, c) {
  return new Point$2(this, e, n, a, c);
};
Point$2.fromJSON = function(e, n) {
  return new Point$2(e, n[0], n[1], n[2]);
};
Point$2.prototype.inspect = function() {
  return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
};
Point$2.prototype.isInfinity = function() {
  return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
};
Point$2.prototype._extDbl = function() {
  var e = this.x.redSqr(), n = this.y.redSqr(), a = this.z.redSqr();
  a = a.redIAdd(a);
  var c = this.curve._mulA(e), o = this.x.redAdd(this.y).redSqr().redISub(e).redISub(n), d = c.redAdd(n), m = d.redSub(a), w = c.redSub(n), S = o.redMul(m), A = d.redMul(w), B = o.redMul(w), P = m.redMul(d);
  return this.curve.point(S, A, P, B);
};
Point$2.prototype._projDbl = function() {
  var e = this.x.redAdd(this.y).redSqr(), n = this.x.redSqr(), a = this.y.redSqr(), c, o, d, m, w, S;
  if (this.curve.twisted) {
    m = this.curve._mulA(n);
    var A = m.redAdd(a);
    this.zOne ? (c = e.redSub(n).redSub(a).redMul(A.redSub(this.curve.two)), o = A.redMul(m.redSub(a)), d = A.redSqr().redSub(A).redSub(A)) : (w = this.z.redSqr(), S = A.redSub(w).redISub(w), c = e.redSub(n).redISub(a).redMul(S), o = A.redMul(m.redSub(a)), d = A.redMul(S));
  } else
    m = n.redAdd(a), w = this.curve._mulC(this.z).redSqr(), S = m.redSub(w).redSub(w), c = this.curve._mulC(e.redISub(m)).redMul(S), o = this.curve._mulC(m).redMul(n.redISub(a)), d = m.redMul(S);
  return this.curve.point(c, o, d);
};
Point$2.prototype.dbl = function() {
  return this.isInfinity() ? this : this.curve.extended ? this._extDbl() : this._projDbl();
};
Point$2.prototype._extAdd = function(e) {
  var n = this.y.redSub(this.x).redMul(e.y.redSub(e.x)), a = this.y.redAdd(this.x).redMul(e.y.redAdd(e.x)), c = this.t.redMul(this.curve.dd).redMul(e.t), o = this.z.redMul(e.z.redAdd(e.z)), d = a.redSub(n), m = o.redSub(c), w = o.redAdd(c), S = a.redAdd(n), A = d.redMul(m), B = w.redMul(S), P = d.redMul(S), I = m.redMul(w);
  return this.curve.point(A, B, I, P);
};
Point$2.prototype._projAdd = function(e) {
  var n = this.z.redMul(e.z), a = n.redSqr(), c = this.x.redMul(e.x), o = this.y.redMul(e.y), d = this.curve.d.redMul(c).redMul(o), m = a.redSub(d), w = a.redAdd(d), S = this.x.redAdd(this.y).redMul(e.x.redAdd(e.y)).redISub(c).redISub(o), A = n.redMul(m).redMul(S), B, P;
  return this.curve.twisted ? (B = n.redMul(w).redMul(o.redSub(this.curve._mulA(c))), P = m.redMul(w)) : (B = n.redMul(w).redMul(o.redSub(c)), P = this.curve._mulC(m).redMul(w)), this.curve.point(A, B, P);
};
Point$2.prototype.add = function(e) {
  return this.isInfinity() ? e : e.isInfinity() ? this : this.curve.extended ? this._extAdd(e) : this._projAdd(e);
};
Point$2.prototype.mul = function(e) {
  return this._hasDoubles(e) ? this.curve._fixedNafMul(this, e) : this.curve._wnafMul(this, e);
};
Point$2.prototype.mulAdd = function(e, n, a) {
  return this.curve._wnafMulAdd(1, [this, n], [e, a], 2, !1);
};
Point$2.prototype.jmulAdd = function(e, n, a) {
  return this.curve._wnafMulAdd(1, [this, n], [e, a], 2, !0);
};
Point$2.prototype.normalize = function() {
  if (this.zOne)
    return this;
  var e = this.z.redInvm();
  return this.x = this.x.redMul(e), this.y = this.y.redMul(e), this.t && (this.t = this.t.redMul(e)), this.z = this.curve.one, this.zOne = !0, this;
};
Point$2.prototype.neg = function() {
  return this.curve.point(
    this.x.redNeg(),
    this.y,
    this.z,
    this.t && this.t.redNeg()
  );
};
Point$2.prototype.getX = function() {
  return this.normalize(), this.x.fromRed();
};
Point$2.prototype.getY = function() {
  return this.normalize(), this.y.fromRed();
};
Point$2.prototype.eq = function(e) {
  return this === e || this.getX().cmp(e.getX()) === 0 && this.getY().cmp(e.getY()) === 0;
};
Point$2.prototype.eqXToP = function(e) {
  var n = e.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(n) === 0)
    return !0;
  for (var a = e.clone(), c = this.curve.redN.redMul(this.z); ; ) {
    if (a.iadd(this.curve.n), a.cmp(this.curve.p) >= 0)
      return !1;
    if (n.redIAdd(c), this.x.cmp(n) === 0)
      return !0;
  }
};
Point$2.prototype.toP = Point$2.prototype.normalize;
Point$2.prototype.mixedAdd = Point$2.prototype.add;
(function(t) {
  var e = t;
  e.base = base$6, e.short = short, e.mont = mont, e.edwards = edwards;
})(curve);
var curves$1 = {}, hash$6 = {}, utils$u = {}, assert$h = minimalisticAssert$1, inherits$8 = inherits_browserExports;
utils$u.inherits = inherits$8;
function isSurrogatePair(t, e) {
  return (t.charCodeAt(e) & 64512) !== 55296 || e < 0 || e + 1 >= t.length ? !1 : (t.charCodeAt(e + 1) & 64512) === 56320;
}
function toArray$1(t, e) {
  if (Array.isArray(t))
    return t.slice();
  if (!t)
    return [];
  var n = [];
  if (typeof t == "string")
    if (e) {
      if (e === "hex")
        for (t = t.replace(/[^a-z0-9]+/ig, ""), t.length % 2 !== 0 && (t = "0" + t), c = 0; c < t.length; c += 2)
          n.push(parseInt(t[c] + t[c + 1], 16));
    } else
      for (var a = 0, c = 0; c < t.length; c++) {
        var o = t.charCodeAt(c);
        o < 128 ? n[a++] = o : o < 2048 ? (n[a++] = o >> 6 | 192, n[a++] = o & 63 | 128) : isSurrogatePair(t, c) ? (o = 65536 + ((o & 1023) << 10) + (t.charCodeAt(++c) & 1023), n[a++] = o >> 18 | 240, n[a++] = o >> 12 & 63 | 128, n[a++] = o >> 6 & 63 | 128, n[a++] = o & 63 | 128) : (n[a++] = o >> 12 | 224, n[a++] = o >> 6 & 63 | 128, n[a++] = o & 63 | 128);
      }
  else
    for (c = 0; c < t.length; c++)
      n[c] = t[c] | 0;
  return n;
}
utils$u.toArray = toArray$1;
function toHex$1(t) {
  for (var e = "", n = 0; n < t.length; n++)
    e += zero2(t[n].toString(16));
  return e;
}
utils$u.toHex = toHex$1;
function htonl(t) {
  var e = t >>> 24 | t >>> 8 & 65280 | t << 8 & 16711680 | (t & 255) << 24;
  return e >>> 0;
}
utils$u.htonl = htonl;
function toHex32(t, e) {
  for (var n = "", a = 0; a < t.length; a++) {
    var c = t[a];
    e === "little" && (c = htonl(c)), n += zero8(c.toString(16));
  }
  return n;
}
utils$u.toHex32 = toHex32;
function zero2(t) {
  return t.length === 1 ? "0" + t : t;
}
utils$u.zero2 = zero2;
function zero8(t) {
  return t.length === 7 ? "0" + t : t.length === 6 ? "00" + t : t.length === 5 ? "000" + t : t.length === 4 ? "0000" + t : t.length === 3 ? "00000" + t : t.length === 2 ? "000000" + t : t.length === 1 ? "0000000" + t : t;
}
utils$u.zero8 = zero8;
function join32(t, e, n, a) {
  var c = n - e;
  assert$h(c % 4 === 0);
  for (var o = new Array(c / 4), d = 0, m = e; d < o.length; d++, m += 4) {
    var w;
    a === "big" ? w = t[m] << 24 | t[m + 1] << 16 | t[m + 2] << 8 | t[m + 3] : w = t[m + 3] << 24 | t[m + 2] << 16 | t[m + 1] << 8 | t[m], o[d] = w >>> 0;
  }
  return o;
}
utils$u.join32 = join32;
function split32(t, e) {
  for (var n = new Array(t.length * 4), a = 0, c = 0; a < t.length; a++, c += 4) {
    var o = t[a];
    e === "big" ? (n[c] = o >>> 24, n[c + 1] = o >>> 16 & 255, n[c + 2] = o >>> 8 & 255, n[c + 3] = o & 255) : (n[c + 3] = o >>> 24, n[c + 2] = o >>> 16 & 255, n[c + 1] = o >>> 8 & 255, n[c] = o & 255);
  }
  return n;
}
utils$u.split32 = split32;
function rotr32$1(t, e) {
  return t >>> e | t << 32 - e;
}
utils$u.rotr32 = rotr32$1;
function rotl32$2(t, e) {
  return t << e | t >>> 32 - e;
}
utils$u.rotl32 = rotl32$2;
function sum32$3(t, e) {
  return t + e >>> 0;
}
utils$u.sum32 = sum32$3;
function sum32_3$1(t, e, n) {
  return t + e + n >>> 0;
}
utils$u.sum32_3 = sum32_3$1;
function sum32_4$2(t, e, n, a) {
  return t + e + n + a >>> 0;
}
utils$u.sum32_4 = sum32_4$2;
function sum32_5$2(t, e, n, a, c) {
  return t + e + n + a + c >>> 0;
}
utils$u.sum32_5 = sum32_5$2;
function sum64$1(t, e, n, a) {
  var c = t[e], o = t[e + 1], d = a + o >>> 0, m = (d < a ? 1 : 0) + n + c;
  t[e] = m >>> 0, t[e + 1] = d;
}
utils$u.sum64 = sum64$1;
function sum64_hi$1(t, e, n, a) {
  var c = e + a >>> 0, o = (c < e ? 1 : 0) + t + n;
  return o >>> 0;
}
utils$u.sum64_hi = sum64_hi$1;
function sum64_lo$1(t, e, n, a) {
  var c = e + a;
  return c >>> 0;
}
utils$u.sum64_lo = sum64_lo$1;
function sum64_4_hi$1(t, e, n, a, c, o, d, m) {
  var w = 0, S = e;
  S = S + a >>> 0, w += S < e ? 1 : 0, S = S + o >>> 0, w += S < o ? 1 : 0, S = S + m >>> 0, w += S < m ? 1 : 0;
  var A = t + n + c + d + w;
  return A >>> 0;
}
utils$u.sum64_4_hi = sum64_4_hi$1;
function sum64_4_lo$1(t, e, n, a, c, o, d, m) {
  var w = e + a + o + m;
  return w >>> 0;
}
utils$u.sum64_4_lo = sum64_4_lo$1;
function sum64_5_hi$1(t, e, n, a, c, o, d, m, w, S) {
  var A = 0, B = e;
  B = B + a >>> 0, A += B < e ? 1 : 0, B = B + o >>> 0, A += B < o ? 1 : 0, B = B + m >>> 0, A += B < m ? 1 : 0, B = B + S >>> 0, A += B < S ? 1 : 0;
  var P = t + n + c + d + w + A;
  return P >>> 0;
}
utils$u.sum64_5_hi = sum64_5_hi$1;
function sum64_5_lo$1(t, e, n, a, c, o, d, m, w, S) {
  var A = e + a + o + m + S;
  return A >>> 0;
}
utils$u.sum64_5_lo = sum64_5_lo$1;
function rotr64_hi$1(t, e, n) {
  var a = e << 32 - n | t >>> n;
  return a >>> 0;
}
utils$u.rotr64_hi = rotr64_hi$1;
function rotr64_lo$1(t, e, n) {
  var a = t << 32 - n | e >>> n;
  return a >>> 0;
}
utils$u.rotr64_lo = rotr64_lo$1;
function shr64_hi$1(t, e, n) {
  return t >>> n;
}
utils$u.shr64_hi = shr64_hi$1;
function shr64_lo$1(t, e, n) {
  var a = t << 32 - n | e >>> n;
  return a >>> 0;
}
utils$u.shr64_lo = shr64_lo$1;
var common$5 = {}, utils$t = utils$u, assert$g = minimalisticAssert$1;
function BlockHash$4() {
  this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = "big", this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;
}
common$5.BlockHash = BlockHash$4;
BlockHash$4.prototype.update = function(e, n) {
  if (e = utils$t.toArray(e, n), this.pending ? this.pending = this.pending.concat(e) : this.pending = e, this.pendingTotal += e.length, this.pending.length >= this._delta8) {
    e = this.pending;
    var a = e.length % this._delta8;
    this.pending = e.slice(e.length - a, e.length), this.pending.length === 0 && (this.pending = null), e = utils$t.join32(e, 0, e.length - a, this.endian);
    for (var c = 0; c < e.length; c += this._delta32)
      this._update(e, c, c + this._delta32);
  }
  return this;
};
BlockHash$4.prototype.digest = function(e) {
  return this.update(this._pad()), assert$g(this.pending === null), this._digest(e);
};
BlockHash$4.prototype._pad = function() {
  var e = this.pendingTotal, n = this._delta8, a = n - (e + this.padLength) % n, c = new Array(a + this.padLength);
  c[0] = 128;
  for (var o = 1; o < a; o++)
    c[o] = 0;
  if (e <<= 3, this.endian === "big") {
    for (var d = 8; d < this.padLength; d++)
      c[o++] = 0;
    c[o++] = 0, c[o++] = 0, c[o++] = 0, c[o++] = 0, c[o++] = e >>> 24 & 255, c[o++] = e >>> 16 & 255, c[o++] = e >>> 8 & 255, c[o++] = e & 255;
  } else
    for (c[o++] = e & 255, c[o++] = e >>> 8 & 255, c[o++] = e >>> 16 & 255, c[o++] = e >>> 24 & 255, c[o++] = 0, c[o++] = 0, c[o++] = 0, c[o++] = 0, d = 8; d < this.padLength; d++)
      c[o++] = 0;
  return c;
};
var sha = {}, common$4 = {}, utils$s = utils$u, rotr32 = utils$s.rotr32;
function ft_1$1(t, e, n, a) {
  if (t === 0)
    return ch32$1(e, n, a);
  if (t === 1 || t === 3)
    return p32(e, n, a);
  if (t === 2)
    return maj32$1(e, n, a);
}
common$4.ft_1 = ft_1$1;
function ch32$1(t, e, n) {
  return t & e ^ ~t & n;
}
common$4.ch32 = ch32$1;
function maj32$1(t, e, n) {
  return t & e ^ t & n ^ e & n;
}
common$4.maj32 = maj32$1;
function p32(t, e, n) {
  return t ^ e ^ n;
}
common$4.p32 = p32;
function s0_256$1(t) {
  return rotr32(t, 2) ^ rotr32(t, 13) ^ rotr32(t, 22);
}
common$4.s0_256 = s0_256$1;
function s1_256$1(t) {
  return rotr32(t, 6) ^ rotr32(t, 11) ^ rotr32(t, 25);
}
common$4.s1_256 = s1_256$1;
function g0_256$1(t) {
  return rotr32(t, 7) ^ rotr32(t, 18) ^ t >>> 3;
}
common$4.g0_256 = g0_256$1;
function g1_256$1(t) {
  return rotr32(t, 17) ^ rotr32(t, 19) ^ t >>> 10;
}
common$4.g1_256 = g1_256$1;
var utils$r = utils$u, common$3 = common$5, shaCommon$1 = common$4, rotl32$1 = utils$r.rotl32, sum32$2 = utils$r.sum32, sum32_5$1 = utils$r.sum32_5, ft_1 = shaCommon$1.ft_1, BlockHash$3 = common$3.BlockHash, sha1_K = [
  1518500249,
  1859775393,
  2400959708,
  3395469782
];
function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();
  BlockHash$3.call(this), this.h = [
    1732584193,
    4023233417,
    2562383102,
    271733878,
    3285377520
  ], this.W = new Array(80);
}
utils$r.inherits(SHA1, BlockHash$3);
var _1 = SHA1;
SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;
SHA1.prototype._update = function(e, n) {
  for (var a = this.W, c = 0; c < 16; c++)
    a[c] = e[n + c];
  for (; c < a.length; c++)
    a[c] = rotl32$1(a[c - 3] ^ a[c - 8] ^ a[c - 14] ^ a[c - 16], 1);
  var o = this.h[0], d = this.h[1], m = this.h[2], w = this.h[3], S = this.h[4];
  for (c = 0; c < a.length; c++) {
    var A = ~~(c / 20), B = sum32_5$1(rotl32$1(o, 5), ft_1(A, d, m, w), S, a[c], sha1_K[A]);
    S = w, w = m, m = rotl32$1(d, 30), d = o, o = B;
  }
  this.h[0] = sum32$2(this.h[0], o), this.h[1] = sum32$2(this.h[1], d), this.h[2] = sum32$2(this.h[2], m), this.h[3] = sum32$2(this.h[3], w), this.h[4] = sum32$2(this.h[4], S);
};
SHA1.prototype._digest = function(e) {
  return e === "hex" ? utils$r.toHex32(this.h, "big") : utils$r.split32(this.h, "big");
};
var utils$q = utils$u, common$2 = common$5, shaCommon = common$4, assert$f = minimalisticAssert$1, sum32$1 = utils$q.sum32, sum32_4$1 = utils$q.sum32_4, sum32_5 = utils$q.sum32_5, ch32 = shaCommon.ch32, maj32 = shaCommon.maj32, s0_256 = shaCommon.s0_256, s1_256 = shaCommon.s1_256, g0_256 = shaCommon.g0_256, g1_256 = shaCommon.g1_256, BlockHash$2 = common$2.BlockHash, sha256_K = [
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
];
function SHA256$3() {
  if (!(this instanceof SHA256$3))
    return new SHA256$3();
  BlockHash$2.call(this), this.h = [
    1779033703,
    3144134277,
    1013904242,
    2773480762,
    1359893119,
    2600822924,
    528734635,
    1541459225
  ], this.k = sha256_K, this.W = new Array(64);
}
utils$q.inherits(SHA256$3, BlockHash$2);
var _256 = SHA256$3;
SHA256$3.blockSize = 512;
SHA256$3.outSize = 256;
SHA256$3.hmacStrength = 192;
SHA256$3.padLength = 64;
SHA256$3.prototype._update = function(e, n) {
  for (var a = this.W, c = 0; c < 16; c++)
    a[c] = e[n + c];
  for (; c < a.length; c++)
    a[c] = sum32_4$1(g1_256(a[c - 2]), a[c - 7], g0_256(a[c - 15]), a[c - 16]);
  var o = this.h[0], d = this.h[1], m = this.h[2], w = this.h[3], S = this.h[4], A = this.h[5], B = this.h[6], P = this.h[7];
  for (assert$f(this.k.length === a.length), c = 0; c < a.length; c++) {
    var I = sum32_5(P, s1_256(S), ch32(S, A, B), this.k[c], a[c]), O = sum32$1(s0_256(o), maj32(o, d, m));
    P = B, B = A, A = S, S = sum32$1(w, I), w = m, m = d, d = o, o = sum32$1(I, O);
  }
  this.h[0] = sum32$1(this.h[0], o), this.h[1] = sum32$1(this.h[1], d), this.h[2] = sum32$1(this.h[2], m), this.h[3] = sum32$1(this.h[3], w), this.h[4] = sum32$1(this.h[4], S), this.h[5] = sum32$1(this.h[5], A), this.h[6] = sum32$1(this.h[6], B), this.h[7] = sum32$1(this.h[7], P);
};
SHA256$3.prototype._digest = function(e) {
  return e === "hex" ? utils$q.toHex32(this.h, "big") : utils$q.split32(this.h, "big");
};
var utils$p = utils$u, SHA256$2 = _256;
function SHA224$1() {
  if (!(this instanceof SHA224$1))
    return new SHA224$1();
  SHA256$2.call(this), this.h = [
    3238371032,
    914150663,
    812702999,
    4144912697,
    4290775857,
    1750603025,
    1694076839,
    3204075428
  ];
}
utils$p.inherits(SHA224$1, SHA256$2);
var _224 = SHA224$1;
SHA224$1.blockSize = 512;
SHA224$1.outSize = 224;
SHA224$1.hmacStrength = 192;
SHA224$1.padLength = 64;
SHA224$1.prototype._digest = function(e) {
  return e === "hex" ? utils$p.toHex32(this.h.slice(0, 7), "big") : utils$p.split32(this.h.slice(0, 7), "big");
};
var utils$o = utils$u, common$1 = common$5, assert$e = minimalisticAssert$1, rotr64_hi = utils$o.rotr64_hi, rotr64_lo = utils$o.rotr64_lo, shr64_hi = utils$o.shr64_hi, shr64_lo = utils$o.shr64_lo, sum64 = utils$o.sum64, sum64_hi = utils$o.sum64_hi, sum64_lo = utils$o.sum64_lo, sum64_4_hi = utils$o.sum64_4_hi, sum64_4_lo = utils$o.sum64_4_lo, sum64_5_hi = utils$o.sum64_5_hi, sum64_5_lo = utils$o.sum64_5_lo, BlockHash$1 = common$1.BlockHash, sha512_K = [
  1116352408,
  3609767458,
  1899447441,
  602891725,
  3049323471,
  3964484399,
  3921009573,
  2173295548,
  961987163,
  4081628472,
  1508970993,
  3053834265,
  2453635748,
  2937671579,
  2870763221,
  3664609560,
  3624381080,
  2734883394,
  310598401,
  1164996542,
  607225278,
  1323610764,
  1426881987,
  3590304994,
  1925078388,
  4068182383,
  2162078206,
  991336113,
  2614888103,
  633803317,
  3248222580,
  3479774868,
  3835390401,
  2666613458,
  4022224774,
  944711139,
  264347078,
  2341262773,
  604807628,
  2007800933,
  770255983,
  1495990901,
  1249150122,
  1856431235,
  1555081692,
  3175218132,
  1996064986,
  2198950837,
  2554220882,
  3999719339,
  2821834349,
  766784016,
  2952996808,
  2566594879,
  3210313671,
  3203337956,
  3336571891,
  1034457026,
  3584528711,
  2466948901,
  113926993,
  3758326383,
  338241895,
  168717936,
  666307205,
  1188179964,
  773529912,
  1546045734,
  1294757372,
  1522805485,
  1396182291,
  2643833823,
  1695183700,
  2343527390,
  1986661051,
  1014477480,
  2177026350,
  1206759142,
  2456956037,
  344077627,
  2730485921,
  1290863460,
  2820302411,
  3158454273,
  3259730800,
  3505952657,
  3345764771,
  106217008,
  3516065817,
  3606008344,
  3600352804,
  1432725776,
  4094571909,
  1467031594,
  275423344,
  851169720,
  430227734,
  3100823752,
  506948616,
  1363258195,
  659060556,
  3750685593,
  883997877,
  3785050280,
  958139571,
  3318307427,
  1322822218,
  3812723403,
  1537002063,
  2003034995,
  1747873779,
  3602036899,
  1955562222,
  1575990012,
  2024104815,
  1125592928,
  2227730452,
  2716904306,
  2361852424,
  442776044,
  2428436474,
  593698344,
  2756734187,
  3733110249,
  3204031479,
  2999351573,
  3329325298,
  3815920427,
  3391569614,
  3928383900,
  3515267271,
  566280711,
  3940187606,
  3454069534,
  4118630271,
  4000239992,
  116418474,
  1914138554,
  174292421,
  2731055270,
  289380356,
  3203993006,
  460393269,
  320620315,
  685471733,
  587496836,
  852142971,
  1086792851,
  1017036298,
  365543100,
  1126000580,
  2618297676,
  1288033470,
  3409855158,
  1501505948,
  4234509866,
  1607167915,
  987167468,
  1816402316,
  1246189591
];
function SHA512$4() {
  if (!(this instanceof SHA512$4))
    return new SHA512$4();
  BlockHash$1.call(this), this.h = [
    1779033703,
    4089235720,
    3144134277,
    2227873595,
    1013904242,
    4271175723,
    2773480762,
    1595750129,
    1359893119,
    2917565137,
    2600822924,
    725511199,
    528734635,
    4215389547,
    1541459225,
    327033209
  ], this.k = sha512_K, this.W = new Array(160);
}
utils$o.inherits(SHA512$4, BlockHash$1);
var _512 = SHA512$4;
SHA512$4.blockSize = 1024;
SHA512$4.outSize = 512;
SHA512$4.hmacStrength = 192;
SHA512$4.padLength = 128;
SHA512$4.prototype._prepareBlock = function(e, n) {
  for (var a = this.W, c = 0; c < 32; c++)
    a[c] = e[n + c];
  for (; c < a.length; c += 2) {
    var o = g1_512_hi(a[c - 4], a[c - 3]), d = g1_512_lo(a[c - 4], a[c - 3]), m = a[c - 14], w = a[c - 13], S = g0_512_hi(a[c - 30], a[c - 29]), A = g0_512_lo(a[c - 30], a[c - 29]), B = a[c - 32], P = a[c - 31];
    a[c] = sum64_4_hi(
      o,
      d,
      m,
      w,
      S,
      A,
      B,
      P
    ), a[c + 1] = sum64_4_lo(
      o,
      d,
      m,
      w,
      S,
      A,
      B,
      P
    );
  }
};
SHA512$4.prototype._update = function(e, n) {
  this._prepareBlock(e, n);
  var a = this.W, c = this.h[0], o = this.h[1], d = this.h[2], m = this.h[3], w = this.h[4], S = this.h[5], A = this.h[6], B = this.h[7], P = this.h[8], I = this.h[9], O = this.h[10], L = this.h[11], C = this.h[12], z = this.h[13], q = this.h[14], Z = this.h[15];
  assert$e(this.k.length === a.length);
  for (var X = 0; X < a.length; X += 2) {
    var ie = q, fe = Z, ye = s1_512_hi(P, I), j = s1_512_lo(P, I), V = ch64_hi(P, I, O, L, C), ae = ch64_lo(P, I, O, L, C, z), _ = this.k[X], u = this.k[X + 1], h = a[X], p = a[X + 1], y = sum64_5_hi(
      ie,
      fe,
      ye,
      j,
      V,
      ae,
      _,
      u,
      h,
      p
    ), v = sum64_5_lo(
      ie,
      fe,
      ye,
      j,
      V,
      ae,
      _,
      u,
      h,
      p
    );
    ie = s0_512_hi(c, o), fe = s0_512_lo(c, o), ye = maj64_hi(c, o, d, m, w), j = maj64_lo(c, o, d, m, w, S);
    var $ = sum64_hi(ie, fe, ye, j), E = sum64_lo(ie, fe, ye, j);
    q = C, Z = z, C = O, z = L, O = P, L = I, P = sum64_hi(A, B, y, v), I = sum64_lo(B, B, y, v), A = w, B = S, w = d, S = m, d = c, m = o, c = sum64_hi(y, v, $, E), o = sum64_lo(y, v, $, E);
  }
  sum64(this.h, 0, c, o), sum64(this.h, 2, d, m), sum64(this.h, 4, w, S), sum64(this.h, 6, A, B), sum64(this.h, 8, P, I), sum64(this.h, 10, O, L), sum64(this.h, 12, C, z), sum64(this.h, 14, q, Z);
};
SHA512$4.prototype._digest = function(e) {
  return e === "hex" ? utils$o.toHex32(this.h, "big") : utils$o.split32(this.h, "big");
};
function ch64_hi(t, e, n, a, c) {
  var o = t & n ^ ~t & c;
  return o < 0 && (o += 4294967296), o;
}
function ch64_lo(t, e, n, a, c, o) {
  var d = e & a ^ ~e & o;
  return d < 0 && (d += 4294967296), d;
}
function maj64_hi(t, e, n, a, c) {
  var o = t & n ^ t & c ^ n & c;
  return o < 0 && (o += 4294967296), o;
}
function maj64_lo(t, e, n, a, c, o) {
  var d = e & a ^ e & o ^ a & o;
  return d < 0 && (d += 4294967296), d;
}
function s0_512_hi(t, e) {
  var n = rotr64_hi(t, e, 28), a = rotr64_hi(e, t, 2), c = rotr64_hi(e, t, 7), o = n ^ a ^ c;
  return o < 0 && (o += 4294967296), o;
}
function s0_512_lo(t, e) {
  var n = rotr64_lo(t, e, 28), a = rotr64_lo(e, t, 2), c = rotr64_lo(e, t, 7), o = n ^ a ^ c;
  return o < 0 && (o += 4294967296), o;
}
function s1_512_hi(t, e) {
  var n = rotr64_hi(t, e, 14), a = rotr64_hi(t, e, 18), c = rotr64_hi(e, t, 9), o = n ^ a ^ c;
  return o < 0 && (o += 4294967296), o;
}
function s1_512_lo(t, e) {
  var n = rotr64_lo(t, e, 14), a = rotr64_lo(t, e, 18), c = rotr64_lo(e, t, 9), o = n ^ a ^ c;
  return o < 0 && (o += 4294967296), o;
}
function g0_512_hi(t, e) {
  var n = rotr64_hi(t, e, 1), a = rotr64_hi(t, e, 8), c = shr64_hi(t, e, 7), o = n ^ a ^ c;
  return o < 0 && (o += 4294967296), o;
}
function g0_512_lo(t, e) {
  var n = rotr64_lo(t, e, 1), a = rotr64_lo(t, e, 8), c = shr64_lo(t, e, 7), o = n ^ a ^ c;
  return o < 0 && (o += 4294967296), o;
}
function g1_512_hi(t, e) {
  var n = rotr64_hi(t, e, 19), a = rotr64_hi(e, t, 29), c = shr64_hi(t, e, 6), o = n ^ a ^ c;
  return o < 0 && (o += 4294967296), o;
}
function g1_512_lo(t, e) {
  var n = rotr64_lo(t, e, 19), a = rotr64_lo(e, t, 29), c = shr64_lo(t, e, 6), o = n ^ a ^ c;
  return o < 0 && (o += 4294967296), o;
}
var utils$n = utils$u, SHA512$3 = _512;
function SHA384$2() {
  if (!(this instanceof SHA384$2))
    return new SHA384$2();
  SHA512$3.call(this), this.h = [
    3418070365,
    3238371032,
    1654270250,
    914150663,
    2438529370,
    812702999,
    355462360,
    4144912697,
    1731405415,
    4290775857,
    2394180231,
    1750603025,
    3675008525,
    1694076839,
    1203062813,
    3204075428
  ];
}
utils$n.inherits(SHA384$2, SHA512$3);
var _384 = SHA384$2;
SHA384$2.blockSize = 1024;
SHA384$2.outSize = 384;
SHA384$2.hmacStrength = 192;
SHA384$2.padLength = 128;
SHA384$2.prototype._digest = function(e) {
  return e === "hex" ? utils$n.toHex32(this.h.slice(0, 12), "big") : utils$n.split32(this.h.slice(0, 12), "big");
};
sha.sha1 = _1;
sha.sha224 = _224;
sha.sha256 = _256;
sha.sha384 = _384;
sha.sha512 = _512;
var ripemd = {}, utils$m = utils$u, common = common$5, rotl32 = utils$m.rotl32, sum32 = utils$m.sum32, sum32_3 = utils$m.sum32_3, sum32_4 = utils$m.sum32_4, BlockHash = common.BlockHash;
function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();
  BlockHash.call(this), this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.endian = "little";
}
utils$m.inherits(RIPEMD160, BlockHash);
ripemd.ripemd160 = RIPEMD160;
RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;
RIPEMD160.prototype._update = function(e, n) {
  for (var a = this.h[0], c = this.h[1], o = this.h[2], d = this.h[3], m = this.h[4], w = a, S = c, A = o, B = d, P = m, I = 0; I < 80; I++) {
    var O = sum32(
      rotl32(
        sum32_4(a, f$1(I, c, o, d), e[r[I] + n], K(I)),
        s[I]
      ),
      m
    );
    a = m, m = d, d = rotl32(o, 10), o = c, c = O, O = sum32(
      rotl32(
        sum32_4(w, f$1(79 - I, S, A, B), e[rh[I] + n], Kh(I)),
        sh[I]
      ),
      P
    ), w = P, P = B, B = rotl32(A, 10), A = S, S = O;
  }
  O = sum32_3(this.h[1], o, B), this.h[1] = sum32_3(this.h[2], d, P), this.h[2] = sum32_3(this.h[3], m, w), this.h[3] = sum32_3(this.h[4], a, S), this.h[4] = sum32_3(this.h[0], c, A), this.h[0] = O;
};
RIPEMD160.prototype._digest = function(e) {
  return e === "hex" ? utils$m.toHex32(this.h, "little") : utils$m.split32(this.h, "little");
};
function f$1(t, e, n, a) {
  return t <= 15 ? e ^ n ^ a : t <= 31 ? e & n | ~e & a : t <= 47 ? (e | ~n) ^ a : t <= 63 ? e & a | n & ~a : e ^ (n | ~a);
}
function K(t) {
  return t <= 15 ? 0 : t <= 31 ? 1518500249 : t <= 47 ? 1859775393 : t <= 63 ? 2400959708 : 2840853838;
}
function Kh(t) {
  return t <= 15 ? 1352829926 : t <= 31 ? 1548603684 : t <= 47 ? 1836072691 : t <= 63 ? 2053994217 : 0;
}
var r = [
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  7,
  4,
  13,
  1,
  10,
  6,
  15,
  3,
  12,
  0,
  9,
  5,
  2,
  14,
  11,
  8,
  3,
  10,
  14,
  4,
  9,
  15,
  8,
  1,
  2,
  7,
  0,
  6,
  13,
  11,
  5,
  12,
  1,
  9,
  11,
  10,
  0,
  8,
  12,
  4,
  13,
  3,
  7,
  15,
  14,
  5,
  6,
  2,
  4,
  0,
  5,
  9,
  7,
  12,
  2,
  10,
  14,
  1,
  3,
  8,
  11,
  6,
  15,
  13
], rh = [
  5,
  14,
  7,
  0,
  9,
  2,
  11,
  4,
  13,
  6,
  15,
  8,
  1,
  10,
  3,
  12,
  6,
  11,
  3,
  7,
  0,
  13,
  5,
  10,
  14,
  15,
  8,
  12,
  4,
  9,
  1,
  2,
  15,
  5,
  1,
  3,
  7,
  14,
  6,
  9,
  11,
  8,
  12,
  2,
  10,
  0,
  4,
  13,
  8,
  6,
  4,
  1,
  3,
  11,
  15,
  0,
  5,
  12,
  2,
  13,
  9,
  7,
  10,
  14,
  12,
  15,
  10,
  4,
  1,
  5,
  8,
  7,
  6,
  2,
  13,
  14,
  0,
  3,
  9,
  11
], s = [
  11,
  14,
  15,
  12,
  5,
  8,
  7,
  9,
  11,
  13,
  14,
  15,
  6,
  7,
  9,
  8,
  7,
  6,
  8,
  13,
  11,
  9,
  7,
  15,
  7,
  12,
  15,
  9,
  11,
  7,
  13,
  12,
  11,
  13,
  6,
  7,
  14,
  9,
  13,
  15,
  14,
  8,
  13,
  6,
  5,
  12,
  7,
  5,
  11,
  12,
  14,
  15,
  14,
  15,
  9,
  8,
  9,
  14,
  5,
  6,
  8,
  6,
  5,
  12,
  9,
  15,
  5,
  11,
  6,
  8,
  13,
  12,
  5,
  12,
  13,
  14,
  11,
  8,
  5,
  6
], sh = [
  8,
  9,
  9,
  11,
  13,
  15,
  15,
  5,
  7,
  7,
  8,
  11,
  14,
  14,
  12,
  6,
  9,
  13,
  15,
  7,
  12,
  8,
  9,
  11,
  7,
  7,
  12,
  7,
  6,
  15,
  13,
  11,
  9,
  7,
  15,
  11,
  8,
  6,
  6,
  14,
  12,
  13,
  5,
  14,
  13,
  13,
  7,
  5,
  15,
  5,
  8,
  11,
  14,
  14,
  6,
  14,
  6,
  9,
  12,
  9,
  12,
  5,
  15,
  8,
  8,
  5,
  12,
  9,
  12,
  5,
  14,
  6,
  8,
  13,
  6,
  5,
  15,
  13,
  11,
  11
], utils$l = utils$u, assert$d = minimalisticAssert$1;
function Hmac(t, e, n) {
  if (!(this instanceof Hmac))
    return new Hmac(t, e, n);
  this.Hash = t, this.blockSize = t.blockSize / 8, this.outSize = t.outSize / 8, this.inner = null, this.outer = null, this._init(utils$l.toArray(e, n));
}
var hmac$3 = Hmac;
Hmac.prototype._init = function(e) {
  e.length > this.blockSize && (e = new this.Hash().update(e).digest()), assert$d(e.length <= this.blockSize);
  for (var n = e.length; n < this.blockSize; n++)
    e.push(0);
  for (n = 0; n < e.length; n++)
    e[n] ^= 54;
  for (this.inner = new this.Hash().update(e), n = 0; n < e.length; n++)
    e[n] ^= 106;
  this.outer = new this.Hash().update(e);
};
Hmac.prototype.update = function(e, n) {
  return this.inner.update(e, n), this;
};
Hmac.prototype.digest = function(e) {
  return this.outer.update(this.inner.digest()), this.outer.digest(e);
};
(function(t) {
  var e = t;
  e.utils = utils$u, e.common = common$5, e.sha = sha, e.ripemd = ripemd, e.hmac = hmac$3, e.sha1 = e.sha.sha1, e.sha256 = e.sha.sha256, e.sha224 = e.sha.sha224, e.sha384 = e.sha.sha384, e.sha512 = e.sha.sha512, e.ripemd160 = e.ripemd.ripemd160;
})(hash$6);
const hash$5 = /* @__PURE__ */ getDefaultExportFromCjs$2(hash$6);
var secp256k1$2, hasRequiredSecp256k1;
function requireSecp256k1() {
  return hasRequiredSecp256k1 || (hasRequiredSecp256k1 = 1, secp256k1$2 = {
    doubles: {
      step: 4,
      points: [
        [
          "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
          "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
        ],
        [
          "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
          "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
        ],
        [
          "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
          "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
        ],
        [
          "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
          "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
        ],
        [
          "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
          "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
        ],
        [
          "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
          "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
        ],
        [
          "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
          "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
        ],
        [
          "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
          "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
        ],
        [
          "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
          "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
        ],
        [
          "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
          "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
        ],
        [
          "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
          "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
        ],
        [
          "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
          "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
        ],
        [
          "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
          "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
        ],
        [
          "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
          "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
        ],
        [
          "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
          "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
        ],
        [
          "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
          "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
        ],
        [
          "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
          "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
        ],
        [
          "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
          "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
        ],
        [
          "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
          "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
        ],
        [
          "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
          "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
        ],
        [
          "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
          "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
        ],
        [
          "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
          "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
        ],
        [
          "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
          "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
        ],
        [
          "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
          "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
        ],
        [
          "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
          "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
        ],
        [
          "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
          "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
        ],
        [
          "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
          "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
        ],
        [
          "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
          "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
        ],
        [
          "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
          "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
        ],
        [
          "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
          "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
        ],
        [
          "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
          "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
        ],
        [
          "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
          "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
        ],
        [
          "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
          "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
        ],
        [
          "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
          "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
        ],
        [
          "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
          "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
        ],
        [
          "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
          "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
        ],
        [
          "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
          "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
        ],
        [
          "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
          "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
        ],
        [
          "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
          "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
        ],
        [
          "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
          "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
        ],
        [
          "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
          "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
        ],
        [
          "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
          "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
        ],
        [
          "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
          "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
        ],
        [
          "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
          "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
        ],
        [
          "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
          "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
        ],
        [
          "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
          "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
        ],
        [
          "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
          "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
        ],
        [
          "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
          "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
        ],
        [
          "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
          "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
        ],
        [
          "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
          "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
        ],
        [
          "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
          "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
        ],
        [
          "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
          "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
        ],
        [
          "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
          "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
        ],
        [
          "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
          "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
        ],
        [
          "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
          "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
        ],
        [
          "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
          "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
        ],
        [
          "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
          "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
        ],
        [
          "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
          "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
        ],
        [
          "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
          "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
        ],
        [
          "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
          "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
        ],
        [
          "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
          "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
        ],
        [
          "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
          "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
        ],
        [
          "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
          "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
        ],
        [
          "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
          "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
        ],
        [
          "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
          "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
        ]
      ]
    },
    naf: {
      wnd: 7,
      points: [
        [
          "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
          "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
        ],
        [
          "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
          "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
        ],
        [
          "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
          "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
        ],
        [
          "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
          "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
        ],
        [
          "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
          "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
        ],
        [
          "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
          "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
        ],
        [
          "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
          "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
        ],
        [
          "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
          "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
        ],
        [
          "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
          "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
        ],
        [
          "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
          "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
        ],
        [
          "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
          "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
        ],
        [
          "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
          "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
        ],
        [
          "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
          "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
        ],
        [
          "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
          "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
        ],
        [
          "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
          "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
        ],
        [
          "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
          "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
        ],
        [
          "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
          "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
        ],
        [
          "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
          "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
        ],
        [
          "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
          "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
        ],
        [
          "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
          "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
        ],
        [
          "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
          "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
        ],
        [
          "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
          "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
        ],
        [
          "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
          "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
        ],
        [
          "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
          "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
        ],
        [
          "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
          "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
        ],
        [
          "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
          "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
        ],
        [
          "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
          "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
        ],
        [
          "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
          "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
        ],
        [
          "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
          "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
        ],
        [
          "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
          "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
        ],
        [
          "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
          "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
        ],
        [
          "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
          "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
        ],
        [
          "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
          "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
        ],
        [
          "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
          "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
        ],
        [
          "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
          "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
        ],
        [
          "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
          "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
        ],
        [
          "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
          "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
        ],
        [
          "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
          "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
        ],
        [
          "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
          "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
        ],
        [
          "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
          "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
        ],
        [
          "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
          "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
        ],
        [
          "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
          "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
        ],
        [
          "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
          "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
        ],
        [
          "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
          "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
        ],
        [
          "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
          "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
        ],
        [
          "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
          "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
        ],
        [
          "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
          "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
        ],
        [
          "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
          "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
        ],
        [
          "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
          "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
        ],
        [
          "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
          "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
        ],
        [
          "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
          "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
        ],
        [
          "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
          "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
        ],
        [
          "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
          "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
        ],
        [
          "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
          "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
        ],
        [
          "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
          "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
        ],
        [
          "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
          "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
        ],
        [
          "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
          "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
        ],
        [
          "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
          "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
        ],
        [
          "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
          "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
        ],
        [
          "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
          "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
        ],
        [
          "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
          "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
        ],
        [
          "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
          "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
        ],
        [
          "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
          "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
        ],
        [
          "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
          "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
        ],
        [
          "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
          "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
        ],
        [
          "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
          "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
        ],
        [
          "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
          "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
        ],
        [
          "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
          "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
        ],
        [
          "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
          "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
        ],
        [
          "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
          "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
        ],
        [
          "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
          "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
        ],
        [
          "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
          "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
        ],
        [
          "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
          "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
        ],
        [
          "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
          "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
        ],
        [
          "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
          "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
        ],
        [
          "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
          "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
        ],
        [
          "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
          "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
        ],
        [
          "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
          "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
        ],
        [
          "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
          "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
        ],
        [
          "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
          "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
        ],
        [
          "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
          "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
        ],
        [
          "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
          "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
        ],
        [
          "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
          "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
        ],
        [
          "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
          "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
        ],
        [
          "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
          "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
        ],
        [
          "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
          "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
        ],
        [
          "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
          "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
        ],
        [
          "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
          "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
        ],
        [
          "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
          "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
        ],
        [
          "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
          "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
        ],
        [
          "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
          "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
        ],
        [
          "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
          "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
        ],
        [
          "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
          "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
        ],
        [
          "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
          "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
        ],
        [
          "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
          "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
        ],
        [
          "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
          "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
        ],
        [
          "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
          "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
        ],
        [
          "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
          "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
        ],
        [
          "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
          "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
        ],
        [
          "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
          "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
        ],
        [
          "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
          "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
        ],
        [
          "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
          "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
        ],
        [
          "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
          "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
        ],
        [
          "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
          "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
        ],
        [
          "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
          "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
        ],
        [
          "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
          "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
        ],
        [
          "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
          "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
        ],
        [
          "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
          "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
        ],
        [
          "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
          "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
        ],
        [
          "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
          "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
        ],
        [
          "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
          "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
        ],
        [
          "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
          "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
        ],
        [
          "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
          "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
        ],
        [
          "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
          "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
        ],
        [
          "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
          "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
        ],
        [
          "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
          "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
        ],
        [
          "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
          "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
        ],
        [
          "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
          "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
        ],
        [
          "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
          "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
        ],
        [
          "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
          "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
        ],
        [
          "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
          "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
        ],
        [
          "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
          "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
        ],
        [
          "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
          "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
        ],
        [
          "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
          "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
        ],
        [
          "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
          "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
        ],
        [
          "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
          "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
        ],
        [
          "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
          "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
        ]
      ]
    }
  }), secp256k1$2;
}
(function(t) {
  var e = t, n = hash$6, a = curve, c = utils$A, o = c.assert;
  function d(S) {
    S.type === "short" ? this.curve = new a.short(S) : S.type === "edwards" ? this.curve = new a.edwards(S) : this.curve = new a.mont(S), this.g = this.curve.g, this.n = this.curve.n, this.hash = S.hash, o(this.g.validate(), "Invalid curve"), o(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
  }
  e.PresetCurve = d;
  function m(S, A) {
    Object.defineProperty(e, S, {
      configurable: !0,
      enumerable: !0,
      get: function() {
        var B = new d(A);
        return Object.defineProperty(e, S, {
          configurable: !0,
          enumerable: !0,
          value: B
        }), B;
      }
    });
  }
  m("p192", {
    type: "short",
    prime: "p192",
    p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
    b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
    n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
    hash: n.sha256,
    gRed: !1,
    g: [
      "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
      "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
    ]
  }), m("p224", {
    type: "short",
    prime: "p224",
    p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
    b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
    n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
    hash: n.sha256,
    gRed: !1,
    g: [
      "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
      "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
    ]
  }), m("p256", {
    type: "short",
    prime: null,
    p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
    a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
    b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
    n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
    hash: n.sha256,
    gRed: !1,
    g: [
      "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
      "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
    ]
  }), m("p384", {
    type: "short",
    prime: null,
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
    hash: n.sha384,
    gRed: !1,
    g: [
      "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
      "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
    ]
  }), m("p521", {
    type: "short",
    prime: null,
    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
    hash: n.sha512,
    gRed: !1,
    g: [
      "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
      "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
    ]
  }), m("curve25519", {
    type: "mont",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "76d06",
    b: "1",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: n.sha256,
    gRed: !1,
    g: [
      "9"
    ]
  }), m("ed25519", {
    type: "edwards",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "-1",
    c: "1",
    // -121665 * (121666^(-1)) (mod P)
    d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: n.sha256,
    gRed: !1,
    g: [
      "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
      // 4/5
      "6666666666666666666666666666666666666666666666666666666666666658"
    ]
  });
  var w;
  try {
    w = requireSecp256k1();
  } catch {
    w = void 0;
  }
  m("secp256k1", {
    type: "short",
    prime: "k256",
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
    a: "0",
    b: "7",
    n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
    h: "1",
    hash: n.sha256,
    // Precomputed endomorphism
    beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
    lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
    basis: [
      {
        a: "3086d221a7d46bcde86c90e49284eb15",
        b: "-e4437ed6010e88286f547fa90abfe4c3"
      },
      {
        a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
        b: "3086d221a7d46bcde86c90e49284eb15"
      }
    ],
    gRed: !1,
    g: [
      "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
      "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
      w
    ]
  });
})(curves$1);
var hash$4 = hash$6, utils$k = utils$z, assert$c = minimalisticAssert$1;
function HmacDRBG$1(t) {
  if (!(this instanceof HmacDRBG$1))
    return new HmacDRBG$1(t);
  this.hash = t.hash, this.predResist = !!t.predResist, this.outLen = this.hash.outSize, this.minEntropy = t.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
  var e = utils$k.toArray(t.entropy, t.entropyEnc || "hex"), n = utils$k.toArray(t.nonce, t.nonceEnc || "hex"), a = utils$k.toArray(t.pers, t.persEnc || "hex");
  assert$c(
    e.length >= this.minEntropy / 8,
    "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
  ), this._init(e, n, a);
}
var hmacDrbg$1 = HmacDRBG$1;
HmacDRBG$1.prototype._init = function(e, n, a) {
  var c = e.concat(n).concat(a);
  this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);
  for (var o = 0; o < this.V.length; o++)
    this.K[o] = 0, this.V[o] = 1;
  this._update(c), this._reseed = 1, this.reseedInterval = 281474976710656;
};
HmacDRBG$1.prototype._hmac = function() {
  return new hash$4.hmac(this.hash, this.K);
};
HmacDRBG$1.prototype._update = function(e) {
  var n = this._hmac().update(this.V).update([0]);
  e && (n = n.update(e)), this.K = n.digest(), this.V = this._hmac().update(this.V).digest(), e && (this.K = this._hmac().update(this.V).update([1]).update(e).digest(), this.V = this._hmac().update(this.V).digest());
};
HmacDRBG$1.prototype.reseed = function(e, n, a, c) {
  typeof n != "string" && (c = a, a = n, n = null), e = utils$k.toArray(e, n), a = utils$k.toArray(a, c), assert$c(
    e.length >= this.minEntropy / 8,
    "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
  ), this._update(e.concat(a || [])), this._reseed = 1;
};
HmacDRBG$1.prototype.generate = function(e, n, a, c) {
  if (this._reseed > this.reseedInterval)
    throw new Error("Reseed is required");
  typeof n != "string" && (c = a, a = n, n = null), a && (a = utils$k.toArray(a, c || "hex"), this._update(a));
  for (var o = []; o.length < e; )
    this.V = this._hmac().update(this.V).digest(), o = o.concat(this.V);
  var d = o.slice(0, e);
  return this._update(a), this._reseed++, utils$k.encode(d, n);
};
var BN$7 = bnExports$3, utils$j = utils$A, assert$b = utils$j.assert;
function KeyPair$5(t, e) {
  this.ec = t, this.priv = null, this.pub = null, e.priv && this._importPrivate(e.priv, e.privEnc), e.pub && this._importPublic(e.pub, e.pubEnc);
}
var key$3 = KeyPair$5;
KeyPair$5.fromPublic = function(e, n, a) {
  return n instanceof KeyPair$5 ? n : new KeyPair$5(e, {
    pub: n,
    pubEnc: a
  });
};
KeyPair$5.fromPrivate = function(e, n, a) {
  return n instanceof KeyPair$5 ? n : new KeyPair$5(e, {
    priv: n,
    privEnc: a
  });
};
KeyPair$5.prototype.validate = function() {
  var e = this.getPublic();
  return e.isInfinity() ? { result: !1, reason: "Invalid public key" } : e.validate() ? e.mul(this.ec.curve.n).isInfinity() ? { result: !0, reason: null } : { result: !1, reason: "Public key * N != O" } : { result: !1, reason: "Public key is not a point" };
};
KeyPair$5.prototype.getPublic = function(e, n) {
  return typeof e == "string" && (n = e, e = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), n ? this.pub.encode(n, e) : this.pub;
};
KeyPair$5.prototype.getPrivate = function(e) {
  return e === "hex" ? this.priv.toString(16, 2) : this.priv;
};
KeyPair$5.prototype._importPrivate = function(e, n) {
  this.priv = new BN$7(e, n || 16), this.priv = this.priv.umod(this.ec.curve.n);
};
KeyPair$5.prototype._importPublic = function(e, n) {
  if (e.x || e.y) {
    this.ec.curve.type === "mont" ? assert$b(e.x, "Need x coordinate") : (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") && assert$b(e.x && e.y, "Need both x and y coordinate"), this.pub = this.ec.curve.point(e.x, e.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(e, n);
};
KeyPair$5.prototype.derive = function(e) {
  return e.validate() || assert$b(e.validate(), "public point not validated"), e.mul(this.priv).getX();
};
KeyPair$5.prototype.sign = function(e, n, a) {
  return this.ec.sign(e, this, n, a);
};
KeyPair$5.prototype.verify = function(e, n) {
  return this.ec.verify(e, n, this);
};
KeyPair$5.prototype.inspect = function() {
  return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
};
var BN$6 = bnExports$3, utils$i = utils$A, assert$a = utils$i.assert;
function Signature$5(t, e) {
  if (t instanceof Signature$5)
    return t;
  this._importDER(t, e) || (assert$a(t.r && t.s, "Signature without r or s"), this.r = new BN$6(t.r, 16), this.s = new BN$6(t.s, 16), t.recoveryParam === void 0 ? this.recoveryParam = null : this.recoveryParam = t.recoveryParam);
}
var signature$4 = Signature$5;
function Position$1() {
  this.place = 0;
}
function getLength$1(t, e) {
  var n = t[e.place++];
  if (!(n & 128))
    return n;
  var a = n & 15;
  if (a === 0 || a > 4)
    return !1;
  for (var c = 0, o = 0, d = e.place; o < a; o++, d++)
    c <<= 8, c |= t[d], c >>>= 0;
  return c <= 127 ? !1 : (e.place = d, c);
}
function rmPadding$1(t) {
  for (var e = 0, n = t.length - 1; !t[e] && !(t[e + 1] & 128) && e < n; )
    e++;
  return e === 0 ? t : t.slice(e);
}
Signature$5.prototype._importDER = function(e, n) {
  e = utils$i.toArray(e, n);
  var a = new Position$1();
  if (e[a.place++] !== 48)
    return !1;
  var c = getLength$1(e, a);
  if (c === !1 || c + a.place !== e.length || e[a.place++] !== 2)
    return !1;
  var o = getLength$1(e, a);
  if (o === !1)
    return !1;
  var d = e.slice(a.place, o + a.place);
  if (a.place += o, e[a.place++] !== 2)
    return !1;
  var m = getLength$1(e, a);
  if (m === !1 || e.length !== m + a.place)
    return !1;
  var w = e.slice(a.place, m + a.place);
  if (d[0] === 0)
    if (d[1] & 128)
      d = d.slice(1);
    else
      return !1;
  if (w[0] === 0)
    if (w[1] & 128)
      w = w.slice(1);
    else
      return !1;
  return this.r = new BN$6(d), this.s = new BN$6(w), this.recoveryParam = null, !0;
};
function constructLength$1(t, e) {
  if (e < 128) {
    t.push(e);
    return;
  }
  var n = 1 + (Math.log(e) / Math.LN2 >>> 3);
  for (t.push(n | 128); --n; )
    t.push(e >>> (n << 3) & 255);
  t.push(e);
}
Signature$5.prototype.toDER = function(e) {
  var n = this.r.toArray(), a = this.s.toArray();
  for (n[0] & 128 && (n = [0].concat(n)), a[0] & 128 && (a = [0].concat(a)), n = rmPadding$1(n), a = rmPadding$1(a); !a[0] && !(a[1] & 128); )
    a = a.slice(1);
  var c = [2];
  constructLength$1(c, n.length), c = c.concat(n), c.push(2), constructLength$1(c, a.length);
  var o = c.concat(a), d = [48];
  return constructLength$1(d, o.length), d = d.concat(o), utils$i.encode(d, e);
};
var ec$2, hasRequiredEc;
function requireEc() {
  if (hasRequiredEc)
    return ec$2;
  hasRequiredEc = 1;
  var t = bnExports$3, e = hmacDrbg$1, n = utils$A, a = curves$1, c = requireBrorand(), o = n.assert, d = key$3, m = signature$4;
  function w(S) {
    if (!(this instanceof w))
      return new w(S);
    typeof S == "string" && (o(
      Object.prototype.hasOwnProperty.call(a, S),
      "Unknown curve " + S
    ), S = a[S]), S instanceof a.PresetCurve && (S = { curve: S }), this.curve = S.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = S.curve.g, this.g.precompute(S.curve.n.bitLength() + 1), this.hash = S.hash || S.curve.hash;
  }
  return ec$2 = w, w.prototype.keyPair = function(A) {
    return new d(this, A);
  }, w.prototype.keyFromPrivate = function(A, B) {
    return d.fromPrivate(this, A, B);
  }, w.prototype.keyFromPublic = function(A, B) {
    return d.fromPublic(this, A, B);
  }, w.prototype.genKeyPair = function(A) {
    A || (A = {});
    for (var B = new e({
      hash: this.hash,
      pers: A.pers,
      persEnc: A.persEnc || "utf8",
      entropy: A.entropy || c(this.hash.hmacStrength),
      entropyEnc: A.entropy && A.entropyEnc || "utf8",
      nonce: this.n.toArray()
    }), P = this.n.byteLength(), I = this.n.sub(new t(2)); ; ) {
      var O = new t(B.generate(P));
      if (!(O.cmp(I) > 0))
        return O.iaddn(1), this.keyFromPrivate(O);
    }
  }, w.prototype._truncateToN = function(A, B) {
    var P = A.byteLength() * 8 - this.n.bitLength();
    return P > 0 && (A = A.ushrn(P)), !B && A.cmp(this.n) >= 0 ? A.sub(this.n) : A;
  }, w.prototype.sign = function(A, B, P, I) {
    typeof P == "object" && (I = P, P = null), I || (I = {}), B = this.keyFromPrivate(B, P), A = this._truncateToN(new t(A, 16));
    for (var O = this.n.byteLength(), L = B.getPrivate().toArray("be", O), C = A.toArray("be", O), z = new e({
      hash: this.hash,
      entropy: L,
      nonce: C,
      pers: I.pers,
      persEnc: I.persEnc || "utf8"
    }), q = this.n.sub(new t(1)), Z = 0; ; Z++) {
      var X = I.k ? I.k(Z) : new t(z.generate(this.n.byteLength()));
      if (X = this._truncateToN(X, !0), !(X.cmpn(1) <= 0 || X.cmp(q) >= 0)) {
        var ie = this.g.mul(X);
        if (!ie.isInfinity()) {
          var fe = ie.getX(), ye = fe.umod(this.n);
          if (ye.cmpn(0) !== 0) {
            var j = X.invm(this.n).mul(ye.mul(B.getPrivate()).iadd(A));
            if (j = j.umod(this.n), j.cmpn(0) !== 0) {
              var V = (ie.getY().isOdd() ? 1 : 0) | (fe.cmp(ye) !== 0 ? 2 : 0);
              return I.canonical && j.cmp(this.nh) > 0 && (j = this.n.sub(j), V ^= 1), new m({ r: ye, s: j, recoveryParam: V });
            }
          }
        }
      }
    }
  }, w.prototype.verify = function(A, B, P, I) {
    A = this._truncateToN(new t(A, 16)), P = this.keyFromPublic(P, I), B = new m(B, "hex");
    var O = B.r, L = B.s;
    if (O.cmpn(1) < 0 || O.cmp(this.n) >= 0 || L.cmpn(1) < 0 || L.cmp(this.n) >= 0)
      return !1;
    var C = L.invm(this.n), z = C.mul(A).umod(this.n), q = C.mul(O).umod(this.n), Z;
    return this.curve._maxwellTrick ? (Z = this.g.jmulAdd(z, P.getPublic(), q), Z.isInfinity() ? !1 : Z.eqXToP(O)) : (Z = this.g.mulAdd(z, P.getPublic(), q), Z.isInfinity() ? !1 : Z.getX().umod(this.n).cmp(O) === 0);
  }, w.prototype.recoverPubKey = function(S, A, B, P) {
    o((3 & B) === B, "The recovery param is more than two bits"), A = new m(A, P);
    var I = this.n, O = new t(S), L = A.r, C = A.s, z = B & 1, q = B >> 1;
    if (L.cmp(this.curve.p.umod(this.curve.n)) >= 0 && q)
      throw new Error("Unable to find sencond key candinate");
    q ? L = this.curve.pointFromX(L.add(this.curve.n), z) : L = this.curve.pointFromX(L, z);
    var Z = A.r.invm(I), X = I.sub(O).mul(Z).umod(I), ie = C.mul(Z).umod(I);
    return this.g.mulAdd(X, L, ie);
  }, w.prototype.getKeyRecoveryParam = function(S, A, B, P) {
    if (A = new m(A, P), A.recoveryParam !== null)
      return A.recoveryParam;
    for (var I = 0; I < 4; I++) {
      var O;
      try {
        O = this.recoverPubKey(S, A, I);
      } catch {
        continue;
      }
      if (O.eq(B))
        return I;
    }
    throw new Error("Unable to find valid recovery factor");
  }, ec$2;
}
var utils$h = utils$A, assert$9 = utils$h.assert, parseBytes$2 = utils$h.parseBytes, cachedProperty$1 = utils$h.cachedProperty;
function KeyPair$4(t, e) {
  this.eddsa = t, this._secret = parseBytes$2(e.secret), t.isPoint(e.pub) ? this._pub = e.pub : this._pubBytes = parseBytes$2(e.pub);
}
KeyPair$4.fromPublic = function(e, n) {
  return n instanceof KeyPair$4 ? n : new KeyPair$4(e, { pub: n });
};
KeyPair$4.fromSecret = function(e, n) {
  return n instanceof KeyPair$4 ? n : new KeyPair$4(e, { secret: n });
};
KeyPair$4.prototype.secret = function() {
  return this._secret;
};
cachedProperty$1(KeyPair$4, "pubBytes", function() {
  return this.eddsa.encodePoint(this.pub());
});
cachedProperty$1(KeyPair$4, "pub", function() {
  return this._pubBytes ? this.eddsa.decodePoint(this._pubBytes) : this.eddsa.g.mul(this.priv());
});
cachedProperty$1(KeyPair$4, "privBytes", function() {
  var e = this.eddsa, n = this.hash(), a = e.encodingLength - 1, c = n.slice(0, e.encodingLength);
  return c[0] &= 248, c[a] &= 127, c[a] |= 64, c;
});
cachedProperty$1(KeyPair$4, "priv", function() {
  return this.eddsa.decodeInt(this.privBytes());
});
cachedProperty$1(KeyPair$4, "hash", function() {
  return this.eddsa.hash().update(this.secret()).digest();
});
cachedProperty$1(KeyPair$4, "messagePrefix", function() {
  return this.hash().slice(this.eddsa.encodingLength);
});
KeyPair$4.prototype.sign = function(e) {
  return assert$9(this._secret, "KeyPair can only verify"), this.eddsa.sign(e, this);
};
KeyPair$4.prototype.verify = function(e, n) {
  return this.eddsa.verify(e, n, this);
};
KeyPair$4.prototype.getSecret = function(e) {
  return assert$9(this._secret, "KeyPair is public only"), utils$h.encode(this.secret(), e);
};
KeyPair$4.prototype.getPublic = function(e) {
  return utils$h.encode(this.pubBytes(), e);
};
var key$2 = KeyPair$4, BN$5 = bnExports$3, utils$g = utils$A, assert$8 = utils$g.assert, cachedProperty = utils$g.cachedProperty, parseBytes$1 = utils$g.parseBytes;
function Signature$4(t, e) {
  this.eddsa = t, typeof e != "object" && (e = parseBytes$1(e)), Array.isArray(e) && (e = {
    R: e.slice(0, t.encodingLength),
    S: e.slice(t.encodingLength)
  }), assert$8(e.R && e.S, "Signature without R or S"), t.isPoint(e.R) && (this._R = e.R), e.S instanceof BN$5 && (this._S = e.S), this._Rencoded = Array.isArray(e.R) ? e.R : e.Rencoded, this._Sencoded = Array.isArray(e.S) ? e.S : e.Sencoded;
}
cachedProperty(Signature$4, "S", function() {
  return this.eddsa.decodeInt(this.Sencoded());
});
cachedProperty(Signature$4, "R", function() {
  return this.eddsa.decodePoint(this.Rencoded());
});
cachedProperty(Signature$4, "Rencoded", function() {
  return this.eddsa.encodePoint(this.R());
});
cachedProperty(Signature$4, "Sencoded", function() {
  return this.eddsa.encodeInt(this.S());
});
Signature$4.prototype.toBytes = function() {
  return this.Rencoded().concat(this.Sencoded());
};
Signature$4.prototype.toHex = function() {
  return utils$g.encode(this.toBytes(), "hex").toUpperCase();
};
var signature$3 = Signature$4, hash$3 = hash$6, curves = curves$1, utils$f = utils$A, assert$7 = utils$f.assert, parseBytes = utils$f.parseBytes, KeyPair$3 = key$2, Signature$3 = signature$3;
function EDDSA(t) {
  if (assert$7(t === "ed25519", "only tested with ed25519 so far"), !(this instanceof EDDSA))
    return new EDDSA(t);
  t = curves[t].curve, this.curve = t, this.g = t.g, this.g.precompute(t.n.bitLength() + 1), this.pointClass = t.point().constructor, this.encodingLength = Math.ceil(t.n.bitLength() / 8), this.hash = hash$3.sha512;
}
var eddsa = EDDSA;
EDDSA.prototype.sign = function(e, n) {
  e = parseBytes(e);
  var a = this.keyFromSecret(n), c = this.hashInt(a.messagePrefix(), e), o = this.g.mul(c), d = this.encodePoint(o), m = this.hashInt(d, a.pubBytes(), e).mul(a.priv()), w = c.add(m).umod(this.curve.n);
  return this.makeSignature({ R: o, S: w, Rencoded: d });
};
EDDSA.prototype.verify = function(e, n, a) {
  e = parseBytes(e), n = this.makeSignature(n);
  var c = this.keyFromPublic(a), o = this.hashInt(n.Rencoded(), c.pubBytes(), e), d = this.g.mul(n.S()), m = n.R().add(c.pub().mul(o));
  return m.eq(d);
};
EDDSA.prototype.hashInt = function() {
  for (var e = this.hash(), n = 0; n < arguments.length; n++)
    e.update(arguments[n]);
  return utils$f.intFromLE(e.digest()).umod(this.curve.n);
};
EDDSA.prototype.keyFromPublic = function(e) {
  return KeyPair$3.fromPublic(this, e);
};
EDDSA.prototype.keyFromSecret = function(e) {
  return KeyPair$3.fromSecret(this, e);
};
EDDSA.prototype.makeSignature = function(e) {
  return e instanceof Signature$3 ? e : new Signature$3(this, e);
};
EDDSA.prototype.encodePoint = function(e) {
  var n = e.getY().toArray("le", this.encodingLength);
  return n[this.encodingLength - 1] |= e.getX().isOdd() ? 128 : 0, n;
};
EDDSA.prototype.decodePoint = function(e) {
  e = utils$f.parseBytes(e);
  var n = e.length - 1, a = e.slice(0, n).concat(e[n] & -129), c = (e[n] & 128) !== 0, o = utils$f.intFromLE(a);
  return this.curve.pointFromY(o, c);
};
EDDSA.prototype.encodeInt = function(e) {
  return e.toArray("le", this.encodingLength);
};
EDDSA.prototype.decodeInt = function(e) {
  return utils$f.intFromLE(e);
};
EDDSA.prototype.isPoint = function(e) {
  return e instanceof this.pointClass;
};
var hasRequiredElliptic;
function requireElliptic() {
  return hasRequiredElliptic || (hasRequiredElliptic = 1, function(t) {
    var e = t;
    e.version = require$$0$1.version, e.utils = utils$A, e.rand = requireBrorand(), e.curve = curve, e.curves = curves$1, e.ec = requireEc(), e.eddsa = eddsa;
  }(elliptic$2)), elliptic$2;
}
var asn1$3 = {}, asn1$2 = {}, bn$2 = { exports: {} };
bn$2.exports;
(function(t) {
  (function(e, n) {
    function a(_, u) {
      if (!_)
        throw new Error(u || "Assertion failed");
    }
    function c(_, u) {
      _.super_ = u;
      var h = function() {
      };
      h.prototype = u.prototype, _.prototype = new h(), _.prototype.constructor = _;
    }
    function o(_, u, h) {
      if (o.isBN(_))
        return _;
      this.negative = 0, this.words = null, this.length = 0, this.red = null, _ !== null && ((u === "le" || u === "be") && (h = u, u = 10), this._init(_ || 0, u || 10, h || "be"));
    }
    typeof e == "object" ? e.exports = o : n.BN = o, o.BN = o, o.wordSize = 26;
    var d;
    try {
      typeof window < "u" && typeof window.Buffer < "u" ? d = window.Buffer : d = require$$0$2.Buffer;
    } catch {
    }
    o.isBN = function(u) {
      return u instanceof o ? !0 : u !== null && typeof u == "object" && u.constructor.wordSize === o.wordSize && Array.isArray(u.words);
    }, o.max = function(u, h) {
      return u.cmp(h) > 0 ? u : h;
    }, o.min = function(u, h) {
      return u.cmp(h) < 0 ? u : h;
    }, o.prototype._init = function(u, h, p) {
      if (typeof u == "number")
        return this._initNumber(u, h, p);
      if (typeof u == "object")
        return this._initArray(u, h, p);
      h === "hex" && (h = 16), a(h === (h | 0) && h >= 2 && h <= 36), u = u.toString().replace(/\s+/g, "");
      var y = 0;
      u[0] === "-" && (y++, this.negative = 1), y < u.length && (h === 16 ? this._parseHex(u, y, p) : (this._parseBase(u, h, y), p === "le" && this._initArray(this.toArray(), h, p)));
    }, o.prototype._initNumber = function(u, h, p) {
      u < 0 && (this.negative = 1, u = -u), u < 67108864 ? (this.words = [u & 67108863], this.length = 1) : u < 4503599627370496 ? (this.words = [
        u & 67108863,
        u / 67108864 & 67108863
      ], this.length = 2) : (a(u < 9007199254740992), this.words = [
        u & 67108863,
        u / 67108864 & 67108863,
        1
      ], this.length = 3), p === "le" && this._initArray(this.toArray(), h, p);
    }, o.prototype._initArray = function(u, h, p) {
      if (a(typeof u.length == "number"), u.length <= 0)
        return this.words = [0], this.length = 1, this;
      this.length = Math.ceil(u.length / 3), this.words = new Array(this.length);
      for (var y = 0; y < this.length; y++)
        this.words[y] = 0;
      var v, $, E = 0;
      if (p === "be")
        for (y = u.length - 1, v = 0; y >= 0; y -= 3)
          $ = u[y] | u[y - 1] << 8 | u[y - 2] << 16, this.words[v] |= $ << E & 67108863, this.words[v + 1] = $ >>> 26 - E & 67108863, E += 24, E >= 26 && (E -= 26, v++);
      else if (p === "le")
        for (y = 0, v = 0; y < u.length; y += 3)
          $ = u[y] | u[y + 1] << 8 | u[y + 2] << 16, this.words[v] |= $ << E & 67108863, this.words[v + 1] = $ >>> 26 - E & 67108863, E += 24, E >= 26 && (E -= 26, v++);
      return this.strip();
    };
    function m(_, u) {
      var h = _.charCodeAt(u);
      return h >= 65 && h <= 70 ? h - 55 : h >= 97 && h <= 102 ? h - 87 : h - 48 & 15;
    }
    function w(_, u, h) {
      var p = m(_, h);
      return h - 1 >= u && (p |= m(_, h - 1) << 4), p;
    }
    o.prototype._parseHex = function(u, h, p) {
      this.length = Math.ceil((u.length - h) / 6), this.words = new Array(this.length);
      for (var y = 0; y < this.length; y++)
        this.words[y] = 0;
      var v = 0, $ = 0, E;
      if (p === "be")
        for (y = u.length - 1; y >= h; y -= 2)
          E = w(u, h, y) << v, this.words[$] |= E & 67108863, v >= 18 ? (v -= 18, $ += 1, this.words[$] |= E >>> 26) : v += 8;
      else {
        var x = u.length - h;
        for (y = x % 2 === 0 ? h + 1 : h; y < u.length; y += 2)
          E = w(u, h, y) << v, this.words[$] |= E & 67108863, v >= 18 ? (v -= 18, $ += 1, this.words[$] |= E >>> 26) : v += 8;
      }
      this.strip();
    };
    function S(_, u, h, p) {
      for (var y = 0, v = Math.min(_.length, h), $ = u; $ < v; $++) {
        var E = _.charCodeAt($) - 48;
        y *= p, E >= 49 ? y += E - 49 + 10 : E >= 17 ? y += E - 17 + 10 : y += E;
      }
      return y;
    }
    o.prototype._parseBase = function(u, h, p) {
      this.words = [0], this.length = 1;
      for (var y = 0, v = 1; v <= 67108863; v *= h)
        y++;
      y--, v = v / h | 0;
      for (var $ = u.length - p, E = $ % y, x = Math.min($, $ - E) + p, l = 0, b = p; b < x; b += y)
        l = S(u, b, b + y, h), this.imuln(v), this.words[0] + l < 67108864 ? this.words[0] += l : this._iaddn(l);
      if (E !== 0) {
        var M = 1;
        for (l = S(u, b, u.length, h), b = 0; b < E; b++)
          M *= h;
        this.imuln(M), this.words[0] + l < 67108864 ? this.words[0] += l : this._iaddn(l);
      }
      this.strip();
    }, o.prototype.copy = function(u) {
      u.words = new Array(this.length);
      for (var h = 0; h < this.length; h++)
        u.words[h] = this.words[h];
      u.length = this.length, u.negative = this.negative, u.red = this.red;
    }, o.prototype.clone = function() {
      var u = new o(null);
      return this.copy(u), u;
    }, o.prototype._expand = function(u) {
      for (; this.length < u; )
        this.words[this.length++] = 0;
      return this;
    }, o.prototype.strip = function() {
      for (; this.length > 1 && this.words[this.length - 1] === 0; )
        this.length--;
      return this._normSign();
    }, o.prototype._normSign = function() {
      return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
    }, o.prototype.inspect = function() {
      return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    var A = [
      "",
      "0",
      "00",
      "000",
      "0000",
      "00000",
      "000000",
      "0000000",
      "00000000",
      "000000000",
      "0000000000",
      "00000000000",
      "000000000000",
      "0000000000000",
      "00000000000000",
      "000000000000000",
      "0000000000000000",
      "00000000000000000",
      "000000000000000000",
      "0000000000000000000",
      "00000000000000000000",
      "000000000000000000000",
      "0000000000000000000000",
      "00000000000000000000000",
      "000000000000000000000000",
      "0000000000000000000000000"
    ], B = [
      0,
      0,
      25,
      16,
      12,
      11,
      10,
      9,
      8,
      8,
      7,
      7,
      7,
      7,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5
    ], P = [
      0,
      0,
      33554432,
      43046721,
      16777216,
      48828125,
      60466176,
      40353607,
      16777216,
      43046721,
      1e7,
      19487171,
      35831808,
      62748517,
      7529536,
      11390625,
      16777216,
      24137569,
      34012224,
      47045881,
      64e6,
      4084101,
      5153632,
      6436343,
      7962624,
      9765625,
      11881376,
      14348907,
      17210368,
      20511149,
      243e5,
      28629151,
      33554432,
      39135393,
      45435424,
      52521875,
      60466176
    ];
    o.prototype.toString = function(u, h) {
      u = u || 10, h = h | 0 || 1;
      var p;
      if (u === 16 || u === "hex") {
        p = "";
        for (var y = 0, v = 0, $ = 0; $ < this.length; $++) {
          var E = this.words[$], x = ((E << y | v) & 16777215).toString(16);
          v = E >>> 24 - y & 16777215, v !== 0 || $ !== this.length - 1 ? p = A[6 - x.length] + x + p : p = x + p, y += 2, y >= 26 && (y -= 26, $--);
        }
        for (v !== 0 && (p = v.toString(16) + p); p.length % h !== 0; )
          p = "0" + p;
        return this.negative !== 0 && (p = "-" + p), p;
      }
      if (u === (u | 0) && u >= 2 && u <= 36) {
        var l = B[u], b = P[u];
        p = "";
        var M = this.clone();
        for (M.negative = 0; !M.isZero(); ) {
          var k = M.modn(b).toString(u);
          M = M.idivn(b), M.isZero() ? p = k + p : p = A[l - k.length] + k + p;
        }
        for (this.isZero() && (p = "0" + p); p.length % h !== 0; )
          p = "0" + p;
        return this.negative !== 0 && (p = "-" + p), p;
      }
      a(!1, "Base should be between 2 and 36");
    }, o.prototype.toNumber = function() {
      var u = this.words[0];
      return this.length === 2 ? u += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? u += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && a(!1, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -u : u;
    }, o.prototype.toJSON = function() {
      return this.toString(16);
    }, o.prototype.toBuffer = function(u, h) {
      return a(typeof d < "u"), this.toArrayLike(d, u, h);
    }, o.prototype.toArray = function(u, h) {
      return this.toArrayLike(Array, u, h);
    }, o.prototype.toArrayLike = function(u, h, p) {
      var y = this.byteLength(), v = p || Math.max(1, y);
      a(y <= v, "byte array longer than desired length"), a(v > 0, "Requested array length <= 0"), this.strip();
      var $ = h === "le", E = new u(v), x, l, b = this.clone();
      if ($) {
        for (l = 0; !b.isZero(); l++)
          x = b.andln(255), b.iushrn(8), E[l] = x;
        for (; l < v; l++)
          E[l] = 0;
      } else {
        for (l = 0; l < v - y; l++)
          E[l] = 0;
        for (l = 0; !b.isZero(); l++)
          x = b.andln(255), b.iushrn(8), E[v - l - 1] = x;
      }
      return E;
    }, Math.clz32 ? o.prototype._countBits = function(u) {
      return 32 - Math.clz32(u);
    } : o.prototype._countBits = function(u) {
      var h = u, p = 0;
      return h >= 4096 && (p += 13, h >>>= 13), h >= 64 && (p += 7, h >>>= 7), h >= 8 && (p += 4, h >>>= 4), h >= 2 && (p += 2, h >>>= 2), p + h;
    }, o.prototype._zeroBits = function(u) {
      if (u === 0)
        return 26;
      var h = u, p = 0;
      return h & 8191 || (p += 13, h >>>= 13), h & 127 || (p += 7, h >>>= 7), h & 15 || (p += 4, h >>>= 4), h & 3 || (p += 2, h >>>= 2), h & 1 || p++, p;
    }, o.prototype.bitLength = function() {
      var u = this.words[this.length - 1], h = this._countBits(u);
      return (this.length - 1) * 26 + h;
    };
    function I(_) {
      for (var u = new Array(_.bitLength()), h = 0; h < u.length; h++) {
        var p = h / 26 | 0, y = h % 26;
        u[h] = (_.words[p] & 1 << y) >>> y;
      }
      return u;
    }
    o.prototype.zeroBits = function() {
      if (this.isZero())
        return 0;
      for (var u = 0, h = 0; h < this.length; h++) {
        var p = this._zeroBits(this.words[h]);
        if (u += p, p !== 26)
          break;
      }
      return u;
    }, o.prototype.byteLength = function() {
      return Math.ceil(this.bitLength() / 8);
    }, o.prototype.toTwos = function(u) {
      return this.negative !== 0 ? this.abs().inotn(u).iaddn(1) : this.clone();
    }, o.prototype.fromTwos = function(u) {
      return this.testn(u - 1) ? this.notn(u).iaddn(1).ineg() : this.clone();
    }, o.prototype.isNeg = function() {
      return this.negative !== 0;
    }, o.prototype.neg = function() {
      return this.clone().ineg();
    }, o.prototype.ineg = function() {
      return this.isZero() || (this.negative ^= 1), this;
    }, o.prototype.iuor = function(u) {
      for (; this.length < u.length; )
        this.words[this.length++] = 0;
      for (var h = 0; h < u.length; h++)
        this.words[h] = this.words[h] | u.words[h];
      return this.strip();
    }, o.prototype.ior = function(u) {
      return a((this.negative | u.negative) === 0), this.iuor(u);
    }, o.prototype.or = function(u) {
      return this.length > u.length ? this.clone().ior(u) : u.clone().ior(this);
    }, o.prototype.uor = function(u) {
      return this.length > u.length ? this.clone().iuor(u) : u.clone().iuor(this);
    }, o.prototype.iuand = function(u) {
      var h;
      this.length > u.length ? h = u : h = this;
      for (var p = 0; p < h.length; p++)
        this.words[p] = this.words[p] & u.words[p];
      return this.length = h.length, this.strip();
    }, o.prototype.iand = function(u) {
      return a((this.negative | u.negative) === 0), this.iuand(u);
    }, o.prototype.and = function(u) {
      return this.length > u.length ? this.clone().iand(u) : u.clone().iand(this);
    }, o.prototype.uand = function(u) {
      return this.length > u.length ? this.clone().iuand(u) : u.clone().iuand(this);
    }, o.prototype.iuxor = function(u) {
      var h, p;
      this.length > u.length ? (h = this, p = u) : (h = u, p = this);
      for (var y = 0; y < p.length; y++)
        this.words[y] = h.words[y] ^ p.words[y];
      if (this !== h)
        for (; y < h.length; y++)
          this.words[y] = h.words[y];
      return this.length = h.length, this.strip();
    }, o.prototype.ixor = function(u) {
      return a((this.negative | u.negative) === 0), this.iuxor(u);
    }, o.prototype.xor = function(u) {
      return this.length > u.length ? this.clone().ixor(u) : u.clone().ixor(this);
    }, o.prototype.uxor = function(u) {
      return this.length > u.length ? this.clone().iuxor(u) : u.clone().iuxor(this);
    }, o.prototype.inotn = function(u) {
      a(typeof u == "number" && u >= 0);
      var h = Math.ceil(u / 26) | 0, p = u % 26;
      this._expand(h), p > 0 && h--;
      for (var y = 0; y < h; y++)
        this.words[y] = ~this.words[y] & 67108863;
      return p > 0 && (this.words[y] = ~this.words[y] & 67108863 >> 26 - p), this.strip();
    }, o.prototype.notn = function(u) {
      return this.clone().inotn(u);
    }, o.prototype.setn = function(u, h) {
      a(typeof u == "number" && u >= 0);
      var p = u / 26 | 0, y = u % 26;
      return this._expand(p + 1), h ? this.words[p] = this.words[p] | 1 << y : this.words[p] = this.words[p] & ~(1 << y), this.strip();
    }, o.prototype.iadd = function(u) {
      var h;
      if (this.negative !== 0 && u.negative === 0)
        return this.negative = 0, h = this.isub(u), this.negative ^= 1, this._normSign();
      if (this.negative === 0 && u.negative !== 0)
        return u.negative = 0, h = this.isub(u), u.negative = 1, h._normSign();
      var p, y;
      this.length > u.length ? (p = this, y = u) : (p = u, y = this);
      for (var v = 0, $ = 0; $ < y.length; $++)
        h = (p.words[$] | 0) + (y.words[$] | 0) + v, this.words[$] = h & 67108863, v = h >>> 26;
      for (; v !== 0 && $ < p.length; $++)
        h = (p.words[$] | 0) + v, this.words[$] = h & 67108863, v = h >>> 26;
      if (this.length = p.length, v !== 0)
        this.words[this.length] = v, this.length++;
      else if (p !== this)
        for (; $ < p.length; $++)
          this.words[$] = p.words[$];
      return this;
    }, o.prototype.add = function(u) {
      var h;
      return u.negative !== 0 && this.negative === 0 ? (u.negative = 0, h = this.sub(u), u.negative ^= 1, h) : u.negative === 0 && this.negative !== 0 ? (this.negative = 0, h = u.sub(this), this.negative = 1, h) : this.length > u.length ? this.clone().iadd(u) : u.clone().iadd(this);
    }, o.prototype.isub = function(u) {
      if (u.negative !== 0) {
        u.negative = 0;
        var h = this.iadd(u);
        return u.negative = 1, h._normSign();
      } else if (this.negative !== 0)
        return this.negative = 0, this.iadd(u), this.negative = 1, this._normSign();
      var p = this.cmp(u);
      if (p === 0)
        return this.negative = 0, this.length = 1, this.words[0] = 0, this;
      var y, v;
      p > 0 ? (y = this, v = u) : (y = u, v = this);
      for (var $ = 0, E = 0; E < v.length; E++)
        h = (y.words[E] | 0) - (v.words[E] | 0) + $, $ = h >> 26, this.words[E] = h & 67108863;
      for (; $ !== 0 && E < y.length; E++)
        h = (y.words[E] | 0) + $, $ = h >> 26, this.words[E] = h & 67108863;
      if ($ === 0 && E < y.length && y !== this)
        for (; E < y.length; E++)
          this.words[E] = y.words[E];
      return this.length = Math.max(this.length, E), y !== this && (this.negative = 1), this.strip();
    }, o.prototype.sub = function(u) {
      return this.clone().isub(u);
    };
    function O(_, u, h) {
      h.negative = u.negative ^ _.negative;
      var p = _.length + u.length | 0;
      h.length = p, p = p - 1 | 0;
      var y = _.words[0] | 0, v = u.words[0] | 0, $ = y * v, E = $ & 67108863, x = $ / 67108864 | 0;
      h.words[0] = E;
      for (var l = 1; l < p; l++) {
        for (var b = x >>> 26, M = x & 67108863, k = Math.min(l, u.length - 1), U = Math.max(0, l - _.length + 1); U <= k; U++) {
          var T = l - U | 0;
          y = _.words[T] | 0, v = u.words[U] | 0, $ = y * v + M, b += $ / 67108864 | 0, M = $ & 67108863;
        }
        h.words[l] = M | 0, x = b | 0;
      }
      return x !== 0 ? h.words[l] = x | 0 : h.length--, h.strip();
    }
    var L = function(u, h, p) {
      var y = u.words, v = h.words, $ = p.words, E = 0, x, l, b, M = y[0] | 0, k = M & 8191, U = M >>> 13, T = y[1] | 0, H = T & 8191, Y = T >>> 13, le = y[2] | 0, ce = le & 8191, de = le >>> 13, ue = y[3] | 0, re = ue & 8191, ge = ue >>> 13, Ae = y[4] | 0, xe = Ae & 8191, Ee = Ae >>> 13, at = y[5] | 0, Re = at & 8191, ve = at >>> 13, xt = y[6] | 0, Ne = xt & 8191, qe = xt >>> 13, wt = y[7] | 0, Te = wt & 8191, De = wt >>> 13, vt = y[8] | 0, ke = vt & 8191, Ue = vt >>> 13, $t = y[9] | 0, ee = $t & 8191, F = $t >>> 13, J = v[0] | 0, oe = J & 8191, he = J >>> 13, Se = v[1] | 0, me = Se & 8191, Be = Se >>> 13, gt = v[2] | 0, Me = gt & 8191, Oe = gt >>> 13, ht = v[3] | 0, He = ht & 8191, Ge = ht >>> 13, _t = v[4] | 0, Le = _t & 8191, Ke = _t >>> 13, Et = v[5] | 0, Fe = Et & 8191, ze = Et >>> 13, At = v[6] | 0, Pe = At & 8191, je = At >>> 13, Q = v[7] | 0, te = Q & 8191, ne = Q >>> 13, D = v[8] | 0, se = D & 8191, pe = D >>> 13, $e = v[9] | 0, be = $e & 8191, _e = $e >>> 13;
      p.negative = u.negative ^ h.negative, p.length = 19, x = Math.imul(k, oe), l = Math.imul(k, he), l = l + Math.imul(U, oe) | 0, b = Math.imul(U, he);
      var Je = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, x = Math.imul(H, oe), l = Math.imul(H, he), l = l + Math.imul(Y, oe) | 0, b = Math.imul(Y, he), x = x + Math.imul(k, me) | 0, l = l + Math.imul(k, Be) | 0, l = l + Math.imul(U, me) | 0, b = b + Math.imul(U, Be) | 0;
      var We = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, x = Math.imul(ce, oe), l = Math.imul(ce, he), l = l + Math.imul(de, oe) | 0, b = Math.imul(de, he), x = x + Math.imul(H, me) | 0, l = l + Math.imul(H, Be) | 0, l = l + Math.imul(Y, me) | 0, b = b + Math.imul(Y, Be) | 0, x = x + Math.imul(k, Me) | 0, l = l + Math.imul(k, Oe) | 0, l = l + Math.imul(U, Me) | 0, b = b + Math.imul(U, Oe) | 0;
      var bt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (bt >>> 26) | 0, bt &= 67108863, x = Math.imul(re, oe), l = Math.imul(re, he), l = l + Math.imul(ge, oe) | 0, b = Math.imul(ge, he), x = x + Math.imul(ce, me) | 0, l = l + Math.imul(ce, Be) | 0, l = l + Math.imul(de, me) | 0, b = b + Math.imul(de, Be) | 0, x = x + Math.imul(H, Me) | 0, l = l + Math.imul(H, Oe) | 0, l = l + Math.imul(Y, Me) | 0, b = b + Math.imul(Y, Oe) | 0, x = x + Math.imul(k, He) | 0, l = l + Math.imul(k, Ge) | 0, l = l + Math.imul(U, He) | 0, b = b + Math.imul(U, Ge) | 0;
      var Ye = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, x = Math.imul(xe, oe), l = Math.imul(xe, he), l = l + Math.imul(Ee, oe) | 0, b = Math.imul(Ee, he), x = x + Math.imul(re, me) | 0, l = l + Math.imul(re, Be) | 0, l = l + Math.imul(ge, me) | 0, b = b + Math.imul(ge, Be) | 0, x = x + Math.imul(ce, Me) | 0, l = l + Math.imul(ce, Oe) | 0, l = l + Math.imul(de, Me) | 0, b = b + Math.imul(de, Oe) | 0, x = x + Math.imul(H, He) | 0, l = l + Math.imul(H, Ge) | 0, l = l + Math.imul(Y, He) | 0, b = b + Math.imul(Y, Ge) | 0, x = x + Math.imul(k, Le) | 0, l = l + Math.imul(k, Ke) | 0, l = l + Math.imul(U, Le) | 0, b = b + Math.imul(U, Ke) | 0;
      var ot = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (ot >>> 26) | 0, ot &= 67108863, x = Math.imul(Re, oe), l = Math.imul(Re, he), l = l + Math.imul(ve, oe) | 0, b = Math.imul(ve, he), x = x + Math.imul(xe, me) | 0, l = l + Math.imul(xe, Be) | 0, l = l + Math.imul(Ee, me) | 0, b = b + Math.imul(Ee, Be) | 0, x = x + Math.imul(re, Me) | 0, l = l + Math.imul(re, Oe) | 0, l = l + Math.imul(ge, Me) | 0, b = b + Math.imul(ge, Oe) | 0, x = x + Math.imul(ce, He) | 0, l = l + Math.imul(ce, Ge) | 0, l = l + Math.imul(de, He) | 0, b = b + Math.imul(de, Ge) | 0, x = x + Math.imul(H, Le) | 0, l = l + Math.imul(H, Ke) | 0, l = l + Math.imul(Y, Le) | 0, b = b + Math.imul(Y, Ke) | 0, x = x + Math.imul(k, Fe) | 0, l = l + Math.imul(k, ze) | 0, l = l + Math.imul(U, Fe) | 0, b = b + Math.imul(U, ze) | 0;
      var ct = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (ct >>> 26) | 0, ct &= 67108863, x = Math.imul(Ne, oe), l = Math.imul(Ne, he), l = l + Math.imul(qe, oe) | 0, b = Math.imul(qe, he), x = x + Math.imul(Re, me) | 0, l = l + Math.imul(Re, Be) | 0, l = l + Math.imul(ve, me) | 0, b = b + Math.imul(ve, Be) | 0, x = x + Math.imul(xe, Me) | 0, l = l + Math.imul(xe, Oe) | 0, l = l + Math.imul(Ee, Me) | 0, b = b + Math.imul(Ee, Oe) | 0, x = x + Math.imul(re, He) | 0, l = l + Math.imul(re, Ge) | 0, l = l + Math.imul(ge, He) | 0, b = b + Math.imul(ge, Ge) | 0, x = x + Math.imul(ce, Le) | 0, l = l + Math.imul(ce, Ke) | 0, l = l + Math.imul(de, Le) | 0, b = b + Math.imul(de, Ke) | 0, x = x + Math.imul(H, Fe) | 0, l = l + Math.imul(H, ze) | 0, l = l + Math.imul(Y, Fe) | 0, b = b + Math.imul(Y, ze) | 0, x = x + Math.imul(k, Pe) | 0, l = l + Math.imul(k, je) | 0, l = l + Math.imul(U, Pe) | 0, b = b + Math.imul(U, je) | 0;
      var lt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (lt >>> 26) | 0, lt &= 67108863, x = Math.imul(Te, oe), l = Math.imul(Te, he), l = l + Math.imul(De, oe) | 0, b = Math.imul(De, he), x = x + Math.imul(Ne, me) | 0, l = l + Math.imul(Ne, Be) | 0, l = l + Math.imul(qe, me) | 0, b = b + Math.imul(qe, Be) | 0, x = x + Math.imul(Re, Me) | 0, l = l + Math.imul(Re, Oe) | 0, l = l + Math.imul(ve, Me) | 0, b = b + Math.imul(ve, Oe) | 0, x = x + Math.imul(xe, He) | 0, l = l + Math.imul(xe, Ge) | 0, l = l + Math.imul(Ee, He) | 0, b = b + Math.imul(Ee, Ge) | 0, x = x + Math.imul(re, Le) | 0, l = l + Math.imul(re, Ke) | 0, l = l + Math.imul(ge, Le) | 0, b = b + Math.imul(ge, Ke) | 0, x = x + Math.imul(ce, Fe) | 0, l = l + Math.imul(ce, ze) | 0, l = l + Math.imul(de, Fe) | 0, b = b + Math.imul(de, ze) | 0, x = x + Math.imul(H, Pe) | 0, l = l + Math.imul(H, je) | 0, l = l + Math.imul(Y, Pe) | 0, b = b + Math.imul(Y, je) | 0, x = x + Math.imul(k, te) | 0, l = l + Math.imul(k, ne) | 0, l = l + Math.imul(U, te) | 0, b = b + Math.imul(U, ne) | 0;
      var mt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (mt >>> 26) | 0, mt &= 67108863, x = Math.imul(ke, oe), l = Math.imul(ke, he), l = l + Math.imul(Ue, oe) | 0, b = Math.imul(Ue, he), x = x + Math.imul(Te, me) | 0, l = l + Math.imul(Te, Be) | 0, l = l + Math.imul(De, me) | 0, b = b + Math.imul(De, Be) | 0, x = x + Math.imul(Ne, Me) | 0, l = l + Math.imul(Ne, Oe) | 0, l = l + Math.imul(qe, Me) | 0, b = b + Math.imul(qe, Oe) | 0, x = x + Math.imul(Re, He) | 0, l = l + Math.imul(Re, Ge) | 0, l = l + Math.imul(ve, He) | 0, b = b + Math.imul(ve, Ge) | 0, x = x + Math.imul(xe, Le) | 0, l = l + Math.imul(xe, Ke) | 0, l = l + Math.imul(Ee, Le) | 0, b = b + Math.imul(Ee, Ke) | 0, x = x + Math.imul(re, Fe) | 0, l = l + Math.imul(re, ze) | 0, l = l + Math.imul(ge, Fe) | 0, b = b + Math.imul(ge, ze) | 0, x = x + Math.imul(ce, Pe) | 0, l = l + Math.imul(ce, je) | 0, l = l + Math.imul(de, Pe) | 0, b = b + Math.imul(de, je) | 0, x = x + Math.imul(H, te) | 0, l = l + Math.imul(H, ne) | 0, l = l + Math.imul(Y, te) | 0, b = b + Math.imul(Y, ne) | 0, x = x + Math.imul(k, se) | 0, l = l + Math.imul(k, pe) | 0, l = l + Math.imul(U, se) | 0, b = b + Math.imul(U, pe) | 0;
      var dt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (dt >>> 26) | 0, dt &= 67108863, x = Math.imul(ee, oe), l = Math.imul(ee, he), l = l + Math.imul(F, oe) | 0, b = Math.imul(F, he), x = x + Math.imul(ke, me) | 0, l = l + Math.imul(ke, Be) | 0, l = l + Math.imul(Ue, me) | 0, b = b + Math.imul(Ue, Be) | 0, x = x + Math.imul(Te, Me) | 0, l = l + Math.imul(Te, Oe) | 0, l = l + Math.imul(De, Me) | 0, b = b + Math.imul(De, Oe) | 0, x = x + Math.imul(Ne, He) | 0, l = l + Math.imul(Ne, Ge) | 0, l = l + Math.imul(qe, He) | 0, b = b + Math.imul(qe, Ge) | 0, x = x + Math.imul(Re, Le) | 0, l = l + Math.imul(Re, Ke) | 0, l = l + Math.imul(ve, Le) | 0, b = b + Math.imul(ve, Ke) | 0, x = x + Math.imul(xe, Fe) | 0, l = l + Math.imul(xe, ze) | 0, l = l + Math.imul(Ee, Fe) | 0, b = b + Math.imul(Ee, ze) | 0, x = x + Math.imul(re, Pe) | 0, l = l + Math.imul(re, je) | 0, l = l + Math.imul(ge, Pe) | 0, b = b + Math.imul(ge, je) | 0, x = x + Math.imul(ce, te) | 0, l = l + Math.imul(ce, ne) | 0, l = l + Math.imul(de, te) | 0, b = b + Math.imul(de, ne) | 0, x = x + Math.imul(H, se) | 0, l = l + Math.imul(H, pe) | 0, l = l + Math.imul(Y, se) | 0, b = b + Math.imul(Y, pe) | 0, x = x + Math.imul(k, be) | 0, l = l + Math.imul(k, _e) | 0, l = l + Math.imul(U, be) | 0, b = b + Math.imul(U, _e) | 0;
      var yt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (yt >>> 26) | 0, yt &= 67108863, x = Math.imul(ee, me), l = Math.imul(ee, Be), l = l + Math.imul(F, me) | 0, b = Math.imul(F, Be), x = x + Math.imul(ke, Me) | 0, l = l + Math.imul(ke, Oe) | 0, l = l + Math.imul(Ue, Me) | 0, b = b + Math.imul(Ue, Oe) | 0, x = x + Math.imul(Te, He) | 0, l = l + Math.imul(Te, Ge) | 0, l = l + Math.imul(De, He) | 0, b = b + Math.imul(De, Ge) | 0, x = x + Math.imul(Ne, Le) | 0, l = l + Math.imul(Ne, Ke) | 0, l = l + Math.imul(qe, Le) | 0, b = b + Math.imul(qe, Ke) | 0, x = x + Math.imul(Re, Fe) | 0, l = l + Math.imul(Re, ze) | 0, l = l + Math.imul(ve, Fe) | 0, b = b + Math.imul(ve, ze) | 0, x = x + Math.imul(xe, Pe) | 0, l = l + Math.imul(xe, je) | 0, l = l + Math.imul(Ee, Pe) | 0, b = b + Math.imul(Ee, je) | 0, x = x + Math.imul(re, te) | 0, l = l + Math.imul(re, ne) | 0, l = l + Math.imul(ge, te) | 0, b = b + Math.imul(ge, ne) | 0, x = x + Math.imul(ce, se) | 0, l = l + Math.imul(ce, pe) | 0, l = l + Math.imul(de, se) | 0, b = b + Math.imul(de, pe) | 0, x = x + Math.imul(H, be) | 0, l = l + Math.imul(H, _e) | 0, l = l + Math.imul(Y, be) | 0, b = b + Math.imul(Y, _e) | 0;
      var pt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (pt >>> 26) | 0, pt &= 67108863, x = Math.imul(ee, Me), l = Math.imul(ee, Oe), l = l + Math.imul(F, Me) | 0, b = Math.imul(F, Oe), x = x + Math.imul(ke, He) | 0, l = l + Math.imul(ke, Ge) | 0, l = l + Math.imul(Ue, He) | 0, b = b + Math.imul(Ue, Ge) | 0, x = x + Math.imul(Te, Le) | 0, l = l + Math.imul(Te, Ke) | 0, l = l + Math.imul(De, Le) | 0, b = b + Math.imul(De, Ke) | 0, x = x + Math.imul(Ne, Fe) | 0, l = l + Math.imul(Ne, ze) | 0, l = l + Math.imul(qe, Fe) | 0, b = b + Math.imul(qe, ze) | 0, x = x + Math.imul(Re, Pe) | 0, l = l + Math.imul(Re, je) | 0, l = l + Math.imul(ve, Pe) | 0, b = b + Math.imul(ve, je) | 0, x = x + Math.imul(xe, te) | 0, l = l + Math.imul(xe, ne) | 0, l = l + Math.imul(Ee, te) | 0, b = b + Math.imul(Ee, ne) | 0, x = x + Math.imul(re, se) | 0, l = l + Math.imul(re, pe) | 0, l = l + Math.imul(ge, se) | 0, b = b + Math.imul(ge, pe) | 0, x = x + Math.imul(ce, be) | 0, l = l + Math.imul(ce, _e) | 0, l = l + Math.imul(de, be) | 0, b = b + Math.imul(de, _e) | 0;
      var tt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, x = Math.imul(ee, He), l = Math.imul(ee, Ge), l = l + Math.imul(F, He) | 0, b = Math.imul(F, Ge), x = x + Math.imul(ke, Le) | 0, l = l + Math.imul(ke, Ke) | 0, l = l + Math.imul(Ue, Le) | 0, b = b + Math.imul(Ue, Ke) | 0, x = x + Math.imul(Te, Fe) | 0, l = l + Math.imul(Te, ze) | 0, l = l + Math.imul(De, Fe) | 0, b = b + Math.imul(De, ze) | 0, x = x + Math.imul(Ne, Pe) | 0, l = l + Math.imul(Ne, je) | 0, l = l + Math.imul(qe, Pe) | 0, b = b + Math.imul(qe, je) | 0, x = x + Math.imul(Re, te) | 0, l = l + Math.imul(Re, ne) | 0, l = l + Math.imul(ve, te) | 0, b = b + Math.imul(ve, ne) | 0, x = x + Math.imul(xe, se) | 0, l = l + Math.imul(xe, pe) | 0, l = l + Math.imul(Ee, se) | 0, b = b + Math.imul(Ee, pe) | 0, x = x + Math.imul(re, be) | 0, l = l + Math.imul(re, _e) | 0, l = l + Math.imul(ge, be) | 0, b = b + Math.imul(ge, _e) | 0;
      var st = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (st >>> 26) | 0, st &= 67108863, x = Math.imul(ee, Le), l = Math.imul(ee, Ke), l = l + Math.imul(F, Le) | 0, b = Math.imul(F, Ke), x = x + Math.imul(ke, Fe) | 0, l = l + Math.imul(ke, ze) | 0, l = l + Math.imul(Ue, Fe) | 0, b = b + Math.imul(Ue, ze) | 0, x = x + Math.imul(Te, Pe) | 0, l = l + Math.imul(Te, je) | 0, l = l + Math.imul(De, Pe) | 0, b = b + Math.imul(De, je) | 0, x = x + Math.imul(Ne, te) | 0, l = l + Math.imul(Ne, ne) | 0, l = l + Math.imul(qe, te) | 0, b = b + Math.imul(qe, ne) | 0, x = x + Math.imul(Re, se) | 0, l = l + Math.imul(Re, pe) | 0, l = l + Math.imul(ve, se) | 0, b = b + Math.imul(ve, pe) | 0, x = x + Math.imul(xe, be) | 0, l = l + Math.imul(xe, _e) | 0, l = l + Math.imul(Ee, be) | 0, b = b + Math.imul(Ee, _e) | 0;
      var Qe = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, x = Math.imul(ee, Fe), l = Math.imul(ee, ze), l = l + Math.imul(F, Fe) | 0, b = Math.imul(F, ze), x = x + Math.imul(ke, Pe) | 0, l = l + Math.imul(ke, je) | 0, l = l + Math.imul(Ue, Pe) | 0, b = b + Math.imul(Ue, je) | 0, x = x + Math.imul(Te, te) | 0, l = l + Math.imul(Te, ne) | 0, l = l + Math.imul(De, te) | 0, b = b + Math.imul(De, ne) | 0, x = x + Math.imul(Ne, se) | 0, l = l + Math.imul(Ne, pe) | 0, l = l + Math.imul(qe, se) | 0, b = b + Math.imul(qe, pe) | 0, x = x + Math.imul(Re, be) | 0, l = l + Math.imul(Re, _e) | 0, l = l + Math.imul(ve, be) | 0, b = b + Math.imul(ve, _e) | 0;
      var rt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, x = Math.imul(ee, Pe), l = Math.imul(ee, je), l = l + Math.imul(F, Pe) | 0, b = Math.imul(F, je), x = x + Math.imul(ke, te) | 0, l = l + Math.imul(ke, ne) | 0, l = l + Math.imul(Ue, te) | 0, b = b + Math.imul(Ue, ne) | 0, x = x + Math.imul(Te, se) | 0, l = l + Math.imul(Te, pe) | 0, l = l + Math.imul(De, se) | 0, b = b + Math.imul(De, pe) | 0, x = x + Math.imul(Ne, be) | 0, l = l + Math.imul(Ne, _e) | 0, l = l + Math.imul(qe, be) | 0, b = b + Math.imul(qe, _e) | 0;
      var it = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (it >>> 26) | 0, it &= 67108863, x = Math.imul(ee, te), l = Math.imul(ee, ne), l = l + Math.imul(F, te) | 0, b = Math.imul(F, ne), x = x + Math.imul(ke, se) | 0, l = l + Math.imul(ke, pe) | 0, l = l + Math.imul(Ue, se) | 0, b = b + Math.imul(Ue, pe) | 0, x = x + Math.imul(Te, be) | 0, l = l + Math.imul(Te, _e) | 0, l = l + Math.imul(De, be) | 0, b = b + Math.imul(De, _e) | 0;
      var et = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, x = Math.imul(ee, se), l = Math.imul(ee, pe), l = l + Math.imul(F, se) | 0, b = Math.imul(F, pe), x = x + Math.imul(ke, be) | 0, l = l + Math.imul(ke, _e) | 0, l = l + Math.imul(Ue, be) | 0, b = b + Math.imul(Ue, _e) | 0;
      var Ie = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (Ie >>> 26) | 0, Ie &= 67108863, x = Math.imul(ee, be), l = Math.imul(ee, _e), l = l + Math.imul(F, be) | 0, b = Math.imul(F, _e);
      var Ce = (E + x | 0) + ((l & 8191) << 13) | 0;
      return E = (b + (l >>> 13) | 0) + (Ce >>> 26) | 0, Ce &= 67108863, $[0] = Je, $[1] = We, $[2] = bt, $[3] = Ye, $[4] = ot, $[5] = ct, $[6] = lt, $[7] = mt, $[8] = dt, $[9] = yt, $[10] = pt, $[11] = tt, $[12] = st, $[13] = Qe, $[14] = rt, $[15] = it, $[16] = et, $[17] = Ie, $[18] = Ce, E !== 0 && ($[19] = E, p.length++), p;
    };
    Math.imul || (L = O);
    function C(_, u, h) {
      h.negative = u.negative ^ _.negative, h.length = _.length + u.length;
      for (var p = 0, y = 0, v = 0; v < h.length - 1; v++) {
        var $ = y;
        y = 0;
        for (var E = p & 67108863, x = Math.min(v, u.length - 1), l = Math.max(0, v - _.length + 1); l <= x; l++) {
          var b = v - l, M = _.words[b] | 0, k = u.words[l] | 0, U = M * k, T = U & 67108863;
          $ = $ + (U / 67108864 | 0) | 0, T = T + E | 0, E = T & 67108863, $ = $ + (T >>> 26) | 0, y += $ >>> 26, $ &= 67108863;
        }
        h.words[v] = E, p = $, $ = y;
      }
      return p !== 0 ? h.words[v] = p : h.length--, h.strip();
    }
    function z(_, u, h) {
      var p = new q();
      return p.mulp(_, u, h);
    }
    o.prototype.mulTo = function(u, h) {
      var p, y = this.length + u.length;
      return this.length === 10 && u.length === 10 ? p = L(this, u, h) : y < 63 ? p = O(this, u, h) : y < 1024 ? p = C(this, u, h) : p = z(this, u, h), p;
    };
    function q(_, u) {
      this.x = _, this.y = u;
    }
    q.prototype.makeRBT = function(u) {
      for (var h = new Array(u), p = o.prototype._countBits(u) - 1, y = 0; y < u; y++)
        h[y] = this.revBin(y, p, u);
      return h;
    }, q.prototype.revBin = function(u, h, p) {
      if (u === 0 || u === p - 1)
        return u;
      for (var y = 0, v = 0; v < h; v++)
        y |= (u & 1) << h - v - 1, u >>= 1;
      return y;
    }, q.prototype.permute = function(u, h, p, y, v, $) {
      for (var E = 0; E < $; E++)
        y[E] = h[u[E]], v[E] = p[u[E]];
    }, q.prototype.transform = function(u, h, p, y, v, $) {
      this.permute($, u, h, p, y, v);
      for (var E = 1; E < v; E <<= 1)
        for (var x = E << 1, l = Math.cos(2 * Math.PI / x), b = Math.sin(2 * Math.PI / x), M = 0; M < v; M += x)
          for (var k = l, U = b, T = 0; T < E; T++) {
            var H = p[M + T], Y = y[M + T], le = p[M + T + E], ce = y[M + T + E], de = k * le - U * ce;
            ce = k * ce + U * le, le = de, p[M + T] = H + le, y[M + T] = Y + ce, p[M + T + E] = H - le, y[M + T + E] = Y - ce, T !== x && (de = l * k - b * U, U = l * U + b * k, k = de);
          }
    }, q.prototype.guessLen13b = function(u, h) {
      var p = Math.max(h, u) | 1, y = p & 1, v = 0;
      for (p = p / 2 | 0; p; p = p >>> 1)
        v++;
      return 1 << v + 1 + y;
    }, q.prototype.conjugate = function(u, h, p) {
      if (!(p <= 1))
        for (var y = 0; y < p / 2; y++) {
          var v = u[y];
          u[y] = u[p - y - 1], u[p - y - 1] = v, v = h[y], h[y] = -h[p - y - 1], h[p - y - 1] = -v;
        }
    }, q.prototype.normalize13b = function(u, h) {
      for (var p = 0, y = 0; y < h / 2; y++) {
        var v = Math.round(u[2 * y + 1] / h) * 8192 + Math.round(u[2 * y] / h) + p;
        u[y] = v & 67108863, v < 67108864 ? p = 0 : p = v / 67108864 | 0;
      }
      return u;
    }, q.prototype.convert13b = function(u, h, p, y) {
      for (var v = 0, $ = 0; $ < h; $++)
        v = v + (u[$] | 0), p[2 * $] = v & 8191, v = v >>> 13, p[2 * $ + 1] = v & 8191, v = v >>> 13;
      for ($ = 2 * h; $ < y; ++$)
        p[$] = 0;
      a(v === 0), a((v & -8192) === 0);
    }, q.prototype.stub = function(u) {
      for (var h = new Array(u), p = 0; p < u; p++)
        h[p] = 0;
      return h;
    }, q.prototype.mulp = function(u, h, p) {
      var y = 2 * this.guessLen13b(u.length, h.length), v = this.makeRBT(y), $ = this.stub(y), E = new Array(y), x = new Array(y), l = new Array(y), b = new Array(y), M = new Array(y), k = new Array(y), U = p.words;
      U.length = y, this.convert13b(u.words, u.length, E, y), this.convert13b(h.words, h.length, b, y), this.transform(E, $, x, l, y, v), this.transform(b, $, M, k, y, v);
      for (var T = 0; T < y; T++) {
        var H = x[T] * M[T] - l[T] * k[T];
        l[T] = x[T] * k[T] + l[T] * M[T], x[T] = H;
      }
      return this.conjugate(x, l, y), this.transform(x, l, U, $, y, v), this.conjugate(U, $, y), this.normalize13b(U, y), p.negative = u.negative ^ h.negative, p.length = u.length + h.length, p.strip();
    }, o.prototype.mul = function(u) {
      var h = new o(null);
      return h.words = new Array(this.length + u.length), this.mulTo(u, h);
    }, o.prototype.mulf = function(u) {
      var h = new o(null);
      return h.words = new Array(this.length + u.length), z(this, u, h);
    }, o.prototype.imul = function(u) {
      return this.clone().mulTo(u, this);
    }, o.prototype.imuln = function(u) {
      a(typeof u == "number"), a(u < 67108864);
      for (var h = 0, p = 0; p < this.length; p++) {
        var y = (this.words[p] | 0) * u, v = (y & 67108863) + (h & 67108863);
        h >>= 26, h += y / 67108864 | 0, h += v >>> 26, this.words[p] = v & 67108863;
      }
      return h !== 0 && (this.words[p] = h, this.length++), this;
    }, o.prototype.muln = function(u) {
      return this.clone().imuln(u);
    }, o.prototype.sqr = function() {
      return this.mul(this);
    }, o.prototype.isqr = function() {
      return this.imul(this.clone());
    }, o.prototype.pow = function(u) {
      var h = I(u);
      if (h.length === 0)
        return new o(1);
      for (var p = this, y = 0; y < h.length && h[y] === 0; y++, p = p.sqr())
        ;
      if (++y < h.length)
        for (var v = p.sqr(); y < h.length; y++, v = v.sqr())
          h[y] !== 0 && (p = p.mul(v));
      return p;
    }, o.prototype.iushln = function(u) {
      a(typeof u == "number" && u >= 0);
      var h = u % 26, p = (u - h) / 26, y = 67108863 >>> 26 - h << 26 - h, v;
      if (h !== 0) {
        var $ = 0;
        for (v = 0; v < this.length; v++) {
          var E = this.words[v] & y, x = (this.words[v] | 0) - E << h;
          this.words[v] = x | $, $ = E >>> 26 - h;
        }
        $ && (this.words[v] = $, this.length++);
      }
      if (p !== 0) {
        for (v = this.length - 1; v >= 0; v--)
          this.words[v + p] = this.words[v];
        for (v = 0; v < p; v++)
          this.words[v] = 0;
        this.length += p;
      }
      return this.strip();
    }, o.prototype.ishln = function(u) {
      return a(this.negative === 0), this.iushln(u);
    }, o.prototype.iushrn = function(u, h, p) {
      a(typeof u == "number" && u >= 0);
      var y;
      h ? y = (h - h % 26) / 26 : y = 0;
      var v = u % 26, $ = Math.min((u - v) / 26, this.length), E = 67108863 ^ 67108863 >>> v << v, x = p;
      if (y -= $, y = Math.max(0, y), x) {
        for (var l = 0; l < $; l++)
          x.words[l] = this.words[l];
        x.length = $;
      }
      if ($ !== 0)
        if (this.length > $)
          for (this.length -= $, l = 0; l < this.length; l++)
            this.words[l] = this.words[l + $];
        else
          this.words[0] = 0, this.length = 1;
      var b = 0;
      for (l = this.length - 1; l >= 0 && (b !== 0 || l >= y); l--) {
        var M = this.words[l] | 0;
        this.words[l] = b << 26 - v | M >>> v, b = M & E;
      }
      return x && b !== 0 && (x.words[x.length++] = b), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
    }, o.prototype.ishrn = function(u, h, p) {
      return a(this.negative === 0), this.iushrn(u, h, p);
    }, o.prototype.shln = function(u) {
      return this.clone().ishln(u);
    }, o.prototype.ushln = function(u) {
      return this.clone().iushln(u);
    }, o.prototype.shrn = function(u) {
      return this.clone().ishrn(u);
    }, o.prototype.ushrn = function(u) {
      return this.clone().iushrn(u);
    }, o.prototype.testn = function(u) {
      a(typeof u == "number" && u >= 0);
      var h = u % 26, p = (u - h) / 26, y = 1 << h;
      if (this.length <= p)
        return !1;
      var v = this.words[p];
      return !!(v & y);
    }, o.prototype.imaskn = function(u) {
      a(typeof u == "number" && u >= 0);
      var h = u % 26, p = (u - h) / 26;
      if (a(this.negative === 0, "imaskn works only with positive numbers"), this.length <= p)
        return this;
      if (h !== 0 && p++, this.length = Math.min(p, this.length), h !== 0) {
        var y = 67108863 ^ 67108863 >>> h << h;
        this.words[this.length - 1] &= y;
      }
      return this.strip();
    }, o.prototype.maskn = function(u) {
      return this.clone().imaskn(u);
    }, o.prototype.iaddn = function(u) {
      return a(typeof u == "number"), a(u < 67108864), u < 0 ? this.isubn(-u) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < u ? (this.words[0] = u - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(u), this.negative = 1, this) : this._iaddn(u);
    }, o.prototype._iaddn = function(u) {
      this.words[0] += u;
      for (var h = 0; h < this.length && this.words[h] >= 67108864; h++)
        this.words[h] -= 67108864, h === this.length - 1 ? this.words[h + 1] = 1 : this.words[h + 1]++;
      return this.length = Math.max(this.length, h + 1), this;
    }, o.prototype.isubn = function(u) {
      if (a(typeof u == "number"), a(u < 67108864), u < 0)
        return this.iaddn(-u);
      if (this.negative !== 0)
        return this.negative = 0, this.iaddn(u), this.negative = 1, this;
      if (this.words[0] -= u, this.length === 1 && this.words[0] < 0)
        this.words[0] = -this.words[0], this.negative = 1;
      else
        for (var h = 0; h < this.length && this.words[h] < 0; h++)
          this.words[h] += 67108864, this.words[h + 1] -= 1;
      return this.strip();
    }, o.prototype.addn = function(u) {
      return this.clone().iaddn(u);
    }, o.prototype.subn = function(u) {
      return this.clone().isubn(u);
    }, o.prototype.iabs = function() {
      return this.negative = 0, this;
    }, o.prototype.abs = function() {
      return this.clone().iabs();
    }, o.prototype._ishlnsubmul = function(u, h, p) {
      var y = u.length + p, v;
      this._expand(y);
      var $, E = 0;
      for (v = 0; v < u.length; v++) {
        $ = (this.words[v + p] | 0) + E;
        var x = (u.words[v] | 0) * h;
        $ -= x & 67108863, E = ($ >> 26) - (x / 67108864 | 0), this.words[v + p] = $ & 67108863;
      }
      for (; v < this.length - p; v++)
        $ = (this.words[v + p] | 0) + E, E = $ >> 26, this.words[v + p] = $ & 67108863;
      if (E === 0)
        return this.strip();
      for (a(E === -1), E = 0, v = 0; v < this.length; v++)
        $ = -(this.words[v] | 0) + E, E = $ >> 26, this.words[v] = $ & 67108863;
      return this.negative = 1, this.strip();
    }, o.prototype._wordDiv = function(u, h) {
      var p = this.length - u.length, y = this.clone(), v = u, $ = v.words[v.length - 1] | 0, E = this._countBits($);
      p = 26 - E, p !== 0 && (v = v.ushln(p), y.iushln(p), $ = v.words[v.length - 1] | 0);
      var x = y.length - v.length, l;
      if (h !== "mod") {
        l = new o(null), l.length = x + 1, l.words = new Array(l.length);
        for (var b = 0; b < l.length; b++)
          l.words[b] = 0;
      }
      var M = y.clone()._ishlnsubmul(v, 1, x);
      M.negative === 0 && (y = M, l && (l.words[x] = 1));
      for (var k = x - 1; k >= 0; k--) {
        var U = (y.words[v.length + k] | 0) * 67108864 + (y.words[v.length + k - 1] | 0);
        for (U = Math.min(U / $ | 0, 67108863), y._ishlnsubmul(v, U, k); y.negative !== 0; )
          U--, y.negative = 0, y._ishlnsubmul(v, 1, k), y.isZero() || (y.negative ^= 1);
        l && (l.words[k] = U);
      }
      return l && l.strip(), y.strip(), h !== "div" && p !== 0 && y.iushrn(p), {
        div: l || null,
        mod: y
      };
    }, o.prototype.divmod = function(u, h, p) {
      if (a(!u.isZero()), this.isZero())
        return {
          div: new o(0),
          mod: new o(0)
        };
      var y, v, $;
      return this.negative !== 0 && u.negative === 0 ? ($ = this.neg().divmod(u, h), h !== "mod" && (y = $.div.neg()), h !== "div" && (v = $.mod.neg(), p && v.negative !== 0 && v.iadd(u)), {
        div: y,
        mod: v
      }) : this.negative === 0 && u.negative !== 0 ? ($ = this.divmod(u.neg(), h), h !== "mod" && (y = $.div.neg()), {
        div: y,
        mod: $.mod
      }) : this.negative & u.negative ? ($ = this.neg().divmod(u.neg(), h), h !== "div" && (v = $.mod.neg(), p && v.negative !== 0 && v.isub(u)), {
        div: $.div,
        mod: v
      }) : u.length > this.length || this.cmp(u) < 0 ? {
        div: new o(0),
        mod: this
      } : u.length === 1 ? h === "div" ? {
        div: this.divn(u.words[0]),
        mod: null
      } : h === "mod" ? {
        div: null,
        mod: new o(this.modn(u.words[0]))
      } : {
        div: this.divn(u.words[0]),
        mod: new o(this.modn(u.words[0]))
      } : this._wordDiv(u, h);
    }, o.prototype.div = function(u) {
      return this.divmod(u, "div", !1).div;
    }, o.prototype.mod = function(u) {
      return this.divmod(u, "mod", !1).mod;
    }, o.prototype.umod = function(u) {
      return this.divmod(u, "mod", !0).mod;
    }, o.prototype.divRound = function(u) {
      var h = this.divmod(u);
      if (h.mod.isZero())
        return h.div;
      var p = h.div.negative !== 0 ? h.mod.isub(u) : h.mod, y = u.ushrn(1), v = u.andln(1), $ = p.cmp(y);
      return $ < 0 || v === 1 && $ === 0 ? h.div : h.div.negative !== 0 ? h.div.isubn(1) : h.div.iaddn(1);
    }, o.prototype.modn = function(u) {
      a(u <= 67108863);
      for (var h = (1 << 26) % u, p = 0, y = this.length - 1; y >= 0; y--)
        p = (h * p + (this.words[y] | 0)) % u;
      return p;
    }, o.prototype.idivn = function(u) {
      a(u <= 67108863);
      for (var h = 0, p = this.length - 1; p >= 0; p--) {
        var y = (this.words[p] | 0) + h * 67108864;
        this.words[p] = y / u | 0, h = y % u;
      }
      return this.strip();
    }, o.prototype.divn = function(u) {
      return this.clone().idivn(u);
    }, o.prototype.egcd = function(u) {
      a(u.negative === 0), a(!u.isZero());
      var h = this, p = u.clone();
      h.negative !== 0 ? h = h.umod(u) : h = h.clone();
      for (var y = new o(1), v = new o(0), $ = new o(0), E = new o(1), x = 0; h.isEven() && p.isEven(); )
        h.iushrn(1), p.iushrn(1), ++x;
      for (var l = p.clone(), b = h.clone(); !h.isZero(); ) {
        for (var M = 0, k = 1; !(h.words[0] & k) && M < 26; ++M, k <<= 1)
          ;
        if (M > 0)
          for (h.iushrn(M); M-- > 0; )
            (y.isOdd() || v.isOdd()) && (y.iadd(l), v.isub(b)), y.iushrn(1), v.iushrn(1);
        for (var U = 0, T = 1; !(p.words[0] & T) && U < 26; ++U, T <<= 1)
          ;
        if (U > 0)
          for (p.iushrn(U); U-- > 0; )
            ($.isOdd() || E.isOdd()) && ($.iadd(l), E.isub(b)), $.iushrn(1), E.iushrn(1);
        h.cmp(p) >= 0 ? (h.isub(p), y.isub($), v.isub(E)) : (p.isub(h), $.isub(y), E.isub(v));
      }
      return {
        a: $,
        b: E,
        gcd: p.iushln(x)
      };
    }, o.prototype._invmp = function(u) {
      a(u.negative === 0), a(!u.isZero());
      var h = this, p = u.clone();
      h.negative !== 0 ? h = h.umod(u) : h = h.clone();
      for (var y = new o(1), v = new o(0), $ = p.clone(); h.cmpn(1) > 0 && p.cmpn(1) > 0; ) {
        for (var E = 0, x = 1; !(h.words[0] & x) && E < 26; ++E, x <<= 1)
          ;
        if (E > 0)
          for (h.iushrn(E); E-- > 0; )
            y.isOdd() && y.iadd($), y.iushrn(1);
        for (var l = 0, b = 1; !(p.words[0] & b) && l < 26; ++l, b <<= 1)
          ;
        if (l > 0)
          for (p.iushrn(l); l-- > 0; )
            v.isOdd() && v.iadd($), v.iushrn(1);
        h.cmp(p) >= 0 ? (h.isub(p), y.isub(v)) : (p.isub(h), v.isub(y));
      }
      var M;
      return h.cmpn(1) === 0 ? M = y : M = v, M.cmpn(0) < 0 && M.iadd(u), M;
    }, o.prototype.gcd = function(u) {
      if (this.isZero())
        return u.abs();
      if (u.isZero())
        return this.abs();
      var h = this.clone(), p = u.clone();
      h.negative = 0, p.negative = 0;
      for (var y = 0; h.isEven() && p.isEven(); y++)
        h.iushrn(1), p.iushrn(1);
      do {
        for (; h.isEven(); )
          h.iushrn(1);
        for (; p.isEven(); )
          p.iushrn(1);
        var v = h.cmp(p);
        if (v < 0) {
          var $ = h;
          h = p, p = $;
        } else if (v === 0 || p.cmpn(1) === 0)
          break;
        h.isub(p);
      } while (!0);
      return p.iushln(y);
    }, o.prototype.invm = function(u) {
      return this.egcd(u).a.umod(u);
    }, o.prototype.isEven = function() {
      return (this.words[0] & 1) === 0;
    }, o.prototype.isOdd = function() {
      return (this.words[0] & 1) === 1;
    }, o.prototype.andln = function(u) {
      return this.words[0] & u;
    }, o.prototype.bincn = function(u) {
      a(typeof u == "number");
      var h = u % 26, p = (u - h) / 26, y = 1 << h;
      if (this.length <= p)
        return this._expand(p + 1), this.words[p] |= y, this;
      for (var v = y, $ = p; v !== 0 && $ < this.length; $++) {
        var E = this.words[$] | 0;
        E += v, v = E >>> 26, E &= 67108863, this.words[$] = E;
      }
      return v !== 0 && (this.words[$] = v, this.length++), this;
    }, o.prototype.isZero = function() {
      return this.length === 1 && this.words[0] === 0;
    }, o.prototype.cmpn = function(u) {
      var h = u < 0;
      if (this.negative !== 0 && !h)
        return -1;
      if (this.negative === 0 && h)
        return 1;
      this.strip();
      var p;
      if (this.length > 1)
        p = 1;
      else {
        h && (u = -u), a(u <= 67108863, "Number is too big");
        var y = this.words[0] | 0;
        p = y === u ? 0 : y < u ? -1 : 1;
      }
      return this.negative !== 0 ? -p | 0 : p;
    }, o.prototype.cmp = function(u) {
      if (this.negative !== 0 && u.negative === 0)
        return -1;
      if (this.negative === 0 && u.negative !== 0)
        return 1;
      var h = this.ucmp(u);
      return this.negative !== 0 ? -h | 0 : h;
    }, o.prototype.ucmp = function(u) {
      if (this.length > u.length)
        return 1;
      if (this.length < u.length)
        return -1;
      for (var h = 0, p = this.length - 1; p >= 0; p--) {
        var y = this.words[p] | 0, v = u.words[p] | 0;
        if (y !== v) {
          y < v ? h = -1 : y > v && (h = 1);
          break;
        }
      }
      return h;
    }, o.prototype.gtn = function(u) {
      return this.cmpn(u) === 1;
    }, o.prototype.gt = function(u) {
      return this.cmp(u) === 1;
    }, o.prototype.gten = function(u) {
      return this.cmpn(u) >= 0;
    }, o.prototype.gte = function(u) {
      return this.cmp(u) >= 0;
    }, o.prototype.ltn = function(u) {
      return this.cmpn(u) === -1;
    }, o.prototype.lt = function(u) {
      return this.cmp(u) === -1;
    }, o.prototype.lten = function(u) {
      return this.cmpn(u) <= 0;
    }, o.prototype.lte = function(u) {
      return this.cmp(u) <= 0;
    }, o.prototype.eqn = function(u) {
      return this.cmpn(u) === 0;
    }, o.prototype.eq = function(u) {
      return this.cmp(u) === 0;
    }, o.red = function(u) {
      return new V(u);
    }, o.prototype.toRed = function(u) {
      return a(!this.red, "Already a number in reduction context"), a(this.negative === 0, "red works only with positives"), u.convertTo(this)._forceRed(u);
    }, o.prototype.fromRed = function() {
      return a(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
    }, o.prototype._forceRed = function(u) {
      return this.red = u, this;
    }, o.prototype.forceRed = function(u) {
      return a(!this.red, "Already a number in reduction context"), this._forceRed(u);
    }, o.prototype.redAdd = function(u) {
      return a(this.red, "redAdd works only with red numbers"), this.red.add(this, u);
    }, o.prototype.redIAdd = function(u) {
      return a(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, u);
    }, o.prototype.redSub = function(u) {
      return a(this.red, "redSub works only with red numbers"), this.red.sub(this, u);
    }, o.prototype.redISub = function(u) {
      return a(this.red, "redISub works only with red numbers"), this.red.isub(this, u);
    }, o.prototype.redShl = function(u) {
      return a(this.red, "redShl works only with red numbers"), this.red.shl(this, u);
    }, o.prototype.redMul = function(u) {
      return a(this.red, "redMul works only with red numbers"), this.red._verify2(this, u), this.red.mul(this, u);
    }, o.prototype.redIMul = function(u) {
      return a(this.red, "redMul works only with red numbers"), this.red._verify2(this, u), this.red.imul(this, u);
    }, o.prototype.redSqr = function() {
      return a(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
    }, o.prototype.redISqr = function() {
      return a(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
    }, o.prototype.redSqrt = function() {
      return a(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
    }, o.prototype.redInvm = function() {
      return a(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
    }, o.prototype.redNeg = function() {
      return a(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
    }, o.prototype.redPow = function(u) {
      return a(this.red && !u.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, u);
    };
    var Z = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function X(_, u) {
      this.name = _, this.p = new o(u, 16), this.n = this.p.bitLength(), this.k = new o(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
    }
    X.prototype._tmp = function() {
      var u = new o(null);
      return u.words = new Array(Math.ceil(this.n / 13)), u;
    }, X.prototype.ireduce = function(u) {
      var h = u, p;
      do
        this.split(h, this.tmp), h = this.imulK(h), h = h.iadd(this.tmp), p = h.bitLength();
      while (p > this.n);
      var y = p < this.n ? -1 : h.ucmp(this.p);
      return y === 0 ? (h.words[0] = 0, h.length = 1) : y > 0 ? h.isub(this.p) : h.strip !== void 0 ? h.strip() : h._strip(), h;
    }, X.prototype.split = function(u, h) {
      u.iushrn(this.n, 0, h);
    }, X.prototype.imulK = function(u) {
      return u.imul(this.k);
    };
    function ie() {
      X.call(
        this,
        "k256",
        "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
      );
    }
    c(ie, X), ie.prototype.split = function(u, h) {
      for (var p = 4194303, y = Math.min(u.length, 9), v = 0; v < y; v++)
        h.words[v] = u.words[v];
      if (h.length = y, u.length <= 9) {
        u.words[0] = 0, u.length = 1;
        return;
      }
      var $ = u.words[9];
      for (h.words[h.length++] = $ & p, v = 10; v < u.length; v++) {
        var E = u.words[v] | 0;
        u.words[v - 10] = (E & p) << 4 | $ >>> 22, $ = E;
      }
      $ >>>= 22, u.words[v - 10] = $, $ === 0 && u.length > 10 ? u.length -= 10 : u.length -= 9;
    }, ie.prototype.imulK = function(u) {
      u.words[u.length] = 0, u.words[u.length + 1] = 0, u.length += 2;
      for (var h = 0, p = 0; p < u.length; p++) {
        var y = u.words[p] | 0;
        h += y * 977, u.words[p] = h & 67108863, h = y * 64 + (h / 67108864 | 0);
      }
      return u.words[u.length - 1] === 0 && (u.length--, u.words[u.length - 1] === 0 && u.length--), u;
    };
    function fe() {
      X.call(
        this,
        "p224",
        "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
      );
    }
    c(fe, X);
    function ye() {
      X.call(
        this,
        "p192",
        "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
      );
    }
    c(ye, X);
    function j() {
      X.call(
        this,
        "25519",
        "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
      );
    }
    c(j, X), j.prototype.imulK = function(u) {
      for (var h = 0, p = 0; p < u.length; p++) {
        var y = (u.words[p] | 0) * 19 + h, v = y & 67108863;
        y >>>= 26, u.words[p] = v, h = y;
      }
      return h !== 0 && (u.words[u.length++] = h), u;
    }, o._prime = function(u) {
      if (Z[u])
        return Z[u];
      var h;
      if (u === "k256")
        h = new ie();
      else if (u === "p224")
        h = new fe();
      else if (u === "p192")
        h = new ye();
      else if (u === "p25519")
        h = new j();
      else
        throw new Error("Unknown prime " + u);
      return Z[u] = h, h;
    };
    function V(_) {
      if (typeof _ == "string") {
        var u = o._prime(_);
        this.m = u.p, this.prime = u;
      } else
        a(_.gtn(1), "modulus must be greater than 1"), this.m = _, this.prime = null;
    }
    V.prototype._verify1 = function(u) {
      a(u.negative === 0, "red works only with positives"), a(u.red, "red works only with red numbers");
    }, V.prototype._verify2 = function(u, h) {
      a((u.negative | h.negative) === 0, "red works only with positives"), a(
        u.red && u.red === h.red,
        "red works only with red numbers"
      );
    }, V.prototype.imod = function(u) {
      return this.prime ? this.prime.ireduce(u)._forceRed(this) : u.umod(this.m)._forceRed(this);
    }, V.prototype.neg = function(u) {
      return u.isZero() ? u.clone() : this.m.sub(u)._forceRed(this);
    }, V.prototype.add = function(u, h) {
      this._verify2(u, h);
      var p = u.add(h);
      return p.cmp(this.m) >= 0 && p.isub(this.m), p._forceRed(this);
    }, V.prototype.iadd = function(u, h) {
      this._verify2(u, h);
      var p = u.iadd(h);
      return p.cmp(this.m) >= 0 && p.isub(this.m), p;
    }, V.prototype.sub = function(u, h) {
      this._verify2(u, h);
      var p = u.sub(h);
      return p.cmpn(0) < 0 && p.iadd(this.m), p._forceRed(this);
    }, V.prototype.isub = function(u, h) {
      this._verify2(u, h);
      var p = u.isub(h);
      return p.cmpn(0) < 0 && p.iadd(this.m), p;
    }, V.prototype.shl = function(u, h) {
      return this._verify1(u), this.imod(u.ushln(h));
    }, V.prototype.imul = function(u, h) {
      return this._verify2(u, h), this.imod(u.imul(h));
    }, V.prototype.mul = function(u, h) {
      return this._verify2(u, h), this.imod(u.mul(h));
    }, V.prototype.isqr = function(u) {
      return this.imul(u, u.clone());
    }, V.prototype.sqr = function(u) {
      return this.mul(u, u);
    }, V.prototype.sqrt = function(u) {
      if (u.isZero())
        return u.clone();
      var h = this.m.andln(3);
      if (a(h % 2 === 1), h === 3) {
        var p = this.m.add(new o(1)).iushrn(2);
        return this.pow(u, p);
      }
      for (var y = this.m.subn(1), v = 0; !y.isZero() && y.andln(1) === 0; )
        v++, y.iushrn(1);
      a(!y.isZero());
      var $ = new o(1).toRed(this), E = $.redNeg(), x = this.m.subn(1).iushrn(1), l = this.m.bitLength();
      for (l = new o(2 * l * l).toRed(this); this.pow(l, x).cmp(E) !== 0; )
        l.redIAdd(E);
      for (var b = this.pow(l, y), M = this.pow(u, y.addn(1).iushrn(1)), k = this.pow(u, y), U = v; k.cmp($) !== 0; ) {
        for (var T = k, H = 0; T.cmp($) !== 0; H++)
          T = T.redSqr();
        a(H < U);
        var Y = this.pow(b, new o(1).iushln(U - H - 1));
        M = M.redMul(Y), b = Y.redSqr(), k = k.redMul(b), U = H;
      }
      return M;
    }, V.prototype.invm = function(u) {
      var h = u._invmp(this.m);
      return h.negative !== 0 ? (h.negative = 0, this.imod(h).redNeg()) : this.imod(h);
    }, V.prototype.pow = function(u, h) {
      if (h.isZero())
        return new o(1).toRed(this);
      if (h.cmpn(1) === 0)
        return u.clone();
      var p = 4, y = new Array(1 << p);
      y[0] = new o(1).toRed(this), y[1] = u;
      for (var v = 2; v < y.length; v++)
        y[v] = this.mul(y[v - 1], u);
      var $ = y[0], E = 0, x = 0, l = h.bitLength() % 26;
      for (l === 0 && (l = 26), v = h.length - 1; v >= 0; v--) {
        for (var b = h.words[v], M = l - 1; M >= 0; M--) {
          var k = b >> M & 1;
          if ($ !== y[0] && ($ = this.sqr($)), k === 0 && E === 0) {
            x = 0;
            continue;
          }
          E <<= 1, E |= k, x++, !(x !== p && (v !== 0 || M !== 0)) && ($ = this.mul($, y[E]), x = 0, E = 0);
        }
        l = 26;
      }
      return $;
    }, V.prototype.convertTo = function(u) {
      var h = u.umod(this.m);
      return h === u ? h.clone() : h;
    }, V.prototype.convertFrom = function(u) {
      var h = u.clone();
      return h.red = null, h;
    }, o.mont = function(u) {
      return new ae(u);
    };
    function ae(_) {
      V.call(this, _), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new o(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
    }
    c(ae, V), ae.prototype.convertTo = function(u) {
      return this.imod(u.ushln(this.shift));
    }, ae.prototype.convertFrom = function(u) {
      var h = this.imod(u.mul(this.rinv));
      return h.red = null, h;
    }, ae.prototype.imul = function(u, h) {
      if (u.isZero() || h.isZero())
        return u.words[0] = 0, u.length = 1, u;
      var p = u.imul(h), y = p.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), v = p.isub(y).iushrn(this.shift), $ = v;
      return v.cmp(this.m) >= 0 ? $ = v.isub(this.m) : v.cmpn(0) < 0 && ($ = v.iadd(this.m)), $._forceRed(this);
    }, ae.prototype.mul = function(u, h) {
      if (u.isZero() || h.isZero())
        return new o(0)._forceRed(this);
      var p = u.mul(h), y = p.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), v = p.isub(y).iushrn(this.shift), $ = v;
      return v.cmp(this.m) >= 0 ? $ = v.isub(this.m) : v.cmpn(0) < 0 && ($ = v.iadd(this.m)), $._forceRed(this);
    }, ae.prototype.invm = function(u) {
      var h = this.imod(u._invmp(this.m).mul(this.r2));
      return h._forceRed(this);
    };
  })(t, commonjsGlobal);
})(bn$2);
var bnExports$2 = bn$2.exports, api$2 = {}, encoders = {}, buffer$1 = require$$0$2, Buffer$a = buffer$1.Buffer, safer = {}, key$1;
for (key$1 in buffer$1)
  buffer$1.hasOwnProperty(key$1) && (key$1 === "SlowBuffer" || key$1 === "Buffer" || (safer[key$1] = buffer$1[key$1]));
var Safer = safer.Buffer = {};
for (key$1 in Buffer$a)
  Buffer$a.hasOwnProperty(key$1) && (key$1 === "allocUnsafe" || key$1 === "allocUnsafeSlow" || (Safer[key$1] = Buffer$a[key$1]));
safer.Buffer.prototype = Buffer$a.prototype;
(!Safer.from || Safer.from === Uint8Array.from) && (Safer.from = function(t, e, n) {
  if (typeof t == "number")
    throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof t);
  if (t && typeof t.length > "u")
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t);
  return Buffer$a(t, e, n);
});
Safer.alloc || (Safer.alloc = function(t, e, n) {
  if (typeof t != "number")
    throw new TypeError('The "size" argument must be of type number. Received type ' + typeof t);
  if (t < 0 || t >= 2 * (1 << 30))
    throw new RangeError('The value "' + t + '" is invalid for option "size"');
  var a = Buffer$a(t);
  return !e || e.length === 0 ? a.fill(0) : typeof n == "string" ? a.fill(e, n) : a.fill(e), a;
});
if (!safer.kStringMaxLength)
  try {
    safer.kStringMaxLength = process$1.binding("buffer").kStringMaxLength;
  } catch {
  }
safer.constants || (safer.constants = {
  MAX_LENGTH: safer.kMaxLength
}, safer.kStringMaxLength && (safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength));
var safer_1 = safer, reporter = {};
const inherits$7 = inherits_browserExports;
function Reporter$2(t) {
  this._reporterState = {
    obj: null,
    path: [],
    options: t || {},
    errors: []
  };
}
reporter.Reporter = Reporter$2;
Reporter$2.prototype.isError = function(e) {
  return e instanceof ReporterError;
};
Reporter$2.prototype.save = function() {
  const e = this._reporterState;
  return { obj: e.obj, pathLen: e.path.length };
};
Reporter$2.prototype.restore = function(e) {
  const n = this._reporterState;
  n.obj = e.obj, n.path = n.path.slice(0, e.pathLen);
};
Reporter$2.prototype.enterKey = function(e) {
  return this._reporterState.path.push(e);
};
Reporter$2.prototype.exitKey = function(e) {
  const n = this._reporterState;
  n.path = n.path.slice(0, e - 1);
};
Reporter$2.prototype.leaveKey = function(e, n, a) {
  const c = this._reporterState;
  this.exitKey(e), c.obj !== null && (c.obj[n] = a);
};
Reporter$2.prototype.path = function() {
  return this._reporterState.path.join("/");
};
Reporter$2.prototype.enterObject = function() {
  const e = this._reporterState, n = e.obj;
  return e.obj = {}, n;
};
Reporter$2.prototype.leaveObject = function(e) {
  const n = this._reporterState, a = n.obj;
  return n.obj = e, a;
};
Reporter$2.prototype.error = function(e) {
  let n;
  const a = this._reporterState, c = e instanceof ReporterError;
  if (c ? n = e : n = new ReporterError(a.path.map(function(o) {
    return "[" + JSON.stringify(o) + "]";
  }).join(""), e.message || e, e.stack), !a.options.partial)
    throw n;
  return c || a.errors.push(n), n;
};
Reporter$2.prototype.wrapResult = function(e) {
  const n = this._reporterState;
  return n.options.partial ? {
    result: this.isError(e) ? null : e,
    errors: n.errors
  } : e;
};
function ReporterError(t, e) {
  this.path = t, this.rethrow(e);
}
inherits$7(ReporterError, Error);
ReporterError.prototype.rethrow = function(e) {
  if (this.message = e + " at: " + (this.path || "(shallow)"), Error.captureStackTrace && Error.captureStackTrace(this, ReporterError), !this.stack)
    try {
      throw new Error(this.message);
    } catch (n) {
      this.stack = n.stack;
    }
  return this;
};
var buffer = {};
const inherits$6 = inherits_browserExports, Reporter$1 = reporter.Reporter, Buffer$9 = safer_1.Buffer;
function DecoderBuffer$2(t, e) {
  if (Reporter$1.call(this, e), !Buffer$9.isBuffer(t)) {
    this.error("Input not Buffer");
    return;
  }
  this.base = t, this.offset = 0, this.length = t.length;
}
inherits$6(DecoderBuffer$2, Reporter$1);
buffer.DecoderBuffer = DecoderBuffer$2;
DecoderBuffer$2.isDecoderBuffer = function(e) {
  return e instanceof DecoderBuffer$2 ? !0 : typeof e == "object" && Buffer$9.isBuffer(e.base) && e.constructor.name === "DecoderBuffer" && typeof e.offset == "number" && typeof e.length == "number" && typeof e.save == "function" && typeof e.restore == "function" && typeof e.isEmpty == "function" && typeof e.readUInt8 == "function" && typeof e.skip == "function" && typeof e.raw == "function";
};
DecoderBuffer$2.prototype.save = function() {
  return { offset: this.offset, reporter: Reporter$1.prototype.save.call(this) };
};
DecoderBuffer$2.prototype.restore = function(e) {
  const n = new DecoderBuffer$2(this.base);
  return n.offset = e.offset, n.length = this.offset, this.offset = e.offset, Reporter$1.prototype.restore.call(this, e.reporter), n;
};
DecoderBuffer$2.prototype.isEmpty = function() {
  return this.offset === this.length;
};
DecoderBuffer$2.prototype.readUInt8 = function(e) {
  return this.offset + 1 <= this.length ? this.base.readUInt8(this.offset++, !0) : this.error(e || "DecoderBuffer overrun");
};
DecoderBuffer$2.prototype.skip = function(e, n) {
  if (!(this.offset + e <= this.length))
    return this.error(n || "DecoderBuffer overrun");
  const a = new DecoderBuffer$2(this.base);
  return a._reporterState = this._reporterState, a.offset = this.offset, a.length = this.offset + e, this.offset += e, a;
};
DecoderBuffer$2.prototype.raw = function(e) {
  return this.base.slice(e ? e.offset : this.offset, this.length);
};
function EncoderBuffer$1(t, e) {
  if (Array.isArray(t))
    this.length = 0, this.value = t.map(function(n) {
      return EncoderBuffer$1.isEncoderBuffer(n) || (n = new EncoderBuffer$1(n, e)), this.length += n.length, n;
    }, this);
  else if (typeof t == "number") {
    if (!(0 <= t && t <= 255))
      return e.error("non-byte EncoderBuffer value");
    this.value = t, this.length = 1;
  } else if (typeof t == "string")
    this.value = t, this.length = Buffer$9.byteLength(t);
  else if (Buffer$9.isBuffer(t))
    this.value = t, this.length = t.length;
  else
    return e.error("Unsupported type: " + typeof t);
}
buffer.EncoderBuffer = EncoderBuffer$1;
EncoderBuffer$1.isEncoderBuffer = function(e) {
  return e instanceof EncoderBuffer$1 ? !0 : typeof e == "object" && e.constructor.name === "EncoderBuffer" && typeof e.length == "number" && typeof e.join == "function";
};
EncoderBuffer$1.prototype.join = function(e, n) {
  return e || (e = Buffer$9.alloc(this.length)), n || (n = 0), this.length === 0 || (Array.isArray(this.value) ? this.value.forEach(function(a) {
    a.join(e, n), n += a.length;
  }) : (typeof this.value == "number" ? e[n] = this.value : typeof this.value == "string" ? e.write(this.value, n) : Buffer$9.isBuffer(this.value) && this.value.copy(e, n), n += this.length)), e;
};
const Reporter = reporter.Reporter, EncoderBuffer = buffer.EncoderBuffer, DecoderBuffer$1 = buffer.DecoderBuffer, assert$6 = minimalisticAssert$1, tags = [
  "seq",
  "seqof",
  "set",
  "setof",
  "objid",
  "bool",
  "gentime",
  "utctime",
  "null_",
  "enum",
  "int",
  "objDesc",
  "bitstr",
  "bmpstr",
  "charstr",
  "genstr",
  "graphstr",
  "ia5str",
  "iso646str",
  "numstr",
  "octstr",
  "printstr",
  "t61str",
  "unistr",
  "utf8str",
  "videostr"
], methods = [
  "key",
  "obj",
  "use",
  "optional",
  "explicit",
  "implicit",
  "def",
  "choice",
  "any",
  "contains"
].concat(tags), overrided = [
  "_peekTag",
  "_decodeTag",
  "_use",
  "_decodeStr",
  "_decodeObjid",
  "_decodeTime",
  "_decodeNull",
  "_decodeInt",
  "_decodeBool",
  "_decodeList",
  "_encodeComposite",
  "_encodeStr",
  "_encodeObjid",
  "_encodeTime",
  "_encodeNull",
  "_encodeInt",
  "_encodeBool"
];
function Node$2(t, e, n) {
  const a = {};
  this._baseState = a, a.name = n, a.enc = t, a.parent = e || null, a.children = null, a.tag = null, a.args = null, a.reverseArgs = null, a.choice = null, a.optional = !1, a.any = !1, a.obj = !1, a.use = null, a.useDecoder = null, a.key = null, a.default = null, a.explicit = null, a.implicit = null, a.contains = null, a.parent || (a.children = [], this._wrap());
}
var node = Node$2;
const stateProps = [
  "enc",
  "parent",
  "children",
  "tag",
  "args",
  "reverseArgs",
  "choice",
  "optional",
  "any",
  "obj",
  "use",
  "alteredUse",
  "key",
  "default",
  "explicit",
  "implicit",
  "contains"
];
Node$2.prototype.clone = function() {
  const e = this._baseState, n = {};
  stateProps.forEach(function(c) {
    n[c] = e[c];
  });
  const a = new this.constructor(n.parent);
  return a._baseState = n, a;
};
Node$2.prototype._wrap = function() {
  const e = this._baseState;
  methods.forEach(function(n) {
    this[n] = function() {
      const c = new this.constructor(this);
      return e.children.push(c), c[n].apply(c, arguments);
    };
  }, this);
};
Node$2.prototype._init = function(e) {
  const n = this._baseState;
  assert$6(n.parent === null), e.call(this), n.children = n.children.filter(function(a) {
    return a._baseState.parent === this;
  }, this), assert$6.equal(n.children.length, 1, "Root node can have only one child");
};
Node$2.prototype._useArgs = function(e) {
  const n = this._baseState, a = e.filter(function(c) {
    return c instanceof this.constructor;
  }, this);
  e = e.filter(function(c) {
    return !(c instanceof this.constructor);
  }, this), a.length !== 0 && (assert$6(n.children === null), n.children = a, a.forEach(function(c) {
    c._baseState.parent = this;
  }, this)), e.length !== 0 && (assert$6(n.args === null), n.args = e, n.reverseArgs = e.map(function(c) {
    if (typeof c != "object" || c.constructor !== Object)
      return c;
    const o = {};
    return Object.keys(c).forEach(function(d) {
      d == (d | 0) && (d |= 0);
      const m = c[d];
      o[m] = d;
    }), o;
  }));
};
overrided.forEach(function(t) {
  Node$2.prototype[t] = function() {
    const n = this._baseState;
    throw new Error(t + " not implemented for encoding: " + n.enc);
  };
});
tags.forEach(function(t) {
  Node$2.prototype[t] = function() {
    const n = this._baseState, a = Array.prototype.slice.call(arguments);
    return assert$6(n.tag === null), n.tag = t, this._useArgs(a), this;
  };
});
Node$2.prototype.use = function(e) {
  assert$6(e);
  const n = this._baseState;
  return assert$6(n.use === null), n.use = e, this;
};
Node$2.prototype.optional = function() {
  const e = this._baseState;
  return e.optional = !0, this;
};
Node$2.prototype.def = function(e) {
  const n = this._baseState;
  return assert$6(n.default === null), n.default = e, n.optional = !0, this;
};
Node$2.prototype.explicit = function(e) {
  const n = this._baseState;
  return assert$6(n.explicit === null && n.implicit === null), n.explicit = e, this;
};
Node$2.prototype.implicit = function(e) {
  const n = this._baseState;
  return assert$6(n.explicit === null && n.implicit === null), n.implicit = e, this;
};
Node$2.prototype.obj = function() {
  const e = this._baseState, n = Array.prototype.slice.call(arguments);
  return e.obj = !0, n.length !== 0 && this._useArgs(n), this;
};
Node$2.prototype.key = function(e) {
  const n = this._baseState;
  return assert$6(n.key === null), n.key = e, this;
};
Node$2.prototype.any = function() {
  const e = this._baseState;
  return e.any = !0, this;
};
Node$2.prototype.choice = function(e) {
  const n = this._baseState;
  return assert$6(n.choice === null), n.choice = e, this._useArgs(Object.keys(e).map(function(a) {
    return e[a];
  })), this;
};
Node$2.prototype.contains = function(e) {
  const n = this._baseState;
  return assert$6(n.use === null), n.contains = e, this;
};
Node$2.prototype._decode = function(e, n) {
  const a = this._baseState;
  if (a.parent === null)
    return e.wrapResult(a.children[0]._decode(e, n));
  let c = a.default, o = !0, d = null;
  if (a.key !== null && (d = e.enterKey(a.key)), a.optional) {
    let w = null;
    if (a.explicit !== null ? w = a.explicit : a.implicit !== null ? w = a.implicit : a.tag !== null && (w = a.tag), w === null && !a.any) {
      const S = e.save();
      try {
        a.choice === null ? this._decodeGeneric(a.tag, e, n) : this._decodeChoice(e, n), o = !0;
      } catch {
        o = !1;
      }
      e.restore(S);
    } else if (o = this._peekTag(e, w, a.any), e.isError(o))
      return o;
  }
  let m;
  if (a.obj && o && (m = e.enterObject()), o) {
    if (a.explicit !== null) {
      const S = this._decodeTag(e, a.explicit);
      if (e.isError(S))
        return S;
      e = S;
    }
    const w = e.offset;
    if (a.use === null && a.choice === null) {
      let S;
      a.any && (S = e.save());
      const A = this._decodeTag(
        e,
        a.implicit !== null ? a.implicit : a.tag,
        a.any
      );
      if (e.isError(A))
        return A;
      a.any ? c = e.raw(S) : e = A;
    }
    if (n && n.track && a.tag !== null && n.track(e.path(), w, e.length, "tagged"), n && n.track && a.tag !== null && n.track(e.path(), e.offset, e.length, "content"), a.any || (a.choice === null ? c = this._decodeGeneric(a.tag, e, n) : c = this._decodeChoice(e, n)), e.isError(c))
      return c;
    if (!a.any && a.choice === null && a.children !== null && a.children.forEach(function(A) {
      A._decode(e, n);
    }), a.contains && (a.tag === "octstr" || a.tag === "bitstr")) {
      const S = new DecoderBuffer$1(c);
      c = this._getUse(a.contains, e._reporterState.obj)._decode(S, n);
    }
  }
  return a.obj && o && (c = e.leaveObject(m)), a.key !== null && (c !== null || o === !0) ? e.leaveKey(d, a.key, c) : d !== null && e.exitKey(d), c;
};
Node$2.prototype._decodeGeneric = function(e, n, a) {
  const c = this._baseState;
  return e === "seq" || e === "set" ? null : e === "seqof" || e === "setof" ? this._decodeList(n, e, c.args[0], a) : /str$/.test(e) ? this._decodeStr(n, e, a) : e === "objid" && c.args ? this._decodeObjid(n, c.args[0], c.args[1], a) : e === "objid" ? this._decodeObjid(n, null, null, a) : e === "gentime" || e === "utctime" ? this._decodeTime(n, e, a) : e === "null_" ? this._decodeNull(n, a) : e === "bool" ? this._decodeBool(n, a) : e === "objDesc" ? this._decodeStr(n, e, a) : e === "int" || e === "enum" ? this._decodeInt(n, c.args && c.args[0], a) : c.use !== null ? this._getUse(c.use, n._reporterState.obj)._decode(n, a) : n.error("unknown tag: " + e);
};
Node$2.prototype._getUse = function(e, n) {
  const a = this._baseState;
  return a.useDecoder = this._use(e, n), assert$6(a.useDecoder._baseState.parent === null), a.useDecoder = a.useDecoder._baseState.children[0], a.implicit !== a.useDecoder._baseState.implicit && (a.useDecoder = a.useDecoder.clone(), a.useDecoder._baseState.implicit = a.implicit), a.useDecoder;
};
Node$2.prototype._decodeChoice = function(e, n) {
  const a = this._baseState;
  let c = null, o = !1;
  return Object.keys(a.choice).some(function(d) {
    const m = e.save(), w = a.choice[d];
    try {
      const S = w._decode(e, n);
      if (e.isError(S))
        return !1;
      c = { type: d, value: S }, o = !0;
    } catch {
      return e.restore(m), !1;
    }
    return !0;
  }, this), o ? c : e.error("Choice not matched");
};
Node$2.prototype._createEncoderBuffer = function(e) {
  return new EncoderBuffer(e, this.reporter);
};
Node$2.prototype._encode = function(e, n, a) {
  const c = this._baseState;
  if (c.default !== null && c.default === e)
    return;
  const o = this._encodeValue(e, n, a);
  if (o !== void 0 && !this._skipDefault(o, n, a))
    return o;
};
Node$2.prototype._encodeValue = function(e, n, a) {
  const c = this._baseState;
  if (c.parent === null)
    return c.children[0]._encode(e, n || new Reporter());
  let o = null;
  if (this.reporter = n, c.optional && e === void 0)
    if (c.default !== null)
      e = c.default;
    else
      return;
  let d = null, m = !1;
  if (c.any)
    o = this._createEncoderBuffer(e);
  else if (c.choice)
    o = this._encodeChoice(e, n);
  else if (c.contains)
    d = this._getUse(c.contains, a)._encode(e, n), m = !0;
  else if (c.children)
    d = c.children.map(function(w) {
      if (w._baseState.tag === "null_")
        return w._encode(null, n, e);
      if (w._baseState.key === null)
        return n.error("Child should have a key");
      const S = n.enterKey(w._baseState.key);
      if (typeof e != "object")
        return n.error("Child expected, but input is not object");
      const A = w._encode(e[w._baseState.key], n, e);
      return n.leaveKey(S), A;
    }, this).filter(function(w) {
      return w;
    }), d = this._createEncoderBuffer(d);
  else if (c.tag === "seqof" || c.tag === "setof") {
    if (!(c.args && c.args.length === 1))
      return n.error("Too many args for : " + c.tag);
    if (!Array.isArray(e))
      return n.error("seqof/setof, but data is not Array");
    const w = this.clone();
    w._baseState.implicit = null, d = this._createEncoderBuffer(e.map(function(S) {
      const A = this._baseState;
      return this._getUse(A.args[0], e)._encode(S, n);
    }, w));
  } else
    c.use !== null ? o = this._getUse(c.use, a)._encode(e, n) : (d = this._encodePrimitive(c.tag, e), m = !0);
  if (!c.any && c.choice === null) {
    const w = c.implicit !== null ? c.implicit : c.tag, S = c.implicit === null ? "universal" : "context";
    w === null ? c.use === null && n.error("Tag could be omitted only for .use()") : c.use === null && (o = this._encodeComposite(w, m, S, d));
  }
  return c.explicit !== null && (o = this._encodeComposite(c.explicit, !1, "context", o)), o;
};
Node$2.prototype._encodeChoice = function(e, n) {
  const a = this._baseState, c = a.choice[e.type];
  return c || assert$6(
    !1,
    e.type + " not found in " + JSON.stringify(Object.keys(a.choice))
  ), c._encode(e.value, n);
};
Node$2.prototype._encodePrimitive = function(e, n) {
  const a = this._baseState;
  if (/str$/.test(e))
    return this._encodeStr(n, e);
  if (e === "objid" && a.args)
    return this._encodeObjid(n, a.reverseArgs[0], a.args[1]);
  if (e === "objid")
    return this._encodeObjid(n, null, null);
  if (e === "gentime" || e === "utctime")
    return this._encodeTime(n, e);
  if (e === "null_")
    return this._encodeNull();
  if (e === "int" || e === "enum")
    return this._encodeInt(n, a.args && a.reverseArgs[0]);
  if (e === "bool")
    return this._encodeBool(n);
  if (e === "objDesc")
    return this._encodeStr(n, e);
  throw new Error("Unsupported tag: " + e);
};
Node$2.prototype._isNumstr = function(e) {
  return /^[0-9 ]*$/.test(e);
};
Node$2.prototype._isPrintstr = function(e) {
  return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(e);
};
var der$2 = {};
(function(t) {
  function e(n) {
    const a = {};
    return Object.keys(n).forEach(function(c) {
      (c | 0) == c && (c = c | 0);
      const o = n[c];
      a[o] = c;
    }), a;
  }
  t.tagClass = {
    0: "universal",
    1: "application",
    2: "context",
    3: "private"
  }, t.tagClassByName = e(t.tagClass), t.tag = {
    0: "end",
    1: "bool",
    2: "int",
    3: "bitstr",
    4: "octstr",
    5: "null_",
    6: "objid",
    7: "objDesc",
    8: "external",
    9: "real",
    10: "enum",
    11: "embed",
    12: "utf8str",
    13: "relativeOid",
    16: "seq",
    17: "set",
    18: "numstr",
    19: "printstr",
    20: "t61str",
    21: "videostr",
    22: "ia5str",
    23: "utctime",
    24: "gentime",
    25: "graphstr",
    26: "iso646str",
    27: "genstr",
    28: "unistr",
    29: "charstr",
    30: "bmpstr"
  }, t.tagByName = e(t.tag);
})(der$2);
const inherits$5 = inherits_browserExports, Buffer$8 = safer_1.Buffer, Node$1 = node, der$1 = der$2;
function DEREncoder$1(t) {
  this.enc = "der", this.name = t.name, this.entity = t, this.tree = new DERNode$1(), this.tree._init(t.body);
}
var der_1$1 = DEREncoder$1;
DEREncoder$1.prototype.encode = function(e, n) {
  return this.tree._encode(e, n).join();
};
function DERNode$1(t) {
  Node$1.call(this, "der", t);
}
inherits$5(DERNode$1, Node$1);
DERNode$1.prototype._encodeComposite = function(e, n, a, c) {
  const o = encodeTag(e, n, a, this.reporter);
  if (c.length < 128) {
    const w = Buffer$8.alloc(2);
    return w[0] = o, w[1] = c.length, this._createEncoderBuffer([w, c]);
  }
  let d = 1;
  for (let w = c.length; w >= 256; w >>= 8)
    d++;
  const m = Buffer$8.alloc(2 + d);
  m[0] = o, m[1] = 128 | d;
  for (let w = 1 + d, S = c.length; S > 0; w--, S >>= 8)
    m[w] = S & 255;
  return this._createEncoderBuffer([m, c]);
};
DERNode$1.prototype._encodeStr = function(e, n) {
  if (n === "bitstr")
    return this._createEncoderBuffer([e.unused | 0, e.data]);
  if (n === "bmpstr") {
    const a = Buffer$8.alloc(e.length * 2);
    for (let c = 0; c < e.length; c++)
      a.writeUInt16BE(e.charCodeAt(c), c * 2);
    return this._createEncoderBuffer(a);
  } else
    return n === "numstr" ? this._isNumstr(e) ? this._createEncoderBuffer(e) : this.reporter.error("Encoding of string type: numstr supports only digits and space") : n === "printstr" ? this._isPrintstr(e) ? this._createEncoderBuffer(e) : this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark") : /str$/.test(n) ? this._createEncoderBuffer(e) : n === "objDesc" ? this._createEncoderBuffer(e) : this.reporter.error("Encoding of string type: " + n + " unsupported");
};
DERNode$1.prototype._encodeObjid = function(e, n, a) {
  if (typeof e == "string") {
    if (!n)
      return this.reporter.error("string objid given, but no values map found");
    if (!n.hasOwnProperty(e))
      return this.reporter.error("objid not found in values map");
    e = n[e].split(/[\s.]+/g);
    for (let m = 0; m < e.length; m++)
      e[m] |= 0;
  } else if (Array.isArray(e)) {
    e = e.slice();
    for (let m = 0; m < e.length; m++)
      e[m] |= 0;
  }
  if (!Array.isArray(e))
    return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(e));
  if (!a) {
    if (e[1] >= 40)
      return this.reporter.error("Second objid identifier OOB");
    e.splice(0, 2, e[0] * 40 + e[1]);
  }
  let c = 0;
  for (let m = 0; m < e.length; m++) {
    let w = e[m];
    for (c++; w >= 128; w >>= 7)
      c++;
  }
  const o = Buffer$8.alloc(c);
  let d = o.length - 1;
  for (let m = e.length - 1; m >= 0; m--) {
    let w = e[m];
    for (o[d--] = w & 127; (w >>= 7) > 0; )
      o[d--] = 128 | w & 127;
  }
  return this._createEncoderBuffer(o);
};
function two(t) {
  return t < 10 ? "0" + t : t;
}
DERNode$1.prototype._encodeTime = function(e, n) {
  let a;
  const c = new Date(e);
  return n === "gentime" ? a = [
    two(c.getUTCFullYear()),
    two(c.getUTCMonth() + 1),
    two(c.getUTCDate()),
    two(c.getUTCHours()),
    two(c.getUTCMinutes()),
    two(c.getUTCSeconds()),
    "Z"
  ].join("") : n === "utctime" ? a = [
    two(c.getUTCFullYear() % 100),
    two(c.getUTCMonth() + 1),
    two(c.getUTCDate()),
    two(c.getUTCHours()),
    two(c.getUTCMinutes()),
    two(c.getUTCSeconds()),
    "Z"
  ].join("") : this.reporter.error("Encoding " + n + " time is not supported yet"), this._encodeStr(a, "octstr");
};
DERNode$1.prototype._encodeNull = function() {
  return this._createEncoderBuffer("");
};
DERNode$1.prototype._encodeInt = function(e, n) {
  if (typeof e == "string") {
    if (!n)
      return this.reporter.error("String int or enum given, but no values map");
    if (!n.hasOwnProperty(e))
      return this.reporter.error("Values map doesn't contain: " + JSON.stringify(e));
    e = n[e];
  }
  if (typeof e != "number" && !Buffer$8.isBuffer(e)) {
    const o = e.toArray();
    !e.sign && o[0] & 128 && o.unshift(0), e = Buffer$8.from(o);
  }
  if (Buffer$8.isBuffer(e)) {
    let o = e.length;
    e.length === 0 && o++;
    const d = Buffer$8.alloc(o);
    return e.copy(d), e.length === 0 && (d[0] = 0), this._createEncoderBuffer(d);
  }
  if (e < 128)
    return this._createEncoderBuffer(e);
  if (e < 256)
    return this._createEncoderBuffer([0, e]);
  let a = 1;
  for (let o = e; o >= 256; o >>= 8)
    a++;
  const c = new Array(a);
  for (let o = c.length - 1; o >= 0; o--)
    c[o] = e & 255, e >>= 8;
  return c[0] & 128 && c.unshift(0), this._createEncoderBuffer(Buffer$8.from(c));
};
DERNode$1.prototype._encodeBool = function(e) {
  return this._createEncoderBuffer(e ? 255 : 0);
};
DERNode$1.prototype._use = function(e, n) {
  return typeof e == "function" && (e = e(n)), e._getEncoder("der").tree;
};
DERNode$1.prototype._skipDefault = function(e, n, a) {
  const c = this._baseState;
  let o;
  if (c.default === null)
    return !1;
  const d = e.join();
  if (c.defaultBuffer === void 0 && (c.defaultBuffer = this._encodeValue(c.default, n, a).join()), d.length !== c.defaultBuffer.length)
    return !1;
  for (o = 0; o < d.length; o++)
    if (d[o] !== c.defaultBuffer[o])
      return !1;
  return !0;
};
function encodeTag(t, e, n, a) {
  let c;
  if (t === "seqof" ? t = "seq" : t === "setof" && (t = "set"), der$1.tagByName.hasOwnProperty(t))
    c = der$1.tagByName[t];
  else if (typeof t == "number" && (t | 0) === t)
    c = t;
  else
    return a.error("Unknown tag: " + t);
  return c >= 31 ? a.error("Multi-octet tag encoding unsupported") : (e || (c |= 32), c |= der$1.tagClassByName[n || "universal"] << 6, c);
}
const inherits$4 = inherits_browserExports, DEREncoder = der_1$1;
function PEMEncoder(t) {
  DEREncoder.call(this, t), this.enc = "pem";
}
inherits$4(PEMEncoder, DEREncoder);
var pem$1 = PEMEncoder;
PEMEncoder.prototype.encode = function(e, n) {
  const c = DEREncoder.prototype.encode.call(this, e).toString("base64"), o = ["-----BEGIN " + n.label + "-----"];
  for (let d = 0; d < c.length; d += 64)
    o.push(c.slice(d, d + 64));
  return o.push("-----END " + n.label + "-----"), o.join(`
`);
};
(function(t) {
  const e = t;
  e.der = der_1$1, e.pem = pem$1;
})(encoders);
var decoders = {};
const inherits$3 = inherits_browserExports, bignum = bnExports$2, DecoderBuffer = buffer.DecoderBuffer, Node = node, der = der$2;
function DERDecoder$1(t) {
  this.enc = "der", this.name = t.name, this.entity = t, this.tree = new DERNode(), this.tree._init(t.body);
}
var der_1 = DERDecoder$1;
DERDecoder$1.prototype.decode = function(e, n) {
  return DecoderBuffer.isDecoderBuffer(e) || (e = new DecoderBuffer(e, n)), this.tree._decode(e, n);
};
function DERNode(t) {
  Node.call(this, "der", t);
}
inherits$3(DERNode, Node);
DERNode.prototype._peekTag = function(e, n, a) {
  if (e.isEmpty())
    return !1;
  const c = e.save(), o = derDecodeTag(e, 'Failed to peek tag: "' + n + '"');
  return e.isError(o) ? o : (e.restore(c), o.tag === n || o.tagStr === n || o.tagStr + "of" === n || a);
};
DERNode.prototype._decodeTag = function(e, n, a) {
  const c = derDecodeTag(
    e,
    'Failed to decode tag of "' + n + '"'
  );
  if (e.isError(c))
    return c;
  let o = derDecodeLen(
    e,
    c.primitive,
    'Failed to get length of "' + n + '"'
  );
  if (e.isError(o))
    return o;
  if (!a && c.tag !== n && c.tagStr !== n && c.tagStr + "of" !== n)
    return e.error('Failed to match tag: "' + n + '"');
  if (c.primitive || o !== null)
    return e.skip(o, 'Failed to match body of: "' + n + '"');
  const d = e.save(), m = this._skipUntilEnd(
    e,
    'Failed to skip indefinite length body: "' + this.tag + '"'
  );
  return e.isError(m) ? m : (o = e.offset - d.offset, e.restore(d), e.skip(o, 'Failed to match body of: "' + n + '"'));
};
DERNode.prototype._skipUntilEnd = function(e, n) {
  for (; ; ) {
    const a = derDecodeTag(e, n);
    if (e.isError(a))
      return a;
    const c = derDecodeLen(e, a.primitive, n);
    if (e.isError(c))
      return c;
    let o;
    if (a.primitive || c !== null ? o = e.skip(c) : o = this._skipUntilEnd(e, n), e.isError(o))
      return o;
    if (a.tagStr === "end")
      break;
  }
};
DERNode.prototype._decodeList = function(e, n, a, c) {
  const o = [];
  for (; !e.isEmpty(); ) {
    const d = this._peekTag(e, "end");
    if (e.isError(d))
      return d;
    const m = a.decode(e, "der", c);
    if (e.isError(m) && d)
      break;
    o.push(m);
  }
  return o;
};
DERNode.prototype._decodeStr = function(e, n) {
  if (n === "bitstr") {
    const a = e.readUInt8();
    return e.isError(a) ? a : { unused: a, data: e.raw() };
  } else if (n === "bmpstr") {
    const a = e.raw();
    if (a.length % 2 === 1)
      return e.error("Decoding of string type: bmpstr length mismatch");
    let c = "";
    for (let o = 0; o < a.length / 2; o++)
      c += String.fromCharCode(a.readUInt16BE(o * 2));
    return c;
  } else if (n === "numstr") {
    const a = e.raw().toString("ascii");
    return this._isNumstr(a) ? a : e.error("Decoding of string type: numstr unsupported characters");
  } else {
    if (n === "octstr")
      return e.raw();
    if (n === "objDesc")
      return e.raw();
    if (n === "printstr") {
      const a = e.raw().toString("ascii");
      return this._isPrintstr(a) ? a : e.error("Decoding of string type: printstr unsupported characters");
    } else
      return /str$/.test(n) ? e.raw().toString() : e.error("Decoding of string type: " + n + " unsupported");
  }
};
DERNode.prototype._decodeObjid = function(e, n, a) {
  let c;
  const o = [];
  let d = 0, m = 0;
  for (; !e.isEmpty(); )
    m = e.readUInt8(), d <<= 7, d |= m & 127, m & 128 || (o.push(d), d = 0);
  m & 128 && o.push(d);
  const w = o[0] / 40 | 0, S = o[0] % 40;
  if (a ? c = o : c = [w, S].concat(o.slice(1)), n) {
    let A = n[c.join(" ")];
    A === void 0 && (A = n[c.join(".")]), A !== void 0 && (c = A);
  }
  return c;
};
DERNode.prototype._decodeTime = function(e, n) {
  const a = e.raw().toString();
  let c, o, d, m, w, S;
  if (n === "gentime")
    c = a.slice(0, 4) | 0, o = a.slice(4, 6) | 0, d = a.slice(6, 8) | 0, m = a.slice(8, 10) | 0, w = a.slice(10, 12) | 0, S = a.slice(12, 14) | 0;
  else if (n === "utctime")
    c = a.slice(0, 2) | 0, o = a.slice(2, 4) | 0, d = a.slice(4, 6) | 0, m = a.slice(6, 8) | 0, w = a.slice(8, 10) | 0, S = a.slice(10, 12) | 0, c < 70 ? c = 2e3 + c : c = 1900 + c;
  else
    return e.error("Decoding " + n + " time is not supported yet");
  return Date.UTC(c, o - 1, d, m, w, S, 0);
};
DERNode.prototype._decodeNull = function() {
  return null;
};
DERNode.prototype._decodeBool = function(e) {
  const n = e.readUInt8();
  return e.isError(n) ? n : n !== 0;
};
DERNode.prototype._decodeInt = function(e, n) {
  const a = e.raw();
  let c = new bignum(a);
  return n && (c = n[c.toString(10)] || c), c;
};
DERNode.prototype._use = function(e, n) {
  return typeof e == "function" && (e = e(n)), e._getDecoder("der").tree;
};
function derDecodeTag(t, e) {
  let n = t.readUInt8(e);
  if (t.isError(n))
    return n;
  const a = der.tagClass[n >> 6], c = (n & 32) === 0;
  if ((n & 31) === 31) {
    let d = n;
    for (n = 0; (d & 128) === 128; ) {
      if (d = t.readUInt8(e), t.isError(d))
        return d;
      n <<= 7, n |= d & 127;
    }
  } else
    n &= 31;
  const o = der.tag[n];
  return {
    cls: a,
    primitive: c,
    tag: n,
    tagStr: o
  };
}
function derDecodeLen(t, e, n) {
  let a = t.readUInt8(n);
  if (t.isError(a))
    return a;
  if (!e && a === 128)
    return null;
  if (!(a & 128))
    return a;
  const c = a & 127;
  if (c > 4)
    return t.error("length octect is too long");
  a = 0;
  for (let o = 0; o < c; o++) {
    a <<= 8;
    const d = t.readUInt8(n);
    if (t.isError(d))
      return d;
    a |= d;
  }
  return a;
}
const inherits$2 = inherits_browserExports, Buffer$7 = safer_1.Buffer, DERDecoder = der_1;
function PEMDecoder(t) {
  DERDecoder.call(this, t), this.enc = "pem";
}
inherits$2(PEMDecoder, DERDecoder);
var pem = PEMDecoder;
PEMDecoder.prototype.decode = function(e, n) {
  const a = e.toString().split(/[\r\n]+/g), c = n.label.toUpperCase(), o = /^-----(BEGIN|END) ([^-]+)-----$/;
  let d = -1, m = -1;
  for (let A = 0; A < a.length; A++) {
    const B = a[A].match(o);
    if (B !== null && B[2] === c)
      if (d === -1) {
        if (B[1] !== "BEGIN")
          break;
        d = A;
      } else {
        if (B[1] !== "END")
          break;
        m = A;
        break;
      }
  }
  if (d === -1 || m === -1)
    throw new Error("PEM section not found for: " + c);
  const w = a.slice(d + 1, m).join("");
  w.replace(/[^a-z0-9+/=]+/gi, "");
  const S = Buffer$7.from(w, "base64");
  return DERDecoder.prototype.decode.call(this, S, n);
};
(function(t) {
  const e = t;
  e.der = der_1, e.pem = pem;
})(decoders);
(function(t) {
  const e = encoders, n = decoders, a = inherits_browserExports, c = t;
  c.define = function(m, w) {
    return new o(m, w);
  };
  function o(d, m) {
    this.name = d, this.body = m, this.decoders = {}, this.encoders = {};
  }
  o.prototype._createNamed = function(m) {
    const w = this.name;
    function S(A) {
      this._initNamed(A, w);
    }
    return a(S, m), S.prototype._initNamed = function(B, P) {
      m.call(this, B, P);
    }, new S(this);
  }, o.prototype._getDecoder = function(m) {
    return m = m || "der", this.decoders.hasOwnProperty(m) || (this.decoders[m] = this._createNamed(n[m])), this.decoders[m];
  }, o.prototype.decode = function(m, w, S) {
    return this._getDecoder(w).decode(m, S);
  }, o.prototype._getEncoder = function(m) {
    return m = m || "der", this.encoders.hasOwnProperty(m) || (this.encoders[m] = this._createNamed(e[m])), this.encoders[m];
  }, o.prototype.encode = function(m, w, S) {
    return this._getEncoder(w).encode(m, S);
  };
})(api$2);
const api$1 = /* @__PURE__ */ getDefaultExportFromCjs$2(api$2);
var base$5 = {};
(function(t) {
  const e = t;
  e.Reporter = reporter.Reporter, e.DecoderBuffer = buffer.DecoderBuffer, e.EncoderBuffer = buffer.EncoderBuffer, e.Node = node;
})(base$5);
var constants$2 = {};
(function(t) {
  const e = t;
  e._reverse = function(a) {
    const c = {};
    return Object.keys(a).forEach(function(o) {
      (o | 0) == o && (o = o | 0);
      const d = a[o];
      c[d] = o;
    }), c;
  }, e.der = der$2;
})(constants$2);
(function(t) {
  const e = t;
  e.bignum = bnExports$2, e.define = api$2.define, e.base = base$5, e.constants = constants$2, e.decoders = decoders, e.encoders = encoders;
})(asn1$2);
var asn = asn1$2, Time = asn.define("Time", function() {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  });
}), AttributeTypeValue = asn.define("AttributeTypeValue", function() {
  this.seq().obj(
    this.key("type").objid(),
    this.key("value").any()
  );
}), AlgorithmIdentifier$2 = asn.define("AlgorithmIdentifier", function() {
  this.seq().obj(
    this.key("algorithm").objid(),
    this.key("parameters").optional(),
    this.key("curve").objid().optional()
  );
}), SubjectPublicKeyInfo = asn.define("SubjectPublicKeyInfo", function() {
  this.seq().obj(
    this.key("algorithm").use(AlgorithmIdentifier$2),
    this.key("subjectPublicKey").bitstr()
  );
}), RelativeDistinguishedName = asn.define("RelativeDistinguishedName", function() {
  this.setof(AttributeTypeValue);
}), RDNSequence = asn.define("RDNSequence", function() {
  this.seqof(RelativeDistinguishedName);
}), Name = asn.define("Name", function() {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  });
}), Validity = asn.define("Validity", function() {
  this.seq().obj(
    this.key("notBefore").use(Time),
    this.key("notAfter").use(Time)
  );
}), Extension = asn.define("Extension", function() {
  this.seq().obj(
    this.key("extnID").objid(),
    this.key("critical").bool().def(!1),
    this.key("extnValue").octstr()
  );
}), TBSCertificate = asn.define("TBSCertificate", function() {
  this.seq().obj(
    this.key("version").explicit(0).int().optional(),
    this.key("serialNumber").int(),
    this.key("signature").use(AlgorithmIdentifier$2),
    this.key("issuer").use(Name),
    this.key("validity").use(Validity),
    this.key("subject").use(Name),
    this.key("subjectPublicKeyInfo").use(SubjectPublicKeyInfo),
    this.key("issuerUniqueID").implicit(1).bitstr().optional(),
    this.key("subjectUniqueID").implicit(2).bitstr().optional(),
    this.key("extensions").explicit(3).seqof(Extension).optional()
  );
}), X509Certificate = asn.define("X509Certificate", function() {
  this.seq().obj(
    this.key("tbsCertificate").use(TBSCertificate),
    this.key("signatureAlgorithm").use(AlgorithmIdentifier$2),
    this.key("signatureValue").bitstr()
  );
}), certificate = X509Certificate, asn1$1 = asn1$2;
asn1$3.certificate = certificate;
var RSAPrivateKey$1 = asn1$1.define("RSAPrivateKey", function() {
  this.seq().obj(
    this.key("version").int(),
    this.key("modulus").int(),
    this.key("publicExponent").int(),
    this.key("privateExponent").int(),
    this.key("prime1").int(),
    this.key("prime2").int(),
    this.key("exponent1").int(),
    this.key("exponent2").int(),
    this.key("coefficient").int()
  );
});
asn1$3.RSAPrivateKey = RSAPrivateKey$1;
var RSAPublicKey$1 = asn1$1.define("RSAPublicKey", function() {
  this.seq().obj(
    this.key("modulus").int(),
    this.key("publicExponent").int()
  );
});
asn1$3.RSAPublicKey = RSAPublicKey$1;
var PublicKey$3 = asn1$1.define("SubjectPublicKeyInfo", function() {
  this.seq().obj(
    this.key("algorithm").use(AlgorithmIdentifier$1),
    this.key("subjectPublicKey").bitstr()
  );
});
asn1$3.PublicKey = PublicKey$3;
var AlgorithmIdentifier$1 = asn1$1.define("AlgorithmIdentifier", function() {
  this.seq().obj(
    this.key("algorithm").objid(),
    this.key("none").null_().optional(),
    this.key("curve").objid().optional(),
    this.key("params").seq().obj(
      this.key("p").int(),
      this.key("q").int(),
      this.key("g").int()
    ).optional()
  );
}), PrivateKeyInfo = asn1$1.define("PrivateKeyInfo", function() {
  this.seq().obj(
    this.key("version").int(),
    this.key("algorithm").use(AlgorithmIdentifier$1),
    this.key("subjectPrivateKey").octstr()
  );
});
asn1$3.PrivateKey = PrivateKeyInfo;
var EncryptedPrivateKeyInfo = asn1$1.define("EncryptedPrivateKeyInfo", function() {
  this.seq().obj(
    this.key("algorithm").seq().obj(
      this.key("id").objid(),
      this.key("decrypt").seq().obj(
        this.key("kde").seq().obj(
          this.key("id").objid(),
          this.key("kdeparams").seq().obj(
            this.key("salt").octstr(),
            this.key("iters").int()
          )
        ),
        this.key("cipher").seq().obj(
          this.key("algo").objid(),
          this.key("iv").octstr()
        )
      )
    ),
    this.key("subjectPrivateKey").octstr()
  );
});
asn1$3.EncryptedPrivateKey = EncryptedPrivateKeyInfo;
var DSAPrivateKey = asn1$1.define("DSAPrivateKey", function() {
  this.seq().obj(
    this.key("version").int(),
    this.key("p").int(),
    this.key("q").int(),
    this.key("g").int(),
    this.key("pub_key").int(),
    this.key("priv_key").int()
  );
});
asn1$3.DSAPrivateKey = DSAPrivateKey;
asn1$3.DSAparam = asn1$1.define("DSAparam", function() {
  this.int();
});
var ECPrivateKey = asn1$1.define("ECPrivateKey", function() {
  this.seq().obj(
    this.key("version").int(),
    this.key("privateKey").octstr(),
    this.key("parameters").optional().explicit(0).use(ECParameters),
    this.key("publicKey").optional().explicit(1).bitstr()
  );
});
asn1$3.ECPrivateKey = ECPrivateKey;
var ECParameters = asn1$1.define("ECParameters", function() {
  this.choice({
    namedCurve: this.objid()
  });
});
asn1$3.signature = asn1$1.define("signature", function() {
  this.seq().obj(
    this.key("r").int(),
    this.key("s").int()
  );
});
const require$$1 = {
  "2.16.840.1.101.3.4.1.1": "aes-128-ecb",
  "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
  "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
  "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
  "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
  "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
  "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
  "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
  "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
  "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
  "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
  "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
};
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m, startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m, fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m, evp = evp_bytestokey, ciphers$1 = browser$8, Buffer$6 = safeBufferExports.Buffer, fixProc$1 = function(t, e) {
  var n = t.toString(), a = n.match(findProc), c;
  if (a) {
    var d = "aes" + a[1], m = Buffer$6.from(a[2], "hex"), w = Buffer$6.from(a[3].replace(/[\r\n]/g, ""), "base64"), S = evp(e, m.slice(0, 8), parseInt(a[1], 10)).key, A = [], B = ciphers$1.createDecipheriv(d, S, m);
    A.push(B.update(w)), A.push(B.final()), c = Buffer$6.concat(A);
  } else {
    var o = n.match(fullRegex);
    c = Buffer$6.from(o[2].replace(/[\r\n]/g, ""), "base64");
  }
  var P = n.match(startRegex)[1];
  return {
    tag: P,
    data: c
  };
}, asn1 = asn1$3, aesid = require$$1, fixProc = fixProc$1, ciphers = browser$8, compat = browser$a, Buffer$5 = safeBufferExports.Buffer, parseAsn1 = parseKeys$2;
function parseKeys$2(t) {
  var e;
  typeof t == "object" && !Buffer$5.isBuffer(t) && (e = t.passphrase, t = t.key), typeof t == "string" && (t = Buffer$5.from(t));
  var n = fixProc(t, e), a = n.tag, c = n.data, o, d;
  switch (a) {
    case "CERTIFICATE":
      d = asn1.certificate.decode(c, "der").tbsCertificate.subjectPublicKeyInfo;
    case "PUBLIC KEY":
      switch (d || (d = asn1.PublicKey.decode(c, "der")), o = d.algorithm.algorithm.join("."), o) {
        case "1.2.840.113549.1.1.1":
          return asn1.RSAPublicKey.decode(d.subjectPublicKey.data, "der");
        case "1.2.840.10045.2.1":
          return d.subjectPrivateKey = d.subjectPublicKey, {
            type: "ec",
            data: d
          };
        case "1.2.840.10040.4.1":
          return d.algorithm.params.pub_key = asn1.DSAparam.decode(d.subjectPublicKey.data, "der"), {
            type: "dsa",
            data: d.algorithm.params
          };
        default:
          throw new Error("unknown key id " + o);
      }
    case "ENCRYPTED PRIVATE KEY":
      c = asn1.EncryptedPrivateKey.decode(c, "der"), c = decrypt$2(c, e);
    case "PRIVATE KEY":
      switch (d = asn1.PrivateKey.decode(c, "der"), o = d.algorithm.algorithm.join("."), o) {
        case "1.2.840.113549.1.1.1":
          return asn1.RSAPrivateKey.decode(d.subjectPrivateKey, "der");
        case "1.2.840.10045.2.1":
          return {
            curve: d.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(d.subjectPrivateKey, "der").privateKey
          };
        case "1.2.840.10040.4.1":
          return d.algorithm.params.priv_key = asn1.DSAparam.decode(d.subjectPrivateKey, "der"), {
            type: "dsa",
            params: d.algorithm.params
          };
        default:
          throw new Error("unknown key id " + o);
      }
    case "RSA PUBLIC KEY":
      return asn1.RSAPublicKey.decode(c, "der");
    case "RSA PRIVATE KEY":
      return asn1.RSAPrivateKey.decode(c, "der");
    case "DSA PRIVATE KEY":
      return {
        type: "dsa",
        params: asn1.DSAPrivateKey.decode(c, "der")
      };
    case "EC PRIVATE KEY":
      return c = asn1.ECPrivateKey.decode(c, "der"), {
        curve: c.parameters.value,
        privateKey: c.privateKey
      };
    default:
      throw new Error("unknown key type " + a);
  }
}
parseKeys$2.signature = asn1.signature;
function decrypt$2(t, e) {
  var n = t.algorithm.decrypt.kde.kdeparams.salt, a = parseInt(t.algorithm.decrypt.kde.kdeparams.iters.toString(), 10), c = aesid[t.algorithm.decrypt.cipher.algo.join(".")], o = t.algorithm.decrypt.cipher.iv, d = t.subjectPrivateKey, m = parseInt(c.split("-")[1], 10) / 8, w = compat.pbkdf2Sync(e, n, a, m, "sha1"), S = ciphers.createDecipheriv(c, w, o), A = [];
  return A.push(S.update(d)), A.push(S.final()), Buffer$5.concat(A);
}
const require$$4 = {
  "1.3.132.0.10": "secp256k1",
  "1.3.132.0.33": "p224",
  "1.2.840.10045.3.1.1": "p192",
  "1.2.840.10045.3.1.7": "p256",
  "1.3.132.0.34": "p384",
  "1.3.132.0.35": "p521"
};
var hasRequiredSign;
function requireSign() {
  if (hasRequiredSign)
    return sign$4.exports;
  hasRequiredSign = 1;
  var t = safeBufferExports.Buffer, e = browser$b, n = browserifyRsa, a = requireElliptic().ec, c = bnExports$4, o = parseAsn1, d = require$$4, m = 1;
  function w(z, q, Z, X, ie) {
    var fe = o(q);
    if (fe.curve) {
      if (X !== "ecdsa" && X !== "ecdsa/rsa")
        throw new Error("wrong private key type");
      return S(z, fe);
    } else if (fe.type === "dsa") {
      if (X !== "dsa")
        throw new Error("wrong private key type");
      return A(z, fe, Z);
    }
    if (X !== "rsa" && X !== "ecdsa/rsa")
      throw new Error("wrong private key type");
    if (q.padding !== void 0 && q.padding !== m)
      throw new Error("illegal or unsupported padding mode");
    z = t.concat([ie, z]);
    for (var ye = fe.modulus.byteLength(), j = [0, 1]; z.length + j.length + 1 < ye; )
      j.push(255);
    j.push(0);
    for (var V = -1; ++V < z.length; )
      j.push(z[V]);
    var ae = n(j, fe);
    return ae;
  }
  function S(z, q) {
    var Z = d[q.curve.join(".")];
    if (!Z)
      throw new Error("unknown curve " + q.curve.join("."));
    var X = new a(Z), ie = X.keyFromPrivate(q.privateKey), fe = ie.sign(z);
    return t.from(fe.toDER());
  }
  function A(z, q, Z) {
    for (var X = q.params.priv_key, ie = q.params.p, fe = q.params.q, ye = q.params.g, j = new c(0), V, ae = I(z, fe).mod(fe), _ = !1, u = P(X, fe, z, Z); _ === !1; )
      V = L(fe, u, Z), j = C(ye, V, ie, fe), _ = V.invm(fe).imul(ae.add(X.mul(j))).mod(fe), _.cmpn(0) === 0 && (_ = !1, j = new c(0));
    return B(j, _);
  }
  function B(z, q) {
    z = z.toArray(), q = q.toArray(), z[0] & 128 && (z = [0].concat(z)), q[0] & 128 && (q = [0].concat(q));
    var Z = z.length + q.length + 4, X = [
      48,
      Z,
      2,
      z.length
    ];
    return X = X.concat(z, [2, q.length], q), t.from(X);
  }
  function P(z, q, Z, X) {
    if (z = t.from(z.toArray()), z.length < q.byteLength()) {
      var ie = t.alloc(q.byteLength() - z.length);
      z = t.concat([ie, z]);
    }
    var fe = Z.length, ye = O(Z, q), j = t.alloc(fe);
    j.fill(1);
    var V = t.alloc(fe);
    return V = e(X, V).update(j).update(t.from([0])).update(z).update(ye).digest(), j = e(X, V).update(j).digest(), V = e(X, V).update(j).update(t.from([1])).update(z).update(ye).digest(), j = e(X, V).update(j).digest(), { k: V, v: j };
  }
  function I(z, q) {
    var Z = new c(z), X = (z.length << 3) - q.bitLength();
    return X > 0 && Z.ishrn(X), Z;
  }
  function O(z, q) {
    z = I(z, q), z = z.mod(q);
    var Z = t.from(z.toArray());
    if (Z.length < q.byteLength()) {
      var X = t.alloc(q.byteLength() - Z.length);
      Z = t.concat([X, Z]);
    }
    return Z;
  }
  function L(z, q, Z) {
    var X, ie;
    do {
      for (X = t.alloc(0); X.length * 8 < z.bitLength(); )
        q.v = e(Z, q.k).update(q.v).digest(), X = t.concat([X, q.v]);
      ie = I(X, z), q.k = e(Z, q.k).update(q.v).update(t.from([0])).digest(), q.v = e(Z, q.k).update(q.v).digest();
    } while (ie.cmp(z) !== -1);
    return ie;
  }
  function C(z, q, Z, X) {
    return z.toRed(c.mont(Z)).redPow(q).fromRed().mod(X);
  }
  return sign$4.exports = w, sign$4.exports.getKey = P, sign$4.exports.makeKey = L, sign$4.exports;
}
var verify_1, hasRequiredVerify;
function requireVerify() {
  if (hasRequiredVerify)
    return verify_1;
  hasRequiredVerify = 1;
  var t = safeBufferExports.Buffer, e = bnExports$4, n = requireElliptic().ec, a = parseAsn1, c = require$$4;
  function o(S, A, B, P, I) {
    var O = a(B);
    if (O.type === "ec") {
      if (P !== "ecdsa" && P !== "ecdsa/rsa")
        throw new Error("wrong public key type");
      return d(S, A, O);
    } else if (O.type === "dsa") {
      if (P !== "dsa")
        throw new Error("wrong public key type");
      return m(S, A, O);
    }
    if (P !== "rsa" && P !== "ecdsa/rsa")
      throw new Error("wrong public key type");
    A = t.concat([I, A]);
    for (var L = O.modulus.byteLength(), C = [1], z = 0; A.length + C.length + 2 < L; )
      C.push(255), z += 1;
    C.push(0);
    for (var q = -1; ++q < A.length; )
      C.push(A[q]);
    C = t.from(C);
    var Z = e.mont(O.modulus);
    S = new e(S).toRed(Z), S = S.redPow(new e(O.publicExponent)), S = t.from(S.fromRed().toArray());
    var X = z < 8 ? 1 : 0;
    for (L = Math.min(S.length, C.length), S.length !== C.length && (X = 1), q = -1; ++q < L; )
      X |= S[q] ^ C[q];
    return X === 0;
  }
  function d(S, A, B) {
    var P = c[B.data.algorithm.curve.join(".")];
    if (!P)
      throw new Error("unknown curve " + B.data.algorithm.curve.join("."));
    var I = new n(P), O = B.data.subjectPrivateKey.data;
    return I.verify(A, S, O);
  }
  function m(S, A, B) {
    var P = B.data.p, I = B.data.q, O = B.data.g, L = B.data.pub_key, C = a.signature.decode(S, "der"), z = C.s, q = C.r;
    w(z, I), w(q, I);
    var Z = e.mont(P), X = z.invm(I), ie = O.toRed(Z).redPow(new e(A).mul(X).mod(I)).fromRed().mul(L.toRed(Z).redPow(q.mul(X).mod(I)).fromRed()).mod(P).mod(I);
    return ie.cmp(q) === 0;
  }
  function w(S, A) {
    if (S.cmpn(0) <= 0)
      throw new Error("invalid sig");
    if (S.cmp(A) >= 0)
      throw new Error("invalid sig");
  }
  return verify_1 = o, verify_1;
}
var browser$6, hasRequiredBrowser$1;
function requireBrowser$1() {
  if (hasRequiredBrowser$1)
    return browser$6;
  hasRequiredBrowser$1 = 1;
  var t = safeBufferExports.Buffer, e = browser$c, n = readableBrowserExports, a = inherits_browserExports, c = requireSign(), o = requireVerify(), d = require$$6;
  Object.keys(d).forEach(function(B) {
    d[B].id = t.from(d[B].id, "hex"), d[B.toLowerCase()] = d[B];
  });
  function m(B) {
    n.Writable.call(this);
    var P = d[B];
    if (!P)
      throw new Error("Unknown message digest");
    this._hashType = P.hash, this._hash = e(P.hash), this._tag = P.id, this._signType = P.sign;
  }
  a(m, n.Writable), m.prototype._write = function(P, I, O) {
    this._hash.update(P), O();
  }, m.prototype.update = function(P, I) {
    return this._hash.update(typeof P == "string" ? t.from(P, I) : P), this;
  }, m.prototype.sign = function(P, I) {
    this.end();
    var O = this._hash.digest(), L = c(O, P, this._hashType, this._signType, this._tag);
    return I ? L.toString(I) : L;
  };
  function w(B) {
    n.Writable.call(this);
    var P = d[B];
    if (!P)
      throw new Error("Unknown message digest");
    this._hash = e(P.hash), this._tag = P.id, this._signType = P.sign;
  }
  a(w, n.Writable), w.prototype._write = function(P, I, O) {
    this._hash.update(P), O();
  }, w.prototype.update = function(P, I) {
    return this._hash.update(typeof P == "string" ? t.from(P, I) : P), this;
  }, w.prototype.verify = function(P, I, O) {
    var L = typeof I == "string" ? t.from(I, O) : I;
    this.end();
    var C = this._hash.digest();
    return o(L, C, P, this._signType, this._tag);
  };
  function S(B) {
    return new m(B);
  }
  function A(B) {
    return new w(B);
  }
  return browser$6 = {
    Sign: S,
    Verify: A,
    createSign: S,
    createVerify: A
  }, browser$6;
}
var bn$1 = { exports: {} };
bn$1.exports;
(function(t) {
  (function(e, n) {
    function a(_, u) {
      if (!_)
        throw new Error(u || "Assertion failed");
    }
    function c(_, u) {
      _.super_ = u;
      var h = function() {
      };
      h.prototype = u.prototype, _.prototype = new h(), _.prototype.constructor = _;
    }
    function o(_, u, h) {
      if (o.isBN(_))
        return _;
      this.negative = 0, this.words = null, this.length = 0, this.red = null, _ !== null && ((u === "le" || u === "be") && (h = u, u = 10), this._init(_ || 0, u || 10, h || "be"));
    }
    typeof e == "object" ? e.exports = o : n.BN = o, o.BN = o, o.wordSize = 26;
    var d;
    try {
      typeof window < "u" && typeof window.Buffer < "u" ? d = window.Buffer : d = require$$0$2.Buffer;
    } catch {
    }
    o.isBN = function(u) {
      return u instanceof o ? !0 : u !== null && typeof u == "object" && u.constructor.wordSize === o.wordSize && Array.isArray(u.words);
    }, o.max = function(u, h) {
      return u.cmp(h) > 0 ? u : h;
    }, o.min = function(u, h) {
      return u.cmp(h) < 0 ? u : h;
    }, o.prototype._init = function(u, h, p) {
      if (typeof u == "number")
        return this._initNumber(u, h, p);
      if (typeof u == "object")
        return this._initArray(u, h, p);
      h === "hex" && (h = 16), a(h === (h | 0) && h >= 2 && h <= 36), u = u.toString().replace(/\s+/g, "");
      var y = 0;
      u[0] === "-" && (y++, this.negative = 1), y < u.length && (h === 16 ? this._parseHex(u, y, p) : (this._parseBase(u, h, y), p === "le" && this._initArray(this.toArray(), h, p)));
    }, o.prototype._initNumber = function(u, h, p) {
      u < 0 && (this.negative = 1, u = -u), u < 67108864 ? (this.words = [u & 67108863], this.length = 1) : u < 4503599627370496 ? (this.words = [
        u & 67108863,
        u / 67108864 & 67108863
      ], this.length = 2) : (a(u < 9007199254740992), this.words = [
        u & 67108863,
        u / 67108864 & 67108863,
        1
      ], this.length = 3), p === "le" && this._initArray(this.toArray(), h, p);
    }, o.prototype._initArray = function(u, h, p) {
      if (a(typeof u.length == "number"), u.length <= 0)
        return this.words = [0], this.length = 1, this;
      this.length = Math.ceil(u.length / 3), this.words = new Array(this.length);
      for (var y = 0; y < this.length; y++)
        this.words[y] = 0;
      var v, $, E = 0;
      if (p === "be")
        for (y = u.length - 1, v = 0; y >= 0; y -= 3)
          $ = u[y] | u[y - 1] << 8 | u[y - 2] << 16, this.words[v] |= $ << E & 67108863, this.words[v + 1] = $ >>> 26 - E & 67108863, E += 24, E >= 26 && (E -= 26, v++);
      else if (p === "le")
        for (y = 0, v = 0; y < u.length; y += 3)
          $ = u[y] | u[y + 1] << 8 | u[y + 2] << 16, this.words[v] |= $ << E & 67108863, this.words[v + 1] = $ >>> 26 - E & 67108863, E += 24, E >= 26 && (E -= 26, v++);
      return this.strip();
    };
    function m(_, u) {
      var h = _.charCodeAt(u);
      return h >= 65 && h <= 70 ? h - 55 : h >= 97 && h <= 102 ? h - 87 : h - 48 & 15;
    }
    function w(_, u, h) {
      var p = m(_, h);
      return h - 1 >= u && (p |= m(_, h - 1) << 4), p;
    }
    o.prototype._parseHex = function(u, h, p) {
      this.length = Math.ceil((u.length - h) / 6), this.words = new Array(this.length);
      for (var y = 0; y < this.length; y++)
        this.words[y] = 0;
      var v = 0, $ = 0, E;
      if (p === "be")
        for (y = u.length - 1; y >= h; y -= 2)
          E = w(u, h, y) << v, this.words[$] |= E & 67108863, v >= 18 ? (v -= 18, $ += 1, this.words[$] |= E >>> 26) : v += 8;
      else {
        var x = u.length - h;
        for (y = x % 2 === 0 ? h + 1 : h; y < u.length; y += 2)
          E = w(u, h, y) << v, this.words[$] |= E & 67108863, v >= 18 ? (v -= 18, $ += 1, this.words[$] |= E >>> 26) : v += 8;
      }
      this.strip();
    };
    function S(_, u, h, p) {
      for (var y = 0, v = Math.min(_.length, h), $ = u; $ < v; $++) {
        var E = _.charCodeAt($) - 48;
        y *= p, E >= 49 ? y += E - 49 + 10 : E >= 17 ? y += E - 17 + 10 : y += E;
      }
      return y;
    }
    o.prototype._parseBase = function(u, h, p) {
      this.words = [0], this.length = 1;
      for (var y = 0, v = 1; v <= 67108863; v *= h)
        y++;
      y--, v = v / h | 0;
      for (var $ = u.length - p, E = $ % y, x = Math.min($, $ - E) + p, l = 0, b = p; b < x; b += y)
        l = S(u, b, b + y, h), this.imuln(v), this.words[0] + l < 67108864 ? this.words[0] += l : this._iaddn(l);
      if (E !== 0) {
        var M = 1;
        for (l = S(u, b, u.length, h), b = 0; b < E; b++)
          M *= h;
        this.imuln(M), this.words[0] + l < 67108864 ? this.words[0] += l : this._iaddn(l);
      }
      this.strip();
    }, o.prototype.copy = function(u) {
      u.words = new Array(this.length);
      for (var h = 0; h < this.length; h++)
        u.words[h] = this.words[h];
      u.length = this.length, u.negative = this.negative, u.red = this.red;
    }, o.prototype.clone = function() {
      var u = new o(null);
      return this.copy(u), u;
    }, o.prototype._expand = function(u) {
      for (; this.length < u; )
        this.words[this.length++] = 0;
      return this;
    }, o.prototype.strip = function() {
      for (; this.length > 1 && this.words[this.length - 1] === 0; )
        this.length--;
      return this._normSign();
    }, o.prototype._normSign = function() {
      return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
    }, o.prototype.inspect = function() {
      return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    var A = [
      "",
      "0",
      "00",
      "000",
      "0000",
      "00000",
      "000000",
      "0000000",
      "00000000",
      "000000000",
      "0000000000",
      "00000000000",
      "000000000000",
      "0000000000000",
      "00000000000000",
      "000000000000000",
      "0000000000000000",
      "00000000000000000",
      "000000000000000000",
      "0000000000000000000",
      "00000000000000000000",
      "000000000000000000000",
      "0000000000000000000000",
      "00000000000000000000000",
      "000000000000000000000000",
      "0000000000000000000000000"
    ], B = [
      0,
      0,
      25,
      16,
      12,
      11,
      10,
      9,
      8,
      8,
      7,
      7,
      7,
      7,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5
    ], P = [
      0,
      0,
      33554432,
      43046721,
      16777216,
      48828125,
      60466176,
      40353607,
      16777216,
      43046721,
      1e7,
      19487171,
      35831808,
      62748517,
      7529536,
      11390625,
      16777216,
      24137569,
      34012224,
      47045881,
      64e6,
      4084101,
      5153632,
      6436343,
      7962624,
      9765625,
      11881376,
      14348907,
      17210368,
      20511149,
      243e5,
      28629151,
      33554432,
      39135393,
      45435424,
      52521875,
      60466176
    ];
    o.prototype.toString = function(u, h) {
      u = u || 10, h = h | 0 || 1;
      var p;
      if (u === 16 || u === "hex") {
        p = "";
        for (var y = 0, v = 0, $ = 0; $ < this.length; $++) {
          var E = this.words[$], x = ((E << y | v) & 16777215).toString(16);
          v = E >>> 24 - y & 16777215, v !== 0 || $ !== this.length - 1 ? p = A[6 - x.length] + x + p : p = x + p, y += 2, y >= 26 && (y -= 26, $--);
        }
        for (v !== 0 && (p = v.toString(16) + p); p.length % h !== 0; )
          p = "0" + p;
        return this.negative !== 0 && (p = "-" + p), p;
      }
      if (u === (u | 0) && u >= 2 && u <= 36) {
        var l = B[u], b = P[u];
        p = "";
        var M = this.clone();
        for (M.negative = 0; !M.isZero(); ) {
          var k = M.modn(b).toString(u);
          M = M.idivn(b), M.isZero() ? p = k + p : p = A[l - k.length] + k + p;
        }
        for (this.isZero() && (p = "0" + p); p.length % h !== 0; )
          p = "0" + p;
        return this.negative !== 0 && (p = "-" + p), p;
      }
      a(!1, "Base should be between 2 and 36");
    }, o.prototype.toNumber = function() {
      var u = this.words[0];
      return this.length === 2 ? u += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? u += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && a(!1, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -u : u;
    }, o.prototype.toJSON = function() {
      return this.toString(16);
    }, o.prototype.toBuffer = function(u, h) {
      return a(typeof d < "u"), this.toArrayLike(d, u, h);
    }, o.prototype.toArray = function(u, h) {
      return this.toArrayLike(Array, u, h);
    }, o.prototype.toArrayLike = function(u, h, p) {
      var y = this.byteLength(), v = p || Math.max(1, y);
      a(y <= v, "byte array longer than desired length"), a(v > 0, "Requested array length <= 0"), this.strip();
      var $ = h === "le", E = new u(v), x, l, b = this.clone();
      if ($) {
        for (l = 0; !b.isZero(); l++)
          x = b.andln(255), b.iushrn(8), E[l] = x;
        for (; l < v; l++)
          E[l] = 0;
      } else {
        for (l = 0; l < v - y; l++)
          E[l] = 0;
        for (l = 0; !b.isZero(); l++)
          x = b.andln(255), b.iushrn(8), E[v - l - 1] = x;
      }
      return E;
    }, Math.clz32 ? o.prototype._countBits = function(u) {
      return 32 - Math.clz32(u);
    } : o.prototype._countBits = function(u) {
      var h = u, p = 0;
      return h >= 4096 && (p += 13, h >>>= 13), h >= 64 && (p += 7, h >>>= 7), h >= 8 && (p += 4, h >>>= 4), h >= 2 && (p += 2, h >>>= 2), p + h;
    }, o.prototype._zeroBits = function(u) {
      if (u === 0)
        return 26;
      var h = u, p = 0;
      return h & 8191 || (p += 13, h >>>= 13), h & 127 || (p += 7, h >>>= 7), h & 15 || (p += 4, h >>>= 4), h & 3 || (p += 2, h >>>= 2), h & 1 || p++, p;
    }, o.prototype.bitLength = function() {
      var u = this.words[this.length - 1], h = this._countBits(u);
      return (this.length - 1) * 26 + h;
    };
    function I(_) {
      for (var u = new Array(_.bitLength()), h = 0; h < u.length; h++) {
        var p = h / 26 | 0, y = h % 26;
        u[h] = (_.words[p] & 1 << y) >>> y;
      }
      return u;
    }
    o.prototype.zeroBits = function() {
      if (this.isZero())
        return 0;
      for (var u = 0, h = 0; h < this.length; h++) {
        var p = this._zeroBits(this.words[h]);
        if (u += p, p !== 26)
          break;
      }
      return u;
    }, o.prototype.byteLength = function() {
      return Math.ceil(this.bitLength() / 8);
    }, o.prototype.toTwos = function(u) {
      return this.negative !== 0 ? this.abs().inotn(u).iaddn(1) : this.clone();
    }, o.prototype.fromTwos = function(u) {
      return this.testn(u - 1) ? this.notn(u).iaddn(1).ineg() : this.clone();
    }, o.prototype.isNeg = function() {
      return this.negative !== 0;
    }, o.prototype.neg = function() {
      return this.clone().ineg();
    }, o.prototype.ineg = function() {
      return this.isZero() || (this.negative ^= 1), this;
    }, o.prototype.iuor = function(u) {
      for (; this.length < u.length; )
        this.words[this.length++] = 0;
      for (var h = 0; h < u.length; h++)
        this.words[h] = this.words[h] | u.words[h];
      return this.strip();
    }, o.prototype.ior = function(u) {
      return a((this.negative | u.negative) === 0), this.iuor(u);
    }, o.prototype.or = function(u) {
      return this.length > u.length ? this.clone().ior(u) : u.clone().ior(this);
    }, o.prototype.uor = function(u) {
      return this.length > u.length ? this.clone().iuor(u) : u.clone().iuor(this);
    }, o.prototype.iuand = function(u) {
      var h;
      this.length > u.length ? h = u : h = this;
      for (var p = 0; p < h.length; p++)
        this.words[p] = this.words[p] & u.words[p];
      return this.length = h.length, this.strip();
    }, o.prototype.iand = function(u) {
      return a((this.negative | u.negative) === 0), this.iuand(u);
    }, o.prototype.and = function(u) {
      return this.length > u.length ? this.clone().iand(u) : u.clone().iand(this);
    }, o.prototype.uand = function(u) {
      return this.length > u.length ? this.clone().iuand(u) : u.clone().iuand(this);
    }, o.prototype.iuxor = function(u) {
      var h, p;
      this.length > u.length ? (h = this, p = u) : (h = u, p = this);
      for (var y = 0; y < p.length; y++)
        this.words[y] = h.words[y] ^ p.words[y];
      if (this !== h)
        for (; y < h.length; y++)
          this.words[y] = h.words[y];
      return this.length = h.length, this.strip();
    }, o.prototype.ixor = function(u) {
      return a((this.negative | u.negative) === 0), this.iuxor(u);
    }, o.prototype.xor = function(u) {
      return this.length > u.length ? this.clone().ixor(u) : u.clone().ixor(this);
    }, o.prototype.uxor = function(u) {
      return this.length > u.length ? this.clone().iuxor(u) : u.clone().iuxor(this);
    }, o.prototype.inotn = function(u) {
      a(typeof u == "number" && u >= 0);
      var h = Math.ceil(u / 26) | 0, p = u % 26;
      this._expand(h), p > 0 && h--;
      for (var y = 0; y < h; y++)
        this.words[y] = ~this.words[y] & 67108863;
      return p > 0 && (this.words[y] = ~this.words[y] & 67108863 >> 26 - p), this.strip();
    }, o.prototype.notn = function(u) {
      return this.clone().inotn(u);
    }, o.prototype.setn = function(u, h) {
      a(typeof u == "number" && u >= 0);
      var p = u / 26 | 0, y = u % 26;
      return this._expand(p + 1), h ? this.words[p] = this.words[p] | 1 << y : this.words[p] = this.words[p] & ~(1 << y), this.strip();
    }, o.prototype.iadd = function(u) {
      var h;
      if (this.negative !== 0 && u.negative === 0)
        return this.negative = 0, h = this.isub(u), this.negative ^= 1, this._normSign();
      if (this.negative === 0 && u.negative !== 0)
        return u.negative = 0, h = this.isub(u), u.negative = 1, h._normSign();
      var p, y;
      this.length > u.length ? (p = this, y = u) : (p = u, y = this);
      for (var v = 0, $ = 0; $ < y.length; $++)
        h = (p.words[$] | 0) + (y.words[$] | 0) + v, this.words[$] = h & 67108863, v = h >>> 26;
      for (; v !== 0 && $ < p.length; $++)
        h = (p.words[$] | 0) + v, this.words[$] = h & 67108863, v = h >>> 26;
      if (this.length = p.length, v !== 0)
        this.words[this.length] = v, this.length++;
      else if (p !== this)
        for (; $ < p.length; $++)
          this.words[$] = p.words[$];
      return this;
    }, o.prototype.add = function(u) {
      var h;
      return u.negative !== 0 && this.negative === 0 ? (u.negative = 0, h = this.sub(u), u.negative ^= 1, h) : u.negative === 0 && this.negative !== 0 ? (this.negative = 0, h = u.sub(this), this.negative = 1, h) : this.length > u.length ? this.clone().iadd(u) : u.clone().iadd(this);
    }, o.prototype.isub = function(u) {
      if (u.negative !== 0) {
        u.negative = 0;
        var h = this.iadd(u);
        return u.negative = 1, h._normSign();
      } else if (this.negative !== 0)
        return this.negative = 0, this.iadd(u), this.negative = 1, this._normSign();
      var p = this.cmp(u);
      if (p === 0)
        return this.negative = 0, this.length = 1, this.words[0] = 0, this;
      var y, v;
      p > 0 ? (y = this, v = u) : (y = u, v = this);
      for (var $ = 0, E = 0; E < v.length; E++)
        h = (y.words[E] | 0) - (v.words[E] | 0) + $, $ = h >> 26, this.words[E] = h & 67108863;
      for (; $ !== 0 && E < y.length; E++)
        h = (y.words[E] | 0) + $, $ = h >> 26, this.words[E] = h & 67108863;
      if ($ === 0 && E < y.length && y !== this)
        for (; E < y.length; E++)
          this.words[E] = y.words[E];
      return this.length = Math.max(this.length, E), y !== this && (this.negative = 1), this.strip();
    }, o.prototype.sub = function(u) {
      return this.clone().isub(u);
    };
    function O(_, u, h) {
      h.negative = u.negative ^ _.negative;
      var p = _.length + u.length | 0;
      h.length = p, p = p - 1 | 0;
      var y = _.words[0] | 0, v = u.words[0] | 0, $ = y * v, E = $ & 67108863, x = $ / 67108864 | 0;
      h.words[0] = E;
      for (var l = 1; l < p; l++) {
        for (var b = x >>> 26, M = x & 67108863, k = Math.min(l, u.length - 1), U = Math.max(0, l - _.length + 1); U <= k; U++) {
          var T = l - U | 0;
          y = _.words[T] | 0, v = u.words[U] | 0, $ = y * v + M, b += $ / 67108864 | 0, M = $ & 67108863;
        }
        h.words[l] = M | 0, x = b | 0;
      }
      return x !== 0 ? h.words[l] = x | 0 : h.length--, h.strip();
    }
    var L = function(u, h, p) {
      var y = u.words, v = h.words, $ = p.words, E = 0, x, l, b, M = y[0] | 0, k = M & 8191, U = M >>> 13, T = y[1] | 0, H = T & 8191, Y = T >>> 13, le = y[2] | 0, ce = le & 8191, de = le >>> 13, ue = y[3] | 0, re = ue & 8191, ge = ue >>> 13, Ae = y[4] | 0, xe = Ae & 8191, Ee = Ae >>> 13, at = y[5] | 0, Re = at & 8191, ve = at >>> 13, xt = y[6] | 0, Ne = xt & 8191, qe = xt >>> 13, wt = y[7] | 0, Te = wt & 8191, De = wt >>> 13, vt = y[8] | 0, ke = vt & 8191, Ue = vt >>> 13, $t = y[9] | 0, ee = $t & 8191, F = $t >>> 13, J = v[0] | 0, oe = J & 8191, he = J >>> 13, Se = v[1] | 0, me = Se & 8191, Be = Se >>> 13, gt = v[2] | 0, Me = gt & 8191, Oe = gt >>> 13, ht = v[3] | 0, He = ht & 8191, Ge = ht >>> 13, _t = v[4] | 0, Le = _t & 8191, Ke = _t >>> 13, Et = v[5] | 0, Fe = Et & 8191, ze = Et >>> 13, At = v[6] | 0, Pe = At & 8191, je = At >>> 13, Q = v[7] | 0, te = Q & 8191, ne = Q >>> 13, D = v[8] | 0, se = D & 8191, pe = D >>> 13, $e = v[9] | 0, be = $e & 8191, _e = $e >>> 13;
      p.negative = u.negative ^ h.negative, p.length = 19, x = Math.imul(k, oe), l = Math.imul(k, he), l = l + Math.imul(U, oe) | 0, b = Math.imul(U, he);
      var Je = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, x = Math.imul(H, oe), l = Math.imul(H, he), l = l + Math.imul(Y, oe) | 0, b = Math.imul(Y, he), x = x + Math.imul(k, me) | 0, l = l + Math.imul(k, Be) | 0, l = l + Math.imul(U, me) | 0, b = b + Math.imul(U, Be) | 0;
      var We = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, x = Math.imul(ce, oe), l = Math.imul(ce, he), l = l + Math.imul(de, oe) | 0, b = Math.imul(de, he), x = x + Math.imul(H, me) | 0, l = l + Math.imul(H, Be) | 0, l = l + Math.imul(Y, me) | 0, b = b + Math.imul(Y, Be) | 0, x = x + Math.imul(k, Me) | 0, l = l + Math.imul(k, Oe) | 0, l = l + Math.imul(U, Me) | 0, b = b + Math.imul(U, Oe) | 0;
      var bt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (bt >>> 26) | 0, bt &= 67108863, x = Math.imul(re, oe), l = Math.imul(re, he), l = l + Math.imul(ge, oe) | 0, b = Math.imul(ge, he), x = x + Math.imul(ce, me) | 0, l = l + Math.imul(ce, Be) | 0, l = l + Math.imul(de, me) | 0, b = b + Math.imul(de, Be) | 0, x = x + Math.imul(H, Me) | 0, l = l + Math.imul(H, Oe) | 0, l = l + Math.imul(Y, Me) | 0, b = b + Math.imul(Y, Oe) | 0, x = x + Math.imul(k, He) | 0, l = l + Math.imul(k, Ge) | 0, l = l + Math.imul(U, He) | 0, b = b + Math.imul(U, Ge) | 0;
      var Ye = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, x = Math.imul(xe, oe), l = Math.imul(xe, he), l = l + Math.imul(Ee, oe) | 0, b = Math.imul(Ee, he), x = x + Math.imul(re, me) | 0, l = l + Math.imul(re, Be) | 0, l = l + Math.imul(ge, me) | 0, b = b + Math.imul(ge, Be) | 0, x = x + Math.imul(ce, Me) | 0, l = l + Math.imul(ce, Oe) | 0, l = l + Math.imul(de, Me) | 0, b = b + Math.imul(de, Oe) | 0, x = x + Math.imul(H, He) | 0, l = l + Math.imul(H, Ge) | 0, l = l + Math.imul(Y, He) | 0, b = b + Math.imul(Y, Ge) | 0, x = x + Math.imul(k, Le) | 0, l = l + Math.imul(k, Ke) | 0, l = l + Math.imul(U, Le) | 0, b = b + Math.imul(U, Ke) | 0;
      var ot = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (ot >>> 26) | 0, ot &= 67108863, x = Math.imul(Re, oe), l = Math.imul(Re, he), l = l + Math.imul(ve, oe) | 0, b = Math.imul(ve, he), x = x + Math.imul(xe, me) | 0, l = l + Math.imul(xe, Be) | 0, l = l + Math.imul(Ee, me) | 0, b = b + Math.imul(Ee, Be) | 0, x = x + Math.imul(re, Me) | 0, l = l + Math.imul(re, Oe) | 0, l = l + Math.imul(ge, Me) | 0, b = b + Math.imul(ge, Oe) | 0, x = x + Math.imul(ce, He) | 0, l = l + Math.imul(ce, Ge) | 0, l = l + Math.imul(de, He) | 0, b = b + Math.imul(de, Ge) | 0, x = x + Math.imul(H, Le) | 0, l = l + Math.imul(H, Ke) | 0, l = l + Math.imul(Y, Le) | 0, b = b + Math.imul(Y, Ke) | 0, x = x + Math.imul(k, Fe) | 0, l = l + Math.imul(k, ze) | 0, l = l + Math.imul(U, Fe) | 0, b = b + Math.imul(U, ze) | 0;
      var ct = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (ct >>> 26) | 0, ct &= 67108863, x = Math.imul(Ne, oe), l = Math.imul(Ne, he), l = l + Math.imul(qe, oe) | 0, b = Math.imul(qe, he), x = x + Math.imul(Re, me) | 0, l = l + Math.imul(Re, Be) | 0, l = l + Math.imul(ve, me) | 0, b = b + Math.imul(ve, Be) | 0, x = x + Math.imul(xe, Me) | 0, l = l + Math.imul(xe, Oe) | 0, l = l + Math.imul(Ee, Me) | 0, b = b + Math.imul(Ee, Oe) | 0, x = x + Math.imul(re, He) | 0, l = l + Math.imul(re, Ge) | 0, l = l + Math.imul(ge, He) | 0, b = b + Math.imul(ge, Ge) | 0, x = x + Math.imul(ce, Le) | 0, l = l + Math.imul(ce, Ke) | 0, l = l + Math.imul(de, Le) | 0, b = b + Math.imul(de, Ke) | 0, x = x + Math.imul(H, Fe) | 0, l = l + Math.imul(H, ze) | 0, l = l + Math.imul(Y, Fe) | 0, b = b + Math.imul(Y, ze) | 0, x = x + Math.imul(k, Pe) | 0, l = l + Math.imul(k, je) | 0, l = l + Math.imul(U, Pe) | 0, b = b + Math.imul(U, je) | 0;
      var lt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (lt >>> 26) | 0, lt &= 67108863, x = Math.imul(Te, oe), l = Math.imul(Te, he), l = l + Math.imul(De, oe) | 0, b = Math.imul(De, he), x = x + Math.imul(Ne, me) | 0, l = l + Math.imul(Ne, Be) | 0, l = l + Math.imul(qe, me) | 0, b = b + Math.imul(qe, Be) | 0, x = x + Math.imul(Re, Me) | 0, l = l + Math.imul(Re, Oe) | 0, l = l + Math.imul(ve, Me) | 0, b = b + Math.imul(ve, Oe) | 0, x = x + Math.imul(xe, He) | 0, l = l + Math.imul(xe, Ge) | 0, l = l + Math.imul(Ee, He) | 0, b = b + Math.imul(Ee, Ge) | 0, x = x + Math.imul(re, Le) | 0, l = l + Math.imul(re, Ke) | 0, l = l + Math.imul(ge, Le) | 0, b = b + Math.imul(ge, Ke) | 0, x = x + Math.imul(ce, Fe) | 0, l = l + Math.imul(ce, ze) | 0, l = l + Math.imul(de, Fe) | 0, b = b + Math.imul(de, ze) | 0, x = x + Math.imul(H, Pe) | 0, l = l + Math.imul(H, je) | 0, l = l + Math.imul(Y, Pe) | 0, b = b + Math.imul(Y, je) | 0, x = x + Math.imul(k, te) | 0, l = l + Math.imul(k, ne) | 0, l = l + Math.imul(U, te) | 0, b = b + Math.imul(U, ne) | 0;
      var mt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (mt >>> 26) | 0, mt &= 67108863, x = Math.imul(ke, oe), l = Math.imul(ke, he), l = l + Math.imul(Ue, oe) | 0, b = Math.imul(Ue, he), x = x + Math.imul(Te, me) | 0, l = l + Math.imul(Te, Be) | 0, l = l + Math.imul(De, me) | 0, b = b + Math.imul(De, Be) | 0, x = x + Math.imul(Ne, Me) | 0, l = l + Math.imul(Ne, Oe) | 0, l = l + Math.imul(qe, Me) | 0, b = b + Math.imul(qe, Oe) | 0, x = x + Math.imul(Re, He) | 0, l = l + Math.imul(Re, Ge) | 0, l = l + Math.imul(ve, He) | 0, b = b + Math.imul(ve, Ge) | 0, x = x + Math.imul(xe, Le) | 0, l = l + Math.imul(xe, Ke) | 0, l = l + Math.imul(Ee, Le) | 0, b = b + Math.imul(Ee, Ke) | 0, x = x + Math.imul(re, Fe) | 0, l = l + Math.imul(re, ze) | 0, l = l + Math.imul(ge, Fe) | 0, b = b + Math.imul(ge, ze) | 0, x = x + Math.imul(ce, Pe) | 0, l = l + Math.imul(ce, je) | 0, l = l + Math.imul(de, Pe) | 0, b = b + Math.imul(de, je) | 0, x = x + Math.imul(H, te) | 0, l = l + Math.imul(H, ne) | 0, l = l + Math.imul(Y, te) | 0, b = b + Math.imul(Y, ne) | 0, x = x + Math.imul(k, se) | 0, l = l + Math.imul(k, pe) | 0, l = l + Math.imul(U, se) | 0, b = b + Math.imul(U, pe) | 0;
      var dt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (dt >>> 26) | 0, dt &= 67108863, x = Math.imul(ee, oe), l = Math.imul(ee, he), l = l + Math.imul(F, oe) | 0, b = Math.imul(F, he), x = x + Math.imul(ke, me) | 0, l = l + Math.imul(ke, Be) | 0, l = l + Math.imul(Ue, me) | 0, b = b + Math.imul(Ue, Be) | 0, x = x + Math.imul(Te, Me) | 0, l = l + Math.imul(Te, Oe) | 0, l = l + Math.imul(De, Me) | 0, b = b + Math.imul(De, Oe) | 0, x = x + Math.imul(Ne, He) | 0, l = l + Math.imul(Ne, Ge) | 0, l = l + Math.imul(qe, He) | 0, b = b + Math.imul(qe, Ge) | 0, x = x + Math.imul(Re, Le) | 0, l = l + Math.imul(Re, Ke) | 0, l = l + Math.imul(ve, Le) | 0, b = b + Math.imul(ve, Ke) | 0, x = x + Math.imul(xe, Fe) | 0, l = l + Math.imul(xe, ze) | 0, l = l + Math.imul(Ee, Fe) | 0, b = b + Math.imul(Ee, ze) | 0, x = x + Math.imul(re, Pe) | 0, l = l + Math.imul(re, je) | 0, l = l + Math.imul(ge, Pe) | 0, b = b + Math.imul(ge, je) | 0, x = x + Math.imul(ce, te) | 0, l = l + Math.imul(ce, ne) | 0, l = l + Math.imul(de, te) | 0, b = b + Math.imul(de, ne) | 0, x = x + Math.imul(H, se) | 0, l = l + Math.imul(H, pe) | 0, l = l + Math.imul(Y, se) | 0, b = b + Math.imul(Y, pe) | 0, x = x + Math.imul(k, be) | 0, l = l + Math.imul(k, _e) | 0, l = l + Math.imul(U, be) | 0, b = b + Math.imul(U, _e) | 0;
      var yt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (yt >>> 26) | 0, yt &= 67108863, x = Math.imul(ee, me), l = Math.imul(ee, Be), l = l + Math.imul(F, me) | 0, b = Math.imul(F, Be), x = x + Math.imul(ke, Me) | 0, l = l + Math.imul(ke, Oe) | 0, l = l + Math.imul(Ue, Me) | 0, b = b + Math.imul(Ue, Oe) | 0, x = x + Math.imul(Te, He) | 0, l = l + Math.imul(Te, Ge) | 0, l = l + Math.imul(De, He) | 0, b = b + Math.imul(De, Ge) | 0, x = x + Math.imul(Ne, Le) | 0, l = l + Math.imul(Ne, Ke) | 0, l = l + Math.imul(qe, Le) | 0, b = b + Math.imul(qe, Ke) | 0, x = x + Math.imul(Re, Fe) | 0, l = l + Math.imul(Re, ze) | 0, l = l + Math.imul(ve, Fe) | 0, b = b + Math.imul(ve, ze) | 0, x = x + Math.imul(xe, Pe) | 0, l = l + Math.imul(xe, je) | 0, l = l + Math.imul(Ee, Pe) | 0, b = b + Math.imul(Ee, je) | 0, x = x + Math.imul(re, te) | 0, l = l + Math.imul(re, ne) | 0, l = l + Math.imul(ge, te) | 0, b = b + Math.imul(ge, ne) | 0, x = x + Math.imul(ce, se) | 0, l = l + Math.imul(ce, pe) | 0, l = l + Math.imul(de, se) | 0, b = b + Math.imul(de, pe) | 0, x = x + Math.imul(H, be) | 0, l = l + Math.imul(H, _e) | 0, l = l + Math.imul(Y, be) | 0, b = b + Math.imul(Y, _e) | 0;
      var pt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (pt >>> 26) | 0, pt &= 67108863, x = Math.imul(ee, Me), l = Math.imul(ee, Oe), l = l + Math.imul(F, Me) | 0, b = Math.imul(F, Oe), x = x + Math.imul(ke, He) | 0, l = l + Math.imul(ke, Ge) | 0, l = l + Math.imul(Ue, He) | 0, b = b + Math.imul(Ue, Ge) | 0, x = x + Math.imul(Te, Le) | 0, l = l + Math.imul(Te, Ke) | 0, l = l + Math.imul(De, Le) | 0, b = b + Math.imul(De, Ke) | 0, x = x + Math.imul(Ne, Fe) | 0, l = l + Math.imul(Ne, ze) | 0, l = l + Math.imul(qe, Fe) | 0, b = b + Math.imul(qe, ze) | 0, x = x + Math.imul(Re, Pe) | 0, l = l + Math.imul(Re, je) | 0, l = l + Math.imul(ve, Pe) | 0, b = b + Math.imul(ve, je) | 0, x = x + Math.imul(xe, te) | 0, l = l + Math.imul(xe, ne) | 0, l = l + Math.imul(Ee, te) | 0, b = b + Math.imul(Ee, ne) | 0, x = x + Math.imul(re, se) | 0, l = l + Math.imul(re, pe) | 0, l = l + Math.imul(ge, se) | 0, b = b + Math.imul(ge, pe) | 0, x = x + Math.imul(ce, be) | 0, l = l + Math.imul(ce, _e) | 0, l = l + Math.imul(de, be) | 0, b = b + Math.imul(de, _e) | 0;
      var tt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, x = Math.imul(ee, He), l = Math.imul(ee, Ge), l = l + Math.imul(F, He) | 0, b = Math.imul(F, Ge), x = x + Math.imul(ke, Le) | 0, l = l + Math.imul(ke, Ke) | 0, l = l + Math.imul(Ue, Le) | 0, b = b + Math.imul(Ue, Ke) | 0, x = x + Math.imul(Te, Fe) | 0, l = l + Math.imul(Te, ze) | 0, l = l + Math.imul(De, Fe) | 0, b = b + Math.imul(De, ze) | 0, x = x + Math.imul(Ne, Pe) | 0, l = l + Math.imul(Ne, je) | 0, l = l + Math.imul(qe, Pe) | 0, b = b + Math.imul(qe, je) | 0, x = x + Math.imul(Re, te) | 0, l = l + Math.imul(Re, ne) | 0, l = l + Math.imul(ve, te) | 0, b = b + Math.imul(ve, ne) | 0, x = x + Math.imul(xe, se) | 0, l = l + Math.imul(xe, pe) | 0, l = l + Math.imul(Ee, se) | 0, b = b + Math.imul(Ee, pe) | 0, x = x + Math.imul(re, be) | 0, l = l + Math.imul(re, _e) | 0, l = l + Math.imul(ge, be) | 0, b = b + Math.imul(ge, _e) | 0;
      var st = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (st >>> 26) | 0, st &= 67108863, x = Math.imul(ee, Le), l = Math.imul(ee, Ke), l = l + Math.imul(F, Le) | 0, b = Math.imul(F, Ke), x = x + Math.imul(ke, Fe) | 0, l = l + Math.imul(ke, ze) | 0, l = l + Math.imul(Ue, Fe) | 0, b = b + Math.imul(Ue, ze) | 0, x = x + Math.imul(Te, Pe) | 0, l = l + Math.imul(Te, je) | 0, l = l + Math.imul(De, Pe) | 0, b = b + Math.imul(De, je) | 0, x = x + Math.imul(Ne, te) | 0, l = l + Math.imul(Ne, ne) | 0, l = l + Math.imul(qe, te) | 0, b = b + Math.imul(qe, ne) | 0, x = x + Math.imul(Re, se) | 0, l = l + Math.imul(Re, pe) | 0, l = l + Math.imul(ve, se) | 0, b = b + Math.imul(ve, pe) | 0, x = x + Math.imul(xe, be) | 0, l = l + Math.imul(xe, _e) | 0, l = l + Math.imul(Ee, be) | 0, b = b + Math.imul(Ee, _e) | 0;
      var Qe = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, x = Math.imul(ee, Fe), l = Math.imul(ee, ze), l = l + Math.imul(F, Fe) | 0, b = Math.imul(F, ze), x = x + Math.imul(ke, Pe) | 0, l = l + Math.imul(ke, je) | 0, l = l + Math.imul(Ue, Pe) | 0, b = b + Math.imul(Ue, je) | 0, x = x + Math.imul(Te, te) | 0, l = l + Math.imul(Te, ne) | 0, l = l + Math.imul(De, te) | 0, b = b + Math.imul(De, ne) | 0, x = x + Math.imul(Ne, se) | 0, l = l + Math.imul(Ne, pe) | 0, l = l + Math.imul(qe, se) | 0, b = b + Math.imul(qe, pe) | 0, x = x + Math.imul(Re, be) | 0, l = l + Math.imul(Re, _e) | 0, l = l + Math.imul(ve, be) | 0, b = b + Math.imul(ve, _e) | 0;
      var rt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, x = Math.imul(ee, Pe), l = Math.imul(ee, je), l = l + Math.imul(F, Pe) | 0, b = Math.imul(F, je), x = x + Math.imul(ke, te) | 0, l = l + Math.imul(ke, ne) | 0, l = l + Math.imul(Ue, te) | 0, b = b + Math.imul(Ue, ne) | 0, x = x + Math.imul(Te, se) | 0, l = l + Math.imul(Te, pe) | 0, l = l + Math.imul(De, se) | 0, b = b + Math.imul(De, pe) | 0, x = x + Math.imul(Ne, be) | 0, l = l + Math.imul(Ne, _e) | 0, l = l + Math.imul(qe, be) | 0, b = b + Math.imul(qe, _e) | 0;
      var it = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (it >>> 26) | 0, it &= 67108863, x = Math.imul(ee, te), l = Math.imul(ee, ne), l = l + Math.imul(F, te) | 0, b = Math.imul(F, ne), x = x + Math.imul(ke, se) | 0, l = l + Math.imul(ke, pe) | 0, l = l + Math.imul(Ue, se) | 0, b = b + Math.imul(Ue, pe) | 0, x = x + Math.imul(Te, be) | 0, l = l + Math.imul(Te, _e) | 0, l = l + Math.imul(De, be) | 0, b = b + Math.imul(De, _e) | 0;
      var et = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, x = Math.imul(ee, se), l = Math.imul(ee, pe), l = l + Math.imul(F, se) | 0, b = Math.imul(F, pe), x = x + Math.imul(ke, be) | 0, l = l + Math.imul(ke, _e) | 0, l = l + Math.imul(Ue, be) | 0, b = b + Math.imul(Ue, _e) | 0;
      var Ie = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (Ie >>> 26) | 0, Ie &= 67108863, x = Math.imul(ee, be), l = Math.imul(ee, _e), l = l + Math.imul(F, be) | 0, b = Math.imul(F, _e);
      var Ce = (E + x | 0) + ((l & 8191) << 13) | 0;
      return E = (b + (l >>> 13) | 0) + (Ce >>> 26) | 0, Ce &= 67108863, $[0] = Je, $[1] = We, $[2] = bt, $[3] = Ye, $[4] = ot, $[5] = ct, $[6] = lt, $[7] = mt, $[8] = dt, $[9] = yt, $[10] = pt, $[11] = tt, $[12] = st, $[13] = Qe, $[14] = rt, $[15] = it, $[16] = et, $[17] = Ie, $[18] = Ce, E !== 0 && ($[19] = E, p.length++), p;
    };
    Math.imul || (L = O);
    function C(_, u, h) {
      h.negative = u.negative ^ _.negative, h.length = _.length + u.length;
      for (var p = 0, y = 0, v = 0; v < h.length - 1; v++) {
        var $ = y;
        y = 0;
        for (var E = p & 67108863, x = Math.min(v, u.length - 1), l = Math.max(0, v - _.length + 1); l <= x; l++) {
          var b = v - l, M = _.words[b] | 0, k = u.words[l] | 0, U = M * k, T = U & 67108863;
          $ = $ + (U / 67108864 | 0) | 0, T = T + E | 0, E = T & 67108863, $ = $ + (T >>> 26) | 0, y += $ >>> 26, $ &= 67108863;
        }
        h.words[v] = E, p = $, $ = y;
      }
      return p !== 0 ? h.words[v] = p : h.length--, h.strip();
    }
    function z(_, u, h) {
      var p = new q();
      return p.mulp(_, u, h);
    }
    o.prototype.mulTo = function(u, h) {
      var p, y = this.length + u.length;
      return this.length === 10 && u.length === 10 ? p = L(this, u, h) : y < 63 ? p = O(this, u, h) : y < 1024 ? p = C(this, u, h) : p = z(this, u, h), p;
    };
    function q(_, u) {
      this.x = _, this.y = u;
    }
    q.prototype.makeRBT = function(u) {
      for (var h = new Array(u), p = o.prototype._countBits(u) - 1, y = 0; y < u; y++)
        h[y] = this.revBin(y, p, u);
      return h;
    }, q.prototype.revBin = function(u, h, p) {
      if (u === 0 || u === p - 1)
        return u;
      for (var y = 0, v = 0; v < h; v++)
        y |= (u & 1) << h - v - 1, u >>= 1;
      return y;
    }, q.prototype.permute = function(u, h, p, y, v, $) {
      for (var E = 0; E < $; E++)
        y[E] = h[u[E]], v[E] = p[u[E]];
    }, q.prototype.transform = function(u, h, p, y, v, $) {
      this.permute($, u, h, p, y, v);
      for (var E = 1; E < v; E <<= 1)
        for (var x = E << 1, l = Math.cos(2 * Math.PI / x), b = Math.sin(2 * Math.PI / x), M = 0; M < v; M += x)
          for (var k = l, U = b, T = 0; T < E; T++) {
            var H = p[M + T], Y = y[M + T], le = p[M + T + E], ce = y[M + T + E], de = k * le - U * ce;
            ce = k * ce + U * le, le = de, p[M + T] = H + le, y[M + T] = Y + ce, p[M + T + E] = H - le, y[M + T + E] = Y - ce, T !== x && (de = l * k - b * U, U = l * U + b * k, k = de);
          }
    }, q.prototype.guessLen13b = function(u, h) {
      var p = Math.max(h, u) | 1, y = p & 1, v = 0;
      for (p = p / 2 | 0; p; p = p >>> 1)
        v++;
      return 1 << v + 1 + y;
    }, q.prototype.conjugate = function(u, h, p) {
      if (!(p <= 1))
        for (var y = 0; y < p / 2; y++) {
          var v = u[y];
          u[y] = u[p - y - 1], u[p - y - 1] = v, v = h[y], h[y] = -h[p - y - 1], h[p - y - 1] = -v;
        }
    }, q.prototype.normalize13b = function(u, h) {
      for (var p = 0, y = 0; y < h / 2; y++) {
        var v = Math.round(u[2 * y + 1] / h) * 8192 + Math.round(u[2 * y] / h) + p;
        u[y] = v & 67108863, v < 67108864 ? p = 0 : p = v / 67108864 | 0;
      }
      return u;
    }, q.prototype.convert13b = function(u, h, p, y) {
      for (var v = 0, $ = 0; $ < h; $++)
        v = v + (u[$] | 0), p[2 * $] = v & 8191, v = v >>> 13, p[2 * $ + 1] = v & 8191, v = v >>> 13;
      for ($ = 2 * h; $ < y; ++$)
        p[$] = 0;
      a(v === 0), a((v & -8192) === 0);
    }, q.prototype.stub = function(u) {
      for (var h = new Array(u), p = 0; p < u; p++)
        h[p] = 0;
      return h;
    }, q.prototype.mulp = function(u, h, p) {
      var y = 2 * this.guessLen13b(u.length, h.length), v = this.makeRBT(y), $ = this.stub(y), E = new Array(y), x = new Array(y), l = new Array(y), b = new Array(y), M = new Array(y), k = new Array(y), U = p.words;
      U.length = y, this.convert13b(u.words, u.length, E, y), this.convert13b(h.words, h.length, b, y), this.transform(E, $, x, l, y, v), this.transform(b, $, M, k, y, v);
      for (var T = 0; T < y; T++) {
        var H = x[T] * M[T] - l[T] * k[T];
        l[T] = x[T] * k[T] + l[T] * M[T], x[T] = H;
      }
      return this.conjugate(x, l, y), this.transform(x, l, U, $, y, v), this.conjugate(U, $, y), this.normalize13b(U, y), p.negative = u.negative ^ h.negative, p.length = u.length + h.length, p.strip();
    }, o.prototype.mul = function(u) {
      var h = new o(null);
      return h.words = new Array(this.length + u.length), this.mulTo(u, h);
    }, o.prototype.mulf = function(u) {
      var h = new o(null);
      return h.words = new Array(this.length + u.length), z(this, u, h);
    }, o.prototype.imul = function(u) {
      return this.clone().mulTo(u, this);
    }, o.prototype.imuln = function(u) {
      a(typeof u == "number"), a(u < 67108864);
      for (var h = 0, p = 0; p < this.length; p++) {
        var y = (this.words[p] | 0) * u, v = (y & 67108863) + (h & 67108863);
        h >>= 26, h += y / 67108864 | 0, h += v >>> 26, this.words[p] = v & 67108863;
      }
      return h !== 0 && (this.words[p] = h, this.length++), this;
    }, o.prototype.muln = function(u) {
      return this.clone().imuln(u);
    }, o.prototype.sqr = function() {
      return this.mul(this);
    }, o.prototype.isqr = function() {
      return this.imul(this.clone());
    }, o.prototype.pow = function(u) {
      var h = I(u);
      if (h.length === 0)
        return new o(1);
      for (var p = this, y = 0; y < h.length && h[y] === 0; y++, p = p.sqr())
        ;
      if (++y < h.length)
        for (var v = p.sqr(); y < h.length; y++, v = v.sqr())
          h[y] !== 0 && (p = p.mul(v));
      return p;
    }, o.prototype.iushln = function(u) {
      a(typeof u == "number" && u >= 0);
      var h = u % 26, p = (u - h) / 26, y = 67108863 >>> 26 - h << 26 - h, v;
      if (h !== 0) {
        var $ = 0;
        for (v = 0; v < this.length; v++) {
          var E = this.words[v] & y, x = (this.words[v] | 0) - E << h;
          this.words[v] = x | $, $ = E >>> 26 - h;
        }
        $ && (this.words[v] = $, this.length++);
      }
      if (p !== 0) {
        for (v = this.length - 1; v >= 0; v--)
          this.words[v + p] = this.words[v];
        for (v = 0; v < p; v++)
          this.words[v] = 0;
        this.length += p;
      }
      return this.strip();
    }, o.prototype.ishln = function(u) {
      return a(this.negative === 0), this.iushln(u);
    }, o.prototype.iushrn = function(u, h, p) {
      a(typeof u == "number" && u >= 0);
      var y;
      h ? y = (h - h % 26) / 26 : y = 0;
      var v = u % 26, $ = Math.min((u - v) / 26, this.length), E = 67108863 ^ 67108863 >>> v << v, x = p;
      if (y -= $, y = Math.max(0, y), x) {
        for (var l = 0; l < $; l++)
          x.words[l] = this.words[l];
        x.length = $;
      }
      if ($ !== 0)
        if (this.length > $)
          for (this.length -= $, l = 0; l < this.length; l++)
            this.words[l] = this.words[l + $];
        else
          this.words[0] = 0, this.length = 1;
      var b = 0;
      for (l = this.length - 1; l >= 0 && (b !== 0 || l >= y); l--) {
        var M = this.words[l] | 0;
        this.words[l] = b << 26 - v | M >>> v, b = M & E;
      }
      return x && b !== 0 && (x.words[x.length++] = b), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
    }, o.prototype.ishrn = function(u, h, p) {
      return a(this.negative === 0), this.iushrn(u, h, p);
    }, o.prototype.shln = function(u) {
      return this.clone().ishln(u);
    }, o.prototype.ushln = function(u) {
      return this.clone().iushln(u);
    }, o.prototype.shrn = function(u) {
      return this.clone().ishrn(u);
    }, o.prototype.ushrn = function(u) {
      return this.clone().iushrn(u);
    }, o.prototype.testn = function(u) {
      a(typeof u == "number" && u >= 0);
      var h = u % 26, p = (u - h) / 26, y = 1 << h;
      if (this.length <= p)
        return !1;
      var v = this.words[p];
      return !!(v & y);
    }, o.prototype.imaskn = function(u) {
      a(typeof u == "number" && u >= 0);
      var h = u % 26, p = (u - h) / 26;
      if (a(this.negative === 0, "imaskn works only with positive numbers"), this.length <= p)
        return this;
      if (h !== 0 && p++, this.length = Math.min(p, this.length), h !== 0) {
        var y = 67108863 ^ 67108863 >>> h << h;
        this.words[this.length - 1] &= y;
      }
      return this.strip();
    }, o.prototype.maskn = function(u) {
      return this.clone().imaskn(u);
    }, o.prototype.iaddn = function(u) {
      return a(typeof u == "number"), a(u < 67108864), u < 0 ? this.isubn(-u) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < u ? (this.words[0] = u - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(u), this.negative = 1, this) : this._iaddn(u);
    }, o.prototype._iaddn = function(u) {
      this.words[0] += u;
      for (var h = 0; h < this.length && this.words[h] >= 67108864; h++)
        this.words[h] -= 67108864, h === this.length - 1 ? this.words[h + 1] = 1 : this.words[h + 1]++;
      return this.length = Math.max(this.length, h + 1), this;
    }, o.prototype.isubn = function(u) {
      if (a(typeof u == "number"), a(u < 67108864), u < 0)
        return this.iaddn(-u);
      if (this.negative !== 0)
        return this.negative = 0, this.iaddn(u), this.negative = 1, this;
      if (this.words[0] -= u, this.length === 1 && this.words[0] < 0)
        this.words[0] = -this.words[0], this.negative = 1;
      else
        for (var h = 0; h < this.length && this.words[h] < 0; h++)
          this.words[h] += 67108864, this.words[h + 1] -= 1;
      return this.strip();
    }, o.prototype.addn = function(u) {
      return this.clone().iaddn(u);
    }, o.prototype.subn = function(u) {
      return this.clone().isubn(u);
    }, o.prototype.iabs = function() {
      return this.negative = 0, this;
    }, o.prototype.abs = function() {
      return this.clone().iabs();
    }, o.prototype._ishlnsubmul = function(u, h, p) {
      var y = u.length + p, v;
      this._expand(y);
      var $, E = 0;
      for (v = 0; v < u.length; v++) {
        $ = (this.words[v + p] | 0) + E;
        var x = (u.words[v] | 0) * h;
        $ -= x & 67108863, E = ($ >> 26) - (x / 67108864 | 0), this.words[v + p] = $ & 67108863;
      }
      for (; v < this.length - p; v++)
        $ = (this.words[v + p] | 0) + E, E = $ >> 26, this.words[v + p] = $ & 67108863;
      if (E === 0)
        return this.strip();
      for (a(E === -1), E = 0, v = 0; v < this.length; v++)
        $ = -(this.words[v] | 0) + E, E = $ >> 26, this.words[v] = $ & 67108863;
      return this.negative = 1, this.strip();
    }, o.prototype._wordDiv = function(u, h) {
      var p = this.length - u.length, y = this.clone(), v = u, $ = v.words[v.length - 1] | 0, E = this._countBits($);
      p = 26 - E, p !== 0 && (v = v.ushln(p), y.iushln(p), $ = v.words[v.length - 1] | 0);
      var x = y.length - v.length, l;
      if (h !== "mod") {
        l = new o(null), l.length = x + 1, l.words = new Array(l.length);
        for (var b = 0; b < l.length; b++)
          l.words[b] = 0;
      }
      var M = y.clone()._ishlnsubmul(v, 1, x);
      M.negative === 0 && (y = M, l && (l.words[x] = 1));
      for (var k = x - 1; k >= 0; k--) {
        var U = (y.words[v.length + k] | 0) * 67108864 + (y.words[v.length + k - 1] | 0);
        for (U = Math.min(U / $ | 0, 67108863), y._ishlnsubmul(v, U, k); y.negative !== 0; )
          U--, y.negative = 0, y._ishlnsubmul(v, 1, k), y.isZero() || (y.negative ^= 1);
        l && (l.words[k] = U);
      }
      return l && l.strip(), y.strip(), h !== "div" && p !== 0 && y.iushrn(p), {
        div: l || null,
        mod: y
      };
    }, o.prototype.divmod = function(u, h, p) {
      if (a(!u.isZero()), this.isZero())
        return {
          div: new o(0),
          mod: new o(0)
        };
      var y, v, $;
      return this.negative !== 0 && u.negative === 0 ? ($ = this.neg().divmod(u, h), h !== "mod" && (y = $.div.neg()), h !== "div" && (v = $.mod.neg(), p && v.negative !== 0 && v.iadd(u)), {
        div: y,
        mod: v
      }) : this.negative === 0 && u.negative !== 0 ? ($ = this.divmod(u.neg(), h), h !== "mod" && (y = $.div.neg()), {
        div: y,
        mod: $.mod
      }) : this.negative & u.negative ? ($ = this.neg().divmod(u.neg(), h), h !== "div" && (v = $.mod.neg(), p && v.negative !== 0 && v.isub(u)), {
        div: $.div,
        mod: v
      }) : u.length > this.length || this.cmp(u) < 0 ? {
        div: new o(0),
        mod: this
      } : u.length === 1 ? h === "div" ? {
        div: this.divn(u.words[0]),
        mod: null
      } : h === "mod" ? {
        div: null,
        mod: new o(this.modn(u.words[0]))
      } : {
        div: this.divn(u.words[0]),
        mod: new o(this.modn(u.words[0]))
      } : this._wordDiv(u, h);
    }, o.prototype.div = function(u) {
      return this.divmod(u, "div", !1).div;
    }, o.prototype.mod = function(u) {
      return this.divmod(u, "mod", !1).mod;
    }, o.prototype.umod = function(u) {
      return this.divmod(u, "mod", !0).mod;
    }, o.prototype.divRound = function(u) {
      var h = this.divmod(u);
      if (h.mod.isZero())
        return h.div;
      var p = h.div.negative !== 0 ? h.mod.isub(u) : h.mod, y = u.ushrn(1), v = u.andln(1), $ = p.cmp(y);
      return $ < 0 || v === 1 && $ === 0 ? h.div : h.div.negative !== 0 ? h.div.isubn(1) : h.div.iaddn(1);
    }, o.prototype.modn = function(u) {
      a(u <= 67108863);
      for (var h = (1 << 26) % u, p = 0, y = this.length - 1; y >= 0; y--)
        p = (h * p + (this.words[y] | 0)) % u;
      return p;
    }, o.prototype.idivn = function(u) {
      a(u <= 67108863);
      for (var h = 0, p = this.length - 1; p >= 0; p--) {
        var y = (this.words[p] | 0) + h * 67108864;
        this.words[p] = y / u | 0, h = y % u;
      }
      return this.strip();
    }, o.prototype.divn = function(u) {
      return this.clone().idivn(u);
    }, o.prototype.egcd = function(u) {
      a(u.negative === 0), a(!u.isZero());
      var h = this, p = u.clone();
      h.negative !== 0 ? h = h.umod(u) : h = h.clone();
      for (var y = new o(1), v = new o(0), $ = new o(0), E = new o(1), x = 0; h.isEven() && p.isEven(); )
        h.iushrn(1), p.iushrn(1), ++x;
      for (var l = p.clone(), b = h.clone(); !h.isZero(); ) {
        for (var M = 0, k = 1; !(h.words[0] & k) && M < 26; ++M, k <<= 1)
          ;
        if (M > 0)
          for (h.iushrn(M); M-- > 0; )
            (y.isOdd() || v.isOdd()) && (y.iadd(l), v.isub(b)), y.iushrn(1), v.iushrn(1);
        for (var U = 0, T = 1; !(p.words[0] & T) && U < 26; ++U, T <<= 1)
          ;
        if (U > 0)
          for (p.iushrn(U); U-- > 0; )
            ($.isOdd() || E.isOdd()) && ($.iadd(l), E.isub(b)), $.iushrn(1), E.iushrn(1);
        h.cmp(p) >= 0 ? (h.isub(p), y.isub($), v.isub(E)) : (p.isub(h), $.isub(y), E.isub(v));
      }
      return {
        a: $,
        b: E,
        gcd: p.iushln(x)
      };
    }, o.prototype._invmp = function(u) {
      a(u.negative === 0), a(!u.isZero());
      var h = this, p = u.clone();
      h.negative !== 0 ? h = h.umod(u) : h = h.clone();
      for (var y = new o(1), v = new o(0), $ = p.clone(); h.cmpn(1) > 0 && p.cmpn(1) > 0; ) {
        for (var E = 0, x = 1; !(h.words[0] & x) && E < 26; ++E, x <<= 1)
          ;
        if (E > 0)
          for (h.iushrn(E); E-- > 0; )
            y.isOdd() && y.iadd($), y.iushrn(1);
        for (var l = 0, b = 1; !(p.words[0] & b) && l < 26; ++l, b <<= 1)
          ;
        if (l > 0)
          for (p.iushrn(l); l-- > 0; )
            v.isOdd() && v.iadd($), v.iushrn(1);
        h.cmp(p) >= 0 ? (h.isub(p), y.isub(v)) : (p.isub(h), v.isub(y));
      }
      var M;
      return h.cmpn(1) === 0 ? M = y : M = v, M.cmpn(0) < 0 && M.iadd(u), M;
    }, o.prototype.gcd = function(u) {
      if (this.isZero())
        return u.abs();
      if (u.isZero())
        return this.abs();
      var h = this.clone(), p = u.clone();
      h.negative = 0, p.negative = 0;
      for (var y = 0; h.isEven() && p.isEven(); y++)
        h.iushrn(1), p.iushrn(1);
      do {
        for (; h.isEven(); )
          h.iushrn(1);
        for (; p.isEven(); )
          p.iushrn(1);
        var v = h.cmp(p);
        if (v < 0) {
          var $ = h;
          h = p, p = $;
        } else if (v === 0 || p.cmpn(1) === 0)
          break;
        h.isub(p);
      } while (!0);
      return p.iushln(y);
    }, o.prototype.invm = function(u) {
      return this.egcd(u).a.umod(u);
    }, o.prototype.isEven = function() {
      return (this.words[0] & 1) === 0;
    }, o.prototype.isOdd = function() {
      return (this.words[0] & 1) === 1;
    }, o.prototype.andln = function(u) {
      return this.words[0] & u;
    }, o.prototype.bincn = function(u) {
      a(typeof u == "number");
      var h = u % 26, p = (u - h) / 26, y = 1 << h;
      if (this.length <= p)
        return this._expand(p + 1), this.words[p] |= y, this;
      for (var v = y, $ = p; v !== 0 && $ < this.length; $++) {
        var E = this.words[$] | 0;
        E += v, v = E >>> 26, E &= 67108863, this.words[$] = E;
      }
      return v !== 0 && (this.words[$] = v, this.length++), this;
    }, o.prototype.isZero = function() {
      return this.length === 1 && this.words[0] === 0;
    }, o.prototype.cmpn = function(u) {
      var h = u < 0;
      if (this.negative !== 0 && !h)
        return -1;
      if (this.negative === 0 && h)
        return 1;
      this.strip();
      var p;
      if (this.length > 1)
        p = 1;
      else {
        h && (u = -u), a(u <= 67108863, "Number is too big");
        var y = this.words[0] | 0;
        p = y === u ? 0 : y < u ? -1 : 1;
      }
      return this.negative !== 0 ? -p | 0 : p;
    }, o.prototype.cmp = function(u) {
      if (this.negative !== 0 && u.negative === 0)
        return -1;
      if (this.negative === 0 && u.negative !== 0)
        return 1;
      var h = this.ucmp(u);
      return this.negative !== 0 ? -h | 0 : h;
    }, o.prototype.ucmp = function(u) {
      if (this.length > u.length)
        return 1;
      if (this.length < u.length)
        return -1;
      for (var h = 0, p = this.length - 1; p >= 0; p--) {
        var y = this.words[p] | 0, v = u.words[p] | 0;
        if (y !== v) {
          y < v ? h = -1 : y > v && (h = 1);
          break;
        }
      }
      return h;
    }, o.prototype.gtn = function(u) {
      return this.cmpn(u) === 1;
    }, o.prototype.gt = function(u) {
      return this.cmp(u) === 1;
    }, o.prototype.gten = function(u) {
      return this.cmpn(u) >= 0;
    }, o.prototype.gte = function(u) {
      return this.cmp(u) >= 0;
    }, o.prototype.ltn = function(u) {
      return this.cmpn(u) === -1;
    }, o.prototype.lt = function(u) {
      return this.cmp(u) === -1;
    }, o.prototype.lten = function(u) {
      return this.cmpn(u) <= 0;
    }, o.prototype.lte = function(u) {
      return this.cmp(u) <= 0;
    }, o.prototype.eqn = function(u) {
      return this.cmpn(u) === 0;
    }, o.prototype.eq = function(u) {
      return this.cmp(u) === 0;
    }, o.red = function(u) {
      return new V(u);
    }, o.prototype.toRed = function(u) {
      return a(!this.red, "Already a number in reduction context"), a(this.negative === 0, "red works only with positives"), u.convertTo(this)._forceRed(u);
    }, o.prototype.fromRed = function() {
      return a(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
    }, o.prototype._forceRed = function(u) {
      return this.red = u, this;
    }, o.prototype.forceRed = function(u) {
      return a(!this.red, "Already a number in reduction context"), this._forceRed(u);
    }, o.prototype.redAdd = function(u) {
      return a(this.red, "redAdd works only with red numbers"), this.red.add(this, u);
    }, o.prototype.redIAdd = function(u) {
      return a(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, u);
    }, o.prototype.redSub = function(u) {
      return a(this.red, "redSub works only with red numbers"), this.red.sub(this, u);
    }, o.prototype.redISub = function(u) {
      return a(this.red, "redISub works only with red numbers"), this.red.isub(this, u);
    }, o.prototype.redShl = function(u) {
      return a(this.red, "redShl works only with red numbers"), this.red.shl(this, u);
    }, o.prototype.redMul = function(u) {
      return a(this.red, "redMul works only with red numbers"), this.red._verify2(this, u), this.red.mul(this, u);
    }, o.prototype.redIMul = function(u) {
      return a(this.red, "redMul works only with red numbers"), this.red._verify2(this, u), this.red.imul(this, u);
    }, o.prototype.redSqr = function() {
      return a(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
    }, o.prototype.redISqr = function() {
      return a(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
    }, o.prototype.redSqrt = function() {
      return a(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
    }, o.prototype.redInvm = function() {
      return a(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
    }, o.prototype.redNeg = function() {
      return a(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
    }, o.prototype.redPow = function(u) {
      return a(this.red && !u.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, u);
    };
    var Z = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function X(_, u) {
      this.name = _, this.p = new o(u, 16), this.n = this.p.bitLength(), this.k = new o(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
    }
    X.prototype._tmp = function() {
      var u = new o(null);
      return u.words = new Array(Math.ceil(this.n / 13)), u;
    }, X.prototype.ireduce = function(u) {
      var h = u, p;
      do
        this.split(h, this.tmp), h = this.imulK(h), h = h.iadd(this.tmp), p = h.bitLength();
      while (p > this.n);
      var y = p < this.n ? -1 : h.ucmp(this.p);
      return y === 0 ? (h.words[0] = 0, h.length = 1) : y > 0 ? h.isub(this.p) : h.strip !== void 0 ? h.strip() : h._strip(), h;
    }, X.prototype.split = function(u, h) {
      u.iushrn(this.n, 0, h);
    }, X.prototype.imulK = function(u) {
      return u.imul(this.k);
    };
    function ie() {
      X.call(
        this,
        "k256",
        "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
      );
    }
    c(ie, X), ie.prototype.split = function(u, h) {
      for (var p = 4194303, y = Math.min(u.length, 9), v = 0; v < y; v++)
        h.words[v] = u.words[v];
      if (h.length = y, u.length <= 9) {
        u.words[0] = 0, u.length = 1;
        return;
      }
      var $ = u.words[9];
      for (h.words[h.length++] = $ & p, v = 10; v < u.length; v++) {
        var E = u.words[v] | 0;
        u.words[v - 10] = (E & p) << 4 | $ >>> 22, $ = E;
      }
      $ >>>= 22, u.words[v - 10] = $, $ === 0 && u.length > 10 ? u.length -= 10 : u.length -= 9;
    }, ie.prototype.imulK = function(u) {
      u.words[u.length] = 0, u.words[u.length + 1] = 0, u.length += 2;
      for (var h = 0, p = 0; p < u.length; p++) {
        var y = u.words[p] | 0;
        h += y * 977, u.words[p] = h & 67108863, h = y * 64 + (h / 67108864 | 0);
      }
      return u.words[u.length - 1] === 0 && (u.length--, u.words[u.length - 1] === 0 && u.length--), u;
    };
    function fe() {
      X.call(
        this,
        "p224",
        "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
      );
    }
    c(fe, X);
    function ye() {
      X.call(
        this,
        "p192",
        "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
      );
    }
    c(ye, X);
    function j() {
      X.call(
        this,
        "25519",
        "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
      );
    }
    c(j, X), j.prototype.imulK = function(u) {
      for (var h = 0, p = 0; p < u.length; p++) {
        var y = (u.words[p] | 0) * 19 + h, v = y & 67108863;
        y >>>= 26, u.words[p] = v, h = y;
      }
      return h !== 0 && (u.words[u.length++] = h), u;
    }, o._prime = function(u) {
      if (Z[u])
        return Z[u];
      var h;
      if (u === "k256")
        h = new ie();
      else if (u === "p224")
        h = new fe();
      else if (u === "p192")
        h = new ye();
      else if (u === "p25519")
        h = new j();
      else
        throw new Error("Unknown prime " + u);
      return Z[u] = h, h;
    };
    function V(_) {
      if (typeof _ == "string") {
        var u = o._prime(_);
        this.m = u.p, this.prime = u;
      } else
        a(_.gtn(1), "modulus must be greater than 1"), this.m = _, this.prime = null;
    }
    V.prototype._verify1 = function(u) {
      a(u.negative === 0, "red works only with positives"), a(u.red, "red works only with red numbers");
    }, V.prototype._verify2 = function(u, h) {
      a((u.negative | h.negative) === 0, "red works only with positives"), a(
        u.red && u.red === h.red,
        "red works only with red numbers"
      );
    }, V.prototype.imod = function(u) {
      return this.prime ? this.prime.ireduce(u)._forceRed(this) : u.umod(this.m)._forceRed(this);
    }, V.prototype.neg = function(u) {
      return u.isZero() ? u.clone() : this.m.sub(u)._forceRed(this);
    }, V.prototype.add = function(u, h) {
      this._verify2(u, h);
      var p = u.add(h);
      return p.cmp(this.m) >= 0 && p.isub(this.m), p._forceRed(this);
    }, V.prototype.iadd = function(u, h) {
      this._verify2(u, h);
      var p = u.iadd(h);
      return p.cmp(this.m) >= 0 && p.isub(this.m), p;
    }, V.prototype.sub = function(u, h) {
      this._verify2(u, h);
      var p = u.sub(h);
      return p.cmpn(0) < 0 && p.iadd(this.m), p._forceRed(this);
    }, V.prototype.isub = function(u, h) {
      this._verify2(u, h);
      var p = u.isub(h);
      return p.cmpn(0) < 0 && p.iadd(this.m), p;
    }, V.prototype.shl = function(u, h) {
      return this._verify1(u), this.imod(u.ushln(h));
    }, V.prototype.imul = function(u, h) {
      return this._verify2(u, h), this.imod(u.imul(h));
    }, V.prototype.mul = function(u, h) {
      return this._verify2(u, h), this.imod(u.mul(h));
    }, V.prototype.isqr = function(u) {
      return this.imul(u, u.clone());
    }, V.prototype.sqr = function(u) {
      return this.mul(u, u);
    }, V.prototype.sqrt = function(u) {
      if (u.isZero())
        return u.clone();
      var h = this.m.andln(3);
      if (a(h % 2 === 1), h === 3) {
        var p = this.m.add(new o(1)).iushrn(2);
        return this.pow(u, p);
      }
      for (var y = this.m.subn(1), v = 0; !y.isZero() && y.andln(1) === 0; )
        v++, y.iushrn(1);
      a(!y.isZero());
      var $ = new o(1).toRed(this), E = $.redNeg(), x = this.m.subn(1).iushrn(1), l = this.m.bitLength();
      for (l = new o(2 * l * l).toRed(this); this.pow(l, x).cmp(E) !== 0; )
        l.redIAdd(E);
      for (var b = this.pow(l, y), M = this.pow(u, y.addn(1).iushrn(1)), k = this.pow(u, y), U = v; k.cmp($) !== 0; ) {
        for (var T = k, H = 0; T.cmp($) !== 0; H++)
          T = T.redSqr();
        a(H < U);
        var Y = this.pow(b, new o(1).iushln(U - H - 1));
        M = M.redMul(Y), b = Y.redSqr(), k = k.redMul(b), U = H;
      }
      return M;
    }, V.prototype.invm = function(u) {
      var h = u._invmp(this.m);
      return h.negative !== 0 ? (h.negative = 0, this.imod(h).redNeg()) : this.imod(h);
    }, V.prototype.pow = function(u, h) {
      if (h.isZero())
        return new o(1).toRed(this);
      if (h.cmpn(1) === 0)
        return u.clone();
      var p = 4, y = new Array(1 << p);
      y[0] = new o(1).toRed(this), y[1] = u;
      for (var v = 2; v < y.length; v++)
        y[v] = this.mul(y[v - 1], u);
      var $ = y[0], E = 0, x = 0, l = h.bitLength() % 26;
      for (l === 0 && (l = 26), v = h.length - 1; v >= 0; v--) {
        for (var b = h.words[v], M = l - 1; M >= 0; M--) {
          var k = b >> M & 1;
          if ($ !== y[0] && ($ = this.sqr($)), k === 0 && E === 0) {
            x = 0;
            continue;
          }
          E <<= 1, E |= k, x++, !(x !== p && (v !== 0 || M !== 0)) && ($ = this.mul($, y[E]), x = 0, E = 0);
        }
        l = 26;
      }
      return $;
    }, V.prototype.convertTo = function(u) {
      var h = u.umod(this.m);
      return h === u ? h.clone() : h;
    }, V.prototype.convertFrom = function(u) {
      var h = u.clone();
      return h.red = null, h;
    }, o.mont = function(u) {
      return new ae(u);
    };
    function ae(_) {
      V.call(this, _), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new o(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
    }
    c(ae, V), ae.prototype.convertTo = function(u) {
      return this.imod(u.ushln(this.shift));
    }, ae.prototype.convertFrom = function(u) {
      var h = this.imod(u.mul(this.rinv));
      return h.red = null, h;
    }, ae.prototype.imul = function(u, h) {
      if (u.isZero() || h.isZero())
        return u.words[0] = 0, u.length = 1, u;
      var p = u.imul(h), y = p.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), v = p.isub(y).iushrn(this.shift), $ = v;
      return v.cmp(this.m) >= 0 ? $ = v.isub(this.m) : v.cmpn(0) < 0 && ($ = v.iadd(this.m)), $._forceRed(this);
    }, ae.prototype.mul = function(u, h) {
      if (u.isZero() || h.isZero())
        return new o(0)._forceRed(this);
      var p = u.mul(h), y = p.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), v = p.isub(y).iushrn(this.shift), $ = v;
      return v.cmp(this.m) >= 0 ? $ = v.isub(this.m) : v.cmpn(0) < 0 && ($ = v.iadd(this.m)), $._forceRed(this);
    }, ae.prototype.invm = function(u) {
      var h = this.imod(u._invmp(this.m).mul(this.r2));
      return h._forceRed(this);
    };
  })(t, commonjsGlobal);
})(bn$1);
var bnExports$1 = bn$1.exports, browser$5, hasRequiredBrowser;
function requireBrowser() {
  if (hasRequiredBrowser)
    return browser$5;
  hasRequiredBrowser = 1;
  var t = requireElliptic(), e = bnExports$1;
  browser$5 = function(d) {
    return new a(d);
  };
  var n = {
    secp256k1: {
      name: "secp256k1",
      byteLength: 32
    },
    secp224r1: {
      name: "p224",
      byteLength: 28
    },
    prime256v1: {
      name: "p256",
      byteLength: 32
    },
    prime192v1: {
      name: "p192",
      byteLength: 24
    },
    ed25519: {
      name: "ed25519",
      byteLength: 32
    },
    secp384r1: {
      name: "p384",
      byteLength: 48
    },
    secp521r1: {
      name: "p521",
      byteLength: 66
    }
  };
  n.p224 = n.secp224r1, n.p256 = n.secp256r1 = n.prime256v1, n.p192 = n.secp192r1 = n.prime192v1, n.p384 = n.secp384r1, n.p521 = n.secp521r1;
  function a(o) {
    this.curveType = n[o], this.curveType || (this.curveType = {
      name: o
    }), this.curve = new t.ec(this.curveType.name), this.keys = void 0;
  }
  a.prototype.generateKeys = function(o, d) {
    return this.keys = this.curve.genKeyPair(), this.getPublicKey(o, d);
  }, a.prototype.computeSecret = function(o, d, m) {
    d = d || "utf8", Buffer$F.isBuffer(o) || (o = new Buffer$F(o, d));
    var w = this.curve.keyFromPublic(o).getPublic(), S = w.mul(this.keys.getPrivate()).getX();
    return c(S, m, this.curveType.byteLength);
  }, a.prototype.getPublicKey = function(o, d) {
    var m = this.keys.getPublic(d === "compressed", !0);
    return d === "hybrid" && (m[m.length - 1] % 2 ? m[0] = 7 : m[0] = 6), c(m, o);
  }, a.prototype.getPrivateKey = function(o) {
    return c(this.keys.getPrivate(), o);
  }, a.prototype.setPublicKey = function(o, d) {
    return d = d || "utf8", Buffer$F.isBuffer(o) || (o = new Buffer$F(o, d)), this.keys._importPublic(o), this;
  }, a.prototype.setPrivateKey = function(o, d) {
    d = d || "utf8", Buffer$F.isBuffer(o) || (o = new Buffer$F(o, d));
    var m = new e(o);
    return m = m.toString(16), this.keys = this.curve.genKeyPair(), this.keys._importPrivate(m), this;
  };
  function c(o, d, m) {
    Array.isArray(o) || (o = o.toArray());
    var w = new Buffer$F(o);
    if (m && w.length < m) {
      var S = new Buffer$F(m - w.length);
      S.fill(0), w = Buffer$F.concat([S, w]);
    }
    return d ? w.toString(d) : w;
  }
  return browser$5;
}
var browser$4 = {}, createHash$2 = browser$c, Buffer$4 = safeBufferExports.Buffer, mgf$2 = function(t, e) {
  for (var n = Buffer$4.alloc(0), a = 0, c; n.length < e; )
    c = i2ops(a++), n = Buffer$4.concat([n, createHash$2("sha1").update(t).update(c).digest()]);
  return n.slice(0, e);
};
function i2ops(t) {
  var e = Buffer$4.allocUnsafe(4);
  return e.writeUInt32BE(t, 0), e;
}
var xor$2 = function(e, n) {
  for (var a = e.length, c = -1; ++c < a; )
    e[c] ^= n[c];
  return e;
}, bn = { exports: {} };
bn.exports;
(function(t) {
  (function(e, n) {
    function a(_, u) {
      if (!_)
        throw new Error(u || "Assertion failed");
    }
    function c(_, u) {
      _.super_ = u;
      var h = function() {
      };
      h.prototype = u.prototype, _.prototype = new h(), _.prototype.constructor = _;
    }
    function o(_, u, h) {
      if (o.isBN(_))
        return _;
      this.negative = 0, this.words = null, this.length = 0, this.red = null, _ !== null && ((u === "le" || u === "be") && (h = u, u = 10), this._init(_ || 0, u || 10, h || "be"));
    }
    typeof e == "object" ? e.exports = o : n.BN = o, o.BN = o, o.wordSize = 26;
    var d;
    try {
      typeof window < "u" && typeof window.Buffer < "u" ? d = window.Buffer : d = require$$0$2.Buffer;
    } catch {
    }
    o.isBN = function(u) {
      return u instanceof o ? !0 : u !== null && typeof u == "object" && u.constructor.wordSize === o.wordSize && Array.isArray(u.words);
    }, o.max = function(u, h) {
      return u.cmp(h) > 0 ? u : h;
    }, o.min = function(u, h) {
      return u.cmp(h) < 0 ? u : h;
    }, o.prototype._init = function(u, h, p) {
      if (typeof u == "number")
        return this._initNumber(u, h, p);
      if (typeof u == "object")
        return this._initArray(u, h, p);
      h === "hex" && (h = 16), a(h === (h | 0) && h >= 2 && h <= 36), u = u.toString().replace(/\s+/g, "");
      var y = 0;
      u[0] === "-" && (y++, this.negative = 1), y < u.length && (h === 16 ? this._parseHex(u, y, p) : (this._parseBase(u, h, y), p === "le" && this._initArray(this.toArray(), h, p)));
    }, o.prototype._initNumber = function(u, h, p) {
      u < 0 && (this.negative = 1, u = -u), u < 67108864 ? (this.words = [u & 67108863], this.length = 1) : u < 4503599627370496 ? (this.words = [
        u & 67108863,
        u / 67108864 & 67108863
      ], this.length = 2) : (a(u < 9007199254740992), this.words = [
        u & 67108863,
        u / 67108864 & 67108863,
        1
      ], this.length = 3), p === "le" && this._initArray(this.toArray(), h, p);
    }, o.prototype._initArray = function(u, h, p) {
      if (a(typeof u.length == "number"), u.length <= 0)
        return this.words = [0], this.length = 1, this;
      this.length = Math.ceil(u.length / 3), this.words = new Array(this.length);
      for (var y = 0; y < this.length; y++)
        this.words[y] = 0;
      var v, $, E = 0;
      if (p === "be")
        for (y = u.length - 1, v = 0; y >= 0; y -= 3)
          $ = u[y] | u[y - 1] << 8 | u[y - 2] << 16, this.words[v] |= $ << E & 67108863, this.words[v + 1] = $ >>> 26 - E & 67108863, E += 24, E >= 26 && (E -= 26, v++);
      else if (p === "le")
        for (y = 0, v = 0; y < u.length; y += 3)
          $ = u[y] | u[y + 1] << 8 | u[y + 2] << 16, this.words[v] |= $ << E & 67108863, this.words[v + 1] = $ >>> 26 - E & 67108863, E += 24, E >= 26 && (E -= 26, v++);
      return this.strip();
    };
    function m(_, u) {
      var h = _.charCodeAt(u);
      return h >= 65 && h <= 70 ? h - 55 : h >= 97 && h <= 102 ? h - 87 : h - 48 & 15;
    }
    function w(_, u, h) {
      var p = m(_, h);
      return h - 1 >= u && (p |= m(_, h - 1) << 4), p;
    }
    o.prototype._parseHex = function(u, h, p) {
      this.length = Math.ceil((u.length - h) / 6), this.words = new Array(this.length);
      for (var y = 0; y < this.length; y++)
        this.words[y] = 0;
      var v = 0, $ = 0, E;
      if (p === "be")
        for (y = u.length - 1; y >= h; y -= 2)
          E = w(u, h, y) << v, this.words[$] |= E & 67108863, v >= 18 ? (v -= 18, $ += 1, this.words[$] |= E >>> 26) : v += 8;
      else {
        var x = u.length - h;
        for (y = x % 2 === 0 ? h + 1 : h; y < u.length; y += 2)
          E = w(u, h, y) << v, this.words[$] |= E & 67108863, v >= 18 ? (v -= 18, $ += 1, this.words[$] |= E >>> 26) : v += 8;
      }
      this.strip();
    };
    function S(_, u, h, p) {
      for (var y = 0, v = Math.min(_.length, h), $ = u; $ < v; $++) {
        var E = _.charCodeAt($) - 48;
        y *= p, E >= 49 ? y += E - 49 + 10 : E >= 17 ? y += E - 17 + 10 : y += E;
      }
      return y;
    }
    o.prototype._parseBase = function(u, h, p) {
      this.words = [0], this.length = 1;
      for (var y = 0, v = 1; v <= 67108863; v *= h)
        y++;
      y--, v = v / h | 0;
      for (var $ = u.length - p, E = $ % y, x = Math.min($, $ - E) + p, l = 0, b = p; b < x; b += y)
        l = S(u, b, b + y, h), this.imuln(v), this.words[0] + l < 67108864 ? this.words[0] += l : this._iaddn(l);
      if (E !== 0) {
        var M = 1;
        for (l = S(u, b, u.length, h), b = 0; b < E; b++)
          M *= h;
        this.imuln(M), this.words[0] + l < 67108864 ? this.words[0] += l : this._iaddn(l);
      }
      this.strip();
    }, o.prototype.copy = function(u) {
      u.words = new Array(this.length);
      for (var h = 0; h < this.length; h++)
        u.words[h] = this.words[h];
      u.length = this.length, u.negative = this.negative, u.red = this.red;
    }, o.prototype.clone = function() {
      var u = new o(null);
      return this.copy(u), u;
    }, o.prototype._expand = function(u) {
      for (; this.length < u; )
        this.words[this.length++] = 0;
      return this;
    }, o.prototype.strip = function() {
      for (; this.length > 1 && this.words[this.length - 1] === 0; )
        this.length--;
      return this._normSign();
    }, o.prototype._normSign = function() {
      return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
    }, o.prototype.inspect = function() {
      return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    var A = [
      "",
      "0",
      "00",
      "000",
      "0000",
      "00000",
      "000000",
      "0000000",
      "00000000",
      "000000000",
      "0000000000",
      "00000000000",
      "000000000000",
      "0000000000000",
      "00000000000000",
      "000000000000000",
      "0000000000000000",
      "00000000000000000",
      "000000000000000000",
      "0000000000000000000",
      "00000000000000000000",
      "000000000000000000000",
      "0000000000000000000000",
      "00000000000000000000000",
      "000000000000000000000000",
      "0000000000000000000000000"
    ], B = [
      0,
      0,
      25,
      16,
      12,
      11,
      10,
      9,
      8,
      8,
      7,
      7,
      7,
      7,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5
    ], P = [
      0,
      0,
      33554432,
      43046721,
      16777216,
      48828125,
      60466176,
      40353607,
      16777216,
      43046721,
      1e7,
      19487171,
      35831808,
      62748517,
      7529536,
      11390625,
      16777216,
      24137569,
      34012224,
      47045881,
      64e6,
      4084101,
      5153632,
      6436343,
      7962624,
      9765625,
      11881376,
      14348907,
      17210368,
      20511149,
      243e5,
      28629151,
      33554432,
      39135393,
      45435424,
      52521875,
      60466176
    ];
    o.prototype.toString = function(u, h) {
      u = u || 10, h = h | 0 || 1;
      var p;
      if (u === 16 || u === "hex") {
        p = "";
        for (var y = 0, v = 0, $ = 0; $ < this.length; $++) {
          var E = this.words[$], x = ((E << y | v) & 16777215).toString(16);
          v = E >>> 24 - y & 16777215, v !== 0 || $ !== this.length - 1 ? p = A[6 - x.length] + x + p : p = x + p, y += 2, y >= 26 && (y -= 26, $--);
        }
        for (v !== 0 && (p = v.toString(16) + p); p.length % h !== 0; )
          p = "0" + p;
        return this.negative !== 0 && (p = "-" + p), p;
      }
      if (u === (u | 0) && u >= 2 && u <= 36) {
        var l = B[u], b = P[u];
        p = "";
        var M = this.clone();
        for (M.negative = 0; !M.isZero(); ) {
          var k = M.modn(b).toString(u);
          M = M.idivn(b), M.isZero() ? p = k + p : p = A[l - k.length] + k + p;
        }
        for (this.isZero() && (p = "0" + p); p.length % h !== 0; )
          p = "0" + p;
        return this.negative !== 0 && (p = "-" + p), p;
      }
      a(!1, "Base should be between 2 and 36");
    }, o.prototype.toNumber = function() {
      var u = this.words[0];
      return this.length === 2 ? u += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? u += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && a(!1, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -u : u;
    }, o.prototype.toJSON = function() {
      return this.toString(16);
    }, o.prototype.toBuffer = function(u, h) {
      return a(typeof d < "u"), this.toArrayLike(d, u, h);
    }, o.prototype.toArray = function(u, h) {
      return this.toArrayLike(Array, u, h);
    }, o.prototype.toArrayLike = function(u, h, p) {
      var y = this.byteLength(), v = p || Math.max(1, y);
      a(y <= v, "byte array longer than desired length"), a(v > 0, "Requested array length <= 0"), this.strip();
      var $ = h === "le", E = new u(v), x, l, b = this.clone();
      if ($) {
        for (l = 0; !b.isZero(); l++)
          x = b.andln(255), b.iushrn(8), E[l] = x;
        for (; l < v; l++)
          E[l] = 0;
      } else {
        for (l = 0; l < v - y; l++)
          E[l] = 0;
        for (l = 0; !b.isZero(); l++)
          x = b.andln(255), b.iushrn(8), E[v - l - 1] = x;
      }
      return E;
    }, Math.clz32 ? o.prototype._countBits = function(u) {
      return 32 - Math.clz32(u);
    } : o.prototype._countBits = function(u) {
      var h = u, p = 0;
      return h >= 4096 && (p += 13, h >>>= 13), h >= 64 && (p += 7, h >>>= 7), h >= 8 && (p += 4, h >>>= 4), h >= 2 && (p += 2, h >>>= 2), p + h;
    }, o.prototype._zeroBits = function(u) {
      if (u === 0)
        return 26;
      var h = u, p = 0;
      return h & 8191 || (p += 13, h >>>= 13), h & 127 || (p += 7, h >>>= 7), h & 15 || (p += 4, h >>>= 4), h & 3 || (p += 2, h >>>= 2), h & 1 || p++, p;
    }, o.prototype.bitLength = function() {
      var u = this.words[this.length - 1], h = this._countBits(u);
      return (this.length - 1) * 26 + h;
    };
    function I(_) {
      for (var u = new Array(_.bitLength()), h = 0; h < u.length; h++) {
        var p = h / 26 | 0, y = h % 26;
        u[h] = (_.words[p] & 1 << y) >>> y;
      }
      return u;
    }
    o.prototype.zeroBits = function() {
      if (this.isZero())
        return 0;
      for (var u = 0, h = 0; h < this.length; h++) {
        var p = this._zeroBits(this.words[h]);
        if (u += p, p !== 26)
          break;
      }
      return u;
    }, o.prototype.byteLength = function() {
      return Math.ceil(this.bitLength() / 8);
    }, o.prototype.toTwos = function(u) {
      return this.negative !== 0 ? this.abs().inotn(u).iaddn(1) : this.clone();
    }, o.prototype.fromTwos = function(u) {
      return this.testn(u - 1) ? this.notn(u).iaddn(1).ineg() : this.clone();
    }, o.prototype.isNeg = function() {
      return this.negative !== 0;
    }, o.prototype.neg = function() {
      return this.clone().ineg();
    }, o.prototype.ineg = function() {
      return this.isZero() || (this.negative ^= 1), this;
    }, o.prototype.iuor = function(u) {
      for (; this.length < u.length; )
        this.words[this.length++] = 0;
      for (var h = 0; h < u.length; h++)
        this.words[h] = this.words[h] | u.words[h];
      return this.strip();
    }, o.prototype.ior = function(u) {
      return a((this.negative | u.negative) === 0), this.iuor(u);
    }, o.prototype.or = function(u) {
      return this.length > u.length ? this.clone().ior(u) : u.clone().ior(this);
    }, o.prototype.uor = function(u) {
      return this.length > u.length ? this.clone().iuor(u) : u.clone().iuor(this);
    }, o.prototype.iuand = function(u) {
      var h;
      this.length > u.length ? h = u : h = this;
      for (var p = 0; p < h.length; p++)
        this.words[p] = this.words[p] & u.words[p];
      return this.length = h.length, this.strip();
    }, o.prototype.iand = function(u) {
      return a((this.negative | u.negative) === 0), this.iuand(u);
    }, o.prototype.and = function(u) {
      return this.length > u.length ? this.clone().iand(u) : u.clone().iand(this);
    }, o.prototype.uand = function(u) {
      return this.length > u.length ? this.clone().iuand(u) : u.clone().iuand(this);
    }, o.prototype.iuxor = function(u) {
      var h, p;
      this.length > u.length ? (h = this, p = u) : (h = u, p = this);
      for (var y = 0; y < p.length; y++)
        this.words[y] = h.words[y] ^ p.words[y];
      if (this !== h)
        for (; y < h.length; y++)
          this.words[y] = h.words[y];
      return this.length = h.length, this.strip();
    }, o.prototype.ixor = function(u) {
      return a((this.negative | u.negative) === 0), this.iuxor(u);
    }, o.prototype.xor = function(u) {
      return this.length > u.length ? this.clone().ixor(u) : u.clone().ixor(this);
    }, o.prototype.uxor = function(u) {
      return this.length > u.length ? this.clone().iuxor(u) : u.clone().iuxor(this);
    }, o.prototype.inotn = function(u) {
      a(typeof u == "number" && u >= 0);
      var h = Math.ceil(u / 26) | 0, p = u % 26;
      this._expand(h), p > 0 && h--;
      for (var y = 0; y < h; y++)
        this.words[y] = ~this.words[y] & 67108863;
      return p > 0 && (this.words[y] = ~this.words[y] & 67108863 >> 26 - p), this.strip();
    }, o.prototype.notn = function(u) {
      return this.clone().inotn(u);
    }, o.prototype.setn = function(u, h) {
      a(typeof u == "number" && u >= 0);
      var p = u / 26 | 0, y = u % 26;
      return this._expand(p + 1), h ? this.words[p] = this.words[p] | 1 << y : this.words[p] = this.words[p] & ~(1 << y), this.strip();
    }, o.prototype.iadd = function(u) {
      var h;
      if (this.negative !== 0 && u.negative === 0)
        return this.negative = 0, h = this.isub(u), this.negative ^= 1, this._normSign();
      if (this.negative === 0 && u.negative !== 0)
        return u.negative = 0, h = this.isub(u), u.negative = 1, h._normSign();
      var p, y;
      this.length > u.length ? (p = this, y = u) : (p = u, y = this);
      for (var v = 0, $ = 0; $ < y.length; $++)
        h = (p.words[$] | 0) + (y.words[$] | 0) + v, this.words[$] = h & 67108863, v = h >>> 26;
      for (; v !== 0 && $ < p.length; $++)
        h = (p.words[$] | 0) + v, this.words[$] = h & 67108863, v = h >>> 26;
      if (this.length = p.length, v !== 0)
        this.words[this.length] = v, this.length++;
      else if (p !== this)
        for (; $ < p.length; $++)
          this.words[$] = p.words[$];
      return this;
    }, o.prototype.add = function(u) {
      var h;
      return u.negative !== 0 && this.negative === 0 ? (u.negative = 0, h = this.sub(u), u.negative ^= 1, h) : u.negative === 0 && this.negative !== 0 ? (this.negative = 0, h = u.sub(this), this.negative = 1, h) : this.length > u.length ? this.clone().iadd(u) : u.clone().iadd(this);
    }, o.prototype.isub = function(u) {
      if (u.negative !== 0) {
        u.negative = 0;
        var h = this.iadd(u);
        return u.negative = 1, h._normSign();
      } else if (this.negative !== 0)
        return this.negative = 0, this.iadd(u), this.negative = 1, this._normSign();
      var p = this.cmp(u);
      if (p === 0)
        return this.negative = 0, this.length = 1, this.words[0] = 0, this;
      var y, v;
      p > 0 ? (y = this, v = u) : (y = u, v = this);
      for (var $ = 0, E = 0; E < v.length; E++)
        h = (y.words[E] | 0) - (v.words[E] | 0) + $, $ = h >> 26, this.words[E] = h & 67108863;
      for (; $ !== 0 && E < y.length; E++)
        h = (y.words[E] | 0) + $, $ = h >> 26, this.words[E] = h & 67108863;
      if ($ === 0 && E < y.length && y !== this)
        for (; E < y.length; E++)
          this.words[E] = y.words[E];
      return this.length = Math.max(this.length, E), y !== this && (this.negative = 1), this.strip();
    }, o.prototype.sub = function(u) {
      return this.clone().isub(u);
    };
    function O(_, u, h) {
      h.negative = u.negative ^ _.negative;
      var p = _.length + u.length | 0;
      h.length = p, p = p - 1 | 0;
      var y = _.words[0] | 0, v = u.words[0] | 0, $ = y * v, E = $ & 67108863, x = $ / 67108864 | 0;
      h.words[0] = E;
      for (var l = 1; l < p; l++) {
        for (var b = x >>> 26, M = x & 67108863, k = Math.min(l, u.length - 1), U = Math.max(0, l - _.length + 1); U <= k; U++) {
          var T = l - U | 0;
          y = _.words[T] | 0, v = u.words[U] | 0, $ = y * v + M, b += $ / 67108864 | 0, M = $ & 67108863;
        }
        h.words[l] = M | 0, x = b | 0;
      }
      return x !== 0 ? h.words[l] = x | 0 : h.length--, h.strip();
    }
    var L = function(u, h, p) {
      var y = u.words, v = h.words, $ = p.words, E = 0, x, l, b, M = y[0] | 0, k = M & 8191, U = M >>> 13, T = y[1] | 0, H = T & 8191, Y = T >>> 13, le = y[2] | 0, ce = le & 8191, de = le >>> 13, ue = y[3] | 0, re = ue & 8191, ge = ue >>> 13, Ae = y[4] | 0, xe = Ae & 8191, Ee = Ae >>> 13, at = y[5] | 0, Re = at & 8191, ve = at >>> 13, xt = y[6] | 0, Ne = xt & 8191, qe = xt >>> 13, wt = y[7] | 0, Te = wt & 8191, De = wt >>> 13, vt = y[8] | 0, ke = vt & 8191, Ue = vt >>> 13, $t = y[9] | 0, ee = $t & 8191, F = $t >>> 13, J = v[0] | 0, oe = J & 8191, he = J >>> 13, Se = v[1] | 0, me = Se & 8191, Be = Se >>> 13, gt = v[2] | 0, Me = gt & 8191, Oe = gt >>> 13, ht = v[3] | 0, He = ht & 8191, Ge = ht >>> 13, _t = v[4] | 0, Le = _t & 8191, Ke = _t >>> 13, Et = v[5] | 0, Fe = Et & 8191, ze = Et >>> 13, At = v[6] | 0, Pe = At & 8191, je = At >>> 13, Q = v[7] | 0, te = Q & 8191, ne = Q >>> 13, D = v[8] | 0, se = D & 8191, pe = D >>> 13, $e = v[9] | 0, be = $e & 8191, _e = $e >>> 13;
      p.negative = u.negative ^ h.negative, p.length = 19, x = Math.imul(k, oe), l = Math.imul(k, he), l = l + Math.imul(U, oe) | 0, b = Math.imul(U, he);
      var Je = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (Je >>> 26) | 0, Je &= 67108863, x = Math.imul(H, oe), l = Math.imul(H, he), l = l + Math.imul(Y, oe) | 0, b = Math.imul(Y, he), x = x + Math.imul(k, me) | 0, l = l + Math.imul(k, Be) | 0, l = l + Math.imul(U, me) | 0, b = b + Math.imul(U, Be) | 0;
      var We = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (We >>> 26) | 0, We &= 67108863, x = Math.imul(ce, oe), l = Math.imul(ce, he), l = l + Math.imul(de, oe) | 0, b = Math.imul(de, he), x = x + Math.imul(H, me) | 0, l = l + Math.imul(H, Be) | 0, l = l + Math.imul(Y, me) | 0, b = b + Math.imul(Y, Be) | 0, x = x + Math.imul(k, Me) | 0, l = l + Math.imul(k, Oe) | 0, l = l + Math.imul(U, Me) | 0, b = b + Math.imul(U, Oe) | 0;
      var bt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (bt >>> 26) | 0, bt &= 67108863, x = Math.imul(re, oe), l = Math.imul(re, he), l = l + Math.imul(ge, oe) | 0, b = Math.imul(ge, he), x = x + Math.imul(ce, me) | 0, l = l + Math.imul(ce, Be) | 0, l = l + Math.imul(de, me) | 0, b = b + Math.imul(de, Be) | 0, x = x + Math.imul(H, Me) | 0, l = l + Math.imul(H, Oe) | 0, l = l + Math.imul(Y, Me) | 0, b = b + Math.imul(Y, Oe) | 0, x = x + Math.imul(k, He) | 0, l = l + Math.imul(k, Ge) | 0, l = l + Math.imul(U, He) | 0, b = b + Math.imul(U, Ge) | 0;
      var Ye = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (Ye >>> 26) | 0, Ye &= 67108863, x = Math.imul(xe, oe), l = Math.imul(xe, he), l = l + Math.imul(Ee, oe) | 0, b = Math.imul(Ee, he), x = x + Math.imul(re, me) | 0, l = l + Math.imul(re, Be) | 0, l = l + Math.imul(ge, me) | 0, b = b + Math.imul(ge, Be) | 0, x = x + Math.imul(ce, Me) | 0, l = l + Math.imul(ce, Oe) | 0, l = l + Math.imul(de, Me) | 0, b = b + Math.imul(de, Oe) | 0, x = x + Math.imul(H, He) | 0, l = l + Math.imul(H, Ge) | 0, l = l + Math.imul(Y, He) | 0, b = b + Math.imul(Y, Ge) | 0, x = x + Math.imul(k, Le) | 0, l = l + Math.imul(k, Ke) | 0, l = l + Math.imul(U, Le) | 0, b = b + Math.imul(U, Ke) | 0;
      var ot = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (ot >>> 26) | 0, ot &= 67108863, x = Math.imul(Re, oe), l = Math.imul(Re, he), l = l + Math.imul(ve, oe) | 0, b = Math.imul(ve, he), x = x + Math.imul(xe, me) | 0, l = l + Math.imul(xe, Be) | 0, l = l + Math.imul(Ee, me) | 0, b = b + Math.imul(Ee, Be) | 0, x = x + Math.imul(re, Me) | 0, l = l + Math.imul(re, Oe) | 0, l = l + Math.imul(ge, Me) | 0, b = b + Math.imul(ge, Oe) | 0, x = x + Math.imul(ce, He) | 0, l = l + Math.imul(ce, Ge) | 0, l = l + Math.imul(de, He) | 0, b = b + Math.imul(de, Ge) | 0, x = x + Math.imul(H, Le) | 0, l = l + Math.imul(H, Ke) | 0, l = l + Math.imul(Y, Le) | 0, b = b + Math.imul(Y, Ke) | 0, x = x + Math.imul(k, Fe) | 0, l = l + Math.imul(k, ze) | 0, l = l + Math.imul(U, Fe) | 0, b = b + Math.imul(U, ze) | 0;
      var ct = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (ct >>> 26) | 0, ct &= 67108863, x = Math.imul(Ne, oe), l = Math.imul(Ne, he), l = l + Math.imul(qe, oe) | 0, b = Math.imul(qe, he), x = x + Math.imul(Re, me) | 0, l = l + Math.imul(Re, Be) | 0, l = l + Math.imul(ve, me) | 0, b = b + Math.imul(ve, Be) | 0, x = x + Math.imul(xe, Me) | 0, l = l + Math.imul(xe, Oe) | 0, l = l + Math.imul(Ee, Me) | 0, b = b + Math.imul(Ee, Oe) | 0, x = x + Math.imul(re, He) | 0, l = l + Math.imul(re, Ge) | 0, l = l + Math.imul(ge, He) | 0, b = b + Math.imul(ge, Ge) | 0, x = x + Math.imul(ce, Le) | 0, l = l + Math.imul(ce, Ke) | 0, l = l + Math.imul(de, Le) | 0, b = b + Math.imul(de, Ke) | 0, x = x + Math.imul(H, Fe) | 0, l = l + Math.imul(H, ze) | 0, l = l + Math.imul(Y, Fe) | 0, b = b + Math.imul(Y, ze) | 0, x = x + Math.imul(k, Pe) | 0, l = l + Math.imul(k, je) | 0, l = l + Math.imul(U, Pe) | 0, b = b + Math.imul(U, je) | 0;
      var lt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (lt >>> 26) | 0, lt &= 67108863, x = Math.imul(Te, oe), l = Math.imul(Te, he), l = l + Math.imul(De, oe) | 0, b = Math.imul(De, he), x = x + Math.imul(Ne, me) | 0, l = l + Math.imul(Ne, Be) | 0, l = l + Math.imul(qe, me) | 0, b = b + Math.imul(qe, Be) | 0, x = x + Math.imul(Re, Me) | 0, l = l + Math.imul(Re, Oe) | 0, l = l + Math.imul(ve, Me) | 0, b = b + Math.imul(ve, Oe) | 0, x = x + Math.imul(xe, He) | 0, l = l + Math.imul(xe, Ge) | 0, l = l + Math.imul(Ee, He) | 0, b = b + Math.imul(Ee, Ge) | 0, x = x + Math.imul(re, Le) | 0, l = l + Math.imul(re, Ke) | 0, l = l + Math.imul(ge, Le) | 0, b = b + Math.imul(ge, Ke) | 0, x = x + Math.imul(ce, Fe) | 0, l = l + Math.imul(ce, ze) | 0, l = l + Math.imul(de, Fe) | 0, b = b + Math.imul(de, ze) | 0, x = x + Math.imul(H, Pe) | 0, l = l + Math.imul(H, je) | 0, l = l + Math.imul(Y, Pe) | 0, b = b + Math.imul(Y, je) | 0, x = x + Math.imul(k, te) | 0, l = l + Math.imul(k, ne) | 0, l = l + Math.imul(U, te) | 0, b = b + Math.imul(U, ne) | 0;
      var mt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (mt >>> 26) | 0, mt &= 67108863, x = Math.imul(ke, oe), l = Math.imul(ke, he), l = l + Math.imul(Ue, oe) | 0, b = Math.imul(Ue, he), x = x + Math.imul(Te, me) | 0, l = l + Math.imul(Te, Be) | 0, l = l + Math.imul(De, me) | 0, b = b + Math.imul(De, Be) | 0, x = x + Math.imul(Ne, Me) | 0, l = l + Math.imul(Ne, Oe) | 0, l = l + Math.imul(qe, Me) | 0, b = b + Math.imul(qe, Oe) | 0, x = x + Math.imul(Re, He) | 0, l = l + Math.imul(Re, Ge) | 0, l = l + Math.imul(ve, He) | 0, b = b + Math.imul(ve, Ge) | 0, x = x + Math.imul(xe, Le) | 0, l = l + Math.imul(xe, Ke) | 0, l = l + Math.imul(Ee, Le) | 0, b = b + Math.imul(Ee, Ke) | 0, x = x + Math.imul(re, Fe) | 0, l = l + Math.imul(re, ze) | 0, l = l + Math.imul(ge, Fe) | 0, b = b + Math.imul(ge, ze) | 0, x = x + Math.imul(ce, Pe) | 0, l = l + Math.imul(ce, je) | 0, l = l + Math.imul(de, Pe) | 0, b = b + Math.imul(de, je) | 0, x = x + Math.imul(H, te) | 0, l = l + Math.imul(H, ne) | 0, l = l + Math.imul(Y, te) | 0, b = b + Math.imul(Y, ne) | 0, x = x + Math.imul(k, se) | 0, l = l + Math.imul(k, pe) | 0, l = l + Math.imul(U, se) | 0, b = b + Math.imul(U, pe) | 0;
      var dt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (dt >>> 26) | 0, dt &= 67108863, x = Math.imul(ee, oe), l = Math.imul(ee, he), l = l + Math.imul(F, oe) | 0, b = Math.imul(F, he), x = x + Math.imul(ke, me) | 0, l = l + Math.imul(ke, Be) | 0, l = l + Math.imul(Ue, me) | 0, b = b + Math.imul(Ue, Be) | 0, x = x + Math.imul(Te, Me) | 0, l = l + Math.imul(Te, Oe) | 0, l = l + Math.imul(De, Me) | 0, b = b + Math.imul(De, Oe) | 0, x = x + Math.imul(Ne, He) | 0, l = l + Math.imul(Ne, Ge) | 0, l = l + Math.imul(qe, He) | 0, b = b + Math.imul(qe, Ge) | 0, x = x + Math.imul(Re, Le) | 0, l = l + Math.imul(Re, Ke) | 0, l = l + Math.imul(ve, Le) | 0, b = b + Math.imul(ve, Ke) | 0, x = x + Math.imul(xe, Fe) | 0, l = l + Math.imul(xe, ze) | 0, l = l + Math.imul(Ee, Fe) | 0, b = b + Math.imul(Ee, ze) | 0, x = x + Math.imul(re, Pe) | 0, l = l + Math.imul(re, je) | 0, l = l + Math.imul(ge, Pe) | 0, b = b + Math.imul(ge, je) | 0, x = x + Math.imul(ce, te) | 0, l = l + Math.imul(ce, ne) | 0, l = l + Math.imul(de, te) | 0, b = b + Math.imul(de, ne) | 0, x = x + Math.imul(H, se) | 0, l = l + Math.imul(H, pe) | 0, l = l + Math.imul(Y, se) | 0, b = b + Math.imul(Y, pe) | 0, x = x + Math.imul(k, be) | 0, l = l + Math.imul(k, _e) | 0, l = l + Math.imul(U, be) | 0, b = b + Math.imul(U, _e) | 0;
      var yt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (yt >>> 26) | 0, yt &= 67108863, x = Math.imul(ee, me), l = Math.imul(ee, Be), l = l + Math.imul(F, me) | 0, b = Math.imul(F, Be), x = x + Math.imul(ke, Me) | 0, l = l + Math.imul(ke, Oe) | 0, l = l + Math.imul(Ue, Me) | 0, b = b + Math.imul(Ue, Oe) | 0, x = x + Math.imul(Te, He) | 0, l = l + Math.imul(Te, Ge) | 0, l = l + Math.imul(De, He) | 0, b = b + Math.imul(De, Ge) | 0, x = x + Math.imul(Ne, Le) | 0, l = l + Math.imul(Ne, Ke) | 0, l = l + Math.imul(qe, Le) | 0, b = b + Math.imul(qe, Ke) | 0, x = x + Math.imul(Re, Fe) | 0, l = l + Math.imul(Re, ze) | 0, l = l + Math.imul(ve, Fe) | 0, b = b + Math.imul(ve, ze) | 0, x = x + Math.imul(xe, Pe) | 0, l = l + Math.imul(xe, je) | 0, l = l + Math.imul(Ee, Pe) | 0, b = b + Math.imul(Ee, je) | 0, x = x + Math.imul(re, te) | 0, l = l + Math.imul(re, ne) | 0, l = l + Math.imul(ge, te) | 0, b = b + Math.imul(ge, ne) | 0, x = x + Math.imul(ce, se) | 0, l = l + Math.imul(ce, pe) | 0, l = l + Math.imul(de, se) | 0, b = b + Math.imul(de, pe) | 0, x = x + Math.imul(H, be) | 0, l = l + Math.imul(H, _e) | 0, l = l + Math.imul(Y, be) | 0, b = b + Math.imul(Y, _e) | 0;
      var pt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (pt >>> 26) | 0, pt &= 67108863, x = Math.imul(ee, Me), l = Math.imul(ee, Oe), l = l + Math.imul(F, Me) | 0, b = Math.imul(F, Oe), x = x + Math.imul(ke, He) | 0, l = l + Math.imul(ke, Ge) | 0, l = l + Math.imul(Ue, He) | 0, b = b + Math.imul(Ue, Ge) | 0, x = x + Math.imul(Te, Le) | 0, l = l + Math.imul(Te, Ke) | 0, l = l + Math.imul(De, Le) | 0, b = b + Math.imul(De, Ke) | 0, x = x + Math.imul(Ne, Fe) | 0, l = l + Math.imul(Ne, ze) | 0, l = l + Math.imul(qe, Fe) | 0, b = b + Math.imul(qe, ze) | 0, x = x + Math.imul(Re, Pe) | 0, l = l + Math.imul(Re, je) | 0, l = l + Math.imul(ve, Pe) | 0, b = b + Math.imul(ve, je) | 0, x = x + Math.imul(xe, te) | 0, l = l + Math.imul(xe, ne) | 0, l = l + Math.imul(Ee, te) | 0, b = b + Math.imul(Ee, ne) | 0, x = x + Math.imul(re, se) | 0, l = l + Math.imul(re, pe) | 0, l = l + Math.imul(ge, se) | 0, b = b + Math.imul(ge, pe) | 0, x = x + Math.imul(ce, be) | 0, l = l + Math.imul(ce, _e) | 0, l = l + Math.imul(de, be) | 0, b = b + Math.imul(de, _e) | 0;
      var tt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (tt >>> 26) | 0, tt &= 67108863, x = Math.imul(ee, He), l = Math.imul(ee, Ge), l = l + Math.imul(F, He) | 0, b = Math.imul(F, Ge), x = x + Math.imul(ke, Le) | 0, l = l + Math.imul(ke, Ke) | 0, l = l + Math.imul(Ue, Le) | 0, b = b + Math.imul(Ue, Ke) | 0, x = x + Math.imul(Te, Fe) | 0, l = l + Math.imul(Te, ze) | 0, l = l + Math.imul(De, Fe) | 0, b = b + Math.imul(De, ze) | 0, x = x + Math.imul(Ne, Pe) | 0, l = l + Math.imul(Ne, je) | 0, l = l + Math.imul(qe, Pe) | 0, b = b + Math.imul(qe, je) | 0, x = x + Math.imul(Re, te) | 0, l = l + Math.imul(Re, ne) | 0, l = l + Math.imul(ve, te) | 0, b = b + Math.imul(ve, ne) | 0, x = x + Math.imul(xe, se) | 0, l = l + Math.imul(xe, pe) | 0, l = l + Math.imul(Ee, se) | 0, b = b + Math.imul(Ee, pe) | 0, x = x + Math.imul(re, be) | 0, l = l + Math.imul(re, _e) | 0, l = l + Math.imul(ge, be) | 0, b = b + Math.imul(ge, _e) | 0;
      var st = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (st >>> 26) | 0, st &= 67108863, x = Math.imul(ee, Le), l = Math.imul(ee, Ke), l = l + Math.imul(F, Le) | 0, b = Math.imul(F, Ke), x = x + Math.imul(ke, Fe) | 0, l = l + Math.imul(ke, ze) | 0, l = l + Math.imul(Ue, Fe) | 0, b = b + Math.imul(Ue, ze) | 0, x = x + Math.imul(Te, Pe) | 0, l = l + Math.imul(Te, je) | 0, l = l + Math.imul(De, Pe) | 0, b = b + Math.imul(De, je) | 0, x = x + Math.imul(Ne, te) | 0, l = l + Math.imul(Ne, ne) | 0, l = l + Math.imul(qe, te) | 0, b = b + Math.imul(qe, ne) | 0, x = x + Math.imul(Re, se) | 0, l = l + Math.imul(Re, pe) | 0, l = l + Math.imul(ve, se) | 0, b = b + Math.imul(ve, pe) | 0, x = x + Math.imul(xe, be) | 0, l = l + Math.imul(xe, _e) | 0, l = l + Math.imul(Ee, be) | 0, b = b + Math.imul(Ee, _e) | 0;
      var Qe = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (Qe >>> 26) | 0, Qe &= 67108863, x = Math.imul(ee, Fe), l = Math.imul(ee, ze), l = l + Math.imul(F, Fe) | 0, b = Math.imul(F, ze), x = x + Math.imul(ke, Pe) | 0, l = l + Math.imul(ke, je) | 0, l = l + Math.imul(Ue, Pe) | 0, b = b + Math.imul(Ue, je) | 0, x = x + Math.imul(Te, te) | 0, l = l + Math.imul(Te, ne) | 0, l = l + Math.imul(De, te) | 0, b = b + Math.imul(De, ne) | 0, x = x + Math.imul(Ne, se) | 0, l = l + Math.imul(Ne, pe) | 0, l = l + Math.imul(qe, se) | 0, b = b + Math.imul(qe, pe) | 0, x = x + Math.imul(Re, be) | 0, l = l + Math.imul(Re, _e) | 0, l = l + Math.imul(ve, be) | 0, b = b + Math.imul(ve, _e) | 0;
      var rt = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (rt >>> 26) | 0, rt &= 67108863, x = Math.imul(ee, Pe), l = Math.imul(ee, je), l = l + Math.imul(F, Pe) | 0, b = Math.imul(F, je), x = x + Math.imul(ke, te) | 0, l = l + Math.imul(ke, ne) | 0, l = l + Math.imul(Ue, te) | 0, b = b + Math.imul(Ue, ne) | 0, x = x + Math.imul(Te, se) | 0, l = l + Math.imul(Te, pe) | 0, l = l + Math.imul(De, se) | 0, b = b + Math.imul(De, pe) | 0, x = x + Math.imul(Ne, be) | 0, l = l + Math.imul(Ne, _e) | 0, l = l + Math.imul(qe, be) | 0, b = b + Math.imul(qe, _e) | 0;
      var it = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (it >>> 26) | 0, it &= 67108863, x = Math.imul(ee, te), l = Math.imul(ee, ne), l = l + Math.imul(F, te) | 0, b = Math.imul(F, ne), x = x + Math.imul(ke, se) | 0, l = l + Math.imul(ke, pe) | 0, l = l + Math.imul(Ue, se) | 0, b = b + Math.imul(Ue, pe) | 0, x = x + Math.imul(Te, be) | 0, l = l + Math.imul(Te, _e) | 0, l = l + Math.imul(De, be) | 0, b = b + Math.imul(De, _e) | 0;
      var et = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (et >>> 26) | 0, et &= 67108863, x = Math.imul(ee, se), l = Math.imul(ee, pe), l = l + Math.imul(F, se) | 0, b = Math.imul(F, pe), x = x + Math.imul(ke, be) | 0, l = l + Math.imul(ke, _e) | 0, l = l + Math.imul(Ue, be) | 0, b = b + Math.imul(Ue, _e) | 0;
      var Ie = (E + x | 0) + ((l & 8191) << 13) | 0;
      E = (b + (l >>> 13) | 0) + (Ie >>> 26) | 0, Ie &= 67108863, x = Math.imul(ee, be), l = Math.imul(ee, _e), l = l + Math.imul(F, be) | 0, b = Math.imul(F, _e);
      var Ce = (E + x | 0) + ((l & 8191) << 13) | 0;
      return E = (b + (l >>> 13) | 0) + (Ce >>> 26) | 0, Ce &= 67108863, $[0] = Je, $[1] = We, $[2] = bt, $[3] = Ye, $[4] = ot, $[5] = ct, $[6] = lt, $[7] = mt, $[8] = dt, $[9] = yt, $[10] = pt, $[11] = tt, $[12] = st, $[13] = Qe, $[14] = rt, $[15] = it, $[16] = et, $[17] = Ie, $[18] = Ce, E !== 0 && ($[19] = E, p.length++), p;
    };
    Math.imul || (L = O);
    function C(_, u, h) {
      h.negative = u.negative ^ _.negative, h.length = _.length + u.length;
      for (var p = 0, y = 0, v = 0; v < h.length - 1; v++) {
        var $ = y;
        y = 0;
        for (var E = p & 67108863, x = Math.min(v, u.length - 1), l = Math.max(0, v - _.length + 1); l <= x; l++) {
          var b = v - l, M = _.words[b] | 0, k = u.words[l] | 0, U = M * k, T = U & 67108863;
          $ = $ + (U / 67108864 | 0) | 0, T = T + E | 0, E = T & 67108863, $ = $ + (T >>> 26) | 0, y += $ >>> 26, $ &= 67108863;
        }
        h.words[v] = E, p = $, $ = y;
      }
      return p !== 0 ? h.words[v] = p : h.length--, h.strip();
    }
    function z(_, u, h) {
      var p = new q();
      return p.mulp(_, u, h);
    }
    o.prototype.mulTo = function(u, h) {
      var p, y = this.length + u.length;
      return this.length === 10 && u.length === 10 ? p = L(this, u, h) : y < 63 ? p = O(this, u, h) : y < 1024 ? p = C(this, u, h) : p = z(this, u, h), p;
    };
    function q(_, u) {
      this.x = _, this.y = u;
    }
    q.prototype.makeRBT = function(u) {
      for (var h = new Array(u), p = o.prototype._countBits(u) - 1, y = 0; y < u; y++)
        h[y] = this.revBin(y, p, u);
      return h;
    }, q.prototype.revBin = function(u, h, p) {
      if (u === 0 || u === p - 1)
        return u;
      for (var y = 0, v = 0; v < h; v++)
        y |= (u & 1) << h - v - 1, u >>= 1;
      return y;
    }, q.prototype.permute = function(u, h, p, y, v, $) {
      for (var E = 0; E < $; E++)
        y[E] = h[u[E]], v[E] = p[u[E]];
    }, q.prototype.transform = function(u, h, p, y, v, $) {
      this.permute($, u, h, p, y, v);
      for (var E = 1; E < v; E <<= 1)
        for (var x = E << 1, l = Math.cos(2 * Math.PI / x), b = Math.sin(2 * Math.PI / x), M = 0; M < v; M += x)
          for (var k = l, U = b, T = 0; T < E; T++) {
            var H = p[M + T], Y = y[M + T], le = p[M + T + E], ce = y[M + T + E], de = k * le - U * ce;
            ce = k * ce + U * le, le = de, p[M + T] = H + le, y[M + T] = Y + ce, p[M + T + E] = H - le, y[M + T + E] = Y - ce, T !== x && (de = l * k - b * U, U = l * U + b * k, k = de);
          }
    }, q.prototype.guessLen13b = function(u, h) {
      var p = Math.max(h, u) | 1, y = p & 1, v = 0;
      for (p = p / 2 | 0; p; p = p >>> 1)
        v++;
      return 1 << v + 1 + y;
    }, q.prototype.conjugate = function(u, h, p) {
      if (!(p <= 1))
        for (var y = 0; y < p / 2; y++) {
          var v = u[y];
          u[y] = u[p - y - 1], u[p - y - 1] = v, v = h[y], h[y] = -h[p - y - 1], h[p - y - 1] = -v;
        }
    }, q.prototype.normalize13b = function(u, h) {
      for (var p = 0, y = 0; y < h / 2; y++) {
        var v = Math.round(u[2 * y + 1] / h) * 8192 + Math.round(u[2 * y] / h) + p;
        u[y] = v & 67108863, v < 67108864 ? p = 0 : p = v / 67108864 | 0;
      }
      return u;
    }, q.prototype.convert13b = function(u, h, p, y) {
      for (var v = 0, $ = 0; $ < h; $++)
        v = v + (u[$] | 0), p[2 * $] = v & 8191, v = v >>> 13, p[2 * $ + 1] = v & 8191, v = v >>> 13;
      for ($ = 2 * h; $ < y; ++$)
        p[$] = 0;
      a(v === 0), a((v & -8192) === 0);
    }, q.prototype.stub = function(u) {
      for (var h = new Array(u), p = 0; p < u; p++)
        h[p] = 0;
      return h;
    }, q.prototype.mulp = function(u, h, p) {
      var y = 2 * this.guessLen13b(u.length, h.length), v = this.makeRBT(y), $ = this.stub(y), E = new Array(y), x = new Array(y), l = new Array(y), b = new Array(y), M = new Array(y), k = new Array(y), U = p.words;
      U.length = y, this.convert13b(u.words, u.length, E, y), this.convert13b(h.words, h.length, b, y), this.transform(E, $, x, l, y, v), this.transform(b, $, M, k, y, v);
      for (var T = 0; T < y; T++) {
        var H = x[T] * M[T] - l[T] * k[T];
        l[T] = x[T] * k[T] + l[T] * M[T], x[T] = H;
      }
      return this.conjugate(x, l, y), this.transform(x, l, U, $, y, v), this.conjugate(U, $, y), this.normalize13b(U, y), p.negative = u.negative ^ h.negative, p.length = u.length + h.length, p.strip();
    }, o.prototype.mul = function(u) {
      var h = new o(null);
      return h.words = new Array(this.length + u.length), this.mulTo(u, h);
    }, o.prototype.mulf = function(u) {
      var h = new o(null);
      return h.words = new Array(this.length + u.length), z(this, u, h);
    }, o.prototype.imul = function(u) {
      return this.clone().mulTo(u, this);
    }, o.prototype.imuln = function(u) {
      a(typeof u == "number"), a(u < 67108864);
      for (var h = 0, p = 0; p < this.length; p++) {
        var y = (this.words[p] | 0) * u, v = (y & 67108863) + (h & 67108863);
        h >>= 26, h += y / 67108864 | 0, h += v >>> 26, this.words[p] = v & 67108863;
      }
      return h !== 0 && (this.words[p] = h, this.length++), this;
    }, o.prototype.muln = function(u) {
      return this.clone().imuln(u);
    }, o.prototype.sqr = function() {
      return this.mul(this);
    }, o.prototype.isqr = function() {
      return this.imul(this.clone());
    }, o.prototype.pow = function(u) {
      var h = I(u);
      if (h.length === 0)
        return new o(1);
      for (var p = this, y = 0; y < h.length && h[y] === 0; y++, p = p.sqr())
        ;
      if (++y < h.length)
        for (var v = p.sqr(); y < h.length; y++, v = v.sqr())
          h[y] !== 0 && (p = p.mul(v));
      return p;
    }, o.prototype.iushln = function(u) {
      a(typeof u == "number" && u >= 0);
      var h = u % 26, p = (u - h) / 26, y = 67108863 >>> 26 - h << 26 - h, v;
      if (h !== 0) {
        var $ = 0;
        for (v = 0; v < this.length; v++) {
          var E = this.words[v] & y, x = (this.words[v] | 0) - E << h;
          this.words[v] = x | $, $ = E >>> 26 - h;
        }
        $ && (this.words[v] = $, this.length++);
      }
      if (p !== 0) {
        for (v = this.length - 1; v >= 0; v--)
          this.words[v + p] = this.words[v];
        for (v = 0; v < p; v++)
          this.words[v] = 0;
        this.length += p;
      }
      return this.strip();
    }, o.prototype.ishln = function(u) {
      return a(this.negative === 0), this.iushln(u);
    }, o.prototype.iushrn = function(u, h, p) {
      a(typeof u == "number" && u >= 0);
      var y;
      h ? y = (h - h % 26) / 26 : y = 0;
      var v = u % 26, $ = Math.min((u - v) / 26, this.length), E = 67108863 ^ 67108863 >>> v << v, x = p;
      if (y -= $, y = Math.max(0, y), x) {
        for (var l = 0; l < $; l++)
          x.words[l] = this.words[l];
        x.length = $;
      }
      if ($ !== 0)
        if (this.length > $)
          for (this.length -= $, l = 0; l < this.length; l++)
            this.words[l] = this.words[l + $];
        else
          this.words[0] = 0, this.length = 1;
      var b = 0;
      for (l = this.length - 1; l >= 0 && (b !== 0 || l >= y); l--) {
        var M = this.words[l] | 0;
        this.words[l] = b << 26 - v | M >>> v, b = M & E;
      }
      return x && b !== 0 && (x.words[x.length++] = b), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
    }, o.prototype.ishrn = function(u, h, p) {
      return a(this.negative === 0), this.iushrn(u, h, p);
    }, o.prototype.shln = function(u) {
      return this.clone().ishln(u);
    }, o.prototype.ushln = function(u) {
      return this.clone().iushln(u);
    }, o.prototype.shrn = function(u) {
      return this.clone().ishrn(u);
    }, o.prototype.ushrn = function(u) {
      return this.clone().iushrn(u);
    }, o.prototype.testn = function(u) {
      a(typeof u == "number" && u >= 0);
      var h = u % 26, p = (u - h) / 26, y = 1 << h;
      if (this.length <= p)
        return !1;
      var v = this.words[p];
      return !!(v & y);
    }, o.prototype.imaskn = function(u) {
      a(typeof u == "number" && u >= 0);
      var h = u % 26, p = (u - h) / 26;
      if (a(this.negative === 0, "imaskn works only with positive numbers"), this.length <= p)
        return this;
      if (h !== 0 && p++, this.length = Math.min(p, this.length), h !== 0) {
        var y = 67108863 ^ 67108863 >>> h << h;
        this.words[this.length - 1] &= y;
      }
      return this.strip();
    }, o.prototype.maskn = function(u) {
      return this.clone().imaskn(u);
    }, o.prototype.iaddn = function(u) {
      return a(typeof u == "number"), a(u < 67108864), u < 0 ? this.isubn(-u) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < u ? (this.words[0] = u - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(u), this.negative = 1, this) : this._iaddn(u);
    }, o.prototype._iaddn = function(u) {
      this.words[0] += u;
      for (var h = 0; h < this.length && this.words[h] >= 67108864; h++)
        this.words[h] -= 67108864, h === this.length - 1 ? this.words[h + 1] = 1 : this.words[h + 1]++;
      return this.length = Math.max(this.length, h + 1), this;
    }, o.prototype.isubn = function(u) {
      if (a(typeof u == "number"), a(u < 67108864), u < 0)
        return this.iaddn(-u);
      if (this.negative !== 0)
        return this.negative = 0, this.iaddn(u), this.negative = 1, this;
      if (this.words[0] -= u, this.length === 1 && this.words[0] < 0)
        this.words[0] = -this.words[0], this.negative = 1;
      else
        for (var h = 0; h < this.length && this.words[h] < 0; h++)
          this.words[h] += 67108864, this.words[h + 1] -= 1;
      return this.strip();
    }, o.prototype.addn = function(u) {
      return this.clone().iaddn(u);
    }, o.prototype.subn = function(u) {
      return this.clone().isubn(u);
    }, o.prototype.iabs = function() {
      return this.negative = 0, this;
    }, o.prototype.abs = function() {
      return this.clone().iabs();
    }, o.prototype._ishlnsubmul = function(u, h, p) {
      var y = u.length + p, v;
      this._expand(y);
      var $, E = 0;
      for (v = 0; v < u.length; v++) {
        $ = (this.words[v + p] | 0) + E;
        var x = (u.words[v] | 0) * h;
        $ -= x & 67108863, E = ($ >> 26) - (x / 67108864 | 0), this.words[v + p] = $ & 67108863;
      }
      for (; v < this.length - p; v++)
        $ = (this.words[v + p] | 0) + E, E = $ >> 26, this.words[v + p] = $ & 67108863;
      if (E === 0)
        return this.strip();
      for (a(E === -1), E = 0, v = 0; v < this.length; v++)
        $ = -(this.words[v] | 0) + E, E = $ >> 26, this.words[v] = $ & 67108863;
      return this.negative = 1, this.strip();
    }, o.prototype._wordDiv = function(u, h) {
      var p = this.length - u.length, y = this.clone(), v = u, $ = v.words[v.length - 1] | 0, E = this._countBits($);
      p = 26 - E, p !== 0 && (v = v.ushln(p), y.iushln(p), $ = v.words[v.length - 1] | 0);
      var x = y.length - v.length, l;
      if (h !== "mod") {
        l = new o(null), l.length = x + 1, l.words = new Array(l.length);
        for (var b = 0; b < l.length; b++)
          l.words[b] = 0;
      }
      var M = y.clone()._ishlnsubmul(v, 1, x);
      M.negative === 0 && (y = M, l && (l.words[x] = 1));
      for (var k = x - 1; k >= 0; k--) {
        var U = (y.words[v.length + k] | 0) * 67108864 + (y.words[v.length + k - 1] | 0);
        for (U = Math.min(U / $ | 0, 67108863), y._ishlnsubmul(v, U, k); y.negative !== 0; )
          U--, y.negative = 0, y._ishlnsubmul(v, 1, k), y.isZero() || (y.negative ^= 1);
        l && (l.words[k] = U);
      }
      return l && l.strip(), y.strip(), h !== "div" && p !== 0 && y.iushrn(p), {
        div: l || null,
        mod: y
      };
    }, o.prototype.divmod = function(u, h, p) {
      if (a(!u.isZero()), this.isZero())
        return {
          div: new o(0),
          mod: new o(0)
        };
      var y, v, $;
      return this.negative !== 0 && u.negative === 0 ? ($ = this.neg().divmod(u, h), h !== "mod" && (y = $.div.neg()), h !== "div" && (v = $.mod.neg(), p && v.negative !== 0 && v.iadd(u)), {
        div: y,
        mod: v
      }) : this.negative === 0 && u.negative !== 0 ? ($ = this.divmod(u.neg(), h), h !== "mod" && (y = $.div.neg()), {
        div: y,
        mod: $.mod
      }) : this.negative & u.negative ? ($ = this.neg().divmod(u.neg(), h), h !== "div" && (v = $.mod.neg(), p && v.negative !== 0 && v.isub(u)), {
        div: $.div,
        mod: v
      }) : u.length > this.length || this.cmp(u) < 0 ? {
        div: new o(0),
        mod: this
      } : u.length === 1 ? h === "div" ? {
        div: this.divn(u.words[0]),
        mod: null
      } : h === "mod" ? {
        div: null,
        mod: new o(this.modn(u.words[0]))
      } : {
        div: this.divn(u.words[0]),
        mod: new o(this.modn(u.words[0]))
      } : this._wordDiv(u, h);
    }, o.prototype.div = function(u) {
      return this.divmod(u, "div", !1).div;
    }, o.prototype.mod = function(u) {
      return this.divmod(u, "mod", !1).mod;
    }, o.prototype.umod = function(u) {
      return this.divmod(u, "mod", !0).mod;
    }, o.prototype.divRound = function(u) {
      var h = this.divmod(u);
      if (h.mod.isZero())
        return h.div;
      var p = h.div.negative !== 0 ? h.mod.isub(u) : h.mod, y = u.ushrn(1), v = u.andln(1), $ = p.cmp(y);
      return $ < 0 || v === 1 && $ === 0 ? h.div : h.div.negative !== 0 ? h.div.isubn(1) : h.div.iaddn(1);
    }, o.prototype.modn = function(u) {
      a(u <= 67108863);
      for (var h = (1 << 26) % u, p = 0, y = this.length - 1; y >= 0; y--)
        p = (h * p + (this.words[y] | 0)) % u;
      return p;
    }, o.prototype.idivn = function(u) {
      a(u <= 67108863);
      for (var h = 0, p = this.length - 1; p >= 0; p--) {
        var y = (this.words[p] | 0) + h * 67108864;
        this.words[p] = y / u | 0, h = y % u;
      }
      return this.strip();
    }, o.prototype.divn = function(u) {
      return this.clone().idivn(u);
    }, o.prototype.egcd = function(u) {
      a(u.negative === 0), a(!u.isZero());
      var h = this, p = u.clone();
      h.negative !== 0 ? h = h.umod(u) : h = h.clone();
      for (var y = new o(1), v = new o(0), $ = new o(0), E = new o(1), x = 0; h.isEven() && p.isEven(); )
        h.iushrn(1), p.iushrn(1), ++x;
      for (var l = p.clone(), b = h.clone(); !h.isZero(); ) {
        for (var M = 0, k = 1; !(h.words[0] & k) && M < 26; ++M, k <<= 1)
          ;
        if (M > 0)
          for (h.iushrn(M); M-- > 0; )
            (y.isOdd() || v.isOdd()) && (y.iadd(l), v.isub(b)), y.iushrn(1), v.iushrn(1);
        for (var U = 0, T = 1; !(p.words[0] & T) && U < 26; ++U, T <<= 1)
          ;
        if (U > 0)
          for (p.iushrn(U); U-- > 0; )
            ($.isOdd() || E.isOdd()) && ($.iadd(l), E.isub(b)), $.iushrn(1), E.iushrn(1);
        h.cmp(p) >= 0 ? (h.isub(p), y.isub($), v.isub(E)) : (p.isub(h), $.isub(y), E.isub(v));
      }
      return {
        a: $,
        b: E,
        gcd: p.iushln(x)
      };
    }, o.prototype._invmp = function(u) {
      a(u.negative === 0), a(!u.isZero());
      var h = this, p = u.clone();
      h.negative !== 0 ? h = h.umod(u) : h = h.clone();
      for (var y = new o(1), v = new o(0), $ = p.clone(); h.cmpn(1) > 0 && p.cmpn(1) > 0; ) {
        for (var E = 0, x = 1; !(h.words[0] & x) && E < 26; ++E, x <<= 1)
          ;
        if (E > 0)
          for (h.iushrn(E); E-- > 0; )
            y.isOdd() && y.iadd($), y.iushrn(1);
        for (var l = 0, b = 1; !(p.words[0] & b) && l < 26; ++l, b <<= 1)
          ;
        if (l > 0)
          for (p.iushrn(l); l-- > 0; )
            v.isOdd() && v.iadd($), v.iushrn(1);
        h.cmp(p) >= 0 ? (h.isub(p), y.isub(v)) : (p.isub(h), v.isub(y));
      }
      var M;
      return h.cmpn(1) === 0 ? M = y : M = v, M.cmpn(0) < 0 && M.iadd(u), M;
    }, o.prototype.gcd = function(u) {
      if (this.isZero())
        return u.abs();
      if (u.isZero())
        return this.abs();
      var h = this.clone(), p = u.clone();
      h.negative = 0, p.negative = 0;
      for (var y = 0; h.isEven() && p.isEven(); y++)
        h.iushrn(1), p.iushrn(1);
      do {
        for (; h.isEven(); )
          h.iushrn(1);
        for (; p.isEven(); )
          p.iushrn(1);
        var v = h.cmp(p);
        if (v < 0) {
          var $ = h;
          h = p, p = $;
        } else if (v === 0 || p.cmpn(1) === 0)
          break;
        h.isub(p);
      } while (!0);
      return p.iushln(y);
    }, o.prototype.invm = function(u) {
      return this.egcd(u).a.umod(u);
    }, o.prototype.isEven = function() {
      return (this.words[0] & 1) === 0;
    }, o.prototype.isOdd = function() {
      return (this.words[0] & 1) === 1;
    }, o.prototype.andln = function(u) {
      return this.words[0] & u;
    }, o.prototype.bincn = function(u) {
      a(typeof u == "number");
      var h = u % 26, p = (u - h) / 26, y = 1 << h;
      if (this.length <= p)
        return this._expand(p + 1), this.words[p] |= y, this;
      for (var v = y, $ = p; v !== 0 && $ < this.length; $++) {
        var E = this.words[$] | 0;
        E += v, v = E >>> 26, E &= 67108863, this.words[$] = E;
      }
      return v !== 0 && (this.words[$] = v, this.length++), this;
    }, o.prototype.isZero = function() {
      return this.length === 1 && this.words[0] === 0;
    }, o.prototype.cmpn = function(u) {
      var h = u < 0;
      if (this.negative !== 0 && !h)
        return -1;
      if (this.negative === 0 && h)
        return 1;
      this.strip();
      var p;
      if (this.length > 1)
        p = 1;
      else {
        h && (u = -u), a(u <= 67108863, "Number is too big");
        var y = this.words[0] | 0;
        p = y === u ? 0 : y < u ? -1 : 1;
      }
      return this.negative !== 0 ? -p | 0 : p;
    }, o.prototype.cmp = function(u) {
      if (this.negative !== 0 && u.negative === 0)
        return -1;
      if (this.negative === 0 && u.negative !== 0)
        return 1;
      var h = this.ucmp(u);
      return this.negative !== 0 ? -h | 0 : h;
    }, o.prototype.ucmp = function(u) {
      if (this.length > u.length)
        return 1;
      if (this.length < u.length)
        return -1;
      for (var h = 0, p = this.length - 1; p >= 0; p--) {
        var y = this.words[p] | 0, v = u.words[p] | 0;
        if (y !== v) {
          y < v ? h = -1 : y > v && (h = 1);
          break;
        }
      }
      return h;
    }, o.prototype.gtn = function(u) {
      return this.cmpn(u) === 1;
    }, o.prototype.gt = function(u) {
      return this.cmp(u) === 1;
    }, o.prototype.gten = function(u) {
      return this.cmpn(u) >= 0;
    }, o.prototype.gte = function(u) {
      return this.cmp(u) >= 0;
    }, o.prototype.ltn = function(u) {
      return this.cmpn(u) === -1;
    }, o.prototype.lt = function(u) {
      return this.cmp(u) === -1;
    }, o.prototype.lten = function(u) {
      return this.cmpn(u) <= 0;
    }, o.prototype.lte = function(u) {
      return this.cmp(u) <= 0;
    }, o.prototype.eqn = function(u) {
      return this.cmpn(u) === 0;
    }, o.prototype.eq = function(u) {
      return this.cmp(u) === 0;
    }, o.red = function(u) {
      return new V(u);
    }, o.prototype.toRed = function(u) {
      return a(!this.red, "Already a number in reduction context"), a(this.negative === 0, "red works only with positives"), u.convertTo(this)._forceRed(u);
    }, o.prototype.fromRed = function() {
      return a(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
    }, o.prototype._forceRed = function(u) {
      return this.red = u, this;
    }, o.prototype.forceRed = function(u) {
      return a(!this.red, "Already a number in reduction context"), this._forceRed(u);
    }, o.prototype.redAdd = function(u) {
      return a(this.red, "redAdd works only with red numbers"), this.red.add(this, u);
    }, o.prototype.redIAdd = function(u) {
      return a(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, u);
    }, o.prototype.redSub = function(u) {
      return a(this.red, "redSub works only with red numbers"), this.red.sub(this, u);
    }, o.prototype.redISub = function(u) {
      return a(this.red, "redISub works only with red numbers"), this.red.isub(this, u);
    }, o.prototype.redShl = function(u) {
      return a(this.red, "redShl works only with red numbers"), this.red.shl(this, u);
    }, o.prototype.redMul = function(u) {
      return a(this.red, "redMul works only with red numbers"), this.red._verify2(this, u), this.red.mul(this, u);
    }, o.prototype.redIMul = function(u) {
      return a(this.red, "redMul works only with red numbers"), this.red._verify2(this, u), this.red.imul(this, u);
    }, o.prototype.redSqr = function() {
      return a(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
    }, o.prototype.redISqr = function() {
      return a(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
    }, o.prototype.redSqrt = function() {
      return a(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
    }, o.prototype.redInvm = function() {
      return a(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
    }, o.prototype.redNeg = function() {
      return a(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
    }, o.prototype.redPow = function(u) {
      return a(this.red && !u.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, u);
    };
    var Z = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function X(_, u) {
      this.name = _, this.p = new o(u, 16), this.n = this.p.bitLength(), this.k = new o(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
    }
    X.prototype._tmp = function() {
      var u = new o(null);
      return u.words = new Array(Math.ceil(this.n / 13)), u;
    }, X.prototype.ireduce = function(u) {
      var h = u, p;
      do
        this.split(h, this.tmp), h = this.imulK(h), h = h.iadd(this.tmp), p = h.bitLength();
      while (p > this.n);
      var y = p < this.n ? -1 : h.ucmp(this.p);
      return y === 0 ? (h.words[0] = 0, h.length = 1) : y > 0 ? h.isub(this.p) : h.strip !== void 0 ? h.strip() : h._strip(), h;
    }, X.prototype.split = function(u, h) {
      u.iushrn(this.n, 0, h);
    }, X.prototype.imulK = function(u) {
      return u.imul(this.k);
    };
    function ie() {
      X.call(
        this,
        "k256",
        "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
      );
    }
    c(ie, X), ie.prototype.split = function(u, h) {
      for (var p = 4194303, y = Math.min(u.length, 9), v = 0; v < y; v++)
        h.words[v] = u.words[v];
      if (h.length = y, u.length <= 9) {
        u.words[0] = 0, u.length = 1;
        return;
      }
      var $ = u.words[9];
      for (h.words[h.length++] = $ & p, v = 10; v < u.length; v++) {
        var E = u.words[v] | 0;
        u.words[v - 10] = (E & p) << 4 | $ >>> 22, $ = E;
      }
      $ >>>= 22, u.words[v - 10] = $, $ === 0 && u.length > 10 ? u.length -= 10 : u.length -= 9;
    }, ie.prototype.imulK = function(u) {
      u.words[u.length] = 0, u.words[u.length + 1] = 0, u.length += 2;
      for (var h = 0, p = 0; p < u.length; p++) {
        var y = u.words[p] | 0;
        h += y * 977, u.words[p] = h & 67108863, h = y * 64 + (h / 67108864 | 0);
      }
      return u.words[u.length - 1] === 0 && (u.length--, u.words[u.length - 1] === 0 && u.length--), u;
    };
    function fe() {
      X.call(
        this,
        "p224",
        "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
      );
    }
    c(fe, X);
    function ye() {
      X.call(
        this,
        "p192",
        "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
      );
    }
    c(ye, X);
    function j() {
      X.call(
        this,
        "25519",
        "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
      );
    }
    c(j, X), j.prototype.imulK = function(u) {
      for (var h = 0, p = 0; p < u.length; p++) {
        var y = (u.words[p] | 0) * 19 + h, v = y & 67108863;
        y >>>= 26, u.words[p] = v, h = y;
      }
      return h !== 0 && (u.words[u.length++] = h), u;
    }, o._prime = function(u) {
      if (Z[u])
        return Z[u];
      var h;
      if (u === "k256")
        h = new ie();
      else if (u === "p224")
        h = new fe();
      else if (u === "p192")
        h = new ye();
      else if (u === "p25519")
        h = new j();
      else
        throw new Error("Unknown prime " + u);
      return Z[u] = h, h;
    };
    function V(_) {
      if (typeof _ == "string") {
        var u = o._prime(_);
        this.m = u.p, this.prime = u;
      } else
        a(_.gtn(1), "modulus must be greater than 1"), this.m = _, this.prime = null;
    }
    V.prototype._verify1 = function(u) {
      a(u.negative === 0, "red works only with positives"), a(u.red, "red works only with red numbers");
    }, V.prototype._verify2 = function(u, h) {
      a((u.negative | h.negative) === 0, "red works only with positives"), a(
        u.red && u.red === h.red,
        "red works only with red numbers"
      );
    }, V.prototype.imod = function(u) {
      return this.prime ? this.prime.ireduce(u)._forceRed(this) : u.umod(this.m)._forceRed(this);
    }, V.prototype.neg = function(u) {
      return u.isZero() ? u.clone() : this.m.sub(u)._forceRed(this);
    }, V.prototype.add = function(u, h) {
      this._verify2(u, h);
      var p = u.add(h);
      return p.cmp(this.m) >= 0 && p.isub(this.m), p._forceRed(this);
    }, V.prototype.iadd = function(u, h) {
      this._verify2(u, h);
      var p = u.iadd(h);
      return p.cmp(this.m) >= 0 && p.isub(this.m), p;
    }, V.prototype.sub = function(u, h) {
      this._verify2(u, h);
      var p = u.sub(h);
      return p.cmpn(0) < 0 && p.iadd(this.m), p._forceRed(this);
    }, V.prototype.isub = function(u, h) {
      this._verify2(u, h);
      var p = u.isub(h);
      return p.cmpn(0) < 0 && p.iadd(this.m), p;
    }, V.prototype.shl = function(u, h) {
      return this._verify1(u), this.imod(u.ushln(h));
    }, V.prototype.imul = function(u, h) {
      return this._verify2(u, h), this.imod(u.imul(h));
    }, V.prototype.mul = function(u, h) {
      return this._verify2(u, h), this.imod(u.mul(h));
    }, V.prototype.isqr = function(u) {
      return this.imul(u, u.clone());
    }, V.prototype.sqr = function(u) {
      return this.mul(u, u);
    }, V.prototype.sqrt = function(u) {
      if (u.isZero())
        return u.clone();
      var h = this.m.andln(3);
      if (a(h % 2 === 1), h === 3) {
        var p = this.m.add(new o(1)).iushrn(2);
        return this.pow(u, p);
      }
      for (var y = this.m.subn(1), v = 0; !y.isZero() && y.andln(1) === 0; )
        v++, y.iushrn(1);
      a(!y.isZero());
      var $ = new o(1).toRed(this), E = $.redNeg(), x = this.m.subn(1).iushrn(1), l = this.m.bitLength();
      for (l = new o(2 * l * l).toRed(this); this.pow(l, x).cmp(E) !== 0; )
        l.redIAdd(E);
      for (var b = this.pow(l, y), M = this.pow(u, y.addn(1).iushrn(1)), k = this.pow(u, y), U = v; k.cmp($) !== 0; ) {
        for (var T = k, H = 0; T.cmp($) !== 0; H++)
          T = T.redSqr();
        a(H < U);
        var Y = this.pow(b, new o(1).iushln(U - H - 1));
        M = M.redMul(Y), b = Y.redSqr(), k = k.redMul(b), U = H;
      }
      return M;
    }, V.prototype.invm = function(u) {
      var h = u._invmp(this.m);
      return h.negative !== 0 ? (h.negative = 0, this.imod(h).redNeg()) : this.imod(h);
    }, V.prototype.pow = function(u, h) {
      if (h.isZero())
        return new o(1).toRed(this);
      if (h.cmpn(1) === 0)
        return u.clone();
      var p = 4, y = new Array(1 << p);
      y[0] = new o(1).toRed(this), y[1] = u;
      for (var v = 2; v < y.length; v++)
        y[v] = this.mul(y[v - 1], u);
      var $ = y[0], E = 0, x = 0, l = h.bitLength() % 26;
      for (l === 0 && (l = 26), v = h.length - 1; v >= 0; v--) {
        for (var b = h.words[v], M = l - 1; M >= 0; M--) {
          var k = b >> M & 1;
          if ($ !== y[0] && ($ = this.sqr($)), k === 0 && E === 0) {
            x = 0;
            continue;
          }
          E <<= 1, E |= k, x++, !(x !== p && (v !== 0 || M !== 0)) && ($ = this.mul($, y[E]), x = 0, E = 0);
        }
        l = 26;
      }
      return $;
    }, V.prototype.convertTo = function(u) {
      var h = u.umod(this.m);
      return h === u ? h.clone() : h;
    }, V.prototype.convertFrom = function(u) {
      var h = u.clone();
      return h.red = null, h;
    }, o.mont = function(u) {
      return new ae(u);
    };
    function ae(_) {
      V.call(this, _), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new o(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
    }
    c(ae, V), ae.prototype.convertTo = function(u) {
      return this.imod(u.ushln(this.shift));
    }, ae.prototype.convertFrom = function(u) {
      var h = this.imod(u.mul(this.rinv));
      return h.red = null, h;
    }, ae.prototype.imul = function(u, h) {
      if (u.isZero() || h.isZero())
        return u.words[0] = 0, u.length = 1, u;
      var p = u.imul(h), y = p.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), v = p.isub(y).iushrn(this.shift), $ = v;
      return v.cmp(this.m) >= 0 ? $ = v.isub(this.m) : v.cmpn(0) < 0 && ($ = v.iadd(this.m)), $._forceRed(this);
    }, ae.prototype.mul = function(u, h) {
      if (u.isZero() || h.isZero())
        return new o(0)._forceRed(this);
      var p = u.mul(h), y = p.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), v = p.isub(y).iushrn(this.shift), $ = v;
      return v.cmp(this.m) >= 0 ? $ = v.isub(this.m) : v.cmpn(0) < 0 && ($ = v.iadd(this.m)), $._forceRed(this);
    }, ae.prototype.invm = function(u) {
      var h = this.imod(u._invmp(this.m).mul(this.r2));
      return h._forceRed(this);
    };
  })(t, commonjsGlobal);
})(bn);
var bnExports = bn.exports, BN$4 = bnExports, Buffer$3 = safeBufferExports.Buffer;
function withPublic$2(t, e) {
  return Buffer$3.from(t.toRed(BN$4.mont(e.modulus)).redPow(new BN$4(e.publicExponent)).fromRed().toArray());
}
var withPublic_1 = withPublic$2, parseKeys$1 = parseAsn1, randomBytes$2 = browserExports, createHash$1 = browser$c, mgf$1 = mgf$2, xor$1 = xor$2, BN$3 = bnExports, withPublic$1 = withPublic_1, crt$1 = browserifyRsa, Buffer$2 = safeBufferExports.Buffer, publicEncrypt = function(e, n, a) {
  var c;
  e.padding ? c = e.padding : a ? c = 1 : c = 4;
  var o = parseKeys$1(e), d;
  if (c === 4)
    d = oaep$1(o, n);
  else if (c === 1)
    d = pkcs1$1(o, n, a);
  else if (c === 3) {
    if (d = new BN$3(n), d.cmp(o.modulus) >= 0)
      throw new Error("data too long for modulus");
  } else
    throw new Error("unknown padding");
  return a ? crt$1(d, o) : withPublic$1(d, o);
};
function oaep$1(t, e) {
  var n = t.modulus.byteLength(), a = e.length, c = createHash$1("sha1").update(Buffer$2.alloc(0)).digest(), o = c.length, d = 2 * o;
  if (a > n - d - 2)
    throw new Error("message too long");
  var m = Buffer$2.alloc(n - a - d - 2), w = n - o - 1, S = randomBytes$2(o), A = xor$1(Buffer$2.concat([c, m, Buffer$2.alloc(1, 1), e], w), mgf$1(S, w)), B = xor$1(S, mgf$1(A, o));
  return new BN$3(Buffer$2.concat([Buffer$2.alloc(1), B, A], n));
}
function pkcs1$1(t, e, n) {
  var a = e.length, c = t.modulus.byteLength();
  if (a > c - 11)
    throw new Error("message too long");
  var o;
  return n ? o = Buffer$2.alloc(c - a - 3, 255) : o = nonZero(c - a - 3), new BN$3(Buffer$2.concat([Buffer$2.from([0, n ? 1 : 2]), o, Buffer$2.alloc(1), e], c));
}
function nonZero(t) {
  for (var e = Buffer$2.allocUnsafe(t), n = 0, a = randomBytes$2(t * 2), c = 0, o; n < t; )
    c === a.length && (a = randomBytes$2(t * 2), c = 0), o = a[c++], o && (e[n++] = o);
  return e;
}
var parseKeys = parseAsn1, mgf = mgf$2, xor = xor$2, BN$2 = bnExports, crt = browserifyRsa, createHash = browser$c, withPublic = withPublic_1, Buffer$1 = safeBufferExports.Buffer, privateDecrypt = function(e, n, a) {
  var c;
  e.padding ? c = e.padding : a ? c = 1 : c = 4;
  var o = parseKeys(e), d = o.modulus.byteLength();
  if (n.length > d || new BN$2(n).cmp(o.modulus) >= 0)
    throw new Error("decryption error");
  var m;
  a ? m = withPublic(new BN$2(n), o) : m = crt(n, o);
  var w = Buffer$1.alloc(d - m.length);
  if (m = Buffer$1.concat([w, m], d), c === 4)
    return oaep(o, m);
  if (c === 1)
    return pkcs1(o, m, a);
  if (c === 3)
    return m;
  throw new Error("unknown padding");
};
function oaep(t, e) {
  var n = t.modulus.byteLength(), a = createHash("sha1").update(Buffer$1.alloc(0)).digest(), c = a.length;
  if (e[0] !== 0)
    throw new Error("decryption error");
  var o = e.slice(1, c + 1), d = e.slice(c + 1), m = xor(o, mgf(d, c)), w = xor(d, mgf(m, n - c - 1));
  if (compare$1(a, w.slice(0, c)))
    throw new Error("decryption error");
  for (var S = c; w[S] === 0; )
    S++;
  if (w[S++] !== 1)
    throw new Error("decryption error");
  return w.slice(S);
}
function pkcs1(t, e, n) {
  for (var a = e.slice(0, 2), c = 2, o = 0; e[c++] !== 0; )
    if (c >= e.length) {
      o++;
      break;
    }
  var d = e.slice(2, c - 1);
  if ((a.toString("hex") !== "0002" && !n || a.toString("hex") !== "0001" && n) && o++, d.length < 8 && o++, o)
    throw new Error("decryption error");
  return e.slice(c);
}
function compare$1(t, e) {
  t = Buffer$1.from(t), e = Buffer$1.from(e);
  var n = 0, a = t.length;
  t.length !== e.length && (n++, a = Math.min(t.length, e.length));
  for (var c = -1; ++c < a; )
    n += t[c] ^ e[c];
  return n;
}
(function(t) {
  t.publicEncrypt = publicEncrypt, t.privateDecrypt = privateDecrypt, t.privateEncrypt = function(n, a) {
    return t.publicEncrypt(n, a, !0);
  }, t.publicDecrypt = function(n, a) {
    return t.privateDecrypt(n, a, !0);
  };
})(browser$4);
var browser$3 = {};
function oldBrowser() {
  throw new Error(`secure random number generation not supported by this browser
use chrome, FireFox or Internet Explorer 11`);
}
var safeBuffer = safeBufferExports, randombytes = browserExports, Buffer = safeBuffer.Buffer, kBufferMaxLength = safeBuffer.kMaxLength, crypto$5 = commonjsGlobal.crypto || commonjsGlobal.msCrypto, kMaxUint32 = Math.pow(2, 32) - 1;
function assertOffset(t, e) {
  if (typeof t != "number" || t !== t)
    throw new TypeError("offset must be a number");
  if (t > kMaxUint32 || t < 0)
    throw new TypeError("offset must be a uint32");
  if (t > kBufferMaxLength || t > e)
    throw new RangeError("offset out of range");
}
function assertSize(t, e, n) {
  if (typeof t != "number" || t !== t)
    throw new TypeError("size must be a number");
  if (t > kMaxUint32 || t < 0)
    throw new TypeError("size must be a uint32");
  if (t + e > n || t > kBufferMaxLength)
    throw new RangeError("buffer too small");
}
crypto$5 && crypto$5.getRandomValues || !process$1.browser ? (browser$3.randomFill = randomFill, browser$3.randomFillSync = randomFillSync) : (browser$3.randomFill = oldBrowser, browser$3.randomFillSync = oldBrowser);
function randomFill(t, e, n, a) {
  if (!Buffer.isBuffer(t) && !(t instanceof commonjsGlobal.Uint8Array))
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
  if (typeof e == "function")
    a = e, e = 0, n = t.length;
  else if (typeof n == "function")
    a = n, n = t.length - e;
  else if (typeof a != "function")
    throw new TypeError('"cb" argument must be a function');
  return assertOffset(e, t.length), assertSize(n, e, t.length), actualFill(t, e, n, a);
}
function actualFill(t, e, n, a) {
  if (process$1.browser) {
    var c = t.buffer, o = new Uint8Array(c, e, n);
    if (crypto$5.getRandomValues(o), a) {
      process$1.nextTick(function() {
        a(null, t);
      });
      return;
    }
    return t;
  }
  if (a) {
    randombytes(n, function(m, w) {
      if (m)
        return a(m);
      w.copy(t, e), a(null, t);
    });
    return;
  }
  var d = randombytes(n);
  return d.copy(t, e), t;
}
function randomFillSync(t, e, n) {
  if (typeof e > "u" && (e = 0), !Buffer.isBuffer(t) && !(t instanceof commonjsGlobal.Uint8Array))
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
  return assertOffset(e, t.length), n === void 0 && (n = t.length - e), assertSize(n, e, t.length), actualFill(t, e, n);
}
var hasRequiredCryptoBrowserify;
function requireCryptoBrowserify() {
  if (hasRequiredCryptoBrowserify)
    return cryptoBrowserify;
  hasRequiredCryptoBrowserify = 1, cryptoBrowserify.randomBytes = cryptoBrowserify.rng = cryptoBrowserify.pseudoRandomBytes = cryptoBrowserify.prng = browserExports, cryptoBrowserify.createHash = cryptoBrowserify.Hash = browser$c, cryptoBrowserify.createHmac = cryptoBrowserify.Hmac = browser$b;
  var t = algos, e = Object.keys(t), n = ["sha1", "sha224", "sha256", "sha384", "sha512", "md5", "rmd160"].concat(e);
  cryptoBrowserify.getHashes = function() {
    return n;
  };
  var a = browser$a;
  cryptoBrowserify.pbkdf2 = a.pbkdf2, cryptoBrowserify.pbkdf2Sync = a.pbkdf2Sync;
  var c = browser$9;
  cryptoBrowserify.Cipher = c.Cipher, cryptoBrowserify.createCipher = c.createCipher, cryptoBrowserify.Cipheriv = c.Cipheriv, cryptoBrowserify.createCipheriv = c.createCipheriv, cryptoBrowserify.Decipher = c.Decipher, cryptoBrowserify.createDecipher = c.createDecipher, cryptoBrowserify.Decipheriv = c.Decipheriv, cryptoBrowserify.createDecipheriv = c.createDecipheriv, cryptoBrowserify.getCiphers = c.getCiphers, cryptoBrowserify.listCiphers = c.listCiphers;
  var o = requireBrowser$2();
  cryptoBrowserify.DiffieHellmanGroup = o.DiffieHellmanGroup, cryptoBrowserify.createDiffieHellmanGroup = o.createDiffieHellmanGroup, cryptoBrowserify.getDiffieHellman = o.getDiffieHellman, cryptoBrowserify.createDiffieHellman = o.createDiffieHellman, cryptoBrowserify.DiffieHellman = o.DiffieHellman;
  var d = requireBrowser$1();
  cryptoBrowserify.createSign = d.createSign, cryptoBrowserify.Sign = d.Sign, cryptoBrowserify.createVerify = d.createVerify, cryptoBrowserify.Verify = d.Verify, cryptoBrowserify.createECDH = requireBrowser();
  var m = browser$4;
  cryptoBrowserify.publicEncrypt = m.publicEncrypt, cryptoBrowserify.privateEncrypt = m.privateEncrypt, cryptoBrowserify.publicDecrypt = m.publicDecrypt, cryptoBrowserify.privateDecrypt = m.privateDecrypt;
  var w = browser$3;
  return cryptoBrowserify.randomFill = w.randomFill, cryptoBrowserify.randomFillSync = w.randomFillSync, cryptoBrowserify.createCredentials = function() {
    throw new Error([
      "sorry, createCredentials is not implemented yet",
      "we accept pull requests",
      "https://github.com/crypto-browserify/crypto-browserify"
    ].join(`
`));
  }, cryptoBrowserify.constants = {
    DH_CHECK_P_NOT_SAFE_PRIME: 2,
    DH_CHECK_P_NOT_PRIME: 1,
    DH_UNABLE_TO_CHECK_GENERATOR: 4,
    DH_NOT_SUITABLE_GENERATOR: 8,
    NPN_ENABLED: 1,
    ALPN_ENABLED: 1,
    RSA_PKCS1_PADDING: 1,
    RSA_SSLV23_PADDING: 2,
    RSA_NO_PADDING: 3,
    RSA_PKCS1_OAEP_PADDING: 4,
    RSA_X931_PADDING: 5,
    RSA_PKCS1_PSS_PADDING: 6,
    POINT_CONVERSION_COMPRESSED: 2,
    POINT_CONVERSION_UNCOMPRESSED: 4,
    POINT_CONVERSION_HYBRID: 6
  }, cryptoBrowserify;
}
var cryptoBrowserifyExports = requireCryptoBrowserify();
const crypto$4 = /* @__PURE__ */ getDefaultExportFromCjs$2(cryptoBrowserifyExports), nodeCrypto = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: crypto$4
}, [cryptoBrowserifyExports]);
function buildIrysTransaction(t) {
  class e extends t.arbundles.DataItem {
    Irys;
    signer;
    constructor(a, c, o) {
      super(o?.dataIsRawTransaction === !0 ? Buffer$F.from(a) : c.arbundles.createData(a, c.tokenConfig.getSigner(), {
        ...o,
        anchor: o?.anchor ?? crypto$4.randomBytes(32).toString("base64").slice(0, 32)
      }).getRaw()), this.Irys = c, this.signer = c.tokenConfig.getSigner();
    }
    sign() {
      return super.sign(this.signer);
    }
    get size() {
      return this.getRaw().length;
    }
    /**
     * @deprecated use upload
     */
    async uploadWithReceipt(a) {
      return (await this.Irys.uploader.uploadTransaction(this, a)).data;
    }
    async upload(a) {
      return (await this.Irys.uploader.uploadTransaction(this, a)).data;
    }
    // static fromRaw(rawTransaction: Buffer, IrysInstance: Irys): IrysTransaction {
    //   return new IrysTransaction(rawTransaction, IrysInstance, { dataIsRawTransaction: true });
    // }
    async getPrice() {
      return this.Irys.utils.getPrice(this.Irys.tokenConfig.name, this.size);
    }
    async isValid() {
      return t.arbundles.DataItem.verify(this.getRaw());
    }
  }
  return e;
}
var base64url$3 = { exports: {} }, base64url$2 = {}, padString$1 = {};
Object.defineProperty(padString$1, "__esModule", { value: !0 });
function padString(t) {
  var e = 4, n = t.length, a = n % e;
  if (!a)
    return t;
  var c = n, o = e - a, d = n + o, m = Buffer$F.alloc(d);
  for (m.write(t); o--; )
    m.write("=", c++);
  return m.toString();
}
padString$1.default = padString;
Object.defineProperty(base64url$2, "__esModule", { value: !0 });
var pad_string_1 = padString$1;
function encode$2(t, e) {
  return e === void 0 && (e = "utf8"), Buffer$F.isBuffer(t) ? fromBase64(t.toString("base64")) : fromBase64(Buffer$F.from(t, e).toString("base64"));
}
function decode(t, e) {
  return e === void 0 && (e = "utf8"), Buffer$F.from(toBase64(t), "base64").toString(e);
}
function toBase64(t) {
  return t = t.toString(), pad_string_1.default(t).replace(/\-/g, "+").replace(/_/g, "/");
}
function fromBase64(t) {
  return t.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
}
function toBuffer$2(t) {
  return Buffer$F.from(toBase64(t), "base64");
}
var base64url$1 = encode$2;
base64url$1.encode = encode$2;
base64url$1.decode = decode;
base64url$1.toBase64 = toBase64;
base64url$1.fromBase64 = fromBase64;
base64url$1.toBuffer = toBuffer$2;
base64url$2.default = base64url$1;
(function(t) {
  t.exports = base64url$2.default, t.exports.default = t.exports;
})(base64url$3);
var base64urlExports = base64url$3.exports;
const base64url = /* @__PURE__ */ getDefaultExportFromCjs$2(base64urlExports);
var isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = "[BigNumber Error] ", tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ", BASE = 1e14, LOG_BASE = 14, MAX_SAFE_INTEGER$1 = 9007199254740991, POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], SQRT_BASE = 1e7, MAX = 1e9;
function clone(t) {
  var e, n, a, c = q.prototype = { constructor: q, toString: null, valueOf: null }, o = new q(1), d = 20, m = 4, w = -7, S = 21, A = -1e7, B = 1e7, P = !1, I = 1, O = 0, L = {
    prefix: "",
    groupSize: 3,
    secondaryGroupSize: 0,
    groupSeparator: ",",
    decimalSeparator: ".",
    fractionGroupSize: 0,
    fractionGroupSeparator: " ",
    // non-breaking space
    suffix: ""
  }, C = "0123456789abcdefghijklmnopqrstuvwxyz", z = !0;
  function q(j, V) {
    var ae, _, u, h, p, y, v, $, E = this;
    if (!(E instanceof q))
      return new q(j, V);
    if (V == null) {
      if (j && j._isBigNumber === !0) {
        E.s = j.s, !j.c || j.e > B ? E.c = E.e = null : j.e < A ? E.c = [E.e = 0] : (E.e = j.e, E.c = j.c.slice());
        return;
      }
      if ((y = typeof j == "number") && j * 0 == 0) {
        if (E.s = 1 / j < 0 ? (j = -j, -1) : 1, j === ~~j) {
          for (h = 0, p = j; p >= 10; p /= 10, h++)
            ;
          h > B ? E.c = E.e = null : (E.e = h, E.c = [j]);
          return;
        }
        $ = String(j);
      } else {
        if (!isNumeric.test($ = String(j)))
          return a(E, $, y);
        E.s = $.charCodeAt(0) == 45 ? ($ = $.slice(1), -1) : 1;
      }
      (h = $.indexOf(".")) > -1 && ($ = $.replace(".", "")), (p = $.search(/e/i)) > 0 ? (h < 0 && (h = p), h += +$.slice(p + 1), $ = $.substring(0, p)) : h < 0 && (h = $.length);
    } else {
      if (intCheck(V, 2, C.length, "Base"), V == 10 && z)
        return E = new q(j), fe(E, d + E.e + 1, m);
      if ($ = String(j), y = typeof j == "number") {
        if (j * 0 != 0)
          return a(E, $, y, V);
        if (E.s = 1 / j < 0 ? ($ = $.slice(1), -1) : 1, q.DEBUG && $.replace(/^0\.0*|\./, "").length > 15)
          throw Error(tooManyDigits + j);
      } else
        E.s = $.charCodeAt(0) === 45 ? ($ = $.slice(1), -1) : 1;
      for (ae = C.slice(0, V), h = p = 0, v = $.length; p < v; p++)
        if (ae.indexOf(_ = $.charAt(p)) < 0) {
          if (_ == ".") {
            if (p > h) {
              h = v;
              continue;
            }
          } else if (!u && ($ == $.toUpperCase() && ($ = $.toLowerCase()) || $ == $.toLowerCase() && ($ = $.toUpperCase()))) {
            u = !0, p = -1, h = 0;
            continue;
          }
          return a(E, String(j), y, V);
        }
      y = !1, $ = n($, V, 10, E.s), (h = $.indexOf(".")) > -1 ? $ = $.replace(".", "") : h = $.length;
    }
    for (p = 0; $.charCodeAt(p) === 48; p++)
      ;
    for (v = $.length; $.charCodeAt(--v) === 48; )
      ;
    if ($ = $.slice(p, ++v)) {
      if (v -= p, y && q.DEBUG && v > 15 && (j > MAX_SAFE_INTEGER$1 || j !== mathfloor(j)))
        throw Error(tooManyDigits + E.s * j);
      if ((h = h - p - 1) > B)
        E.c = E.e = null;
      else if (h < A)
        E.c = [E.e = 0];
      else {
        if (E.e = h, E.c = [], p = (h + 1) % LOG_BASE, h < 0 && (p += LOG_BASE), p < v) {
          for (p && E.c.push(+$.slice(0, p)), v -= LOG_BASE; p < v; )
            E.c.push(+$.slice(p, p += LOG_BASE));
          p = LOG_BASE - ($ = $.slice(p)).length;
        } else
          p -= v;
        for (; p--; $ += "0")
          ;
        E.c.push(+$);
      }
    } else
      E.c = [E.e = 0];
  }
  q.clone = clone, q.ROUND_UP = 0, q.ROUND_DOWN = 1, q.ROUND_CEIL = 2, q.ROUND_FLOOR = 3, q.ROUND_HALF_UP = 4, q.ROUND_HALF_DOWN = 5, q.ROUND_HALF_EVEN = 6, q.ROUND_HALF_CEIL = 7, q.ROUND_HALF_FLOOR = 8, q.EUCLID = 9, q.config = q.set = function(j) {
    var V, ae;
    if (j != null)
      if (typeof j == "object") {
        if (j.hasOwnProperty(V = "DECIMAL_PLACES") && (ae = j[V], intCheck(ae, 0, MAX, V), d = ae), j.hasOwnProperty(V = "ROUNDING_MODE") && (ae = j[V], intCheck(ae, 0, 8, V), m = ae), j.hasOwnProperty(V = "EXPONENTIAL_AT") && (ae = j[V], ae && ae.pop ? (intCheck(ae[0], -MAX, 0, V), intCheck(ae[1], 0, MAX, V), w = ae[0], S = ae[1]) : (intCheck(ae, -MAX, MAX, V), w = -(S = ae < 0 ? -ae : ae))), j.hasOwnProperty(V = "RANGE"))
          if (ae = j[V], ae && ae.pop)
            intCheck(ae[0], -MAX, -1, V), intCheck(ae[1], 1, MAX, V), A = ae[0], B = ae[1];
          else if (intCheck(ae, -MAX, MAX, V), ae)
            A = -(B = ae < 0 ? -ae : ae);
          else
            throw Error(bignumberError + V + " cannot be zero: " + ae);
        if (j.hasOwnProperty(V = "CRYPTO"))
          if (ae = j[V], ae === !!ae)
            if (ae)
              if (typeof crypto < "u" && crypto && (crypto.getRandomValues || crypto.randomBytes))
                P = ae;
              else
                throw P = !ae, Error(bignumberError + "crypto unavailable");
            else
              P = ae;
          else
            throw Error(bignumberError + V + " not true or false: " + ae);
        if (j.hasOwnProperty(V = "MODULO_MODE") && (ae = j[V], intCheck(ae, 0, 9, V), I = ae), j.hasOwnProperty(V = "POW_PRECISION") && (ae = j[V], intCheck(ae, 0, MAX, V), O = ae), j.hasOwnProperty(V = "FORMAT"))
          if (ae = j[V], typeof ae == "object")
            L = ae;
          else
            throw Error(bignumberError + V + " not an object: " + ae);
        if (j.hasOwnProperty(V = "ALPHABET"))
          if (ae = j[V], typeof ae == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(ae))
            z = ae.slice(0, 10) == "0123456789", C = ae;
          else
            throw Error(bignumberError + V + " invalid: " + ae);
      } else
        throw Error(bignumberError + "Object expected: " + j);
    return {
      DECIMAL_PLACES: d,
      ROUNDING_MODE: m,
      EXPONENTIAL_AT: [w, S],
      RANGE: [A, B],
      CRYPTO: P,
      MODULO_MODE: I,
      POW_PRECISION: O,
      FORMAT: L,
      ALPHABET: C
    };
  }, q.isBigNumber = function(j) {
    if (!j || j._isBigNumber !== !0)
      return !1;
    if (!q.DEBUG)
      return !0;
    var V, ae, _ = j.c, u = j.e, h = j.s;
    e:
      if ({}.toString.call(_) == "[object Array]") {
        if ((h === 1 || h === -1) && u >= -MAX && u <= MAX && u === mathfloor(u)) {
          if (_[0] === 0) {
            if (u === 0 && _.length === 1)
              return !0;
            break e;
          }
          if (V = (u + 1) % LOG_BASE, V < 1 && (V += LOG_BASE), String(_[0]).length == V) {
            for (V = 0; V < _.length; V++)
              if (ae = _[V], ae < 0 || ae >= BASE || ae !== mathfloor(ae))
                break e;
            if (ae !== 0)
              return !0;
          }
        }
      } else if (_ === null && u === null && (h === null || h === 1 || h === -1))
        return !0;
    throw Error(bignumberError + "Invalid BigNumber: " + j);
  }, q.maximum = q.max = function() {
    return X(arguments, -1);
  }, q.minimum = q.min = function() {
    return X(arguments, 1);
  }, q.random = function() {
    var j = 9007199254740992, V = Math.random() * j & 2097151 ? function() {
      return mathfloor(Math.random() * j);
    } : function() {
      return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
    };
    return function(ae) {
      var _, u, h, p, y, v = 0, $ = [], E = new q(o);
      if (ae == null ? ae = d : intCheck(ae, 0, MAX), p = mathceil(ae / LOG_BASE), P)
        if (crypto.getRandomValues) {
          for (_ = crypto.getRandomValues(new Uint32Array(p *= 2)); v < p; )
            y = _[v] * 131072 + (_[v + 1] >>> 11), y >= 9e15 ? (u = crypto.getRandomValues(new Uint32Array(2)), _[v] = u[0], _[v + 1] = u[1]) : ($.push(y % 1e14), v += 2);
          v = p / 2;
        } else if (crypto.randomBytes) {
          for (_ = crypto.randomBytes(p *= 7); v < p; )
            y = (_[v] & 31) * 281474976710656 + _[v + 1] * 1099511627776 + _[v + 2] * 4294967296 + _[v + 3] * 16777216 + (_[v + 4] << 16) + (_[v + 5] << 8) + _[v + 6], y >= 9e15 ? crypto.randomBytes(7).copy(_, v) : ($.push(y % 1e14), v += 7);
          v = p / 7;
        } else
          throw P = !1, Error(bignumberError + "crypto unavailable");
      if (!P)
        for (; v < p; )
          y = V(), y < 9e15 && ($[v++] = y % 1e14);
      for (p = $[--v], ae %= LOG_BASE, p && ae && (y = POWS_TEN[LOG_BASE - ae], $[v] = mathfloor(p / y) * y); $[v] === 0; $.pop(), v--)
        ;
      if (v < 0)
        $ = [h = 0];
      else {
        for (h = -1; $[0] === 0; $.splice(0, 1), h -= LOG_BASE)
          ;
        for (v = 1, y = $[0]; y >= 10; y /= 10, v++)
          ;
        v < LOG_BASE && (h -= LOG_BASE - v);
      }
      return E.e = h, E.c = $, E;
    };
  }(), q.sum = function() {
    for (var j = 1, V = arguments, ae = new q(V[0]); j < V.length; )
      ae = ae.plus(V[j++]);
    return ae;
  }, n = /* @__PURE__ */ function() {
    var j = "0123456789";
    function V(ae, _, u, h) {
      for (var p, y = [0], v, $ = 0, E = ae.length; $ < E; ) {
        for (v = y.length; v--; y[v] *= _)
          ;
        for (y[0] += h.indexOf(ae.charAt($++)), p = 0; p < y.length; p++)
          y[p] > u - 1 && (y[p + 1] == null && (y[p + 1] = 0), y[p + 1] += y[p] / u | 0, y[p] %= u);
      }
      return y.reverse();
    }
    return function(ae, _, u, h, p) {
      var y, v, $, E, x, l, b, M, k = ae.indexOf("."), U = d, T = m;
      for (k >= 0 && (E = O, O = 0, ae = ae.replace(".", ""), M = new q(_), l = M.pow(ae.length - k), O = E, M.c = V(
        toFixedPoint(coeffToString(l.c), l.e, "0"),
        10,
        u,
        j
      ), M.e = M.c.length), b = V(ae, _, u, p ? (y = C, j) : (y = j, C)), $ = E = b.length; b[--E] == 0; b.pop())
        ;
      if (!b[0])
        return y.charAt(0);
      if (k < 0 ? --$ : (l.c = b, l.e = $, l.s = h, l = e(l, M, U, T, u), b = l.c, x = l.r, $ = l.e), v = $ + U + 1, k = b[v], E = u / 2, x = x || v < 0 || b[v + 1] != null, x = T < 4 ? (k != null || x) && (T == 0 || T == (l.s < 0 ? 3 : 2)) : k > E || k == E && (T == 4 || x || T == 6 && b[v - 1] & 1 || T == (l.s < 0 ? 8 : 7)), v < 1 || !b[0])
        ae = x ? toFixedPoint(y.charAt(1), -U, y.charAt(0)) : y.charAt(0);
      else {
        if (b.length = v, x)
          for (--u; ++b[--v] > u; )
            b[v] = 0, v || (++$, b = [1].concat(b));
        for (E = b.length; !b[--E]; )
          ;
        for (k = 0, ae = ""; k <= E; ae += y.charAt(b[k++]))
          ;
        ae = toFixedPoint(ae, $, y.charAt(0));
      }
      return ae;
    };
  }(), e = /* @__PURE__ */ function() {
    function j(_, u, h) {
      var p, y, v, $, E = 0, x = _.length, l = u % SQRT_BASE, b = u / SQRT_BASE | 0;
      for (_ = _.slice(); x--; )
        v = _[x] % SQRT_BASE, $ = _[x] / SQRT_BASE | 0, p = b * v + $ * l, y = l * v + p % SQRT_BASE * SQRT_BASE + E, E = (y / h | 0) + (p / SQRT_BASE | 0) + b * $, _[x] = y % h;
      return E && (_ = [E].concat(_)), _;
    }
    function V(_, u, h, p) {
      var y, v;
      if (h != p)
        v = h > p ? 1 : -1;
      else
        for (y = v = 0; y < h; y++)
          if (_[y] != u[y]) {
            v = _[y] > u[y] ? 1 : -1;
            break;
          }
      return v;
    }
    function ae(_, u, h, p) {
      for (var y = 0; h--; )
        _[h] -= y, y = _[h] < u[h] ? 1 : 0, _[h] = y * p + _[h] - u[h];
      for (; !_[0] && _.length > 1; _.splice(0, 1))
        ;
    }
    return function(_, u, h, p, y) {
      var v, $, E, x, l, b, M, k, U, T, H, Y, le, ce, de, ue, re, ge = _.s == u.s ? 1 : -1, Ae = _.c, xe = u.c;
      if (!Ae || !Ae[0] || !xe || !xe[0])
        return new q(
          // Return NaN if either NaN, or both Infinity or 0.
          !_.s || !u.s || (Ae ? xe && Ae[0] == xe[0] : !xe) ? NaN : (
            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
            Ae && Ae[0] == 0 || !xe ? ge * 0 : ge / 0
          )
        );
      for (k = new q(ge), U = k.c = [], $ = _.e - u.e, ge = h + $ + 1, y || (y = BASE, $ = bitFloor(_.e / LOG_BASE) - bitFloor(u.e / LOG_BASE), ge = ge / LOG_BASE | 0), E = 0; xe[E] == (Ae[E] || 0); E++)
        ;
      if (xe[E] > (Ae[E] || 0) && $--, ge < 0)
        U.push(1), x = !0;
      else {
        for (ce = Ae.length, ue = xe.length, E = 0, ge += 2, l = mathfloor(y / (xe[0] + 1)), l > 1 && (xe = j(xe, l, y), Ae = j(Ae, l, y), ue = xe.length, ce = Ae.length), le = ue, T = Ae.slice(0, ue), H = T.length; H < ue; T[H++] = 0)
          ;
        re = xe.slice(), re = [0].concat(re), de = xe[0], xe[1] >= y / 2 && de++;
        do {
          if (l = 0, v = V(xe, T, ue, H), v < 0) {
            if (Y = T[0], ue != H && (Y = Y * y + (T[1] || 0)), l = mathfloor(Y / de), l > 1)
              for (l >= y && (l = y - 1), b = j(xe, l, y), M = b.length, H = T.length; V(b, T, M, H) == 1; )
                l--, ae(b, ue < M ? re : xe, M, y), M = b.length, v = 1;
            else
              l == 0 && (v = l = 1), b = xe.slice(), M = b.length;
            if (M < H && (b = [0].concat(b)), ae(T, b, H, y), H = T.length, v == -1)
              for (; V(xe, T, ue, H) < 1; )
                l++, ae(T, ue < H ? re : xe, H, y), H = T.length;
          } else
            v === 0 && (l++, T = [0]);
          U[E++] = l, T[0] ? T[H++] = Ae[le] || 0 : (T = [Ae[le]], H = 1);
        } while ((le++ < ce || T[0] != null) && ge--);
        x = T[0] != null, U[0] || U.splice(0, 1);
      }
      if (y == BASE) {
        for (E = 1, ge = U[0]; ge >= 10; ge /= 10, E++)
          ;
        fe(k, h + (k.e = E + $ * LOG_BASE - 1) + 1, p, x);
      } else
        k.e = $, k.r = +x;
      return k;
    };
  }();
  function Z(j, V, ae, _) {
    var u, h, p, y, v;
    if (ae == null ? ae = m : intCheck(ae, 0, 8), !j.c)
      return j.toString();
    if (u = j.c[0], p = j.e, V == null)
      v = coeffToString(j.c), v = _ == 1 || _ == 2 && (p <= w || p >= S) ? toExponential(v, p) : toFixedPoint(v, p, "0");
    else if (j = fe(new q(j), V, ae), h = j.e, v = coeffToString(j.c), y = v.length, _ == 1 || _ == 2 && (V <= h || h <= w)) {
      for (; y < V; v += "0", y++)
        ;
      v = toExponential(v, h);
    } else if (V -= p, v = toFixedPoint(v, h, "0"), h + 1 > y) {
      if (--V > 0)
        for (v += "."; V--; v += "0")
          ;
    } else if (V += h - y, V > 0)
      for (h + 1 == y && (v += "."); V--; v += "0")
        ;
    return j.s < 0 && u ? "-" + v : v;
  }
  function X(j, V) {
    for (var ae, _, u = 1, h = new q(j[0]); u < j.length; u++)
      _ = new q(j[u]), (!_.s || (ae = compare(h, _)) === V || ae === 0 && h.s === V) && (h = _);
    return h;
  }
  function ie(j, V, ae) {
    for (var _ = 1, u = V.length; !V[--u]; V.pop())
      ;
    for (u = V[0]; u >= 10; u /= 10, _++)
      ;
    return (ae = _ + ae * LOG_BASE - 1) > B ? j.c = j.e = null : ae < A ? j.c = [j.e = 0] : (j.e = ae, j.c = V), j;
  }
  a = /* @__PURE__ */ function() {
    var j = /^(-?)0([xbo])(?=\w[\w.]*$)/i, V = /^([^.]+)\.$/, ae = /^\.([^.]+)$/, _ = /^-?(Infinity|NaN)$/, u = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
    return function(h, p, y, v) {
      var $, E = y ? p : p.replace(u, "");
      if (_.test(E))
        h.s = isNaN(E) ? null : E < 0 ? -1 : 1;
      else {
        if (!y && (E = E.replace(j, function(x, l, b) {
          return $ = (b = b.toLowerCase()) == "x" ? 16 : b == "b" ? 2 : 8, !v || v == $ ? l : x;
        }), v && ($ = v, E = E.replace(V, "$1").replace(ae, "0.$1")), p != E))
          return new q(E, $);
        if (q.DEBUG)
          throw Error(bignumberError + "Not a" + (v ? " base " + v : "") + " number: " + p);
        h.s = null;
      }
      h.c = h.e = null;
    };
  }();
  function fe(j, V, ae, _) {
    var u, h, p, y, v, $, E, x = j.c, l = POWS_TEN;
    if (x) {
      e: {
        for (u = 1, y = x[0]; y >= 10; y /= 10, u++)
          ;
        if (h = V - u, h < 0)
          h += LOG_BASE, p = V, v = x[$ = 0], E = mathfloor(v / l[u - p - 1] % 10);
        else if ($ = mathceil((h + 1) / LOG_BASE), $ >= x.length)
          if (_) {
            for (; x.length <= $; x.push(0))
              ;
            v = E = 0, u = 1, h %= LOG_BASE, p = h - LOG_BASE + 1;
          } else
            break e;
        else {
          for (v = y = x[$], u = 1; y >= 10; y /= 10, u++)
            ;
          h %= LOG_BASE, p = h - LOG_BASE + u, E = p < 0 ? 0 : mathfloor(v / l[u - p - 1] % 10);
        }
        if (_ = _ || V < 0 || // Are there any non-zero digits after the rounding digit?
        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
        x[$ + 1] != null || (p < 0 ? v : v % l[u - p - 1]), _ = ae < 4 ? (E || _) && (ae == 0 || ae == (j.s < 0 ? 3 : 2)) : E > 5 || E == 5 && (ae == 4 || _ || ae == 6 && // Check whether the digit to the left of the rounding digit is odd.
        (h > 0 ? p > 0 ? v / l[u - p] : 0 : x[$ - 1]) % 10 & 1 || ae == (j.s < 0 ? 8 : 7)), V < 1 || !x[0])
          return x.length = 0, _ ? (V -= j.e + 1, x[0] = l[(LOG_BASE - V % LOG_BASE) % LOG_BASE], j.e = -V || 0) : x[0] = j.e = 0, j;
        if (h == 0 ? (x.length = $, y = 1, $--) : (x.length = $ + 1, y = l[LOG_BASE - h], x[$] = p > 0 ? mathfloor(v / l[u - p] % l[p]) * y : 0), _)
          for (; ; )
            if ($ == 0) {
              for (h = 1, p = x[0]; p >= 10; p /= 10, h++)
                ;
              for (p = x[0] += y, y = 1; p >= 10; p /= 10, y++)
                ;
              h != y && (j.e++, x[0] == BASE && (x[0] = 1));
              break;
            } else {
              if (x[$] += y, x[$] != BASE)
                break;
              x[$--] = 0, y = 1;
            }
        for (h = x.length; x[--h] === 0; x.pop())
          ;
      }
      j.e > B ? j.c = j.e = null : j.e < A && (j.c = [j.e = 0]);
    }
    return j;
  }
  function ye(j) {
    var V, ae = j.e;
    return ae === null ? j.toString() : (V = coeffToString(j.c), V = ae <= w || ae >= S ? toExponential(V, ae) : toFixedPoint(V, ae, "0"), j.s < 0 ? "-" + V : V);
  }
  return c.absoluteValue = c.abs = function() {
    var j = new q(this);
    return j.s < 0 && (j.s = 1), j;
  }, c.comparedTo = function(j, V) {
    return compare(this, new q(j, V));
  }, c.decimalPlaces = c.dp = function(j, V) {
    var ae, _, u, h = this;
    if (j != null)
      return intCheck(j, 0, MAX), V == null ? V = m : intCheck(V, 0, 8), fe(new q(h), j + h.e + 1, V);
    if (!(ae = h.c))
      return null;
    if (_ = ((u = ae.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE, u = ae[u])
      for (; u % 10 == 0; u /= 10, _--)
        ;
    return _ < 0 && (_ = 0), _;
  }, c.dividedBy = c.div = function(j, V) {
    return e(this, new q(j, V), d, m);
  }, c.dividedToIntegerBy = c.idiv = function(j, V) {
    return e(this, new q(j, V), 0, 1);
  }, c.exponentiatedBy = c.pow = function(j, V) {
    var ae, _, u, h, p, y, v, $, E, x = this;
    if (j = new q(j), j.c && !j.isInteger())
      throw Error(bignumberError + "Exponent not an integer: " + ye(j));
    if (V != null && (V = new q(V)), y = j.e > 14, !x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !j.c || !j.c[0])
      return E = new q(Math.pow(+ye(x), y ? j.s * (2 - isOdd(j)) : +ye(j))), V ? E.mod(V) : E;
    if (v = j.s < 0, V) {
      if (V.c ? !V.c[0] : !V.s)
        return new q(NaN);
      _ = !v && x.isInteger() && V.isInteger(), _ && (x = x.mod(V));
    } else {
      if (j.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || y && x.c[1] >= 24e7 : x.c[0] < 8e13 || y && x.c[0] <= 9999975e7)))
        return h = x.s < 0 && isOdd(j) ? -0 : 0, x.e > -1 && (h = 1 / h), new q(v ? 1 / h : h);
      O && (h = mathceil(O / LOG_BASE + 2));
    }
    for (y ? (ae = new q(0.5), v && (j.s = 1), $ = isOdd(j)) : (u = Math.abs(+ye(j)), $ = u % 2), E = new q(o); ; ) {
      if ($) {
        if (E = E.times(x), !E.c)
          break;
        h ? E.c.length > h && (E.c.length = h) : _ && (E = E.mod(V));
      }
      if (u) {
        if (u = mathfloor(u / 2), u === 0)
          break;
        $ = u % 2;
      } else if (j = j.times(ae), fe(j, j.e + 1, 1), j.e > 14)
        $ = isOdd(j);
      else {
        if (u = +ye(j), u === 0)
          break;
        $ = u % 2;
      }
      x = x.times(x), h ? x.c && x.c.length > h && (x.c.length = h) : _ && (x = x.mod(V));
    }
    return _ ? E : (v && (E = o.div(E)), V ? E.mod(V) : h ? fe(E, O, m, p) : E);
  }, c.integerValue = function(j) {
    var V = new q(this);
    return j == null ? j = m : intCheck(j, 0, 8), fe(V, V.e + 1, j);
  }, c.isEqualTo = c.eq = function(j, V) {
    return compare(this, new q(j, V)) === 0;
  }, c.isFinite = function() {
    return !!this.c;
  }, c.isGreaterThan = c.gt = function(j, V) {
    return compare(this, new q(j, V)) > 0;
  }, c.isGreaterThanOrEqualTo = c.gte = function(j, V) {
    return (V = compare(this, new q(j, V))) === 1 || V === 0;
  }, c.isInteger = function() {
    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
  }, c.isLessThan = c.lt = function(j, V) {
    return compare(this, new q(j, V)) < 0;
  }, c.isLessThanOrEqualTo = c.lte = function(j, V) {
    return (V = compare(this, new q(j, V))) === -1 || V === 0;
  }, c.isNaN = function() {
    return !this.s;
  }, c.isNegative = function() {
    return this.s < 0;
  }, c.isPositive = function() {
    return this.s > 0;
  }, c.isZero = function() {
    return !!this.c && this.c[0] == 0;
  }, c.minus = function(j, V) {
    var ae, _, u, h, p = this, y = p.s;
    if (j = new q(j, V), V = j.s, !y || !V)
      return new q(NaN);
    if (y != V)
      return j.s = -V, p.plus(j);
    var v = p.e / LOG_BASE, $ = j.e / LOG_BASE, E = p.c, x = j.c;
    if (!v || !$) {
      if (!E || !x)
        return E ? (j.s = -V, j) : new q(x ? p : NaN);
      if (!E[0] || !x[0])
        return x[0] ? (j.s = -V, j) : new q(E[0] ? p : (
          // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
          m == 3 ? -0 : 0
        ));
    }
    if (v = bitFloor(v), $ = bitFloor($), E = E.slice(), y = v - $) {
      for ((h = y < 0) ? (y = -y, u = E) : ($ = v, u = x), u.reverse(), V = y; V--; u.push(0))
        ;
      u.reverse();
    } else
      for (_ = (h = (y = E.length) < (V = x.length)) ? y : V, y = V = 0; V < _; V++)
        if (E[V] != x[V]) {
          h = E[V] < x[V];
          break;
        }
    if (h && (u = E, E = x, x = u, j.s = -j.s), V = (_ = x.length) - (ae = E.length), V > 0)
      for (; V--; E[ae++] = 0)
        ;
    for (V = BASE - 1; _ > y; ) {
      if (E[--_] < x[_]) {
        for (ae = _; ae && !E[--ae]; E[ae] = V)
          ;
        --E[ae], E[_] += BASE;
      }
      E[_] -= x[_];
    }
    for (; E[0] == 0; E.splice(0, 1), --$)
      ;
    return E[0] ? ie(j, E, $) : (j.s = m == 3 ? -1 : 1, j.c = [j.e = 0], j);
  }, c.modulo = c.mod = function(j, V) {
    var ae, _, u = this;
    return j = new q(j, V), !u.c || !j.s || j.c && !j.c[0] ? new q(NaN) : !j.c || u.c && !u.c[0] ? new q(u) : (I == 9 ? (_ = j.s, j.s = 1, ae = e(u, j, 0, 3), j.s = _, ae.s *= _) : ae = e(u, j, 0, I), j = u.minus(ae.times(j)), !j.c[0] && I == 1 && (j.s = u.s), j);
  }, c.multipliedBy = c.times = function(j, V) {
    var ae, _, u, h, p, y, v, $, E, x, l, b, M, k, U, T = this, H = T.c, Y = (j = new q(j, V)).c;
    if (!H || !Y || !H[0] || !Y[0])
      return !T.s || !j.s || H && !H[0] && !Y || Y && !Y[0] && !H ? j.c = j.e = j.s = null : (j.s *= T.s, !H || !Y ? j.c = j.e = null : (j.c = [0], j.e = 0)), j;
    for (_ = bitFloor(T.e / LOG_BASE) + bitFloor(j.e / LOG_BASE), j.s *= T.s, v = H.length, x = Y.length, v < x && (M = H, H = Y, Y = M, u = v, v = x, x = u), u = v + x, M = []; u--; M.push(0))
      ;
    for (k = BASE, U = SQRT_BASE, u = x; --u >= 0; ) {
      for (ae = 0, l = Y[u] % U, b = Y[u] / U | 0, p = v, h = u + p; h > u; )
        $ = H[--p] % U, E = H[p] / U | 0, y = b * $ + E * l, $ = l * $ + y % U * U + M[h] + ae, ae = ($ / k | 0) + (y / U | 0) + b * E, M[h--] = $ % k;
      M[h] = ae;
    }
    return ae ? ++_ : M.splice(0, 1), ie(j, M, _);
  }, c.negated = function() {
    var j = new q(this);
    return j.s = -j.s || null, j;
  }, c.plus = function(j, V) {
    var ae, _ = this, u = _.s;
    if (j = new q(j, V), V = j.s, !u || !V)
      return new q(NaN);
    if (u != V)
      return j.s = -V, _.minus(j);
    var h = _.e / LOG_BASE, p = j.e / LOG_BASE, y = _.c, v = j.c;
    if (!h || !p) {
      if (!y || !v)
        return new q(u / 0);
      if (!y[0] || !v[0])
        return v[0] ? j : new q(y[0] ? _ : u * 0);
    }
    if (h = bitFloor(h), p = bitFloor(p), y = y.slice(), u = h - p) {
      for (u > 0 ? (p = h, ae = v) : (u = -u, ae = y), ae.reverse(); u--; ae.push(0))
        ;
      ae.reverse();
    }
    for (u = y.length, V = v.length, u - V < 0 && (ae = v, v = y, y = ae, V = u), u = 0; V; )
      u = (y[--V] = y[V] + v[V] + u) / BASE | 0, y[V] = BASE === y[V] ? 0 : y[V] % BASE;
    return u && (y = [u].concat(y), ++p), ie(j, y, p);
  }, c.precision = c.sd = function(j, V) {
    var ae, _, u, h = this;
    if (j != null && j !== !!j)
      return intCheck(j, 1, MAX), V == null ? V = m : intCheck(V, 0, 8), fe(new q(h), j, V);
    if (!(ae = h.c))
      return null;
    if (u = ae.length - 1, _ = u * LOG_BASE + 1, u = ae[u]) {
      for (; u % 10 == 0; u /= 10, _--)
        ;
      for (u = ae[0]; u >= 10; u /= 10, _++)
        ;
    }
    return j && h.e + 1 > _ && (_ = h.e + 1), _;
  }, c.shiftedBy = function(j) {
    return intCheck(j, -MAX_SAFE_INTEGER$1, MAX_SAFE_INTEGER$1), this.times("1e" + j);
  }, c.squareRoot = c.sqrt = function() {
    var j, V, ae, _, u, h = this, p = h.c, y = h.s, v = h.e, $ = d + 4, E = new q("0.5");
    if (y !== 1 || !p || !p[0])
      return new q(!y || y < 0 && (!p || p[0]) ? NaN : p ? h : 1 / 0);
    if (y = Math.sqrt(+ye(h)), y == 0 || y == 1 / 0 ? (V = coeffToString(p), (V.length + v) % 2 == 0 && (V += "0"), y = Math.sqrt(+V), v = bitFloor((v + 1) / 2) - (v < 0 || v % 2), y == 1 / 0 ? V = "5e" + v : (V = y.toExponential(), V = V.slice(0, V.indexOf("e") + 1) + v), ae = new q(V)) : ae = new q(y + ""), ae.c[0]) {
      for (v = ae.e, y = v + $, y < 3 && (y = 0); ; )
        if (u = ae, ae = E.times(u.plus(e(h, u, $, 1))), coeffToString(u.c).slice(0, y) === (V = coeffToString(ae.c)).slice(0, y))
          if (ae.e < v && --y, V = V.slice(y - 3, y + 1), V == "9999" || !_ && V == "4999") {
            if (!_ && (fe(u, u.e + d + 2, 0), u.times(u).eq(h))) {
              ae = u;
              break;
            }
            $ += 4, y += 4, _ = 1;
          } else {
            (!+V || !+V.slice(1) && V.charAt(0) == "5") && (fe(ae, ae.e + d + 2, 1), j = !ae.times(ae).eq(h));
            break;
          }
    }
    return fe(ae, ae.e + d + 1, m, j);
  }, c.toExponential = function(j, V) {
    return j != null && (intCheck(j, 0, MAX), j++), Z(this, j, V, 1);
  }, c.toFixed = function(j, V) {
    return j != null && (intCheck(j, 0, MAX), j = j + this.e + 1), Z(this, j, V);
  }, c.toFormat = function(j, V, ae) {
    var _, u = this;
    if (ae == null)
      j != null && V && typeof V == "object" ? (ae = V, V = null) : j && typeof j == "object" ? (ae = j, j = V = null) : ae = L;
    else if (typeof ae != "object")
      throw Error(bignumberError + "Argument not an object: " + ae);
    if (_ = u.toFixed(j, V), u.c) {
      var h, p = _.split("."), y = +ae.groupSize, v = +ae.secondaryGroupSize, $ = ae.groupSeparator || "", E = p[0], x = p[1], l = u.s < 0, b = l ? E.slice(1) : E, M = b.length;
      if (v && (h = y, y = v, v = h, M -= h), y > 0 && M > 0) {
        for (h = M % y || y, E = b.substr(0, h); h < M; h += y)
          E += $ + b.substr(h, y);
        v > 0 && (E += $ + b.slice(h)), l && (E = "-" + E);
      }
      _ = x ? E + (ae.decimalSeparator || "") + ((v = +ae.fractionGroupSize) ? x.replace(
        new RegExp("\\d{" + v + "}\\B", "g"),
        "$&" + (ae.fractionGroupSeparator || "")
      ) : x) : E;
    }
    return (ae.prefix || "") + _ + (ae.suffix || "");
  }, c.toFraction = function(j) {
    var V, ae, _, u, h, p, y, v, $, E, x, l, b = this, M = b.c;
    if (j != null && (y = new q(j), !y.isInteger() && (y.c || y.s !== 1) || y.lt(o)))
      throw Error(bignumberError + "Argument " + (y.isInteger() ? "out of range: " : "not an integer: ") + ye(y));
    if (!M)
      return new q(b);
    for (V = new q(o), $ = ae = new q(o), _ = v = new q(o), l = coeffToString(M), h = V.e = l.length - b.e - 1, V.c[0] = POWS_TEN[(p = h % LOG_BASE) < 0 ? LOG_BASE + p : p], j = !j || y.comparedTo(V) > 0 ? h > 0 ? V : $ : y, p = B, B = 1 / 0, y = new q(l), v.c[0] = 0; E = e(y, V, 0, 1), u = ae.plus(E.times(_)), u.comparedTo(j) != 1; )
      ae = _, _ = u, $ = v.plus(E.times(u = $)), v = u, V = y.minus(E.times(u = V)), y = u;
    return u = e(j.minus(ae), _, 0, 1), v = v.plus(u.times($)), ae = ae.plus(u.times(_)), v.s = $.s = b.s, h = h * 2, x = e($, _, h, m).minus(b).abs().comparedTo(
      e(v, ae, h, m).minus(b).abs()
    ) < 1 ? [$, _] : [v, ae], B = p, x;
  }, c.toNumber = function() {
    return +ye(this);
  }, c.toPrecision = function(j, V) {
    return j != null && intCheck(j, 1, MAX), Z(this, j, V, 2);
  }, c.toString = function(j) {
    var V, ae = this, _ = ae.s, u = ae.e;
    return u === null ? _ ? (V = "Infinity", _ < 0 && (V = "-" + V)) : V = "NaN" : (j == null ? V = u <= w || u >= S ? toExponential(coeffToString(ae.c), u) : toFixedPoint(coeffToString(ae.c), u, "0") : j === 10 && z ? (ae = fe(new q(ae), d + u + 1, m), V = toFixedPoint(coeffToString(ae.c), ae.e, "0")) : (intCheck(j, 2, C.length, "Base"), V = n(toFixedPoint(coeffToString(ae.c), u, "0"), 10, j, _, !0)), _ < 0 && ae.c[0] && (V = "-" + V)), V;
  }, c.valueOf = c.toJSON = function() {
    return ye(this);
  }, c._isBigNumber = !0, c[Symbol.toStringTag] = "BigNumber", c[Symbol.for("nodejs.util.inspect.custom")] = c.valueOf, t != null && q.set(t), q;
}
function bitFloor(t) {
  var e = t | 0;
  return t > 0 || t === e ? e : e - 1;
}
function coeffToString(t) {
  for (var e, n, a = 1, c = t.length, o = t[0] + ""; a < c; ) {
    for (e = t[a++] + "", n = LOG_BASE - e.length; n--; e = "0" + e)
      ;
    o += e;
  }
  for (c = o.length; o.charCodeAt(--c) === 48; )
    ;
  return o.slice(0, c + 1 || 1);
}
function compare(t, e) {
  var n, a, c = t.c, o = e.c, d = t.s, m = e.s, w = t.e, S = e.e;
  if (!d || !m)
    return null;
  if (n = c && !c[0], a = o && !o[0], n || a)
    return n ? a ? 0 : -m : d;
  if (d != m)
    return d;
  if (n = d < 0, a = w == S, !c || !o)
    return a ? 0 : !c ^ n ? 1 : -1;
  if (!a)
    return w > S ^ n ? 1 : -1;
  for (m = (w = c.length) < (S = o.length) ? w : S, d = 0; d < m; d++)
    if (c[d] != o[d])
      return c[d] > o[d] ^ n ? 1 : -1;
  return w == S ? 0 : w > S ^ n ? 1 : -1;
}
function intCheck(t, e, n, a) {
  if (t < e || t > n || t !== mathfloor(t))
    throw Error(bignumberError + (a || "Argument") + (typeof t == "number" ? t < e || t > n ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(t));
}
function isOdd(t) {
  var e = t.c.length - 1;
  return bitFloor(t.e / LOG_BASE) == e && t.c[e] % 2 != 0;
}
function toExponential(t, e) {
  return (t.length > 1 ? t.charAt(0) + "." + t.slice(1) : t) + (e < 0 ? "e" : "e+") + e;
}
function toFixedPoint(t, e, n) {
  var a, c;
  if (e < 0) {
    for (c = n + "."; ++e; c += n)
      ;
    t = c + t;
  } else if (a = t.length, ++e > a) {
    for (c = n, e -= a; --e; c += n)
      ;
    t += c;
  } else
    e < a && (t = t.slice(0, e) + "." + t.slice(e));
  return t;
}
var BigNumber$1 = clone(), retry$3 = {};
function RetryOperation(t, e) {
  typeof e == "boolean" && (e = { forever: e }), this._originalTimeouts = JSON.parse(JSON.stringify(t)), this._timeouts = t, this._options = e || {}, this._maxRetryTime = e && e.maxRetryTime || 1 / 0, this._fn = null, this._errors = [], this._attempts = 1, this._operationTimeout = null, this._operationTimeoutCb = null, this._timeout = null, this._operationStart = null, this._timer = null, this._options.forever && (this._cachedTimeouts = this._timeouts.slice(0));
}
var retry_operation = RetryOperation;
RetryOperation.prototype.reset = function() {
  this._attempts = 1, this._timeouts = this._originalTimeouts.slice(0);
};
RetryOperation.prototype.stop = function() {
  this._timeout && clearTimeout(this._timeout), this._timer && clearTimeout(this._timer), this._timeouts = [], this._cachedTimeouts = null;
};
RetryOperation.prototype.retry = function(t) {
  if (this._timeout && clearTimeout(this._timeout), !t)
    return !1;
  var e = (/* @__PURE__ */ new Date()).getTime();
  if (t && e - this._operationStart >= this._maxRetryTime)
    return this._errors.push(t), this._errors.unshift(new Error("RetryOperation timeout occurred")), !1;
  this._errors.push(t);
  var n = this._timeouts.shift();
  if (n === void 0)
    if (this._cachedTimeouts)
      this._errors.splice(0, this._errors.length - 1), n = this._cachedTimeouts.slice(-1);
    else
      return !1;
  var a = this;
  return this._timer = setTimeout(function() {
    a._attempts++, a._operationTimeoutCb && (a._timeout = setTimeout(function() {
      a._operationTimeoutCb(a._attempts);
    }, a._operationTimeout), a._options.unref && a._timeout.unref()), a._fn(a._attempts);
  }, n), this._options.unref && this._timer.unref(), !0;
};
RetryOperation.prototype.attempt = function(t, e) {
  this._fn = t, e && (e.timeout && (this._operationTimeout = e.timeout), e.cb && (this._operationTimeoutCb = e.cb));
  var n = this;
  this._operationTimeoutCb && (this._timeout = setTimeout(function() {
    n._operationTimeoutCb();
  }, n._operationTimeout)), this._operationStart = (/* @__PURE__ */ new Date()).getTime(), this._fn(this._attempts);
};
RetryOperation.prototype.try = function(t) {
  console.log("Using RetryOperation.try() is deprecated"), this.attempt(t);
};
RetryOperation.prototype.start = function(t) {
  console.log("Using RetryOperation.start() is deprecated"), this.attempt(t);
};
RetryOperation.prototype.start = RetryOperation.prototype.try;
RetryOperation.prototype.errors = function() {
  return this._errors;
};
RetryOperation.prototype.attempts = function() {
  return this._attempts;
};
RetryOperation.prototype.mainError = function() {
  if (this._errors.length === 0)
    return null;
  for (var t = {}, e = null, n = 0, a = 0; a < this._errors.length; a++) {
    var c = this._errors[a], o = c.message, d = (t[o] || 0) + 1;
    t[o] = d, d >= n && (e = c, n = d);
  }
  return e;
};
(function(t) {
  var e = retry_operation;
  t.operation = function(n) {
    var a = t.timeouts(n);
    return new e(a, {
      forever: n && (n.forever || n.retries === 1 / 0),
      unref: n && n.unref,
      maxRetryTime: n && n.maxRetryTime
    });
  }, t.timeouts = function(n) {
    if (n instanceof Array)
      return [].concat(n);
    var a = {
      retries: 10,
      factor: 2,
      minTimeout: 1 * 1e3,
      maxTimeout: 1 / 0,
      randomize: !1
    };
    for (var c in n)
      a[c] = n[c];
    if (a.minTimeout > a.maxTimeout)
      throw new Error("minTimeout is greater than maxTimeout");
    for (var o = [], d = 0; d < a.retries; d++)
      o.push(this.createTimeout(d, a));
    return n && n.forever && !o.length && o.push(this.createTimeout(d, a)), o.sort(function(m, w) {
      return m - w;
    }), o;
  }, t.createTimeout = function(n, a) {
    var c = a.randomize ? Math.random() + 1 : 1, o = Math.round(c * Math.max(a.minTimeout, 1) * Math.pow(a.factor, n));
    return o = Math.min(o, a.maxTimeout), o;
  }, t.wrap = function(n, a, c) {
    if (a instanceof Array && (c = a, a = null), !c) {
      c = [];
      for (var o in n)
        typeof n[o] == "function" && c.push(o);
    }
    for (var d = 0; d < c.length; d++) {
      var m = c[d], w = n[m];
      n[m] = function(A) {
        var B = t.operation(a), P = Array.prototype.slice.call(arguments, 1), I = P.pop();
        P.push(function(O) {
          B.retry(O) || (O && (arguments[0] = B.mainError()), I.apply(this, arguments));
        }), B.attempt(function() {
          A.apply(n, P);
        });
      }.bind(n, w), n[m].options = a;
    }
  };
})(retry$3);
var retry$2 = retry$3, retrier = retry$2;
function retry(t, e) {
  function n(a, c) {
    var o = e || {}, d;
    "randomize" in o || (o.randomize = !0), d = retrier.operation(o);
    function m(A) {
      c(A || new Error("Aborted"));
    }
    function w(A, B) {
      if (A.bail) {
        m(A);
        return;
      }
      d.retry(A) ? o.onRetry && o.onRetry(A, B) : c(d.mainError());
    }
    function S(A) {
      var B;
      try {
        B = t(m, A);
      } catch (P) {
        w(P, A);
        return;
      }
      Promise.resolve(B).then(a).catch(function(I) {
        w(I, A);
      });
    }
    d.attempt(S);
  }
  return new Promise(n);
}
var lib$a = retry;
const retry$1 = /* @__PURE__ */ getDefaultExportFromCjs$2(lib$a);
BigNumber$1.set({ DECIMAL_PLACES: 50 });
const sleep$2 = (t) => new Promise((e) => setTimeout(e, t));
class Utils {
  api;
  token;
  tokenConfig;
  arbundles;
  constructor(e, n, a) {
    this.api = e, this.token = n, this.tokenConfig = a, this.arbundles = this.tokenConfig.irys.arbundles;
  }
  /**
   * Throws an error if the provided axios reponse has a status code != 200
   * @param res an axios response
   * @returns nothing if the status code is 200
   */
  static checkAndThrow(e, n, a) {
    if (e?.status && !(a ?? []).includes(e.status) && e.status != 200)
      throw new Error(`HTTP Error: ${n}: ${e.status} ${typeof e.data != "string" ? e.statusText : e.data}`);
  }
  /**
   * Gets the nonce used for withdrawal request validation from the bundler
   * @returns nonce for the current user
   */
  async getNonce() {
    const e = await this.api.get(`/account/withdrawals/${this.tokenConfig.name}?address=${this.tokenConfig.address}`);
    return Utils.checkAndThrow(e, "Getting withdrawal nonce"), e.data;
  }
  /**
   * Gets the balance on the current bundler for the specified user
   * @param address the user's address to query
   * @returns the balance in winston
   */
  async getBalance(e) {
    const n = await this.api.get(`/account/balance/${this.tokenConfig.name}?address=${e}`);
    return Utils.checkAndThrow(n, "Getting balance"), new BigNumber$1(n.data.balance);
  }
  /**
   * Queries the bundler to get it's address for a specific token
   * @returns the bundler's address
   */
  async getBundlerAddress(e) {
    const n = await this.api.get("/info");
    Utils.checkAndThrow(n, "Getting Bundler address");
    const a = n.data.addresses[e];
    if (!a)
      throw new Error(`Specified bundler does not support token ${e}`);
    return a;
  }
  /**
   * Calculates the price for [bytes] bytes paid for with [token] for the loaded Irys node.
   * @param token
   * @param bytes
   * @returns
   */
  async getPrice(e, n) {
    const a = await this.api.get(`/price/${e}/${n}`);
    return Utils.checkAndThrow(a, "Getting storage cost"), new BigNumber$1(a.data);
  }
  /**
   * This function *estimates* the cost in atomic units for uploading a given set of files
   * note: this function becomes less accurate the smaller your transactions, unless you provide it with an accurate headerSizeAvg
   * @param folderInfo either an array of file sizes in bytes, or an object containing the total number of files and the sum total size of the files in bytes
   * note: for a more precise estimate, you can create an empty (dataless) transaction (make sure you still set tags and other metadata!) and then pass `tx.size` as `headerSizeAvg`
   */
  async estimateFolderPrice(e) {
    Array.isArray(e) && (e = {
      fileCount: e.length,
      totalBytes: e.reduce((d, m) => d + m, 0)
    });
    const n = e.headerSizeAvg ?? this.arbundles.createData("", this.tokenConfig.getSigner()).getRaw().length, c = (await this.getPrice(this.tokenConfig.name, n)).multipliedBy(e.fileCount);
    return (await this.getPrice(this.tokenConfig.name, e.totalBytes)).plus(c).decimalPlaces(0);
  }
  /**
   * Returns the decimal values' equivalent in atomic units
   * @example
   * 0.1 ETH -> 100,000,000,000,000,000 wei
   * ```
   * toAtomic(100_000_000_000_000_000) -> 0.1
   * ```
   * @param decimalAmount - amount in decimal
   * @returns amount in atomic units
   */
  toAtomic(e) {
    return new BigNumber$1(e).multipliedBy(this.tokenConfig.base[1]);
  }
  /**
   * Returns the atomic amounts' equivalent in decimal units
   * @example
   * 100,000,000,000,000,000 wei -> 0.1 ETH
   * ```
   * fromAtomic(0.1) -> 100_000_000_000_000_000
   * ```
   * @param atomicAmount
   * @returns
   */
  fromAtomic(e) {
    return new BigNumber$1(e).dividedBy(this.tokenConfig.base[1]);
  }
  /**
   * Polls for transaction confirmation (or at least pending status) - used for fast currencies (i.e not arweave)
   * before posting the fund request to the server (so the server doesn't have to poll)
   * @param txid
   * @returns
   */
  async confirmationPoll(e, n = 30) {
    if (this.tokenConfig.isSlow)
      return;
    n < 0 && (n = 0);
    let a, c;
    const o = async () => {
      for (; !c; ) {
        if (await this.tokenConfig.getTx(e).then((S) => S?.confirmed).catch((S) => (a = S, !1)))
          return !0;
        await sleep$2(1e3);
      }
      return !1;
    }, d = async () => (await sleep$2(n * 1e3), c = !0, "RACE"), m = await Promise.race([d(), o()]);
    return m === "RACE" ? (console.warn(`Tx ${e} didn't finalize after ${n} seconds ${a ? ` - ${a}` : ""}`), a) : m;
  }
  /**
   * @deprecated this method is deprecated in favour of fromAtomic - removal slated for 0.12.0
   */
  unitConverter(e) {
    return new BigNumber$1(e).dividedBy(this.tokenConfig.base[1]);
  }
  async verifyReceipt(e) {
    return Utils.verifyReceipt(this.arbundles, e);
  }
  static async verifyReceipt(e, n) {
    const { id: a, deadlineHeight: c, timestamp: o, public: d, signature: m, version: w } = n, S = await e.deepHash([
      e.stringToBuffer("Bundlr"),
      e.stringToBuffer(w),
      e.stringToBuffer(a),
      e.stringToBuffer(c.toString()),
      e.stringToBuffer(o.toString())
    ]);
    return await e.getCryptoDriver().verify(d, S, base64url.toBuffer(m));
  }
  async getReceipt(e) {
    const n = `query {
      transactions(ids: ["${e}"]) {
        edges {
          node {
            receipt {
              signature
              timestamp
              version
              deadlineHeight
            }
          }
        }
      }
    }`, c = (await retry$1(async () => await this.api.post("/graphql", { query: n }, {
      headers: { "content-type": "application/json" },
      validateStatus: (m) => m === 200
    })))?.data?.data?.transactions?.edges?.at(0)?.node?.receipt;
    if (!c)
      throw new Error(`Missing required receipt data from node for tx: ${e}`);
    const d = {
      public: (await this.api.get("/public")).data,
      version: c.version,
      id: e,
      timestamp: c.timestamp,
      validatorSignatures: [],
      signature: c.signature,
      deadlineHeight: c.deadlineHeight,
      // use stub to conform to type
      verify: async () => !1
    };
    return d.verify = async () => this.verifyReceipt(d), d;
  }
}
const erc20abi = [
  {
    constant: !0,
    inputs: [],
    name: "name",
    outputs: [
      {
        name: "",
        type: "string"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        name: "_spender",
        type: "address"
      },
      {
        name: "_value",
        type: "uint256"
      }
    ],
    name: "approve",
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        name: "",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        name: "_from",
        type: "address"
      },
      {
        name: "_to",
        type: "address"
      },
      {
        name: "_value",
        type: "uint256"
      }
    ],
    name: "transferFrom",
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "decimals",
    outputs: [
      {
        name: "",
        type: "uint8"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        name: "_owner",
        type: "address"
      }
    ],
    name: "balanceOf",
    outputs: [
      {
        name: "balance",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !0,
    inputs: [],
    name: "symbol",
    outputs: [
      {
        name: "",
        type: "string"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: !1,
    inputs: [
      {
        name: "_to",
        type: "address"
      },
      {
        name: "_value",
        type: "uint256"
      }
    ],
    name: "transfer",
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ],
    payable: !1,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: !0,
    inputs: [
      {
        name: "_owner",
        type: "address"
      },
      {
        name: "_spender",
        type: "address"
      }
    ],
    name: "allowance",
    outputs: [
      {
        name: "",
        type: "uint256"
      }
    ],
    payable: !1,
    stateMutability: "view",
    type: "function"
  },
  {
    payable: !0,
    stateMutability: "payable",
    type: "fallback"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        name: "owner",
        type: "address"
      },
      {
        indexed: !0,
        name: "spender",
        type: "address"
      },
      {
        indexed: !1,
        name: "value",
        type: "uint256"
      }
    ],
    name: "Approval",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        name: "from",
        type: "address"
      },
      {
        indexed: !0,
        name: "to",
        type: "address"
      },
      {
        indexed: !1,
        name: "value",
        type: "uint256"
      }
    ],
    name: "Transfer",
    type: "event"
  }
];
async function withdrawBalance(t, e, n) {
  const a = t.tokenConfig, { deepHash: c, stringToBuffer: o } = a.irys.arbundles, m = {
    publicKey: await a.getPublicKey(),
    currency: t.token,
    amount: new BigNumber$1(n).toString(),
    nonce: await t.getNonce(),
    signature: "",
    sigType: a.getSigner().signatureType
  }, w = await c([o(m.currency), o(m.amount.toString()), o(m.nonce.toString())]);
  Buffer$F.isBuffer(m.publicKey) || (m.publicKey = Buffer$F.from(m.publicKey));
  const S = await a.sign(w), A = await a.verify(m.publicKey, w, S);
  m.publicKey = base64url.encode(m.publicKey), m.signature = base64url.encode(Buffer$F.from(S));
  const B = base64url.toBuffer(m.publicKey), P = base64url.toBuffer(m.signature), I = await c([o(m.currency), o(m.amount.toString()), o(m.nonce.toString())]), O = await a.verify(B, I, P), L = a.ownerToAddress(a.name == "arweave" ? base64url.decode(m.publicKey) : base64url.toBuffer(m.publicKey)) === a.address;
  if (!(A || O || L))
    throw new Error(`Internal withdrawal validation failed - please report this!
Debug Info:${JSON.stringify(m)}`);
  const C = await e.post("/account/withdraw", m);
  if (C.status === 202) {
    const z = C.data.tx_id, q = await t.confirmationPoll(z);
    if (q !== !0)
      throw new Error(`Unable to confirm withdrawal tx ${z} ${q ? q?.toString() : ""}`);
  } else
    Utils.checkAndThrow(C, "Withdrawing balance");
  return C.data;
}
class GraphQLQuery {
  /* implements BuilderMethods<TVars, GraphQLQuery<TQuery, TVars, TReturn>> */
  // query variables
  queryVars = {};
  // query fields
  queryFields;
  // query metadata
  queryInfo;
  // query string, payload sent to node
  _query;
  // url of the node to query
  gqlURL;
  // misc operational config
  config;
  // result tracker object, used to hold state for paging operations
  resultTracker = { numPages: 0, numResults: 0, done: !1 };
  constructor({ url: e, retryConfig: n, query: a, queryName: c, opts: o }) {
    if (!e)
      throw new Error("URL is required");
    if (this.gqlURL = new URL(e), this.config = {
      first: !1,
      userProvided: !1,
      numPages: 1 / 0,
      numResults: 1e3,
      retryOpts: { retries: 3, maxTimeout: 2e3, minTimeout: 500, ...n }
    }, a === !1)
      return this;
    if (!a)
      throw new Error(`Unable to find query with name ${c}`);
    if (this.queryInfo = { ...a }, this.queryFields = a.query, c.includes("arweave") && this.gqlURL.host === "node1.irys.xyz" && (this.gqlURL = new URL("https://arweave.net/graphql")), !o?.skipVariableSetters)
      for (const d of Object.keys(a.vars)) {
        if (this[d])
          throw new Error(`Field setter ${d} has a key conflict - disable with opts.skipVariableSetters OR change the field name and add to query.remapVars`);
        this[d] = (m) => (this.queryVars[d] = m, this);
      }
    return this;
  }
  /**
   * Builds a query from fields and variables, formatting it into a GQL compatible string.
   * stores built query under `this.query` (protected) - accessible via `.toQuery`
   * @returns `this` (chainable)
   */
  buildQuery() {
    if (this.config.userProvided)
      return this;
    const e = (w) => JSON.stringify(w, (S, A) => {
      if (A instanceof Array)
        return A[0];
      if (typeof A == "object")
        return A;
      if (A !== !1)
        return "";
    }).replaceAll(":", "").replaceAll('"', "").replaceAll(",", `
          `), n = e(this.queryFields), a = e({ pageInfo: { [this.queryInfo.paging?.hasNextPage ?? "hasNextPage"]: void 0 } }).slice(1, -1), c = this.queryInfo.enumValues, o = { ...this.queryInfo.vars, ...this.queryVars };
    for (const [w, S] of Object.entries(this.queryInfo.remapVars ?? {}))
      if (o?.[w] !== void 0) {
        if (typeof S == "function") {
          const A = S(w, o[w], o);
          if (!A)
            continue;
          const [B, P] = A;
          if (o[B] = P, B === w)
            continue;
        } else
          o[S] = o[w];
        o[w] = void 0;
      }
    const d = JSON.stringify(o, function(w, S) {
      return S === void 0 || S instanceof Array || typeof S == "object" || typeof S == "number" || c?.includes(w) ? S : `'${S}'`;
    }).replaceAll('"', "").replaceAll("'", '"').slice(1, -1);
    if (!this?.queryInfo?.name)
      throw new Error("Query name is undefined!");
    const m = this.queryInfo.paging ? `query {
      ${this.queryInfo.name}(
        ${d}
      ) {
        edges {
          cursor
          node ${n}
        }
        ${a}
      }
    }` : `query {
    ${this.queryInfo.name}(
      ${d}
    ) 
    ${n}
  }`;
    return this._query = m, this;
  }
  /**
   * Primary query execution method - builds & runs the query, returning result nodes and updating cursor info in queryVars
   * @returns query result nodes
   */
  async getPage() {
    if (this.resultTracker.done)
      return;
    if (this.buildQuery(), !this._query)
      throw new Error("Unable to run undefined query");
    let e;
    try {
      e = await retry$1(async (a) => {
        const c = await axios$3(this.gqlURL.toString(), {
          method: "post",
          headers: { "Content-Type": "application/json" },
          data: { query: this._query }
        });
        if (c.data.errors)
          throw c;
        return c;
      }, this.config.retryOpts);
    } catch (a) {
      throw new Error(`Error running query
 ${this._query} - ${a.message ? a.message + " -" : ""} (${JSON.stringify(a?.data?.errors.map((c) => c.message) ?? a?.errors ?? a)}) `);
    }
    if (this.config.userProvided)
      return this.trimmer([e.data.data].flat(20));
    const n = e.data.data[this.queryInfo.name];
    if (this.queryInfo.paging) {
      const a = n.pageInfo[this.queryInfo.paging.hasNextPage] ? n.edges.at(-1)[this.queryInfo.paging.cursor] : void 0;
      return this.queryVars.after = a, this.trimmer(n.edges.map((c) => c.node));
    }
    return this.trimmer([n].flat(20));
  }
  // tracks & controls output
  trimmer(e) {
    const n = ++this.resultTracker.numPages, a = this.resultTracker.numResults += e.length;
    if (e.length === 0)
      return this.resultTracker.done = !0, e;
    if (n >= this?.config?.numPages && (this.resultTracker.done = !0), a >= this?.config?.numResults) {
      this.resultTracker.done = !0;
      const c = this.config.numResults - (a - e.length);
      return e.slice(0, c);
    }
    return e;
  }
  // return modifier functions
  /**
   * Get the first result from the query
   * @returns the first result from the query - gets at maximum one page
   */
  async first() {
    return (await this.getPage())?.at(0) ?? void 0;
  }
  /**
   * Limiter on the number of pages a given query should resolve to
   * @param numPages Maximum number of pages to return
   * @returns this (chainable)
   */
  maxPages(e) {
    return this.config.numPages = e, this;
  }
  /**
   * Limiter on the maximum number of results a given query should resolve to
   * @param numResults Maximum number of results to return
   * @returns this (chainable)
   */
  limit(e) {
    return this.config.numResults = e, this;
  }
  /**
   * Change the URL of the graphql endpoint to use
   * @param url: URL to use
   * @returns this (chainable)
   */
  url(e) {
    return this.gqlURL = new URL(e), this;
  }
  // return functions
  /**
   * Gets all results from the built query
   * @returns array of results
   */
  async all() {
    const e = [];
    do {
      const n = await this.getPage();
      if (!n)
        break;
      e.push(...n);
    } while (this.queryVars.after);
    return e;
  }
  /**
   * Async generator, yields individual query result items
   */
  async *generator() {
    do {
      const e = await this.getPage();
      if (!e)
        return;
      for (const n of e)
        yield n;
    } while (this.queryVars.after);
  }
  /**
   * Readable stream produced from `this.generator`
   * @returns a readable instance, with the "data" event yielding individual results
   */
  stream() {
    return streamBrowserify.Readable.from(this.generator());
  }
  /**
   * Provide a custom query string to resolve
   * @param query Query string to use
   * @returns result of the query - this method does not support paging or extraction
   */
  query(e) {
    return this._query = e, this.config.userProvided = !0, this;
  }
  // TODO issue: this allows for additional (top level only?!) fields that aren't part of TQuery - for now we perform JS level shape checks and throw.
  /**
   * Set the fields you want the query to return
   * @param fields - Object structured like a graphql query body, truthy values including, falsy excluding
   * @param skipFieldCheck - whether to skip JS level fields object shape validation
   * @returns `this` (chainable)
   */
  fields(e, n = !1) {
    const a = (c, o, d) => {
      for (const m of Object.keys(d)) {
        let w = o[m];
        Array.isArray(w) && (w = w[0]);
        const S = d[m];
        if (w === void 0)
          throw new Error(`Illegal field ${c}${m}`);
        typeof S == "object" && a(c + m + ".", w, S);
      }
    };
    return n || a("", this.queryFields, e), this.queryFields = e, this;
  }
  /**
   * Sets variables/filters using an object
   * @param variables variable object to set
   * @returns this (chainable)
   */
  variables(e) {
    return this.queryVars = { ...this.queryVars, ...e }, this;
  }
  /**
   * Builds the current query and returns a ready to POST query string
   * @returns string form of the current query
   */
  async toQuery() {
    return await this.buildQuery(), this._query;
  }
  // instance generic type accessors
  /**
   * Dummy method to access the internal `TReturn` generic type
   * @returns "tReturn"
   */
  tReturn() {
    return "tReturn";
  }
  /**
   * Dummy method to access the internal `TQuery` generic type
   * @returns "tQuery"
   */
  tQuery() {
    return "tQuery";
  }
  /**
   * Dummy method to access the internal `TVars` generic type
   * @returns "tVars"
   */
  tVars() {
    return "tVars";
  }
  // Promise contract functions, so users can `await` a GraphQLQuery instance to resolve the built query.
  // very cool, thanks Knex.
  /**
   * Resolves `this` by getting all results for the query (including paging)
   * @param onFulfilled - optional onFulfilled callback
   * @returns - all results for built query
   */
  async then(e, n) {
    return this.all().then(e, n);
  }
  async catch(e) {
    return this.then().catch(e);
  }
  async finally(e) {
    return this.then().finally(e);
  }
}
const block = {
  id: "",
  timestamp: 0,
  height: "",
  previous: ""
}, blocksVars = {
  ids: void 0,
  // height: undefined,
  minHeight: void 0,
  maxHeight: void 0,
  pageSize: 10,
  after: void 0,
  sort: "DESC"
  // REMAPPED
}, arweaveBlocksQuery = {
  name: "blocks",
  query: block,
  vars: blocksVars,
  enumValues: ["sort"],
  remapVars: {
    pageSize: "first",
    // replace ASC/DESC to HEIGHT prefixed versions
    sort: (t, e) => [t, e === "ASC" ? "HEIGHT_ASC" : "HEIGHT_DESC"],
    minHeight: (t, e, n) => {
      n.height = { ...n.height, min: e }, n.minHeight = void 0;
    },
    maxHeight: (t, e, n) => {
      n.height = { ...n.height, max: e }, n.maxHeight = void 0;
    }
  },
  paging: {
    hasNextPage: "hasNextPage",
    cursor: "cursor"
  }
}, transaction = {
  id: "",
  anchor: "",
  signature: "",
  recipient: "",
  owner: {
    address: "",
    key: ""
  },
  fee: {
    winston: "",
    ar: ""
  },
  quantity: {
    winston: "",
    ar: ""
  },
  data: {
    size: "",
    type: ""
  },
  tags: [{ name: "", value: "" }],
  block: {
    id: "",
    timestamp: 0,
    height: 0,
    previous: ""
  },
  bundledIn: {
    id: ""
  }
}, transactionsVars = {
  ids: void 0,
  from: void 0,
  to: void 0,
  tags: void 0,
  bundledIn: void 0,
  // block: undefined,
  minHeight: void 0,
  maxHeight: void 0,
  pageSize: 10,
  after: void 0,
  sort: "DESC"
  // REMAPPED
}, arweaveTransactionsQuery = {
  name: "transactions",
  query: transaction,
  enumValues: ["sort"],
  vars: transactionsVars,
  remapVars: {
    pageSize: "first",
    from: "owners",
    to: "recipients",
    // replace ASC/DESC to HEIGHT prefixed versions
    sort: (t, e) => [t, e === "ASC" ? "HEIGHT_ASC" : "HEIGHT_DESC"],
    minHeight: (t, e, n) => {
      n.block = { ...n.block, min: e }, n.minHeight = void 0;
    },
    maxHeight: (t, e, n) => {
      n.block = { ...n.block, max: e }, n.maxHeight = void 0;
    }
  },
  paging: {
    hasNextPage: "hasNextPage",
    cursor: "cursor"
  }
}, transactions = {
  id: "",
  receipt: {
    deadlineHeight: 0,
    signature: "",
    timestamp: 0,
    version: ""
  },
  tags: [{ name: "", value: "" }],
  address: "",
  token: "",
  signature: "",
  timestamp: 0
}, transactionVars = {
  ids: void 0,
  after: void 0,
  token: void 0,
  from: void 0,
  pageSize: 100,
  sort: "ASC",
  // hasTags: undefined,
  tags: void 0,
  fromTimestamp: void 0,
  toTimestamp: void 0
}, irysTransactionsQuery = {
  name: "transactions",
  query: transactions,
  enumValues: ["order"],
  vars: transactionVars,
  remapVars: {
    pageSize: "first",
    sort: "order",
    from: "owners",
    fromTimestamp: (t, e, n) => {
      n.timestamp = { ...n.timestamp, from: new Date(e).getTime() }, n.fromTimestamp = void 0;
    },
    toTimestamp: (t, e, n) => {
      n.timestamp = { ...n.timestamp, to: new Date(e).getTime() }, n.toTimestamp = void 0;
    }
  },
  paging: {
    hasNextPage: "hasNextPage",
    cursor: "cursor"
  }
}, queries = {
  "irys:transactions": irysTransactionsQuery,
  "arweave:transactions": arweaveTransactionsQuery,
  "arweave:blocks": arweaveBlocksQuery
  // "arweave:transaction": arweaveTransactionQuery,
  // "arweave:block": arweaveBlockQuery,
};
class Query {
  opts;
  constructor(e = { url: new URL("https://node1.irys.xyz/graphql") }) {
    if (!e.url)
      throw new Error("URL is required");
    e.url = new URL(e.url), this.opts = e;
  }
  search(e, n) {
    const a = n?.query ?? queries[e];
    return new GraphQLQuery({ ...this.opts, query: a, queryName: e });
  }
}
class Irys {
  api;
  utils;
  uploader;
  funder;
  address;
  token;
  tokenConfig;
  provenance;
  transactions;
  _readyPromise;
  url;
  arbundles;
  IrysTransaction;
  static VERSION = "0.1.6";
  constructor({ url: e, arbundles: n }) {
    this.url = e, this.arbundles = n, this.IrysTransaction = buildIrysTransaction(this);
  }
  get signer() {
    return this.tokenConfig.getSigner();
  }
  get search() {
    const e = new Query({ url: new URL("/graphql", this.url) });
    return e.search.bind(e);
  }
  query(e) {
    return new Query(e ?? { url: this.url });
  }
  async withdrawBalance(e) {
    return withdrawBalance(this.utils, this.api, e);
  }
  /**
   * Gets the balance for the loaded wallet
   * @returns balance (in winston)
   */
  async getLoadedBalance() {
    if (!this.address)
      throw new Error("address is undefined");
    return this.utils.getBalance(this.address);
  }
  /**
   * Gets the balance for the specified address
   * @param address address to query for
   * @returns the balance (in winston)
   */
  async getBalance(e) {
    return this.utils.getBalance(e);
  }
  /**
   * Sends amount atomic units to the specified bundler
   * @param amount amount to send in atomic units
   * @returns details about the fund transaction
   */
  async fund(e, n) {
    return this.funder.fund(e, n);
  }
  /**
   * Calculates the price for [bytes] bytes for the loaded token and Irys node.
   * @param bytes
   * @returns
   */
  async getPrice(e) {
    return this.utils.getPrice(this.token, e);
  }
  async verifyReceipt(e) {
    return Utils.verifyReceipt(this.arbundles, e);
  }
  /**
   * Create a new IrysTransactions (flex token arbundles dataItem)
   * @param data
   * @param opts - dataItemCreateOptions
   * @returns - a new IrysTransaction instance
   */
  createTransaction(e, n) {
    return new this.IrysTransaction(e, this, n);
  }
  /**
   * Returns the signer for the loaded token
   */
  getSigner() {
    return this.tokenConfig.getSigner();
  }
  async upload(e, n) {
    return this.uploader.uploadData(e, n);
  }
  /**
   * @deprecated - use upload instead
   */
  async uploadWithReceipt(e, n) {
    return this.uploader.uploadData(e, { ...n });
  }
  async ready() {
    return this.tokenConfig.ready && await this.tokenConfig.ready(), this.address = this.tokenConfig.address, this;
  }
  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
  get transaction() {
    const e = this;
    return {
      fromRaw(n) {
        return new e.IrysTransaction(n, e, { dataIsRawTransaction: !0 });
      }
    };
  }
}
let Api$1 = class {
  _instance;
  cookieMap = /* @__PURE__ */ new Map();
  config;
  constructor(e) {
    e && this.applyConfig(e);
  }
  applyConfig(e) {
    this.config = this.mergeDefaults(e), this._instance = void 0;
  }
  getConfig() {
    return this.config;
  }
  async requestInterceptor(e) {
    const n = this.cookieMap.get(new URL(e.baseURL ?? "").host);
    return n && (e.headers.cookie = n), e;
  }
  async responseInterceptor(e) {
    const n = e.headers?.["set-cookie"];
    return n && this.cookieMap.set(e.request.host, n), e;
  }
  mergeDefaults(e) {
    return {
      url: e.url,
      timeout: e.timeout ?? 2e4,
      logging: e.logging ?? !1,
      logger: e.logger ?? console.log,
      headers: { ...e.headers, "x-irys-js-sdk-version": Irys.VERSION },
      withCredentials: e.withCredentials ?? !1,
      retry: { retries: 3, maxTimeout: 5e3 }
    };
  }
  async get(e, n) {
    try {
      return await this.request(e, { ...n, method: "GET" });
    } catch (a) {
      if (a.response?.status)
        return a.response;
      throw a;
    }
  }
  async post(e, n, a) {
    try {
      return await this.request(e, { data: n, ...a, method: "POST" });
    } catch (c) {
      if (c.response?.status)
        return c.response;
      throw c;
    }
  }
  get instance() {
    if (this._instance)
      return this._instance;
    const e = axios$3.create({
      baseURL: this.config.url.toString(),
      timeout: this.config.timeout,
      maxContentLength: 1024 * 1024 * 512,
      headers: this.config.headers,
      withCredentials: this.config.withCredentials
    });
    return this.config.withCredentials && (e.interceptors.request.use(this.requestInterceptor.bind(this)), e.interceptors.response.use(this.responseInterceptor.bind(this))), this.config.logging && (e.interceptors.request.use((n) => (this.config.logger(`Requesting: ${n.baseURL}/${n.url}`), n)), e.interceptors.response.use((n) => (this.config.logger(`Response: ${n.config.url} - ${n.status}`), n))), this._instance = e;
  }
  async request(e, n) {
    const a = this.instance, c = n?.url ?? new URL(e, this.config.url).toString();
    return a({ ...n, url: c });
  }
};
class Fund {
  utils;
  constructor(e) {
    this.utils = e;
  }
  /**
   * Function to Fund (send funds to) a Irys node - inherits instance token and node
   * @param amount - amount in base units to send
   * @param multiplier - network tx fee multiplier - only works for specific currencies
   * @returns  - funding receipt
   */
  async fund(e, n = 1) {
    const a = new BigNumber$1(e);
    if (!a.isInteger())
      throw new Error("must use an integer for funding amount");
    const c = this.utils.tokenConfig, o = await this.utils.getBundlerAddress(this.utils.token);
    let d;
    if (c.needsFee) {
      const B = await c.getFee(c.base[0] === "winston" ? 0 : a, o);
      d = BigNumber$1.isBigNumber(B) ? B.multipliedBy(n).integerValue(BigNumber$1.ROUND_CEIL) : B;
    }
    const m = await c.createTx(a, o, d);
    let w;
    try {
      w = await c.sendTx(m.tx);
    } catch (B) {
      throw B;
    }
    if (m.txId ??= w, !m.txId)
      throw new Error("Undefined transaction ID");
    Utils.checkAndThrow(w, `Sending transaction to the ${this.utils.token} network`);
    let S = await this.utils.confirmationPoll(m.txId);
    if (!await this.submitTransaction(m.txId).catch((B) => {
      S = B;
    }))
      throw new Error(`failed to post funding tx - ${m.txId} - keep this id! 
 ${S ? ` - ${S?.message ?? S}` : ""}`);
    return { reward: BigNumber$1.isBigNumber(d) ? d.toString() : JSON.stringify(d), target: o, quantity: a.toString(), id: m.txId };
  }
  async submitTransaction(e) {
    return await retry$1(async () => {
      const n = await this.utils.api.post(`/account/balance/${this.utils.token}`, { tx_id: e });
      return Utils.checkAndThrow(n, `Posting transaction ${e} information to the bundler`, [202]), n;
    }, {
      retries: 5,
      maxTimeout: 1e3,
      minTimeout: 100,
      randomize: !0
    });
  }
  async submitFundTransaction(e) {
    return this.submitTransaction(e);
  }
}
class Provenance {
  irys;
  constructor(e) {
    this.irys = e;
  }
  async upload(e, n) {
    return this.irys.uploadWithReceipt(e, n);
  }
  async uploadProof(e) {
    return await this.irys.uploadWithReceipt("", {
      tags: Object.entries({ dataProtocol: "Provenance-Confirmation", ...e }).map(([n, a]) => ({ name: tagMap[n], value: a }))
    });
  }
  async getAllProofs(e, n) {
    const a = Object.entries(e).map(([m, w]) => ({ name: tagMap[m], values: [w] }));
    if (a.length === 0)
      throw new Error("Getting a provenance proof requires at least one query element");
    const c = `
    query ($tags: [TagFilter!]) {
      transactions(tags: $tags) {
        edges {
          node {
            id
            receipt {
              deadlineHeight
              signature
              timestamp
              version
            }
            tags {
              name
              value
            }
          }
        }
      }
    }
    `, o = [];
    let d = null;
    do {
      const m = await this.irys.api.post("/graphql", {
        query: c,
        variables: { tags: a, limit: n?.limit ?? null, after: d }
      }, void 0);
      d = m.data.data.transactions?.pageInfo?.hasNextPage ? m.data.data.transactions.pageInfo.endCursor : null, o.push(...m.data.data.transactions.edges.map((w) => w.node));
    } while (d);
    return o;
  }
  async getProof(e) {
    const n = (await this.getAllProofs(e, { limit: 1 })).at(0);
    if (!n)
      throw new Error(`Unable to locate proof with fields ${JSON.stringify(e)}`);
    return n;
  }
}
const tagMap = {
  dataProtocol: "Data-Protocol",
  hashingAlgo: "Hashing-Algo",
  dataHash: "Data-Hash",
  uploadedFor: "Uploaded-For",
  prompt: "Prompt",
  promptHash: "Prompt-Hash",
  model: "Model"
};
let Transaction$3 = class {
  irys;
  constructor(e) {
    this.irys = e;
  }
  async getById(e) {
    const n = (await this.query({ ids: [e], limit: 1 })).at(0);
    if (!n)
      throw new Error(`Unable to locate tx with id ${e}`);
    return n;
  }
  async getByOwner(e) {
    const n = (await this.query({ owners: [e], limit: 1 })).at(0);
    if (!n)
      throw new Error(`Unable to locate tx with owner ${e}`);
    return n;
  }
  async getByTag(e, n) {
    const a = (await this.query({ tags: [{ name: e, values: [n] }], limit: 1 })).at(0);
    if (!a)
      throw new Error(`Unable to locate tx with tag ${e}:${n}`);
    return a;
  }
  async query(e) {
    const n = `
    query ($ids: [String!], $after: String, $currency: String, $owners: [String!], $limit: Int, $order: SortOrder, $hasTags: Boolean, $tags: [TagFilter!]) {
      transactions(ids: $ids, after: $after, currency: $currency, owners: $owners, limit: $limit, order: $order, hasTags: $hasTags, tags: $tags) {
        edges {
          cursor
          node {
            address
            currency
            id
            receipt {
              deadlineHeight
              signature
              timestamp
              version
            }
            signature
            tags {
              name
              value
            }
            timestamp
          }
        }
        pageInfo {
          endCursor
          hasNextPage
        }
      }
    }
    `, a = [];
    let c = null;
    do {
      const o = await this.irys.api.post("/graphql", {
        query: n,
        variables: { ...e, after: c ?? e.after }
      }, void 0);
      c = o.data.data.transactions?.pageInfo?.hasNextPage ? o.data.data.transactions.pageInfo.endCursor : null, a.push(...o.data.data.transactions.edges.map((d) => d.node));
    } while (c);
    return a;
  }
}, Signer$1 = class {
  publicKey;
  signatureType;
  signatureLength;
  ownerLength;
  pem;
  static verify(e, n, a, c) {
    throw new Error("You must implement verify method on child");
  }
};
var SignatureConfig;
(function(t) {
  t[t.ARWEAVE = 1] = "ARWEAVE", t[t.ED25519 = 2] = "ED25519", t[t.ETHEREUM = 3] = "ETHEREUM", t[t.SOLANA = 4] = "SOLANA", t[t.INJECTEDAPTOS = 5] = "INJECTEDAPTOS", t[t.MULTIAPTOS = 6] = "MULTIAPTOS", t[t.TYPEDETHEREUM = 7] = "TYPEDETHEREUM";
})(SignatureConfig || (SignatureConfig = {}));
const SIG_CONFIG = {
  [SignatureConfig.ARWEAVE]: {
    sigLength: 512,
    pubLength: 512,
    sigName: "arweave"
  },
  [SignatureConfig.ED25519]: {
    sigLength: 64,
    pubLength: 32,
    sigName: "ed25519"
  },
  [SignatureConfig.ETHEREUM]: {
    sigLength: 65,
    pubLength: 65,
    sigName: "ethereum"
  },
  [SignatureConfig.SOLANA]: {
    sigLength: 64,
    pubLength: 32,
    sigName: "solana"
  },
  [SignatureConfig.INJECTEDAPTOS]: {
    sigLength: 64,
    pubLength: 32,
    sigName: "injectedAptos"
  },
  [SignatureConfig.MULTIAPTOS]: {
    sigLength: 64 * 32 + 4,
    pubLength: 32 * 32 + 1,
    sigName: "multiAptos"
  },
  [SignatureConfig.TYPEDETHEREUM]: {
    sigLength: 65,
    pubLength: 42,
    sigName: "typedEthereum"
  }
};
/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */
const _0n$6 = BigInt(0), _1n$8 = BigInt(1), _2n$6 = BigInt(2), _8n$2 = BigInt(8), CU_O = BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"), CURVE = Object.freeze({
  a: BigInt(-1),
  d: BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"),
  P: BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949"),
  l: CU_O,
  n: CU_O,
  h: BigInt(8),
  Gx: BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"),
  Gy: BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960")
}), POW_2_256 = BigInt("0x10000000000000000000000000000000000000000000000000000000000000000"), SQRT_M1 = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
BigInt("6853475219497561581579357271197624642482790079785650197046958215289687604742");
const SQRT_AD_MINUS_ONE = BigInt("25063068953384623474111414158702152701244531502492656460079210482610430750235"), INVSQRT_A_MINUS_D = BigInt("54469307008909316920995813868745141605393597292927456921205312896311721017578"), ONE_MINUS_D_SQ = BigInt("1159843021668779879193775521855586647937357759715417654439879720876111806838"), D_MINUS_ONE_SQ = BigInt("40440834346308536858101042469323190826248399146238708352240133220865137265952");
class ExtendedPoint {
  constructor(e, n, a, c) {
    this.x = e, this.y = n, this.z = a, this.t = c;
  }
  static fromAffine(e) {
    if (!(e instanceof Point$1))
      throw new TypeError("ExtendedPoint#fromAffine: expected Point");
    return e.equals(Point$1.ZERO) ? ExtendedPoint.ZERO : new ExtendedPoint(e.x, e.y, _1n$8, mod$1(e.x * e.y));
  }
  static toAffineBatch(e) {
    const n = invertBatch(e.map((a) => a.z));
    return e.map((a, c) => a.toAffine(n[c]));
  }
  static normalizeZ(e) {
    return this.toAffineBatch(e).map(this.fromAffine);
  }
  equals(e) {
    assertExtPoint(e);
    const { x: n, y: a, z: c } = this, { x: o, y: d, z: m } = e, w = mod$1(n * m), S = mod$1(o * c), A = mod$1(a * m), B = mod$1(d * c);
    return w === S && A === B;
  }
  negate() {
    return new ExtendedPoint(mod$1(-this.x), this.y, this.z, mod$1(-this.t));
  }
  double() {
    const { x: e, y: n, z: a } = this, { a: c } = CURVE, o = mod$1(e * e), d = mod$1(n * n), m = mod$1(_2n$6 * mod$1(a * a)), w = mod$1(c * o), S = e + n, A = mod$1(mod$1(S * S) - o - d), B = w + d, P = B - m, I = w - d, O = mod$1(A * P), L = mod$1(B * I), C = mod$1(A * I), z = mod$1(P * B);
    return new ExtendedPoint(O, L, z, C);
  }
  add(e) {
    assertExtPoint(e);
    const { x: n, y: a, z: c, t: o } = this, { x: d, y: m, z: w, t: S } = e, A = mod$1((a - n) * (m + d)), B = mod$1((a + n) * (m - d)), P = mod$1(B - A);
    if (P === _0n$6)
      return this.double();
    const I = mod$1(c * _2n$6 * S), O = mod$1(o * _2n$6 * w), L = O + I, C = B + A, z = O - I, q = mod$1(L * P), Z = mod$1(C * z), X = mod$1(L * z), ie = mod$1(P * C);
    return new ExtendedPoint(q, Z, ie, X);
  }
  subtract(e) {
    return this.add(e.negate());
  }
  precomputeWindow(e) {
    const n = 1 + 256 / e, a = [];
    let c = this, o = c;
    for (let d = 0; d < n; d++) {
      o = c, a.push(o);
      for (let m = 1; m < 2 ** (e - 1); m++)
        o = o.add(c), a.push(o);
      c = o.double();
    }
    return a;
  }
  wNAF(e, n) {
    !n && this.equals(ExtendedPoint.BASE) && (n = Point$1.BASE);
    const a = n && n._WINDOW_SIZE || 1;
    if (256 % a)
      throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");
    let c = n && pointPrecomputes.get(n);
    c || (c = this.precomputeWindow(a), n && a !== 1 && (c = ExtendedPoint.normalizeZ(c), pointPrecomputes.set(n, c)));
    let o = ExtendedPoint.ZERO, d = ExtendedPoint.BASE;
    const m = 1 + 256 / a, w = 2 ** (a - 1), S = BigInt(2 ** a - 1), A = 2 ** a, B = BigInt(a);
    for (let P = 0; P < m; P++) {
      const I = P * w;
      let O = Number(e & S);
      e >>= B, O > w && (O -= A, e += _1n$8);
      const L = I, C = I + Math.abs(O) - 1, z = P % 2 !== 0, q = O < 0;
      O === 0 ? d = d.add(constTimeNegate(z, c[L])) : o = o.add(constTimeNegate(q, c[C]));
    }
    return ExtendedPoint.normalizeZ([o, d])[0];
  }
  multiply(e, n) {
    return this.wNAF(normalizeScalar(e, CURVE.l), n);
  }
  multiplyUnsafe(e) {
    let n = normalizeScalar(e, CURVE.l, !1);
    const a = ExtendedPoint.BASE, c = ExtendedPoint.ZERO;
    if (n === _0n$6)
      return c;
    if (this.equals(c) || n === _1n$8)
      return this;
    if (this.equals(a))
      return this.wNAF(n);
    let o = c, d = this;
    for (; n > _0n$6; )
      n & _1n$8 && (o = o.add(d)), d = d.double(), n >>= _1n$8;
    return o;
  }
  isSmallOrder() {
    return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);
  }
  isTorsionFree() {
    let e = this.multiplyUnsafe(CURVE.l / _2n$6).double();
    return CURVE.l % _2n$6 && (e = e.add(this)), e.equals(ExtendedPoint.ZERO);
  }
  toAffine(e) {
    const { x: n, y: a, z: c } = this, o = this.equals(ExtendedPoint.ZERO);
    e == null && (e = o ? _8n$2 : invert$1(c));
    const d = mod$1(n * e), m = mod$1(a * e), w = mod$1(c * e);
    if (o)
      return Point$1.ZERO;
    if (w !== _1n$8)
      throw new Error("invZ was invalid");
    return new Point$1(d, m);
  }
  fromRistrettoBytes() {
    legacyRist();
  }
  toRistrettoBytes() {
    legacyRist();
  }
  fromRistrettoHash() {
    legacyRist();
  }
}
ExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n$8, mod$1(CURVE.Gx * CURVE.Gy));
ExtendedPoint.ZERO = new ExtendedPoint(_0n$6, _1n$8, _1n$8, _0n$6);
function constTimeNegate(t, e) {
  const n = e.negate();
  return t ? n : e;
}
function assertExtPoint(t) {
  if (!(t instanceof ExtendedPoint))
    throw new TypeError("ExtendedPoint expected");
}
function assertRstPoint(t) {
  if (!(t instanceof RistrettoPoint))
    throw new TypeError("RistrettoPoint expected");
}
function legacyRist() {
  throw new Error("Legacy method: switch to RistrettoPoint");
}
class RistrettoPoint {
  constructor(e) {
    this.ep = e;
  }
  static calcElligatorRistrettoMap(e) {
    const { d: n } = CURVE, a = mod$1(SQRT_M1 * e * e), c = mod$1((a + _1n$8) * ONE_MINUS_D_SQ);
    let o = BigInt(-1);
    const d = mod$1((o - n * a) * mod$1(a + n));
    let { isValid: m, value: w } = uvRatio$1(c, d), S = mod$1(w * e);
    edIsNegative(S) || (S = mod$1(-S)), m || (w = S), m || (o = a);
    const A = mod$1(o * (a - _1n$8) * D_MINUS_ONE_SQ - d), B = w * w, P = mod$1((w + w) * d), I = mod$1(A * SQRT_AD_MINUS_ONE), O = mod$1(_1n$8 - B), L = mod$1(_1n$8 + B);
    return new ExtendedPoint(mod$1(P * L), mod$1(O * I), mod$1(I * L), mod$1(P * O));
  }
  static hashToCurve(e) {
    e = ensureBytes$1(e, 64);
    const n = bytes255ToNumberLE(e.slice(0, 32)), a = this.calcElligatorRistrettoMap(n), c = bytes255ToNumberLE(e.slice(32, 64)), o = this.calcElligatorRistrettoMap(c);
    return new RistrettoPoint(a.add(o));
  }
  static fromHex(e) {
    e = ensureBytes$1(e, 32);
    const { a: n, d: a } = CURVE, c = "RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint", o = bytes255ToNumberLE(e);
    if (!equalBytes$1(numberTo32BytesLE(o), e) || edIsNegative(o))
      throw new Error(c);
    const d = mod$1(o * o), m = mod$1(_1n$8 + n * d), w = mod$1(_1n$8 - n * d), S = mod$1(m * m), A = mod$1(w * w), B = mod$1(n * a * S - A), { isValid: P, value: I } = invertSqrt(mod$1(B * A)), O = mod$1(I * w), L = mod$1(I * O * B);
    let C = mod$1((o + o) * O);
    edIsNegative(C) && (C = mod$1(-C));
    const z = mod$1(m * L), q = mod$1(C * z);
    if (!P || edIsNegative(q) || z === _0n$6)
      throw new Error(c);
    return new RistrettoPoint(new ExtendedPoint(C, z, _1n$8, q));
  }
  toRawBytes() {
    let { x: e, y: n, z: a, t: c } = this.ep;
    const o = mod$1(mod$1(a + n) * mod$1(a - n)), d = mod$1(e * n), m = mod$1(d * d), { value: w } = invertSqrt(mod$1(o * m)), S = mod$1(w * o), A = mod$1(w * d), B = mod$1(S * A * c);
    let P;
    if (edIsNegative(c * B)) {
      let O = mod$1(n * SQRT_M1), L = mod$1(e * SQRT_M1);
      e = O, n = L, P = mod$1(S * INVSQRT_A_MINUS_D);
    } else
      P = A;
    edIsNegative(e * B) && (n = mod$1(-n));
    let I = mod$1((a - n) * P);
    return edIsNegative(I) && (I = mod$1(-I)), numberTo32BytesLE(I);
  }
  toHex() {
    return bytesToHex$2(this.toRawBytes());
  }
  toString() {
    return this.toHex();
  }
  equals(e) {
    assertRstPoint(e);
    const n = this.ep, a = e.ep, c = mod$1(n.x * a.y) === mod$1(n.y * a.x), o = mod$1(n.y * a.y) === mod$1(n.x * a.x);
    return c || o;
  }
  add(e) {
    return assertRstPoint(e), new RistrettoPoint(this.ep.add(e.ep));
  }
  subtract(e) {
    return assertRstPoint(e), new RistrettoPoint(this.ep.subtract(e.ep));
  }
  multiply(e) {
    return new RistrettoPoint(this.ep.multiply(e));
  }
  multiplyUnsafe(e) {
    return new RistrettoPoint(this.ep.multiplyUnsafe(e));
  }
}
RistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);
RistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);
const pointPrecomputes = /* @__PURE__ */ new WeakMap();
let Point$1 = class Vt {
  constructor(e, n) {
    this.x = e, this.y = n;
  }
  _setWindowSize(e) {
    this._WINDOW_SIZE = e, pointPrecomputes.delete(this);
  }
  static fromHex(e, n = !0) {
    const { d: a, P: c } = CURVE;
    e = ensureBytes$1(e, 32);
    const o = e.slice();
    o[31] = e[31] & -129;
    const d = bytesToNumberLE$1(o);
    if (n && d >= c)
      throw new Error("Expected 0 < hex < P");
    if (!n && d >= POW_2_256)
      throw new Error("Expected 0 < hex < 2**256");
    const m = mod$1(d * d), w = mod$1(m - _1n$8), S = mod$1(a * m + _1n$8);
    let { isValid: A, value: B } = uvRatio$1(w, S);
    if (!A)
      throw new Error("Point.fromHex: invalid y coordinate");
    const P = (B & _1n$8) === _1n$8;
    return (e[31] & 128) !== 0 !== P && (B = mod$1(-B)), new Vt(B, d);
  }
  static async fromPrivateKey(e) {
    return (await getExtendedPublicKey(e)).point;
  }
  toRawBytes() {
    const e = numberTo32BytesLE(this.y);
    return e[31] |= this.x & _1n$8 ? 128 : 0, e;
  }
  toHex() {
    return bytesToHex$2(this.toRawBytes());
  }
  toX25519() {
    const { y: e } = this, n = mod$1((_1n$8 + e) * invert$1(_1n$8 - e));
    return numberTo32BytesLE(n);
  }
  isTorsionFree() {
    return ExtendedPoint.fromAffine(this).isTorsionFree();
  }
  equals(e) {
    return this.x === e.x && this.y === e.y;
  }
  negate() {
    return new Vt(mod$1(-this.x), this.y);
  }
  add(e) {
    return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(e)).toAffine();
  }
  subtract(e) {
    return this.add(e.negate());
  }
  multiply(e) {
    return ExtendedPoint.fromAffine(this).multiply(e, this).toAffine();
  }
};
Point$1.BASE = new Point$1(CURVE.Gx, CURVE.Gy);
Point$1.ZERO = new Point$1(_0n$6, _1n$8);
let Signature$2 = class Zt {
  constructor(e, n) {
    this.r = e, this.s = n, this.assertValidity();
  }
  static fromHex(e) {
    const n = ensureBytes$1(e, 64), a = Point$1.fromHex(n.slice(0, 32), !1), c = bytesToNumberLE$1(n.slice(32, 64));
    return new Zt(a, c);
  }
  assertValidity() {
    const { r: e, s: n } = this;
    if (!(e instanceof Point$1))
      throw new Error("Expected Point instance");
    return normalizeScalar(n, CURVE.l, !1), this;
  }
  toRawBytes() {
    const e = new Uint8Array(64);
    return e.set(this.r.toRawBytes()), e.set(numberTo32BytesLE(this.s), 32), e;
  }
  toHex() {
    return bytesToHex$2(this.toRawBytes());
  }
};
function concatBytes$2(...t) {
  if (!t.every((a) => a instanceof Uint8Array))
    throw new Error("Expected Uint8Array list");
  if (t.length === 1)
    return t[0];
  const e = t.reduce((a, c) => a + c.length, 0), n = new Uint8Array(e);
  for (let a = 0, c = 0; a < t.length; a++) {
    const o = t[a];
    n.set(o, c), c += o.length;
  }
  return n;
}
const hexes$2 = Array.from({ length: 256 }, (t, e) => e.toString(16).padStart(2, "0"));
function bytesToHex$2(t) {
  if (!(t instanceof Uint8Array))
    throw new Error("Uint8Array expected");
  let e = "";
  for (let n = 0; n < t.length; n++)
    e += hexes$2[t[n]];
  return e;
}
function hexToBytes$2(t) {
  if (typeof t != "string")
    throw new TypeError("hexToBytes: expected string, got " + typeof t);
  if (t.length % 2)
    throw new Error("hexToBytes: received invalid unpadded hex");
  const e = new Uint8Array(t.length / 2);
  for (let n = 0; n < e.length; n++) {
    const a = n * 2, c = t.slice(a, a + 2), o = Number.parseInt(c, 16);
    if (Number.isNaN(o) || o < 0)
      throw new Error("Invalid byte sequence");
    e[n] = o;
  }
  return e;
}
function numberTo32BytesBE(t) {
  const n = t.toString(16).padStart(64, "0");
  return hexToBytes$2(n);
}
function numberTo32BytesLE(t) {
  return numberTo32BytesBE(t).reverse();
}
function edIsNegative(t) {
  return (mod$1(t) & _1n$8) === _1n$8;
}
function bytesToNumberLE$1(t) {
  if (!(t instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  return BigInt("0x" + bytesToHex$2(Uint8Array.from(t).reverse()));
}
const MAX_255B = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
function bytes255ToNumberLE(t) {
  return mod$1(bytesToNumberLE$1(t) & MAX_255B);
}
function mod$1(t, e = CURVE.P) {
  const n = t % e;
  return n >= _0n$6 ? n : e + n;
}
function invert$1(t, e = CURVE.P) {
  if (t === _0n$6 || e <= _0n$6)
    throw new Error(`invert: expected positive integers, got n=${t} mod=${e}`);
  let n = mod$1(t, e), a = e, c = _0n$6, o = _1n$8;
  for (; n !== _0n$6; ) {
    const m = a / n, w = a % n, S = c - o * m;
    a = n, n = w, c = o, o = S;
  }
  if (a !== _1n$8)
    throw new Error("invert: does not exist");
  return mod$1(c, e);
}
function invertBatch(t, e = CURVE.P) {
  const n = new Array(t.length), a = t.reduce((o, d, m) => d === _0n$6 ? o : (n[m] = o, mod$1(o * d, e)), _1n$8), c = invert$1(a, e);
  return t.reduceRight((o, d, m) => d === _0n$6 ? o : (n[m] = mod$1(o * n[m], e), mod$1(o * d, e)), c), n;
}
function pow2$1(t, e) {
  const { P: n } = CURVE;
  let a = t;
  for (; e-- > _0n$6; )
    a *= a, a %= n;
  return a;
}
function pow_2_252_3(t) {
  const { P: e } = CURVE, n = BigInt(5), a = BigInt(10), c = BigInt(20), o = BigInt(40), d = BigInt(80), w = t * t % e * t % e, S = pow2$1(w, _2n$6) * w % e, A = pow2$1(S, _1n$8) * t % e, B = pow2$1(A, n) * A % e, P = pow2$1(B, a) * B % e, I = pow2$1(P, c) * P % e, O = pow2$1(I, o) * I % e, L = pow2$1(O, d) * O % e, C = pow2$1(L, d) * O % e, z = pow2$1(C, a) * B % e;
  return { pow_p_5_8: pow2$1(z, _2n$6) * t % e, b2: w };
}
function uvRatio$1(t, e) {
  const n = mod$1(e * e * e), a = mod$1(n * n * e), c = pow_2_252_3(t * a).pow_p_5_8;
  let o = mod$1(t * n * c);
  const d = mod$1(e * o * o), m = o, w = mod$1(o * SQRT_M1), S = d === t, A = d === mod$1(-t), B = d === mod$1(-t * SQRT_M1);
  return S && (o = m), (A || B) && (o = w), edIsNegative(o) && (o = mod$1(-o)), { isValid: S || A, value: o };
}
function invertSqrt(t) {
  return uvRatio$1(_1n$8, t);
}
function modlLE(t) {
  return mod$1(bytesToNumberLE$1(t), CURVE.l);
}
function equalBytes$1(t, e) {
  if (t.length !== e.length)
    return !1;
  for (let n = 0; n < t.length; n++)
    if (t[n] !== e[n])
      return !1;
  return !0;
}
function ensureBytes$1(t, e) {
  const n = t instanceof Uint8Array ? Uint8Array.from(t) : hexToBytes$2(t);
  if (typeof e == "number" && n.length !== e)
    throw new Error(`Expected ${e} bytes`);
  return n;
}
function normalizeScalar(t, e, n = !0) {
  if (!e)
    throw new TypeError("Specify max value");
  if (typeof t == "number" && Number.isSafeInteger(t) && (t = BigInt(t)), typeof t == "bigint" && t < e) {
    if (n) {
      if (_0n$6 < t)
        return t;
    } else if (_0n$6 <= t)
      return t;
  }
  throw new TypeError("Expected valid scalar: 0 < scalar < max");
}
function adjustBytes25519(t) {
  return t[0] &= 248, t[31] &= 127, t[31] |= 64, t;
}
function checkPrivateKey(t) {
  if (t = typeof t == "bigint" || typeof t == "number" ? numberTo32BytesBE(normalizeScalar(t, POW_2_256)) : ensureBytes$1(t), t.length !== 32)
    throw new Error("Expected 32 bytes");
  return t;
}
function getKeyFromHash(t) {
  const e = adjustBytes25519(t.slice(0, 32)), n = t.slice(32, 64), a = modlLE(e), c = Point$1.BASE.multiply(a), o = c.toRawBytes();
  return { head: e, prefix: n, scalar: a, point: c, pointBytes: o };
}
let _sha512Sync;
async function getExtendedPublicKey(t) {
  return getKeyFromHash(await utils$e.sha512(checkPrivateKey(t)));
}
async function sign$3(t, e) {
  t = ensureBytes$1(t);
  const { prefix: n, scalar: a, pointBytes: c } = await getExtendedPublicKey(e), o = modlLE(await utils$e.sha512(n, t)), d = Point$1.BASE.multiply(o), m = modlLE(await utils$e.sha512(d.toRawBytes(), c, t)), w = mod$1(o + m * a, CURVE.l);
  return new Signature$2(d, w).toRawBytes();
}
function prepareVerification(t, e, n) {
  e = ensureBytes$1(e), n instanceof Point$1 || (n = Point$1.fromHex(n, !1));
  const { r: a, s: c } = t instanceof Signature$2 ? t.assertValidity() : Signature$2.fromHex(t), o = ExtendedPoint.BASE.multiplyUnsafe(c);
  return { r: a, s: c, SB: o, pub: n, msg: e };
}
function finishVerification(t, e, n, a) {
  const c = modlLE(a), o = ExtendedPoint.fromAffine(t).multiplyUnsafe(c);
  return ExtendedPoint.fromAffine(e).add(o).subtract(n).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);
}
async function verify$1(t, e, n) {
  const { r: a, SB: c, msg: o, pub: d } = prepareVerification(t, e, n), m = await utils$e.sha512(a.toRawBytes(), d.toRawBytes(), o);
  return finishVerification(d, a, c, m);
}
Point$1.BASE._setWindowSize(8);
const crypto$3 = {
  node: nodeCrypto,
  web: typeof self == "object" && "crypto" in self ? self.crypto : void 0
}, utils$e = {
  bytesToHex: bytesToHex$2,
  hexToBytes: hexToBytes$2,
  concatBytes: concatBytes$2,
  getExtendedPublicKey,
  mod: mod$1,
  invert: invert$1,
  TORSION_SUBGROUP: [
    "0100000000000000000000000000000000000000000000000000000000000000",
    "c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a",
    "0000000000000000000000000000000000000000000000000000000000000080",
    "26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05",
    "ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f",
    "26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85",
    "0000000000000000000000000000000000000000000000000000000000000000",
    "c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa"
  ],
  hashToPrivateScalar: (t) => {
    if (t = ensureBytes$1(t), t.length < 40 || t.length > 1024)
      throw new Error("Expected 40-1024 bytes of private key as per FIPS 186");
    return mod$1(bytesToNumberLE$1(t), CURVE.l - _1n$8) + _1n$8;
  },
  randomBytes: (t = 32) => {
    if (crypto$3.web)
      return crypto$3.web.getRandomValues(new Uint8Array(t));
    if (crypto$3.node) {
      const { randomBytes: e } = crypto$3.node;
      return new Uint8Array(e(t).buffer);
    } else
      throw new Error("The environment doesn't have randomBytes function");
  },
  randomPrivateKey: () => utils$e.randomBytes(32),
  sha512: async (...t) => {
    const e = concatBytes$2(...t);
    if (crypto$3.web) {
      const n = await crypto$3.web.subtle.digest("SHA-512", e.buffer);
      return new Uint8Array(n);
    } else {
      if (crypto$3.node)
        return Uint8Array.from(crypto$3.node.createHash("sha512").update(e).digest());
      throw new Error("The environment doesn't have sha512 function");
    }
  },
  precompute(t = 8, e = Point$1.BASE) {
    const n = e.equals(Point$1.BASE) ? e : new Point$1(e.x, e.y);
    return n._setWindowSize(t), n.multiply(_2n$6), n;
  },
  sha512Sync: void 0
};
Object.defineProperties(utils$e, {
  sha512Sync: {
    configurable: !1,
    get() {
      return _sha512Sync;
    },
    set(t) {
      _sha512Sync || (_sha512Sync = t);
    }
  }
});
class Curve25519 {
  _key;
  pk;
  ownerLength = SIG_CONFIG[2].pubLength;
  signatureLength = SIG_CONFIG[2].sigLength;
  _publicKey;
  get publicKey() {
    return this._publicKey;
  }
  signatureType = 2;
  constructor(e, n) {
    this._key = e, this.pk = n;
  }
  get key() {
    throw new Error("You must implement `key`");
  }
  sign(e) {
    return sign$3(Buffer$F.from(e), Buffer$F.from(this.key));
  }
  static async verify(e, n, a) {
    let c = e;
    return typeof e == "string" && (c = base64url.toBuffer(e)), verify$1(Buffer$F.from(a), Buffer$F.from(n), Buffer$F.from(c));
  }
}
var toByteArray_1 = toByteArray, fromByteArray_1 = fromByteArray, lookup = [], revLookup = [], Arr = typeof Uint8Array < "u" ? Uint8Array : Array, code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for (var i$1 = 0, len = code.length; i$1 < len; ++i$1)
  lookup[i$1] = code[i$1], revLookup[code.charCodeAt(i$1)] = i$1;
revLookup[45] = 62;
revLookup[95] = 63;
function getLens(t) {
  var e = t.length;
  if (e % 4 > 0)
    throw new Error("Invalid string. Length must be a multiple of 4");
  var n = t.indexOf("=");
  n === -1 && (n = e);
  var a = n === e ? 0 : 4 - n % 4;
  return [n, a];
}
function _byteLength(t, e, n) {
  return (e + n) * 3 / 4 - n;
}
function toByteArray(t) {
  var e, n = getLens(t), a = n[0], c = n[1], o = new Arr(_byteLength(t, a, c)), d = 0, m = c > 0 ? a - 4 : a, w;
  for (w = 0; w < m; w += 4)
    e = revLookup[t.charCodeAt(w)] << 18 | revLookup[t.charCodeAt(w + 1)] << 12 | revLookup[t.charCodeAt(w + 2)] << 6 | revLookup[t.charCodeAt(w + 3)], o[d++] = e >> 16 & 255, o[d++] = e >> 8 & 255, o[d++] = e & 255;
  return c === 2 && (e = revLookup[t.charCodeAt(w)] << 2 | revLookup[t.charCodeAt(w + 1)] >> 4, o[d++] = e & 255), c === 1 && (e = revLookup[t.charCodeAt(w)] << 10 | revLookup[t.charCodeAt(w + 1)] << 4 | revLookup[t.charCodeAt(w + 2)] >> 2, o[d++] = e >> 8 & 255, o[d++] = e & 255), o;
}
function tripletToBase64(t) {
  return lookup[t >> 18 & 63] + lookup[t >> 12 & 63] + lookup[t >> 6 & 63] + lookup[t & 63];
}
function encodeChunk(t, e, n) {
  for (var a, c = [], o = e; o < n; o += 3)
    a = (t[o] << 16 & 16711680) + (t[o + 1] << 8 & 65280) + (t[o + 2] & 255), c.push(tripletToBase64(a));
  return c.join("");
}
function fromByteArray(t) {
  for (var e, n = t.length, a = n % 3, c = [], o = 16383, d = 0, m = n - a; d < m; d += o)
    c.push(encodeChunk(t, d, d + o > m ? m : d + o));
  return a === 1 ? (e = t[n - 1], c.push(
    lookup[e >> 2] + lookup[e << 4 & 63] + "=="
  )) : a === 2 && (e = (t[n - 2] << 8) + t[n - 1], c.push(
    lookup[e >> 10] + lookup[e >> 4 & 63] + lookup[e << 2 & 63] + "="
  )), c.join("");
}
function concatBuffers(t) {
  let e = 0;
  for (const c of t)
    e += c.byteLength;
  const n = new Uint8Array(e);
  let a = 0;
  n.set(new Uint8Array(t[0]), a), a += t[0].byteLength;
  for (let c = 1; c < t.length; c++)
    n.set(new Uint8Array(t[c]), a), a += t[c].byteLength;
  return n;
}
function b64UrlToString(t) {
  const e = b64UrlToBuffer(t);
  return bufferToString(e);
}
function bufferToString(t) {
  return new TextDecoder("utf-8", { fatal: !0 }).decode(t);
}
function stringToBuffer(t) {
  return new TextEncoder().encode(t);
}
function stringToB64Url(t) {
  return bufferTob64Url(stringToBuffer(t));
}
function b64UrlToBuffer(t) {
  return new Uint8Array(toByteArray_1(b64UrlDecode(t)));
}
function bufferTob64(t) {
  return fromByteArray_1(new Uint8Array(t));
}
function bufferTob64Url(t) {
  return b64UrlEncode(bufferTob64(t));
}
function b64UrlEncode(t) {
  return t.replace(/\+/g, "-").replace(/\//g, "_").replace(/\=/g, "");
}
function b64UrlDecode(t) {
  t = t.replace(/\-/g, "+").replace(/\_/g, "/");
  let e;
  return t.length % 4 == 0 ? e = 0 : e = 4 - t.length % 4, t.concat("=".repeat(e));
}
function winstonToAr(t) {
  return new BigNumber$1(t).shiftedBy(-12);
}
function arToWinston(t) {
  return new BigNumber$1(t).shiftedBy(12);
}
const ArweaveUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  arToWinston,
  b64UrlDecode,
  b64UrlEncode,
  b64UrlToBuffer,
  b64UrlToString,
  bufferToString,
  bufferTob64,
  bufferTob64Url,
  concatBuffers,
  stringToB64Url,
  stringToBuffer,
  winstonToAr
}, Symbol.toStringTag, { value: "Module" }));
class WebCryptoDriver {
  keyLength = 4096;
  publicExponent = 65537;
  hashAlgorithm = "sha256";
  driver;
  constructor() {
    this.driver = crypto?.subtle;
  }
  async generateJWK() {
    const e = await this.driver.generateKey({
      name: "RSA-PSS",
      modulusLength: 4096,
      publicExponent: new Uint8Array([1, 0, 1]),
      hash: {
        name: "SHA-256"
      }
    }, !0, ["sign"]), n = await this.driver.exportKey("jwk", e.privateKey);
    return {
      kty: n.kty,
      e: n.e,
      n: n.n,
      d: n.d,
      p: n.p,
      q: n.q,
      dp: n.dp,
      dq: n.dq,
      qi: n.qi
    };
  }
  async sign(e, n, { saltLength: a } = { saltLength: 32 }) {
    const c = await this.driver.sign({
      name: "RSA-PSS",
      saltLength: a
    }, await this.jwkToCryptoKey(e), n);
    return new Uint8Array(c);
  }
  async hash(e, n = "SHA-256") {
    const a = await this.driver.digest(n, e);
    return new Uint8Array(a);
  }
  async verify(e, n, a) {
    const c = {
      kty: "RSA",
      e: "AQAB",
      n: e
    }, o = await this.jwkToPublicCryptoKey(c), d = await this.driver.digest("SHA-256", n), m = await this.driver.verify({
      name: "RSA-PSS",
      saltLength: 0
    }, o, a, n), w = await this.driver.verify({
      name: "RSA-PSS",
      saltLength: 32
    }, o, a, n), S = await this.driver.verify({
      name: "RSA-PSS",
      saltLength: Math.ceil((o.algorithm.modulusLength - 1) / 8) - d.byteLength - 2
    }, o, a, n);
    return m || w || S;
  }
  async jwkToCryptoKey(e) {
    return this.driver.importKey("jwk", e, {
      name: "RSA-PSS",
      hash: {
        name: "SHA-256"
      }
    }, !1, ["sign"]);
  }
  async jwkToPublicCryptoKey(e) {
    return this.driver.importKey("jwk", e, {
      name: "RSA-PSS",
      hash: {
        name: "SHA-256"
      }
    }, !1, ["verify"]);
  }
  // private detectWebCrypto() {
  //   if (typeof crypto === "undefined") {
  //     return false;
  //   }
  //   const subtle = crypto?.subtle;
  //   if (subtle === undefined) {
  //     return false;
  //   }
  //   const names = ["generateKey", "importKey", "exportKey", "digest", "sign"] as const;
  //   return names.every((name) => typeof subtle[name] === "function");
  // }
  async encrypt(e, n, a) {
    const c = await this.driver.importKey("raw", typeof n == "string" ? stringToBuffer(n) : n, {
      name: "PBKDF2",
      length: 32
    }, !1, ["deriveKey"]), o = await this.driver.deriveKey({
      name: "PBKDF2",
      salt: stringToBuffer(a || "salt"),
      iterations: 1e5,
      hash: "SHA-256"
    }, c, {
      name: "AES-CBC",
      length: 256
    }, !1, ["encrypt", "decrypt"]), d = new Uint8Array(16);
    crypto.getRandomValues(d);
    const m = await this.driver.encrypt({
      name: "AES-CBC",
      iv: d
    }, o, e);
    return concatBuffers([d, m]);
  }
  async decrypt(e, n, a) {
    const c = await this.driver.importKey("raw", typeof n == "string" ? stringToBuffer(n) : n, {
      name: "PBKDF2",
      length: 32
    }, !1, ["deriveKey"]), o = await this.driver.deriveKey({
      name: "PBKDF2",
      salt: stringToBuffer(a || "salt"),
      iterations: 1e5,
      hash: "SHA-256"
    }, c, {
      name: "AES-CBC",
      length: 256
    }, !1, ["encrypt", "decrypt"]), d = e.slice(0, 16), m = await this.driver.decrypt({
      name: "AES-CBC",
      iv: d
    }, o, e.slice(16));
    return concatBuffers([m]);
  }
}
async function deepHash(t) {
  if (typeof t[Symbol.asyncIterator] == "function") {
    const c = t, o = cryptoBrowserifyExports.createHash("sha384");
    let d = 0;
    for await (const S of c)
      d += S.byteLength, o.update(S);
    const m = concatBuffers([stringToBuffer("blob"), stringToBuffer(d.toString())]), w = concatBuffers([await getCryptoDriver().hash(m, "SHA-384"), o.digest()]);
    return await getCryptoDriver().hash(w, "SHA-384");
  } else if (Array.isArray(t)) {
    const c = concatBuffers([stringToBuffer("list"), stringToBuffer(t.length.toString())]);
    return await deepHashChunks(t, await getCryptoDriver().hash(c, "SHA-384"));
  }
  const e = t, n = concatBuffers([stringToBuffer("blob"), stringToBuffer(e.byteLength.toString())]), a = concatBuffers([await getCryptoDriver().hash(n, "SHA-384"), await getCryptoDriver().hash(e, "SHA-384")]);
  return await getCryptoDriver().hash(a, "SHA-384");
}
async function deepHashChunks(t, e) {
  if (t.length < 1)
    return e;
  const n = concatBuffers([e, await deepHash(t[0])]), a = await getCryptoDriver().hash(n, "SHA-384");
  return await deepHashChunks(t.slice(1), a);
}
class ArweaveError extends Error {
  type;
  response;
  constructor(e, n = {}) {
    n.message ? super(n.message) : super(), this.type = e, this.response = n.response;
  }
  getType() {
    return this.type;
  }
}
function getError(t) {
  let e = t.data;
  if (typeof t.data == "string")
    try {
      e = JSON.parse(t.data);
    } catch {
    }
  if (t.data instanceof ArrayBuffer || t.data instanceof Uint8Array)
    try {
      e = JSON.parse(e.toString());
    } catch {
    }
  return e ? e.error || e : t.statusText || "unknown";
}
class Blocks {
  api;
  network;
  constructor(e, n) {
    this.api = e, this.network = n;
  }
  /**
   * Gets a block by its "indep_hash"
   */
  async getByHash(e) {
    const n = await this.api.get(`block/hash/${e}`);
    if (n.status === 200)
      return n.data;
    throw n.status === 404 ? new ArweaveError(
      "BLOCK_NOT_FOUND"
      /* ArweaveErrorType.BLOCK_NOT_FOUND */
    ) : new Error(`Error while loading block data: ${n}`);
  }
  /**
   * Gets a block by its "indep_hash"
   */
  async getByHeight(e) {
    const n = await this.api.get(`block/height/${e}`);
    if (n.status === 200)
      return n.data;
    throw n.status === 404 ? new ArweaveError(
      "BLOCK_NOT_FOUND"
      /* ArweaveErrorType.BLOCK_NOT_FOUND */
    ) : new Error(`Error while loading block data: ${n}`);
  }
  /**
   * Gets current block data (ie. block with indep_hash = Network.getInfo().current)
   */
  async getCurrent() {
    const { current: e } = await this.network.getInfo();
    return await this.getByHash(e);
  }
}
const MAX_CHUNK_SIZE = 256 * 1024, MIN_CHUNK_SIZE = 32 * 1024, NOTE_SIZE = 32, HASH_SIZE = 32;
class Merkle {
  crypto;
  constructor(e) {
    this.crypto = e.deps.crypto;
  }
  /**
   * Takes the input data and chunks it into (mostly) equal sized chunks.
   * The last chunk will be a bit smaller as it contains the remainder
   * from the chunking process.
   */
  async chunkData(e) {
    const n = [];
    let a = e, c = 0;
    for (; a.byteLength >= MAX_CHUNK_SIZE; ) {
      let o = MAX_CHUNK_SIZE;
      const d = a.byteLength - MAX_CHUNK_SIZE;
      d > 0 && d < MIN_CHUNK_SIZE && (o = Math.ceil(a.byteLength / 2));
      const m = a.slice(0, o), w = await this.crypto.hash(m);
      c += m.byteLength, n.push({
        dataHash: w,
        minByteRange: c - m.byteLength,
        maxByteRange: c
      }), a = a.slice(o);
    }
    return n.push({
      dataHash: await this.crypto.hash(a),
      minByteRange: c,
      maxByteRange: c + a.byteLength
    }), n;
  }
  async generateLeaves(e) {
    return Promise.all(e.map(async ({ dataHash: n, minByteRange: a, maxByteRange: c }) => ({
      type: "leaf",
      id: await this.hash(await Promise.all([this.hash(n), this.hash(intToBuffer$1(c))])),
      dataHash: n,
      minByteRange: a,
      maxByteRange: c
    })));
  }
  /**
   * Builds an arweave merkle tree and gets the root hash for the given input.
   */
  async computeRootHash(e) {
    return (await this.generateTree(e)).id;
  }
  async generateTree(e) {
    return await this.buildLayers(await this.generateLeaves(await this.chunkData(e)));
  }
  /**
   * Generates the data_root, chunks & proofs
   * needed for a transaction.
   *
   * This also checks if the last chunk is a zero-length
   * chunk and discards that chunk and proof if so.
   * (we do not need to upload this zero length chunk)
   *
   * @param data
   */
  async generateTransactionChunks(e) {
    const n = await this.chunkData(e), a = await this.generateLeaves(n), c = await this.buildLayers(a), o = await this.generateProofs(c), d = n.slice(-1)[0];
    return d.maxByteRange - d.minByteRange === 0 && (n.splice(n.length - 1, 1), o.splice(o.length - 1, 1)), {
      data_root: c.id,
      chunks: n,
      proofs: o
    };
  }
  /**
   * Starting with the bottom layer of leaf nodes, hash every second pair
   * into a new branch node, push those branch nodes onto a new layer,
   * and then recurse, building up the tree to it's root, where the
   * layer only consists of two items.
   */
  async buildLayers(e, n = 0) {
    if (e.length < 2)
      return e[0];
    const a = [];
    for (let c = 0; c < e.length; c += 2)
      a.push(await this.hashBranch(e[c], e[c + 1]));
    return this.buildLayers(a, n + 1);
  }
  /**
   * Recursively search through all branches of the tree,
   * and generate a proof for each leaf node.
   */
  generateProofs(e) {
    const n = this.resolveBranchProofs(e);
    return Array.isArray(n) ? arrayFlatten(n) : [n];
  }
  resolveBranchProofs(e, n = new Uint8Array(), a = 0) {
    if (e.type == "leaf")
      return {
        offset: e.maxByteRange - 1,
        proof: concatBuffers([n, e.dataHash, intToBuffer$1(e.maxByteRange)])
      };
    if (e.type == "branch") {
      const c = concatBuffers([n, e.leftChild.id, e.rightChild.id, intToBuffer$1(e.byteRange)]);
      return [
        this.resolveBranchProofs(e.leftChild, c, a + 1),
        this.resolveBranchProofs(e.rightChild, c, a + 1)
      ];
    }
    throw new Error("Unexpected node type");
  }
  async validatePath(e, n, a, c, o) {
    if (c <= 0)
      return !1;
    if (n >= c)
      return this.validatePath(e, 0, c - 1, c, o);
    if (n < 0)
      return this.validatePath(e, 0, 0, c, o);
    if (o.length == HASH_SIZE + NOTE_SIZE) {
      const P = o.slice(0, HASH_SIZE), I = o.slice(P.length, P.length + NOTE_SIZE), O = await this.hash([await this.hash(P), await this.hash(I)]);
      return arrayCompare(e, O) ? {
        offset: c - 1,
        leftBound: a,
        rightBound: c,
        chunkSize: c - a
      } : !1;
    }
    const d = o.slice(0, HASH_SIZE), m = o.slice(d.length, d.length + HASH_SIZE), w = o.slice(d.length + m.length, d.length + m.length + NOTE_SIZE), S = bufferToInt(w), A = o.slice(d.length + m.length + w.length), B = await this.hash([await this.hash(d), await this.hash(m), await this.hash(w)]);
    return arrayCompare(e, B) ? n < S ? await this.validatePath(d, n, a, Math.min(c, S), A) : await this.validatePath(m, n, Math.max(a, S), c, A) : !1;
  }
  async hashBranch(e, n) {
    return n ? {
      type: "branch",
      id: await this.hash([await this.hash(e.id), await this.hash(n.id), await this.hash(intToBuffer$1(e.maxByteRange))]),
      byteRange: e.maxByteRange,
      maxByteRange: n.maxByteRange,
      leftChild: e,
      rightChild: n
    } : e;
  }
  async hash(e) {
    return Array.isArray(e) && (e = Arweave$2.utils.concatBuffers(e)), new Uint8Array(await this.crypto.hash(e));
  }
  /**
   * Inspect an arweave chunk proof.
   * Takes proof, parses, reads and displays the values for console logging.
   * One proof section per line
   * Format: left,right,offset => hash
   */
  async debug(e, n = "") {
    if (e.byteLength < 1)
      return n;
    const a = e.slice(0, HASH_SIZE), c = e.slice(a.length, a.length + HASH_SIZE), o = e.slice(a.length + c.length, a.length + c.length + NOTE_SIZE), d = bufferToInt(o), m = e.slice(a.length + c.length + o.length), w = await this.hash([await this.hash(a), await this.hash(c), await this.hash(o)]), S = `${n}
${JSON.stringify(Buffer$F.from(a))},${JSON.stringify(Buffer$F.from(c))},${d} => ${JSON.stringify(w)}`;
    return this.debug(m, S);
  }
}
function arrayFlatten(t) {
  const e = [];
  return t.forEach((n) => {
    Array.isArray(n) ? e.push(...arrayFlatten(n)) : e.push(n);
  }), e;
}
function intToBuffer$1(t) {
  const e = new Uint8Array(NOTE_SIZE);
  for (let n = e.length - 1; n >= 0; n--) {
    const a = t % 256;
    e[n] = a, t = (t - a) / 256;
  }
  return e;
}
function bufferToInt(t) {
  let e = 0;
  for (let n = 0; n < t.length; n++)
    e *= 256, e += t[n];
  return e;
}
const arrayCompare = (t, e) => t.every((n, a) => e[a] === n);
class Chunks {
  api;
  constructor(e) {
    this.api = e;
  }
  async getTransactionMetadata(e) {
    const n = await this.api.get(`tx/${e}/offset`);
    if (n.status === 200)
      return n.data;
    throw new Error(`Unable to get transaction offset: ${getError(n)}`);
  }
  async getChunk(e) {
    const n = await this.api.get(`chunk/${e}`);
    if (n.status === 200)
      return n.data;
    throw new Error(`Unable to get chunk: ${getError(n)}`);
  }
  async getChunkData(e) {
    const n = await this.getChunk(e);
    return b64UrlToBuffer(n.chunk);
  }
  firstChunkOffset(e) {
    return parseInt(e.offset) - parseInt(e.size) + 1;
  }
  /**
   * Downloads chunks from the configured API peers, with a default concurrency of 10
   * @param id - ID of the transaction to download
   * @param options - Options object for configuring the downloader
   * @param options.concurrency - The number of chunks to download simultaneously. reduce on slower connections.
   * @returns
   */
  async downloadChunkedData(e, n) {
    const a = await this.getTransactionMetadata(e), c = parseInt(a.size), o = new Uint8Array(c);
    let d = 0;
    for await (const m of this.concurrentChunkDownloader(e, n))
      o.set(m, d), d += m.length;
    return o;
  }
  async *concurrentChunkDownloader(e, n) {
    const a = { concurrency: 10, ...n }, c = await this.getTransactionMetadata(e), o = new BigNumber$1(c.offset), d = new BigNumber$1(c.size), m = o.minus(d).plus(1);
    let w = 0;
    const S = Math.ceil(d.dividedBy(MAX_CHUNK_SIZE).toNumber()), A = (L) => this.getChunkData(L.toString()).then((C) => (w += C.length, C)), B = [], P = S - 2, I = Math.min(P, a.concurrency);
    let O = 0;
    for (let L = 0; L < I; L++)
      B.push(A(m.plus(MAX_CHUNK_SIZE * O++)));
    for (; O < P; )
      B.push(A(m.plus(MAX_CHUNK_SIZE * O++))), yield B.shift();
    for (; B.length > 0; )
      yield B.shift();
    if (yield A(m.plus(MAX_CHUNK_SIZE * O++)), d.isGreaterThan(w) && (yield A(m.plus(MAX_CHUNK_SIZE * O++))), !d.isEqualTo(w))
      throw new Error(`got ${w}B, expected ${d.toString()}B`);
  }
}
function augmentCrypto(t, e) {
  const n = t;
  return n.deepHash = new e.deepHash({ deps: { utils: { stringToBuffer, concatBuffers }, crypto: t } }), n;
}
class DeepHash {
  crypto;
  utils;
  constructor({ deps: e }) {
    this.crypto = e.crypto, this.utils = e.utils;
  }
  async deepHash(e) {
    if (Array.isArray(e)) {
      const c = this.utils.concatBuffers([this.utils.stringToBuffer("list"), this.utils.stringToBuffer(e.length.toString())]);
      return await this.deepHashChunks(e, await this.crypto.hash(c, "SHA-384"));
    }
    const n = this.utils.concatBuffers([this.utils.stringToBuffer("blob"), this.utils.stringToBuffer(e.byteLength.toString())]), a = this.utils.concatBuffers([await this.crypto.hash(n, "SHA-384"), await this.crypto.hash(e, "SHA-384")]);
    return await this.crypto.hash(a, "SHA-384");
  }
  async deepHashChunks(e, n) {
    if (e.length < 1)
      return n;
    const a = this.utils.concatBuffers([n, await this.deepHash(e[0])]), c = await this.crypto.hash(a, "SHA-384");
    return await this.deepHashChunks(e.slice(1), c);
  }
}
class Api {
  _instance;
  cookieMap = /* @__PURE__ */ new Map();
  config;
  constructor(e) {
    e && this.applyConfig(e);
  }
  applyConfig(e) {
    this.config = this.mergeDefaults(e), this._instance = void 0;
  }
  getConfig() {
    return this.config;
  }
  async requestInterceptor(e) {
    const n = this.cookieMap.get(new URL(e.baseURL ?? "").host);
    return n && (e.headers.cookie = n), e;
  }
  async responseInterceptor(e) {
    const n = e.headers?.["set-cookie"];
    return n && this.cookieMap.set(e.request.host, n), e;
  }
  mergeDefaults(e) {
    return e.headers ??= {}, e.network && !Object.keys(e.headers).includes("x-network") && (e.headers["x-network"] = e.network), {
      url: e.url,
      timeout: e.timeout ?? 2e4,
      logging: e.logging ?? !1,
      logger: e.logger ?? console.log,
      headers: { ...e.headers, "x-irys-arweave-version": Arweave$2.VERSION },
      withCredentials: e.withCredentials ?? !1,
      retry: { retries: 3, maxTimeout: 5e3 }
    };
  }
  async get(e, n) {
    try {
      return await this.request(e, { ...n, method: "GET" });
    } catch (a) {
      if (a.response?.status)
        return a.response;
      throw a;
    }
  }
  async post(e, n, a) {
    try {
      return await this.request(e, { data: n, ...a, method: "POST" });
    } catch (c) {
      if (c.response?.status)
        return c.response;
      throw c;
    }
  }
  get instance() {
    if (this._instance)
      return this._instance;
    const e = axios$3.create({
      baseURL: this.config.url.toString(),
      timeout: this.config.timeout,
      maxContentLength: 1024 * 1024 * 512,
      headers: this.config.headers,
      withCredentials: this.config.withCredentials
    });
    return this.config.withCredentials && (e.interceptors.request.use(this.requestInterceptor.bind(this)), e.interceptors.response.use(this.responseInterceptor.bind(this))), this.config.logging && (e.interceptors.request.use((n) => (this.config.logger(`Requesting: ${n.baseURL}/${n.url}`), n)), e.interceptors.response.use((n) => (this.config.logger(`Response: ${n.config.url} - ${n.status}`), n))), this._instance = e;
  }
  async request(e, n) {
    const a = this.instance, c = n?.url ?? new URL(e, this.config.url).toString();
    return retry$1((o) => a({ ...n, url: c }), {
      ...this.config.retry,
      ...n?.retry
    });
  }
}
const isApiConfig = (t) => typeof t != "string" && "url" in t, defaultFallbackConfig = {
  maxAttempts: 15,
  randomlySelect: !0
};
class FallbackApi {
  minerInstances = [];
  globalConfig;
  gatewayInstances = [];
  constructor({ gateways: e, miners: n, opts: a }) {
    this.globalConfig = a?.globalConfig ?? {}, n && this.addMiners(n), e && this.addGateways(e);
  }
  async addPeersFrom(e, n) {
    const a = (await this.get("", { url: new URL("/peers", e).toString() })).data;
    this.addMiners(a.slice(0, n?.limit).map((c) => `http://${c}`));
  }
  addMiners(e) {
    e.forEach((n) => this.minerInstances.push(new Api(isApiConfig(n) ? n : { url: new URL(n), ...this.globalConfig })));
  }
  addGateways(e) {
    e.forEach((n) => this.gatewayInstances.push(new Api(isApiConfig(n) ? n : { url: new URL(n), ...this.globalConfig })));
  }
  async get(e, n) {
    return this.request(e, { ...n, method: "GET" });
  }
  async post(e, n, a) {
    return this.request(e, { data: n, ...a, method: "POST" });
  }
  async request(e, n) {
    const a = { ...defaultFallbackConfig, ...n?.fallback };
    let c = 0;
    const o = n?.gatewayOnly ? this.gatewayInstances : this.gatewayInstances.concat(this.minerInstances), d = Math.min(Math.max(a?.maxAttempts, 1), o.length), m = a?.onFallback;
    if (o.length === 0)
      throw new Error("Unable to run request due to 0 configured gateways/miners.");
    for (; c++ < d; ) {
      const w = o.at(a?.randomlySelect ? Math.floor(Math.random() * o.length) : c - 1);
      if (w)
        try {
          return await w.request(e, { ...n });
        } catch (S) {
          if (m?.(S, w), c >= d)
            throw S;
        }
    }
    throw new Error("unreachable");
  }
}
class BaseObject {
  get(e, n) {
    if (!Object.getOwnPropertyNames(this).includes(e))
      throw new Error(`Field "${e}" is not a property of the Arweave Transaction class.`);
    if (this[e] instanceof Uint8Array)
      return n && n.decode && n.string ? bufferToString(this[e]) : n && n.decode && !n.string ? this[e] : bufferTob64Url(this[e]);
    if (this[e] instanceof Array) {
      if (n?.decode !== void 0 || n?.string !== void 0)
        throw e === "tags" && console.warn(`Did you mean to use 'transaction["tags"]' ?`), new Error("Cannot decode or stringify an array.");
      return this[e];
    }
    return n && n.decode == !0 ? n && n.string ? b64UrlToString(this[e]) : b64UrlToBuffer(this[e]) : this[e];
  }
}
class ArweaveTag extends BaseObject {
  name;
  value;
  constructor(e, n) {
    super(), this.name = e, this.value = n;
  }
}
let Transaction$2 = class extends BaseObject {
  format = 2;
  id = "";
  last_tx = "";
  owner = "";
  tags = [];
  target = "";
  quantity = "0";
  data_size = "0";
  data = new Uint8Array();
  data_root = "";
  reward = "0";
  signature = "";
  merkle;
  deepHash;
  // Computed when needed.
  chunks;
  constructor({ attributes: e, deps: n }) {
    super(), this.merkle = n.merkle, this.deepHash = n.deepHash, Object.assign(this, e), typeof this.data == "string" && (this.data = b64UrlToBuffer(this.data)), e.tags && (this.tags = e.tags);
  }
  addTag(e, n) {
    this.tags.push({ name: stringToB64Url(e), value: stringToB64Url(n) });
  }
  toJSON() {
    return {
      format: this.format,
      id: this.id,
      last_tx: this.last_tx,
      owner: this.owner,
      tags: this.tags,
      target: this.target,
      quantity: this.quantity,
      data: bufferTob64Url(this.data),
      data_size: this.data_size,
      data_root: this.data_root,
      data_tree: this.data_tree,
      reward: this.reward,
      signature: this.signature
    };
  }
  setOwner(e) {
    this.owner = e;
  }
  setSignature({ id: e, owner: n, reward: a, tags: c, signature: o }) {
    this.id = e, this.owner = n, a && (this.reward = a), c && (this.tags = c), this.signature = o;
  }
  async prepareChunks(e) {
    !this.chunks && e.byteLength > 0 && (this.chunks = await this.merkle.generateTransactionChunks(e), this.data_root = bufferTob64Url(this.chunks.data_root)), !this.chunks && e.byteLength === 0 && (this.chunks = {
      chunks: [],
      data_root: new Uint8Array(),
      proofs: []
    }, this.data_root = "");
  }
  // Returns a chunk in a format suitable for posting to /chunk.
  // Similar to `prepareChunks()` this does not operate `this.data`,
  // instead using the data passed in.
  getChunk(e, n) {
    if (!this.chunks)
      throw new Error("Chunks have not been prepared");
    const a = this.chunks.proofs[e], c = this.chunks.chunks[e];
    return {
      data_root: this.data_root,
      data_size: this.data_size,
      data_path: bufferTob64Url(a.proof),
      offset: a.offset.toString(),
      chunk: bufferTob64Url(n.slice(c.minByteRange, c.maxByteRange))
    };
  }
  async getSignatureData() {
    switch (this.format) {
      case 1:
        const e = this.tags.reduce((a, c) => concatBuffers([a, b64UrlToBuffer(c.name), b64UrlToBuffer(c.value)]), new Uint8Array());
        return concatBuffers([
          this.get("owner", { decode: !0, string: !1 }),
          this.get("target", { decode: !0, string: !1 }),
          this.get("data", { decode: !0, string: !1 }),
          stringToBuffer(this.quantity),
          stringToBuffer(this.reward),
          this.get("last_tx", { decode: !0, string: !1 }),
          e
        ]);
      case 2:
        this.data_root || await this.prepareChunks(this.data);
        const n = this.tags.map((a) => [b64UrlToBuffer(a.name), b64UrlToBuffer(a.value)]);
        return await this.deepHash.deepHash([
          stringToBuffer(this.format.toString()),
          this.get("owner", { decode: !0, string: !1 }),
          this.get("target", { decode: !0, string: !1 }),
          stringToBuffer(this.quantity),
          stringToBuffer(this.reward),
          this.get("last_tx", { decode: !0, string: !1 }),
          n,
          stringToBuffer(this.data_size),
          this.get("data_root", { decode: !0, string: !1 })
        ]);
      default:
        throw new Error(`Unexpected transaction format: ${this.format}`);
    }
  }
};
class Network {
  api;
  constructor(e) {
    this.api = e;
  }
  getInfo() {
    return this.api.get("info").then((e) => e.data);
  }
  getPeers() {
    return this.api.get("peers").then((e) => e.data);
  }
}
const MAX_CHUNKS_IN_BODY = 1, FATAL_CHUNK_UPLOAD_ERRORS = [
  "invalid_json",
  "chunk_too_big",
  "data_path_too_big",
  "offset_too_big",
  "data_size_too_big",
  "chunk_proof_ratio_not_attractive",
  "invalid_proof"
], ERROR_DELAY = 1e3 * 40;
class TransactionUploader {
  chunkIndex = 0;
  txPosted = !1;
  transaction;
  lastRequestTimeEnd = 0;
  totalErrors = 0;
  // Not serialized.
  data;
  lastResponseStatus = 0;
  lastResponseError = "";
  get isComplete() {
    return this.txPosted && this.chunkIndex === this.transaction.chunks.chunks.length;
  }
  get totalChunks() {
    return this.transaction.chunks.chunks.length;
  }
  get uploadedChunks() {
    return this.chunkIndex;
  }
  get pctComplete() {
    return Math.trunc(this.uploadedChunks / this.totalChunks * 100);
  }
  crypto;
  api;
  merkle;
  deepHash;
  constructor({ deps: e, transaction: n }) {
    if (!n.id)
      throw new Error("Transaction is not signed");
    if (!n.chunks)
      throw new Error("Transaction chunks not prepared");
    this.api = e.api, this.crypto = e.crypto, this.merkle = e.merkle, this.deepHash = e.deepHash, this.data = n.data, this.transaction = new Transaction$2({
      attributes: Object.assign({}, n, { data: new Uint8Array(0) }),
      deps: { merkle: e.merkle, deepHash: e.deepHash }
    });
  }
  /**
   * Uploads the next part of the transaction.
   * On the first call this posts the transaction
   * itself and on any subsequent calls uploads the
   * next chunk until it completes.
   */
  async uploadChunk(e) {
    if (this.isComplete)
      throw new Error("Upload is already complete");
    if (this.lastResponseError !== "" ? this.totalErrors++ : this.totalErrors = 0, this.totalErrors === 100)
      throw new Error(`Unable to complete upload: ${this.lastResponseStatus}: ${this.lastResponseError}`);
    let n = this.lastResponseError === "" ? 0 : Math.max(this.lastRequestTimeEnd + ERROR_DELAY - Date.now(), ERROR_DELAY);
    if (n > 0 && (n = n - n * Math.random() * 0.3, await new Promise((d) => setTimeout(d, n))), this.lastResponseError = "", !this.txPosted) {
      await this.postTransaction();
      return;
    }
    e && (this.chunkIndex = e);
    const a = this.transaction.getChunk(e || this.chunkIndex, this.data);
    if (!await this.merkle.validatePath(this.transaction.chunks.data_root, parseInt(a.offset), 0, parseInt(a.data_size), b64UrlToBuffer(a.data_path)))
      throw new Error(`Unable to validate chunk ${this.chunkIndex}`);
    const o = await this.api.post("chunk", this.transaction.getChunk(this.chunkIndex, this.data)).catch((d) => (console.error(d.message), { status: -1, data: { error: d.message } }));
    if (this.lastRequestTimeEnd = Date.now(), this.lastResponseStatus = o.status, this.lastResponseStatus == 200)
      this.chunkIndex++;
    else if (this.lastResponseError = getError(o), FATAL_CHUNK_UPLOAD_ERRORS.includes(this.lastResponseError))
      throw new Error(`Fatal error uploading chunk ${this.chunkIndex}: ${this.lastResponseError}`);
  }
  /**
   * Reconstructs an upload from its serialized state and data.
   * Checks if data matches the expected data_root.
   *
   * @param serialized
   * @param data
   */
  static async fromSerialized({ serialized: e, data: n, deps: a }) {
    if (!e || typeof e.chunkIndex != "number" || typeof e.transaction != "object")
      throw new Error("Serialized object does not match expected format.");
    const c = new Transaction$2(e.transaction);
    c.chunks || await c.prepareChunks(n);
    const o = new TransactionUploader({
      deps: a,
      transaction: c
    });
    if (o.chunkIndex = e.chunkIndex, o.lastRequestTimeEnd = e.lastRequestTimeEnd, o.lastResponseError = e.lastResponseError, o.lastResponseStatus = e.lastResponseStatus, o.txPosted = e.txPosted, o.data = n, o.transaction.data_root !== e.transaction.data_root)
      throw new Error("Data mismatch: Uploader doesn't match provided data.");
    return o;
  }
  /**
   * Reconstruct an upload from the tx metadata, ie /tx/<id>.
   *
   * @param api
   * @param id
   * @param data
   */
  static async fromTransactionId(e, n) {
    const a = await e.get(`tx/${n}`);
    if (a.status !== 200)
      throw new Error(`Tx ${n} not found: ${a.status}`);
    const c = a.data;
    return c.data = new Uint8Array(0), {
      txPosted: !0,
      chunkIndex: 0,
      lastResponseError: "",
      lastRequestTimeEnd: 0,
      lastResponseStatus: 0,
      transaction: c
    };
  }
  toJSON() {
    return {
      chunkIndex: this.chunkIndex,
      transaction: this.transaction,
      lastRequestTimeEnd: this.lastRequestTimeEnd,
      lastResponseStatus: this.lastResponseStatus,
      lastResponseError: this.lastResponseError,
      txPosted: this.txPosted
    };
  }
  // POST to /tx
  async postTransaction() {
    if (this.totalChunks <= MAX_CHUNKS_IN_BODY) {
      this.transaction.data = this.data;
      const a = await this.api.post("tx", this.transaction).catch((c) => (console.error(c), { status: -1, data: { error: c.message } }));
      if (this.lastRequestTimeEnd = Date.now(), this.lastResponseStatus = a.status, this.transaction.data = new Uint8Array(0), a.status >= 200 && a.status < 300) {
        this.txPosted = !0, this.chunkIndex = MAX_CHUNKS_IN_BODY;
        return;
      }
      throw this.lastResponseError = getError(a), new Error(`Unable to upload transaction: ${a.status}, ${this.lastResponseError}`);
    }
    const n = await this.api.post("tx", this.transaction);
    if (this.lastRequestTimeEnd = Date.now(), this.lastResponseStatus = n.status, !(n.status >= 200 && n.status < 300))
      throw this.lastResponseError = getError(n), new Error(`Unable to upload transaction: ${n.status}, ${this.lastResponseError}`);
    this.txPosted = !0;
  }
}
class Transactions {
  api;
  crypto;
  chunks;
  merkle;
  deepHash;
  constructor({ deps: e }) {
    this.api = e.api, this.crypto = e.crypto, this.chunks = e.chunks, this.merkle = e.merkle, this.deepHash = e.deepHash;
  }
  getTransactionAnchor() {
    return this.api.get("tx_anchor", { transformResponse: [] }).then((e) => e.data);
  }
  getPrice(e, n) {
    const a = n ? `price/${e}/${n}` : `price/${e}`;
    return this.api.get(a, {
      transformResponse: [
        /**
         * We need to specify a response transformer to override
         * the default JSON.parse behavior, as this causes
         * winston to be converted to a number and we want to
         * return it as a winston string.
         * @param data
         */
        function(c) {
          return c;
        }
      ]
    }).then((c) => c.data);
  }
  async get(e) {
    const n = await this.api.get(`tx/${e}`);
    if (n.status == 200) {
      const a = parseInt(n.data.data_size);
      if (n.data.format >= 2 && a > 0 && a <= 1024 * 1024 * 12) {
        const c = await this.getData(e);
        return new Transaction$2({
          attributes: {
            ...n.data,
            data: c
          },
          deps: { merkle: this.merkle, deepHash: this.deepHash }
        });
      }
      return new Transaction$2({
        attributes: {
          ...n.data,
          format: n.data.format || 1
        },
        deps: { merkle: this.merkle, deepHash: this.deepHash }
      });
    }
    throw n.status === 404 ? new ArweaveError(
      "TX_NOT_FOUND"
      /* ArweaveErrorType.TX_NOT_FOUND */
    ) : n.status === 410 ? new ArweaveError(
      "TX_FAILED"
      /* ArweaveErrorType.TX_FAILED */
    ) : new ArweaveError(
      "TX_INVALID"
      /* ArweaveErrorType.TX_INVALID */
    );
  }
  fromRaw(e) {
    return new Transaction$2({ attributes: e, deps: { merkle: this.merkle, deepHash: this.deepHash } });
  }
  getStatus(e) {
    return this.api.get(`tx/${e}/status`).then((n) => n.status === 200 ? {
      status: 200,
      confirmed: n.data
    } : {
      status: n.status,
      confirmed: null
    });
  }
  async getData(e) {
    let n;
    try {
      n = (await this.api.get(`/${e}`, { responseType: "arraybuffer" })).data;
    } catch (a) {
      console.error(`Error while trying to download contiguous data from gateway cache for ${e}`), console.error(a);
    }
    if (!n) {
      console.warn(`Falling back to chunks for ${e}`);
      try {
        n = await this.chunks.downloadChunkedData(e);
      } catch (a) {
        console.error(`Error while trying to download chunked data for ${e}`), console.error(a);
      }
    }
    if (!n)
      throw new Error(`${e} data was not found!`);
    return n;
  }
  async getDataStream(e) {
    let n;
    try {
      const a = (await this.api.get(`/${e}`, { responseType: "arraybuffer" })).data;
      n = async function* () {
        yield a;
      }();
    } catch (a) {
      console.error(`Error while trying to download contiguous data from gateway cache for ${e}`), console.error(a);
    }
    if (!n) {
      console.warn(`Falling back to chunks for ${e}`);
      try {
        n = this.chunks.concurrentChunkDownloader(e);
      } catch (a) {
        console.error(`Error while trying to download chunked data for ${e}`), console.error(a);
      }
    }
    if (!n)
      throw new Error(`${e} data was not found!`);
    return n;
  }
  async sign(e, n, a) {
    const o = typeof n == "object" && ((m) => {
      let w = !0;
      return ["n", "e", "d", "p", "q", "dp", "dq", "qi"].map((S) => !(S in m) && (w = !1)), w;
    })(n), d = typeof arweaveWallet == "object";
    if (!o && !d)
      throw new Error("No valid JWK or external wallet found to sign transaction.");
    if (d) {
      try {
        (await arweaveWallet.getPermissions()).includes("SIGN_TRANSACTION") || await arweaveWallet.connect(["SIGN_TRANSACTION"]);
      } catch {
      }
      e.tags = e.tags.map((w) => new ArweaveTag(w.name, w.value));
      const m = await arweaveWallet.sign(e, a);
      e.setSignature({
        id: m.id,
        owner: m.owner,
        reward: m.reward,
        tags: m.tags,
        signature: m.signature
      });
    } else if (o) {
      e.setOwner(n.n);
      const m = await e.getSignatureData(), w = await this.crypto.sign(n, m, a), S = await this.crypto.hash(w);
      e.setSignature({
        id: bufferTob64Url(S),
        owner: n.n,
        signature: bufferTob64Url(w)
      });
    } else
      throw new Error("An error occurred while signing. Check wallet is valid");
  }
  async verify(e) {
    const n = await e.getSignatureData(), a = e.get("signature", {
      decode: !0,
      string: !1
    }), c = bufferTob64Url(await this.crypto.hash(a));
    if (e.id !== c)
      throw new Error("Invalid transaction signature or ID! The transaction ID doesn't match the expected SHA-256 hash of the signature.");
    return this.crypto.verify(e.owner, n, a);
  }
  async post(e) {
    if (typeof e == "string" ? e = new Transaction$2({ attributes: JSON.parse(e), deps: { merkle: this.merkle, deepHash: this.deepHash } }) : typeof e.readInt32BE == "function" ? e = new Transaction$2({ attributes: JSON.parse(e.toString()), deps: { merkle: this.merkle, deepHash: this.deepHash } }) : typeof e == "object" && !(e instanceof Transaction$2) && (e = new Transaction$2({ attributes: e, deps: { merkle: this.merkle, deepHash: this.deepHash } })), !(e instanceof Transaction$2))
      throw new Error("Must be Transaction object");
    e.chunks || await e.prepareChunks(e.data);
    const n = await this.getUploader(e, e.data);
    try {
      for (; !n.isComplete; )
        await n.uploadChunk();
    } catch (a) {
      if (n.lastResponseStatus > 0)
        return {
          status: n.lastResponseStatus,
          statusText: n.lastResponseError,
          data: {
            error: n.lastResponseError
          }
        };
      throw a;
    }
    return {
      status: 200,
      statusText: "OK",
      data: {}
    };
  }
  /**
   * Gets an uploader than can be used to upload a transaction chunk by chunk, giving progress
   * and the ability to resume.
   *
   * Usage example:
   *
   * ```
   * const uploader = arweave.transactions.getUploader(transaction);
   * while (!uploader.isComplete) {
   *   await uploader.uploadChunk();
   *   console.log(`${uploader.pctComplete}%`);
   * }
   * ```
   *
   * @param upload a Transaction object, a previously save progress object, or a transaction id.
   * @param data the data of the transaction. Required when resuming an upload.
   */
  async getUploader(e, n) {
    let a;
    if (n instanceof ArrayBuffer && (n = new Uint8Array(n)), e instanceof Transaction$2) {
      if (n || (n = e.data), !(n instanceof Uint8Array))
        throw new Error("Data format is invalid");
      e.chunks || await e.prepareChunks(n), a = new TransactionUploader({
        transaction: e,
        deps: { api: this.api, crypto: this.crypto, merkle: this.merkle, deepHash: this.deepHash }
      }), (!a.data || a.data.length === 0) && (a.data = n);
    } else {
      if (typeof e == "string" && (e = await TransactionUploader.fromTransactionId(this.api, e)), !n || !(n instanceof Uint8Array))
        throw new Error("Must provide data when resuming upload");
      a = await TransactionUploader.fromSerialized({
        deps: { api: this.api, merkle: this.merkle, crypto: this.crypto, deepHash: this.deepHash },
        serialized: e,
        data: n
      });
    }
    return a;
  }
  /**
   * Async generator version of uploader
   *
   * Usage example:
   *
   * ```
   * for await (const uploader of arweave.transactions.upload(tx)) {
   *  console.log(`${uploader.pctComplete}%`);
   * }
   * ```
   *
   * @param upload a Transaction object, a previously save uploader, or a transaction id.
   * @param data the data of the transaction. Required when resuming an upload.
   */
  async *upload(e, n) {
    const a = await this.getUploader(e, n);
    for (; !a.isComplete; )
      await a.uploadChunk(), yield a;
    return a;
  }
}
class Wallets {
  api;
  crypto;
  constructor(e, n) {
    this.api = e, this.crypto = n;
  }
  /**
   * Get the wallet balance for the given address.
   *
   * @param {string} address - The arweave address to get the balance for.
   *
   * @returns {Promise<string>} - Promise which resolves with a winston string balance.
   */
  getBalance(e) {
    return this.api.get(`wallet/${e}/balance`, {
      transformResponse: [
        /**
         * We need to specify a response transformer to override
         * the default JSON.parse behaviour, as this causes
         * balances to be converted to a number and we want to
         * return it as a winston string.
         * @param data
         */
        function(n) {
          return n;
        }
      ]
    }).then((n) => n.data);
  }
  /**
   * Get the last transaction ID for the given wallet address.
   *
   * @param {string} address - The arweave address to get the transaction for.
   *
   * @returns {Promise<string>} - Promise which resolves with a transaction ID.
   */
  getLastTransactionID(e) {
    return this.api.get(`wallet/${e}/last_tx`).then((n) => n.data);
  }
  generate() {
    return this.crypto.generateJWK();
  }
  async jwkToAddress(e) {
    return !e || e === "use_wallet" ? this.getAddress() : this.getAddress(e);
  }
  async getAddress(e) {
    if (!e || e === "use_wallet") {
      try {
        await arweaveWallet.connect(["ACCESS_ADDRESS"]);
      } catch {
      }
      return arweaveWallet.getActiveAddress();
    } else
      return this.ownerToAddress(e.n);
  }
  async ownerToAddress(e) {
    return bufferTob64Url(await this.crypto.hash(b64UrlToBuffer(e)));
  }
}
let Arweave$1 = class Xt {
  config;
  api;
  wallets;
  transactions;
  network;
  blocks;
  chunks;
  static init;
  static utils = ArweaveUtils;
  crypto;
  deepHash;
  merkle;
  static VERSION = "0.0.1";
  constructor(e) {
    if (this.config = e, !e.crypto)
      throw new Error("config.crypto is required");
    this.crypto = augmentCrypto(e.crypto, { deepHash: DeepHash }), this.deepHash = this.crypto.deepHash;
    const n = e.gateways ? Array.isArray(e.gateways) ? e.gateways : [e.gateways] : void 0;
    this.api = new FallbackApi({ gateways: n, miners: e.miners }), this.wallets = new Wallets(this.api, this.crypto), this.chunks = new Chunks(this.api), this.network = new Network(this.api), this.blocks = new Blocks(this.api, this.network), this.merkle = new Merkle({ deps: { crypto: this.crypto } }), this.transactions = new Transactions({
      deps: { api: this.api, crypto: e.crypto, chunks: this.chunks, merkle: this.merkle, deepHash: this.deepHash }
    });
  }
  get utils() {
    return Xt.utils;
  }
  getConfig() {
    return this.config;
  }
  async createTransaction(e, n) {
    const a = {};
    if (Object.assign(a, e), !e.data && !(e.target && e.quantity))
      throw new Error("A new Arweave transaction must have a 'data' value, or 'target' and 'quantity' values.");
    if (e.owner == null && n && n !== "use_wallet" && (a.owner = n.n), e.last_tx == null && (a.last_tx = await this.transactions.getTransactionAnchor()), typeof e.data == "string" && (e.data = stringToBuffer(e.data)), e.data instanceof ArrayBuffer && (e.data = new Uint8Array(e.data)), e.data && !(e.data instanceof Uint8Array))
      throw new Error("Expected data to be a string, Uint8Array or ArrayBuffer");
    if (e.reward == null) {
      const o = e.data ? e.data.byteLength : 0;
      a.reward = await this.transactions.getPrice(o, a.target);
    }
    a.data_root = "", a.data_size = e.data ? e.data.byteLength.toString() : "0", a.data = e.data || new Uint8Array(0);
    const c = new Transaction$2({
      attributes: a,
      deps: { merkle: this.merkle, deepHash: this.deepHash }
    });
    return await c.getSignatureData(), c;
  }
};
const Arweave$2 = Arweave$1;
class Arweave extends Arweave$1 {
  /**
   * Constructor for a new `Arweave` instance - this one uses the web crypto driver
   * @param gatways - Specify the Arweave gateway(s) you want to use for requests
   * @param options - Other configuration options
   * @param options.miners - A list of Arweave miners (peers) to use for requests
   * @param options.gateways - A list of Arweave miners (peers) to use for requests
   */
  constructor(e, n) {
    super({ crypto: n?.crypto ?? new WebCryptoDriver(), ...n, gateways: e ?? "https://arweave.net" });
  }
  static init(e) {
    return new Arweave(e);
  }
}
const driver = WebCryptoDriver.default ? WebCryptoDriver.default : WebCryptoDriver;
class CryptoDriver extends driver {
  getPublicKey(e) {
    throw new Error("Unimplemented");
  }
}
let driverInstance;
function getCryptoDriver() {
  return driverInstance ??= new CryptoDriver();
}
class Rsa4096Pss {
  _key;
  pk;
  signatureType = 1;
  ownerLength = SIG_CONFIG[1].pubLength;
  signatureLength = SIG_CONFIG[1].sigLength;
  _publicKey;
  get publicKey() {
    return this._publicKey;
  }
  constructor(e, n) {
    this._key = e, this.pk = n, n || (this.pk = getCryptoDriver().getPublicKey(JSON.parse(e)));
  }
  sign(e) {
    return cryptoBrowserifyExports.createSign("sha256").update(e).sign({
      key: this._key,
      padding: cryptoBrowserifyExports.constants.RSA_PKCS1_PSS_PADDING
    });
  }
  static async verify(e, n, a) {
    return await getCryptoDriver().verify(Buffer$F.isBuffer(e) ? base64url.encode(e) : e, n, a);
  }
}
const define$1 = api$1.define, RSAPublicKey = define$1("RSAPublicKey", function() {
  this.seq().obj(this.key("n").int(), this.key("e").int());
}), AlgorithmIdentifier = define$1("AlgorithmIdentifier", function() {
  this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional().any());
});
define$1("PublicKeyInfo", function() {
  this.seq().obj(this.key("algorithm").use(AlgorithmIdentifier), this.key("publicKey").bitstr());
});
const Version = define$1("Version", function() {
  this.int({
    0: "two-prime",
    1: "multi"
  });
}), OtherPrimeInfos = define$1("OtherPrimeInfos", function() {
  this.seq().obj(this.key("ri").int(), this.key("di").int(), this.key("ti").int());
}), RSAPrivateKey = define$1("RSAPrivateKey", function() {
  this.seq().obj(this.key("version").use(Version), this.key("n").int(), this.key("e").int(), this.key("d").int(), this.key("p").int(), this.key("q").int(), this.key("dp").int(), this.key("dq").int(), this.key("qi").int(), this.key("other").optional().use(OtherPrimeInfos));
});
define$1("PrivateKeyInfo", function() {
  this.seq().obj(this.key("version").use(Version), this.key("algorithm").use(AlgorithmIdentifier), this.key("privateKey").bitstr());
});
function parse$1(t) {
  return {
    n: string2bn(t.n),
    e: string2bn(t.e),
    d: t.d && string2bn(t.d),
    p: t.p && string2bn(t.p),
    q: t.q && string2bn(t.q),
    dp: t.dp && string2bn(t.dp),
    dq: t.dq && string2bn(t.dq),
    qi: t.qi && string2bn(t.qi)
  };
}
function base64url2bn(t) {
  return new BN$d(Buffer$F.from(t, "base64"));
}
function string2bn(t) {
  return /^[0-9]+$/.test(t) ? new BN$d(t, 10) : base64url2bn(t);
}
function jwkTopem(t) {
  const e = parse$1(t), n = !!e.d, a = n ? "PRIVATE" : "PUBLIC", c = "-----BEGIN RSA " + a + ` KEY-----
`, o = `
-----END RSA ` + a + ` KEY-----
`;
  let d = Buffer$F.alloc(0);
  n ? (e.version = "two-prime", d = RSAPrivateKey.encode(e, "der")) : d = RSAPublicKey.encode(e, "der");
  const m = d.toString("base64").match(/.{1,64}/g).join(`
`);
  return c + m + o;
}
class ArweaveSigner extends Rsa4096Pss {
  jwk;
  constructor(e) {
    super(jwkTopem(e), e.n), this.jwk = e;
  }
  get publicKey() {
    if (!this.pk)
      throw new Error("ArweaveSigner - pk is undefined");
    return base64url.toBuffer(this.pk);
  }
  sign(e) {
    return getCryptoDriver().sign(this.jwk, e);
  }
  static async verify(e, n, a) {
    return await getCryptoDriver().verify(e, n, a);
  }
}
class InjectedSolanaSigner {
  _publicKey;
  ownerLength = SIG_CONFIG[2].pubLength;
  signatureLength = SIG_CONFIG[2].sigLength;
  signatureType = 2;
  pem;
  provider;
  constructor(e) {
    if (this.provider = e, !this.provider.publicKey)
      throw new Error("InjectedSolanaSigner - provider.publicKey is undefined");
    this._publicKey = this.provider.publicKey.toBuffer();
  }
  get publicKey() {
    return this._publicKey;
  }
  async sign(e) {
    if (!this.provider.signMessage)
      throw new Error("Selected Wallet does not support message signing");
    return await this.provider.signMessage(e);
  }
  static async verify(e, n, a) {
    let c = e;
    return typeof e == "string" && (c = base64url.toBuffer(e)), verify$1(Buffer$F.from(a), Buffer$F.from(n), Buffer$F.from(c));
  }
}
var sha3$1 = { exports: {} };
(function(t) {
  (function() {
    var e = "input is invalid type", n = "finalize already called", a = typeof window == "object", c = a ? window : {};
    c.JS_SHA3_NO_WINDOW && (a = !1);
    var o = !a && typeof self == "object", d = !c.JS_SHA3_NO_NODE_JS && typeof process$1 == "object" && process$1.versions && process$1.versions.node;
    d ? c = commonjsGlobal : o && (c = self);
    var m = !c.JS_SHA3_NO_COMMON_JS && !0 && t.exports, w = !c.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer < "u", S = "0123456789abcdef".split(""), A = [31, 7936, 2031616, 520093696], B = [4, 1024, 262144, 67108864], P = [1, 256, 65536, 16777216], I = [6, 1536, 393216, 100663296], O = [0, 8, 16, 24], L = [
      1,
      0,
      32898,
      0,
      32906,
      2147483648,
      2147516416,
      2147483648,
      32907,
      0,
      2147483649,
      0,
      2147516545,
      2147483648,
      32777,
      2147483648,
      138,
      0,
      136,
      0,
      2147516425,
      0,
      2147483658,
      0,
      2147516555,
      0,
      139,
      2147483648,
      32905,
      2147483648,
      32771,
      2147483648,
      32770,
      2147483648,
      128,
      2147483648,
      32778,
      0,
      2147483658,
      2147483648,
      2147516545,
      2147483648,
      32896,
      2147483648,
      2147483649,
      0,
      2147516424,
      2147483648
    ], C = [224, 256, 384, 512], z = [128, 256], q = ["hex", "buffer", "arrayBuffer", "array", "digest"], Z = {
      128: 168,
      256: 136
    };
    (c.JS_SHA3_NO_NODE_JS || !Array.isArray) && (Array.isArray = function(T) {
      return Object.prototype.toString.call(T) === "[object Array]";
    }), w && (c.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView) && (ArrayBuffer.isView = function(T) {
      return typeof T == "object" && T.buffer && T.buffer.constructor === ArrayBuffer;
    });
    for (var X = function(T, H, Y) {
      return function(le) {
        return new M(T, H, T).update(le)[Y]();
      };
    }, ie = function(T, H, Y) {
      return function(le, ce) {
        return new M(T, H, ce).update(le)[Y]();
      };
    }, fe = function(T, H, Y) {
      return function(le, ce, de, ue) {
        return p["cshake" + T].update(le, ce, de, ue)[Y]();
      };
    }, ye = function(T, H, Y) {
      return function(le, ce, de, ue) {
        return p["kmac" + T].update(le, ce, de, ue)[Y]();
      };
    }, j = function(T, H, Y, le) {
      for (var ce = 0; ce < q.length; ++ce) {
        var de = q[ce];
        T[de] = H(Y, le, de);
      }
      return T;
    }, V = function(T, H) {
      var Y = X(T, H, "hex");
      return Y.create = function() {
        return new M(T, H, T);
      }, Y.update = function(le) {
        return Y.create().update(le);
      }, j(Y, X, T, H);
    }, ae = function(T, H) {
      var Y = ie(T, H, "hex");
      return Y.create = function(le) {
        return new M(T, H, le);
      }, Y.update = function(le, ce) {
        return Y.create(ce).update(le);
      }, j(Y, ie, T, H);
    }, _ = function(T, H) {
      var Y = Z[T], le = fe(T, H, "hex");
      return le.create = function(ce, de, ue) {
        return !de && !ue ? p["shake" + T].create(ce) : new M(T, H, ce).bytepad([de, ue], Y);
      }, le.update = function(ce, de, ue, re) {
        return le.create(de, ue, re).update(ce);
      }, j(le, fe, T, H);
    }, u = function(T, H) {
      var Y = Z[T], le = ye(T, H, "hex");
      return le.create = function(ce, de, ue) {
        return new k(T, H, de).bytepad(["KMAC", ue], Y).bytepad([ce], Y);
      }, le.update = function(ce, de, ue, re) {
        return le.create(ce, ue, re).update(de);
      }, j(le, ye, T, H);
    }, h = [
      { name: "keccak", padding: P, bits: C, createMethod: V },
      { name: "sha3", padding: I, bits: C, createMethod: V },
      { name: "shake", padding: A, bits: z, createMethod: ae },
      { name: "cshake", padding: B, bits: z, createMethod: _ },
      { name: "kmac", padding: B, bits: z, createMethod: u }
    ], p = {}, y = [], v = 0; v < h.length; ++v)
      for (var $ = h[v], E = $.bits, x = 0; x < E.length; ++x) {
        var l = $.name + "_" + E[x];
        if (y.push(l), p[l] = $.createMethod(E[x], $.padding), $.name !== "sha3") {
          var b = $.name + E[x];
          y.push(b), p[b] = p[l];
        }
      }
    function M(T, H, Y) {
      this.blocks = [], this.s = [], this.padding = H, this.outputBits = Y, this.reset = !0, this.finalized = !1, this.block = 0, this.start = 0, this.blockCount = 1600 - (T << 1) >> 5, this.byteCount = this.blockCount << 2, this.outputBlocks = Y >> 5, this.extraBytes = (Y & 31) >> 3;
      for (var le = 0; le < 50; ++le)
        this.s[le] = 0;
    }
    M.prototype.update = function(T) {
      if (this.finalized)
        throw new Error(n);
      var H, Y = typeof T;
      if (Y !== "string") {
        if (Y === "object") {
          if (T === null)
            throw new Error(e);
          if (w && T.constructor === ArrayBuffer)
            T = new Uint8Array(T);
          else if (!Array.isArray(T) && (!w || !ArrayBuffer.isView(T)))
            throw new Error(e);
        } else
          throw new Error(e);
        H = !0;
      }
      for (var le = this.blocks, ce = this.byteCount, de = T.length, ue = this.blockCount, re = 0, ge = this.s, Ae, xe; re < de; ) {
        if (this.reset)
          for (this.reset = !1, le[0] = this.block, Ae = 1; Ae < ue + 1; ++Ae)
            le[Ae] = 0;
        if (H)
          for (Ae = this.start; re < de && Ae < ce; ++re)
            le[Ae >> 2] |= T[re] << O[Ae++ & 3];
        else
          for (Ae = this.start; re < de && Ae < ce; ++re)
            xe = T.charCodeAt(re), xe < 128 ? le[Ae >> 2] |= xe << O[Ae++ & 3] : xe < 2048 ? (le[Ae >> 2] |= (192 | xe >> 6) << O[Ae++ & 3], le[Ae >> 2] |= (128 | xe & 63) << O[Ae++ & 3]) : xe < 55296 || xe >= 57344 ? (le[Ae >> 2] |= (224 | xe >> 12) << O[Ae++ & 3], le[Ae >> 2] |= (128 | xe >> 6 & 63) << O[Ae++ & 3], le[Ae >> 2] |= (128 | xe & 63) << O[Ae++ & 3]) : (xe = 65536 + ((xe & 1023) << 10 | T.charCodeAt(++re) & 1023), le[Ae >> 2] |= (240 | xe >> 18) << O[Ae++ & 3], le[Ae >> 2] |= (128 | xe >> 12 & 63) << O[Ae++ & 3], le[Ae >> 2] |= (128 | xe >> 6 & 63) << O[Ae++ & 3], le[Ae >> 2] |= (128 | xe & 63) << O[Ae++ & 3]);
        if (this.lastByteIndex = Ae, Ae >= ce) {
          for (this.start = Ae - ce, this.block = le[ue], Ae = 0; Ae < ue; ++Ae)
            ge[Ae] ^= le[Ae];
          U(ge), this.reset = !0;
        } else
          this.start = Ae;
      }
      return this;
    }, M.prototype.encode = function(T, H) {
      var Y = T & 255, le = 1, ce = [Y];
      for (T = T >> 8, Y = T & 255; Y > 0; )
        ce.unshift(Y), T = T >> 8, Y = T & 255, ++le;
      return H ? ce.push(le) : ce.unshift(le), this.update(ce), ce.length;
    }, M.prototype.encodeString = function(T) {
      var H, Y = typeof T;
      if (Y !== "string") {
        if (Y === "object") {
          if (T === null)
            throw new Error(e);
          if (w && T.constructor === ArrayBuffer)
            T = new Uint8Array(T);
          else if (!Array.isArray(T) && (!w || !ArrayBuffer.isView(T)))
            throw new Error(e);
        } else
          throw new Error(e);
        H = !0;
      }
      var le = 0, ce = T.length;
      if (H)
        le = ce;
      else
        for (var de = 0; de < T.length; ++de) {
          var ue = T.charCodeAt(de);
          ue < 128 ? le += 1 : ue < 2048 ? le += 2 : ue < 55296 || ue >= 57344 ? le += 3 : (ue = 65536 + ((ue & 1023) << 10 | T.charCodeAt(++de) & 1023), le += 4);
        }
      return le += this.encode(le * 8), this.update(T), le;
    }, M.prototype.bytepad = function(T, H) {
      for (var Y = this.encode(H), le = 0; le < T.length; ++le)
        Y += this.encodeString(T[le]);
      var ce = H - Y % H, de = [];
      return de.length = ce, this.update(de), this;
    }, M.prototype.finalize = function() {
      if (!this.finalized) {
        this.finalized = !0;
        var T = this.blocks, H = this.lastByteIndex, Y = this.blockCount, le = this.s;
        if (T[H >> 2] |= this.padding[H & 3], this.lastByteIndex === this.byteCount)
          for (T[0] = T[Y], H = 1; H < Y + 1; ++H)
            T[H] = 0;
        for (T[Y - 1] |= 2147483648, H = 0; H < Y; ++H)
          le[H] ^= T[H];
        U(le);
      }
    }, M.prototype.toString = M.prototype.hex = function() {
      this.finalize();
      for (var T = this.blockCount, H = this.s, Y = this.outputBlocks, le = this.extraBytes, ce = 0, de = 0, ue = "", re; de < Y; ) {
        for (ce = 0; ce < T && de < Y; ++ce, ++de)
          re = H[ce], ue += S[re >> 4 & 15] + S[re & 15] + S[re >> 12 & 15] + S[re >> 8 & 15] + S[re >> 20 & 15] + S[re >> 16 & 15] + S[re >> 28 & 15] + S[re >> 24 & 15];
        de % T === 0 && (U(H), ce = 0);
      }
      return le && (re = H[ce], ue += S[re >> 4 & 15] + S[re & 15], le > 1 && (ue += S[re >> 12 & 15] + S[re >> 8 & 15]), le > 2 && (ue += S[re >> 20 & 15] + S[re >> 16 & 15])), ue;
    }, M.prototype.arrayBuffer = function() {
      this.finalize();
      var T = this.blockCount, H = this.s, Y = this.outputBlocks, le = this.extraBytes, ce = 0, de = 0, ue = this.outputBits >> 3, re;
      le ? re = new ArrayBuffer(Y + 1 << 2) : re = new ArrayBuffer(ue);
      for (var ge = new Uint32Array(re); de < Y; ) {
        for (ce = 0; ce < T && de < Y; ++ce, ++de)
          ge[de] = H[ce];
        de % T === 0 && U(H);
      }
      return le && (ge[ce] = H[ce], re = re.slice(0, ue)), re;
    }, M.prototype.buffer = M.prototype.arrayBuffer, M.prototype.digest = M.prototype.array = function() {
      this.finalize();
      for (var T = this.blockCount, H = this.s, Y = this.outputBlocks, le = this.extraBytes, ce = 0, de = 0, ue = [], re, ge; de < Y; ) {
        for (ce = 0; ce < T && de < Y; ++ce, ++de)
          re = de << 2, ge = H[ce], ue[re] = ge & 255, ue[re + 1] = ge >> 8 & 255, ue[re + 2] = ge >> 16 & 255, ue[re + 3] = ge >> 24 & 255;
        de % T === 0 && U(H);
      }
      return le && (re = de << 2, ge = H[ce], ue[re] = ge & 255, le > 1 && (ue[re + 1] = ge >> 8 & 255), le > 2 && (ue[re + 2] = ge >> 16 & 255)), ue;
    };
    function k(T, H, Y) {
      M.call(this, T, H, Y);
    }
    k.prototype = new M(), k.prototype.finalize = function() {
      return this.encode(this.outputBits, !0), M.prototype.finalize.call(this);
    };
    var U = function(T) {
      var H, Y, le, ce, de, ue, re, ge, Ae, xe, Ee, at, Re, ve, xt, Ne, qe, wt, Te, De, vt, ke, Ue, $t, ee, F, J, oe, he, Se, me, Be, gt, Me, Oe, ht, He, Ge, _t, Le, Ke, Et, Fe, ze, At, Pe, je, Q, te, ne, D, se, pe, $e, be, _e, Je, We, bt, Ye, ot, ct, lt;
      for (le = 0; le < 48; le += 2)
        ce = T[0] ^ T[10] ^ T[20] ^ T[30] ^ T[40], de = T[1] ^ T[11] ^ T[21] ^ T[31] ^ T[41], ue = T[2] ^ T[12] ^ T[22] ^ T[32] ^ T[42], re = T[3] ^ T[13] ^ T[23] ^ T[33] ^ T[43], ge = T[4] ^ T[14] ^ T[24] ^ T[34] ^ T[44], Ae = T[5] ^ T[15] ^ T[25] ^ T[35] ^ T[45], xe = T[6] ^ T[16] ^ T[26] ^ T[36] ^ T[46], Ee = T[7] ^ T[17] ^ T[27] ^ T[37] ^ T[47], at = T[8] ^ T[18] ^ T[28] ^ T[38] ^ T[48], Re = T[9] ^ T[19] ^ T[29] ^ T[39] ^ T[49], H = at ^ (ue << 1 | re >>> 31), Y = Re ^ (re << 1 | ue >>> 31), T[0] ^= H, T[1] ^= Y, T[10] ^= H, T[11] ^= Y, T[20] ^= H, T[21] ^= Y, T[30] ^= H, T[31] ^= Y, T[40] ^= H, T[41] ^= Y, H = ce ^ (ge << 1 | Ae >>> 31), Y = de ^ (Ae << 1 | ge >>> 31), T[2] ^= H, T[3] ^= Y, T[12] ^= H, T[13] ^= Y, T[22] ^= H, T[23] ^= Y, T[32] ^= H, T[33] ^= Y, T[42] ^= H, T[43] ^= Y, H = ue ^ (xe << 1 | Ee >>> 31), Y = re ^ (Ee << 1 | xe >>> 31), T[4] ^= H, T[5] ^= Y, T[14] ^= H, T[15] ^= Y, T[24] ^= H, T[25] ^= Y, T[34] ^= H, T[35] ^= Y, T[44] ^= H, T[45] ^= Y, H = ge ^ (at << 1 | Re >>> 31), Y = Ae ^ (Re << 1 | at >>> 31), T[6] ^= H, T[7] ^= Y, T[16] ^= H, T[17] ^= Y, T[26] ^= H, T[27] ^= Y, T[36] ^= H, T[37] ^= Y, T[46] ^= H, T[47] ^= Y, H = xe ^ (ce << 1 | de >>> 31), Y = Ee ^ (de << 1 | ce >>> 31), T[8] ^= H, T[9] ^= Y, T[18] ^= H, T[19] ^= Y, T[28] ^= H, T[29] ^= Y, T[38] ^= H, T[39] ^= Y, T[48] ^= H, T[49] ^= Y, ve = T[0], xt = T[1], Pe = T[11] << 4 | T[10] >>> 28, je = T[10] << 4 | T[11] >>> 28, oe = T[20] << 3 | T[21] >>> 29, he = T[21] << 3 | T[20] >>> 29, Ye = T[31] << 9 | T[30] >>> 23, ot = T[30] << 9 | T[31] >>> 23, Et = T[40] << 18 | T[41] >>> 14, Fe = T[41] << 18 | T[40] >>> 14, Me = T[2] << 1 | T[3] >>> 31, Oe = T[3] << 1 | T[2] >>> 31, Ne = T[13] << 12 | T[12] >>> 20, qe = T[12] << 12 | T[13] >>> 20, Q = T[22] << 10 | T[23] >>> 22, te = T[23] << 10 | T[22] >>> 22, Se = T[33] << 13 | T[32] >>> 19, me = T[32] << 13 | T[33] >>> 19, ct = T[42] << 2 | T[43] >>> 30, lt = T[43] << 2 | T[42] >>> 30, $e = T[5] << 30 | T[4] >>> 2, be = T[4] << 30 | T[5] >>> 2, ht = T[14] << 6 | T[15] >>> 26, He = T[15] << 6 | T[14] >>> 26, wt = T[25] << 11 | T[24] >>> 21, Te = T[24] << 11 | T[25] >>> 21, ne = T[34] << 15 | T[35] >>> 17, D = T[35] << 15 | T[34] >>> 17, Be = T[45] << 29 | T[44] >>> 3, gt = T[44] << 29 | T[45] >>> 3, $t = T[6] << 28 | T[7] >>> 4, ee = T[7] << 28 | T[6] >>> 4, _e = T[17] << 23 | T[16] >>> 9, Je = T[16] << 23 | T[17] >>> 9, Ge = T[26] << 25 | T[27] >>> 7, _t = T[27] << 25 | T[26] >>> 7, De = T[36] << 21 | T[37] >>> 11, vt = T[37] << 21 | T[36] >>> 11, se = T[47] << 24 | T[46] >>> 8, pe = T[46] << 24 | T[47] >>> 8, ze = T[8] << 27 | T[9] >>> 5, At = T[9] << 27 | T[8] >>> 5, F = T[18] << 20 | T[19] >>> 12, J = T[19] << 20 | T[18] >>> 12, We = T[29] << 7 | T[28] >>> 25, bt = T[28] << 7 | T[29] >>> 25, Le = T[38] << 8 | T[39] >>> 24, Ke = T[39] << 8 | T[38] >>> 24, ke = T[48] << 14 | T[49] >>> 18, Ue = T[49] << 14 | T[48] >>> 18, T[0] = ve ^ ~Ne & wt, T[1] = xt ^ ~qe & Te, T[10] = $t ^ ~F & oe, T[11] = ee ^ ~J & he, T[20] = Me ^ ~ht & Ge, T[21] = Oe ^ ~He & _t, T[30] = ze ^ ~Pe & Q, T[31] = At ^ ~je & te, T[40] = $e ^ ~_e & We, T[41] = be ^ ~Je & bt, T[2] = Ne ^ ~wt & De, T[3] = qe ^ ~Te & vt, T[12] = F ^ ~oe & Se, T[13] = J ^ ~he & me, T[22] = ht ^ ~Ge & Le, T[23] = He ^ ~_t & Ke, T[32] = Pe ^ ~Q & ne, T[33] = je ^ ~te & D, T[42] = _e ^ ~We & Ye, T[43] = Je ^ ~bt & ot, T[4] = wt ^ ~De & ke, T[5] = Te ^ ~vt & Ue, T[14] = oe ^ ~Se & Be, T[15] = he ^ ~me & gt, T[24] = Ge ^ ~Le & Et, T[25] = _t ^ ~Ke & Fe, T[34] = Q ^ ~ne & se, T[35] = te ^ ~D & pe, T[44] = We ^ ~Ye & ct, T[45] = bt ^ ~ot & lt, T[6] = De ^ ~ke & ve, T[7] = vt ^ ~Ue & xt, T[16] = Se ^ ~Be & $t, T[17] = me ^ ~gt & ee, T[26] = Le ^ ~Et & Me, T[27] = Ke ^ ~Fe & Oe, T[36] = ne ^ ~se & ze, T[37] = D ^ ~pe & At, T[46] = Ye ^ ~ct & $e, T[47] = ot ^ ~lt & be, T[8] = ke ^ ~ve & Ne, T[9] = Ue ^ ~xt & qe, T[18] = Be ^ ~$t & F, T[19] = gt ^ ~ee & J, T[28] = Et ^ ~Me & ht, T[29] = Fe ^ ~Oe & He, T[38] = se ^ ~ze & Pe, T[39] = pe ^ ~At & je, T[48] = ct ^ ~$e & _e, T[49] = lt ^ ~be & Je, T[0] ^= L[le], T[1] ^= L[le + 1];
    };
    if (m)
      t.exports = p;
    else
      for (v = 0; v < y.length; ++v)
        c[y[v]] = p[y[v]];
  })();
})(sha3$1);
var sha3Exports = sha3$1.exports;
const sha3 = /* @__PURE__ */ getDefaultExportFromCjs$2(sha3Exports), version$k = "logger/5.7.0";
let _permanentCensorErrors = !1, _censorErrors = !1;
const LogLevels = { debug: 1, default: 2, info: 2, warning: 3, error: 4, off: 5 };
let _logLevel = LogLevels.default, _globalLogger = null;
function _checkNormalize() {
  try {
    const t = [];
    if (["NFD", "NFC", "NFKD", "NFKC"].forEach((e) => {
      try {
        if ("test".normalize(e) !== "test")
          throw new Error("bad normalize");
      } catch {
        t.push(e);
      }
    }), t.length)
      throw new Error("missing " + t.join(", "));
    if ("é".normalize("NFD") !== "é")
      throw new Error("broken implementation");
  } catch (t) {
    return t.message;
  }
  return null;
}
const _normalizeError = _checkNormalize();
var LogLevel;
(function(t) {
  t.DEBUG = "DEBUG", t.INFO = "INFO", t.WARNING = "WARNING", t.ERROR = "ERROR", t.OFF = "OFF";
})(LogLevel || (LogLevel = {}));
var ErrorCode;
(function(t) {
  t.UNKNOWN_ERROR = "UNKNOWN_ERROR", t.NOT_IMPLEMENTED = "NOT_IMPLEMENTED", t.UNSUPPORTED_OPERATION = "UNSUPPORTED_OPERATION", t.NETWORK_ERROR = "NETWORK_ERROR", t.SERVER_ERROR = "SERVER_ERROR", t.TIMEOUT = "TIMEOUT", t.BUFFER_OVERRUN = "BUFFER_OVERRUN", t.NUMERIC_FAULT = "NUMERIC_FAULT", t.MISSING_NEW = "MISSING_NEW", t.INVALID_ARGUMENT = "INVALID_ARGUMENT", t.MISSING_ARGUMENT = "MISSING_ARGUMENT", t.UNEXPECTED_ARGUMENT = "UNEXPECTED_ARGUMENT", t.CALL_EXCEPTION = "CALL_EXCEPTION", t.INSUFFICIENT_FUNDS = "INSUFFICIENT_FUNDS", t.NONCE_EXPIRED = "NONCE_EXPIRED", t.REPLACEMENT_UNDERPRICED = "REPLACEMENT_UNDERPRICED", t.UNPREDICTABLE_GAS_LIMIT = "UNPREDICTABLE_GAS_LIMIT", t.TRANSACTION_REPLACED = "TRANSACTION_REPLACED", t.ACTION_REJECTED = "ACTION_REJECTED";
})(ErrorCode || (ErrorCode = {}));
const HEX = "0123456789abcdef";
class Logger {
  constructor(e) {
    Object.defineProperty(this, "version", {
      enumerable: !0,
      value: e,
      writable: !1
    });
  }
  _log(e, n) {
    const a = e.toLowerCase();
    LogLevels[a] == null && this.throwArgumentError("invalid log level name", "logLevel", e), !(_logLevel > LogLevels[a]) && console.log.apply(console, n);
  }
  debug(...e) {
    this._log(Logger.levels.DEBUG, e);
  }
  info(...e) {
    this._log(Logger.levels.INFO, e);
  }
  warn(...e) {
    this._log(Logger.levels.WARNING, e);
  }
  makeError(e, n, a) {
    if (_censorErrors)
      return this.makeError("censored error", n, {});
    n || (n = Logger.errors.UNKNOWN_ERROR), a || (a = {});
    const c = [];
    Object.keys(a).forEach((w) => {
      const S = a[w];
      try {
        if (S instanceof Uint8Array) {
          let A = "";
          for (let B = 0; B < S.length; B++)
            A += HEX[S[B] >> 4], A += HEX[S[B] & 15];
          c.push(w + "=Uint8Array(0x" + A + ")");
        } else
          c.push(w + "=" + JSON.stringify(S));
      } catch {
        c.push(w + "=" + JSON.stringify(a[w].toString()));
      }
    }), c.push(`code=${n}`), c.push(`version=${this.version}`);
    const o = e;
    let d = "";
    switch (n) {
      case ErrorCode.NUMERIC_FAULT: {
        d = "NUMERIC_FAULT";
        const w = e;
        switch (w) {
          case "overflow":
          case "underflow":
          case "division-by-zero":
            d += "-" + w;
            break;
          case "negative-power":
          case "negative-width":
            d += "-unsupported";
            break;
          case "unbound-bitwise-result":
            d += "-unbound-result";
            break;
        }
        break;
      }
      case ErrorCode.CALL_EXCEPTION:
      case ErrorCode.INSUFFICIENT_FUNDS:
      case ErrorCode.MISSING_NEW:
      case ErrorCode.NONCE_EXPIRED:
      case ErrorCode.REPLACEMENT_UNDERPRICED:
      case ErrorCode.TRANSACTION_REPLACED:
      case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
        d = n;
        break;
    }
    d && (e += " [ See: https://links.ethers.org/v5-errors-" + d + " ]"), c.length && (e += " (" + c.join(", ") + ")");
    const m = new Error(e);
    return m.reason = o, m.code = n, Object.keys(a).forEach(function(w) {
      m[w] = a[w];
    }), m;
  }
  throwError(e, n, a) {
    throw this.makeError(e, n, a);
  }
  throwArgumentError(e, n, a) {
    return this.throwError(e, Logger.errors.INVALID_ARGUMENT, {
      argument: n,
      value: a
    });
  }
  assert(e, n, a, c) {
    e || this.throwError(n, a, c);
  }
  assertArgument(e, n, a, c) {
    e || this.throwArgumentError(n, a, c);
  }
  checkNormalize(e) {
    _normalizeError && this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "String.prototype.normalize",
      form: _normalizeError
    });
  }
  checkSafeUint53(e, n) {
    typeof e == "number" && (n == null && (n = "value not safe"), (e < 0 || e >= 9007199254740991) && this.throwError(n, Logger.errors.NUMERIC_FAULT, {
      operation: "checkSafeInteger",
      fault: "out-of-safe-range",
      value: e
    }), e % 1 && this.throwError(n, Logger.errors.NUMERIC_FAULT, {
      operation: "checkSafeInteger",
      fault: "non-integer",
      value: e
    }));
  }
  checkArgumentCount(e, n, a) {
    a ? a = ": " + a : a = "", e < n && this.throwError("missing argument" + a, Logger.errors.MISSING_ARGUMENT, {
      count: e,
      expectedCount: n
    }), e > n && this.throwError("too many arguments" + a, Logger.errors.UNEXPECTED_ARGUMENT, {
      count: e,
      expectedCount: n
    });
  }
  checkNew(e, n) {
    (e === Object || e == null) && this.throwError("missing new", Logger.errors.MISSING_NEW, { name: n.name });
  }
  checkAbstract(e, n) {
    e === n ? this.throwError("cannot instantiate abstract class " + JSON.stringify(n.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: e.name, operation: "new" }) : (e === Object || e == null) && this.throwError("missing new", Logger.errors.MISSING_NEW, { name: n.name });
  }
  static globalLogger() {
    return _globalLogger || (_globalLogger = new Logger(version$k)), _globalLogger;
  }
  static setCensorship(e, n) {
    if (!e && n && this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "setCensorship"
    }), _permanentCensorErrors) {
      if (!e)
        return;
      this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "setCensorship"
      });
    }
    _censorErrors = !!e, _permanentCensorErrors = !!n;
  }
  static setLogLevel(e) {
    const n = LogLevels[e.toLowerCase()];
    if (n == null) {
      Logger.globalLogger().warn("invalid log level - " + e);
      return;
    }
    _logLevel = n;
  }
  static from(e) {
    return new Logger(e);
  }
}
Logger.errors = ErrorCode;
Logger.levels = LogLevel;
const version$j = "bytes/5.7.0", logger$n = new Logger(version$j);
function isHexable(t) {
  return !!t.toHexString;
}
function addSlice(t) {
  return t.slice || (t.slice = function() {
    const e = Array.prototype.slice.call(arguments);
    return addSlice(new Uint8Array(Array.prototype.slice.apply(t, e)));
  }), t;
}
function isBytesLike(t) {
  return isHexString$1(t) && !(t.length % 2) || isBytes$3(t);
}
function isInteger(t) {
  return typeof t == "number" && t == t && t % 1 === 0;
}
function isBytes$3(t) {
  if (t == null)
    return !1;
  if (t.constructor === Uint8Array)
    return !0;
  if (typeof t == "string" || !isInteger(t.length) || t.length < 0)
    return !1;
  for (let e = 0; e < t.length; e++) {
    const n = t[e];
    if (!isInteger(n) || n < 0 || n >= 256)
      return !1;
  }
  return !0;
}
function arrayify(t, e) {
  if (e || (e = {}), typeof t == "number") {
    logger$n.checkSafeUint53(t, "invalid arrayify value");
    const n = [];
    for (; t; )
      n.unshift(t & 255), t = parseInt(String(t / 256));
    return n.length === 0 && n.push(0), addSlice(new Uint8Array(n));
  }
  if (e.allowMissingPrefix && typeof t == "string" && t.substring(0, 2) !== "0x" && (t = "0x" + t), isHexable(t) && (t = t.toHexString()), isHexString$1(t)) {
    let n = t.substring(2);
    n.length % 2 && (e.hexPad === "left" ? n = "0" + n : e.hexPad === "right" ? n += "0" : logger$n.throwArgumentError("hex data is odd-length", "value", t));
    const a = [];
    for (let c = 0; c < n.length; c += 2)
      a.push(parseInt(n.substring(c, c + 2), 16));
    return addSlice(new Uint8Array(a));
  }
  return isBytes$3(t) ? addSlice(new Uint8Array(t)) : logger$n.throwArgumentError("invalid arrayify value", "value", t);
}
function concat(t) {
  const e = t.map((c) => arrayify(c)), n = e.reduce((c, o) => c + o.length, 0), a = new Uint8Array(n);
  return e.reduce((c, o) => (a.set(o, c), c + o.length), 0), addSlice(a);
}
function stripZeros(t) {
  let e = arrayify(t);
  if (e.length === 0)
    return e;
  let n = 0;
  for (; n < e.length && e[n] === 0; )
    n++;
  return n && (e = e.slice(n)), e;
}
function zeroPad(t, e) {
  t = arrayify(t), t.length > e && logger$n.throwArgumentError("value out of range", "value", arguments[0]);
  const n = new Uint8Array(e);
  return n.set(t, e - t.length), addSlice(n);
}
function isHexString$1(t, e) {
  return !(typeof t != "string" || !t.match(/^0x[0-9A-Fa-f]*$/) || e && t.length !== 2 + 2 * e);
}
const HexCharacters = "0123456789abcdef";
function hexlify(t, e) {
  if (e || (e = {}), typeof t == "number") {
    logger$n.checkSafeUint53(t, "invalid hexlify value");
    let n = "";
    for (; t; )
      n = HexCharacters[t & 15] + n, t = Math.floor(t / 16);
    return n.length ? (n.length % 2 && (n = "0" + n), "0x" + n) : "0x00";
  }
  if (typeof t == "bigint")
    return t = t.toString(16), t.length % 2 ? "0x0" + t : "0x" + t;
  if (e.allowMissingPrefix && typeof t == "string" && t.substring(0, 2) !== "0x" && (t = "0x" + t), isHexable(t))
    return t.toHexString();
  if (isHexString$1(t))
    return t.length % 2 && (e.hexPad === "left" ? t = "0x0" + t.substring(2) : e.hexPad === "right" ? t += "0" : logger$n.throwArgumentError("hex data is odd-length", "value", t)), t.toLowerCase();
  if (isBytes$3(t)) {
    let n = "0x";
    for (let a = 0; a < t.length; a++) {
      let c = t[a];
      n += HexCharacters[(c & 240) >> 4] + HexCharacters[c & 15];
    }
    return n;
  }
  return logger$n.throwArgumentError("invalid hexlify value", "value", t);
}
function hexDataLength(t) {
  if (typeof t != "string")
    t = hexlify(t);
  else if (!isHexString$1(t) || t.length % 2)
    return null;
  return (t.length - 2) / 2;
}
function hexDataSlice(t, e, n) {
  return typeof t != "string" ? t = hexlify(t) : (!isHexString$1(t) || t.length % 2) && logger$n.throwArgumentError("invalid hexData", "value", t), e = 2 + 2 * e, n != null ? "0x" + t.substring(e, 2 + 2 * n) : "0x" + t.substring(e);
}
function hexConcat(t) {
  let e = "0x";
  return t.forEach((n) => {
    e += hexlify(n).substring(2);
  }), e;
}
function hexZeroPad(t, e) {
  for (typeof t != "string" ? t = hexlify(t) : isHexString$1(t) || logger$n.throwArgumentError("invalid hex string", "value", t), t.length > 2 * e + 2 && logger$n.throwArgumentError("value out of range", "value", arguments[1]); t.length < 2 * e + 2; )
    t = "0x0" + t.substring(2);
  return t;
}
function splitSignature(t) {
  const e = {
    r: "0x",
    s: "0x",
    _vs: "0x",
    recoveryParam: 0,
    v: 0,
    yParityAndS: "0x",
    compact: "0x"
  };
  if (isBytesLike(t)) {
    let n = arrayify(t);
    n.length === 64 ? (e.v = 27 + (n[32] >> 7), n[32] &= 127, e.r = hexlify(n.slice(0, 32)), e.s = hexlify(n.slice(32, 64))) : n.length === 65 ? (e.r = hexlify(n.slice(0, 32)), e.s = hexlify(n.slice(32, 64)), e.v = n[64]) : logger$n.throwArgumentError("invalid signature string", "signature", t), e.v < 27 && (e.v === 0 || e.v === 1 ? e.v += 27 : logger$n.throwArgumentError("signature invalid v byte", "signature", t)), e.recoveryParam = 1 - e.v % 2, e.recoveryParam && (n[32] |= 128), e._vs = hexlify(n.slice(32, 64));
  } else {
    if (e.r = t.r, e.s = t.s, e.v = t.v, e.recoveryParam = t.recoveryParam, e._vs = t._vs, e._vs != null) {
      const c = zeroPad(arrayify(e._vs), 32);
      e._vs = hexlify(c);
      const o = c[0] >= 128 ? 1 : 0;
      e.recoveryParam == null ? e.recoveryParam = o : e.recoveryParam !== o && logger$n.throwArgumentError("signature recoveryParam mismatch _vs", "signature", t), c[0] &= 127;
      const d = hexlify(c);
      e.s == null ? e.s = d : e.s !== d && logger$n.throwArgumentError("signature v mismatch _vs", "signature", t);
    }
    if (e.recoveryParam == null)
      e.v == null ? logger$n.throwArgumentError("signature missing v and recoveryParam", "signature", t) : e.v === 0 || e.v === 1 ? e.recoveryParam = e.v : e.recoveryParam = 1 - e.v % 2;
    else if (e.v == null)
      e.v = 27 + e.recoveryParam;
    else {
      const c = e.v === 0 || e.v === 1 ? e.v : 1 - e.v % 2;
      e.recoveryParam !== c && logger$n.throwArgumentError("signature recoveryParam mismatch v", "signature", t);
    }
    e.r == null || !isHexString$1(e.r) ? logger$n.throwArgumentError("signature missing or invalid r", "signature", t) : e.r = hexZeroPad(e.r, 32), e.s == null || !isHexString$1(e.s) ? logger$n.throwArgumentError("signature missing or invalid s", "signature", t) : e.s = hexZeroPad(e.s, 32);
    const n = arrayify(e.s);
    n[0] >= 128 && logger$n.throwArgumentError("signature s out of range", "signature", t), e.recoveryParam && (n[0] |= 128);
    const a = hexlify(n);
    e._vs && (isHexString$1(e._vs) || logger$n.throwArgumentError("signature invalid _vs", "signature", t), e._vs = hexZeroPad(e._vs, 32)), e._vs == null ? e._vs = a : e._vs !== a && logger$n.throwArgumentError("signature _vs mismatch v and s", "signature", t);
  }
  return e.yParityAndS = e._vs, e.compact = e.r + e.yParityAndS.substring(2), e;
}
function joinSignature(t) {
  return t = splitSignature(t), hexlify(concat([
    t.r,
    t.s,
    t.recoveryParam ? "0x1c" : "0x1b"
  ]));
}
function keccak256$1(t) {
  return "0x" + sha3.keccak_256(arrayify(t));
}
const version$i = "bignumber/5.7.0";
var BN$1 = BN$d.BN;
const logger$m = new Logger(version$i), _constructorGuard$2 = {}, MAX_SAFE = 9007199254740991;
let _warnedToStringRadix = !1;
class BigNumber {
  constructor(e, n) {
    e !== _constructorGuard$2 && logger$m.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "new (BigNumber)"
    }), this._hex = n, this._isBigNumber = !0, Object.freeze(this);
  }
  fromTwos(e) {
    return toBigNumber(toBN(this).fromTwos(e));
  }
  toTwos(e) {
    return toBigNumber(toBN(this).toTwos(e));
  }
  abs() {
    return this._hex[0] === "-" ? BigNumber.from(this._hex.substring(1)) : this;
  }
  add(e) {
    return toBigNumber(toBN(this).add(toBN(e)));
  }
  sub(e) {
    return toBigNumber(toBN(this).sub(toBN(e)));
  }
  div(e) {
    return BigNumber.from(e).isZero() && throwFault("division-by-zero", "div"), toBigNumber(toBN(this).div(toBN(e)));
  }
  mul(e) {
    return toBigNumber(toBN(this).mul(toBN(e)));
  }
  mod(e) {
    const n = toBN(e);
    return n.isNeg() && throwFault("division-by-zero", "mod"), toBigNumber(toBN(this).umod(n));
  }
  pow(e) {
    const n = toBN(e);
    return n.isNeg() && throwFault("negative-power", "pow"), toBigNumber(toBN(this).pow(n));
  }
  and(e) {
    const n = toBN(e);
    return (this.isNegative() || n.isNeg()) && throwFault("unbound-bitwise-result", "and"), toBigNumber(toBN(this).and(n));
  }
  or(e) {
    const n = toBN(e);
    return (this.isNegative() || n.isNeg()) && throwFault("unbound-bitwise-result", "or"), toBigNumber(toBN(this).or(n));
  }
  xor(e) {
    const n = toBN(e);
    return (this.isNegative() || n.isNeg()) && throwFault("unbound-bitwise-result", "xor"), toBigNumber(toBN(this).xor(n));
  }
  mask(e) {
    return (this.isNegative() || e < 0) && throwFault("negative-width", "mask"), toBigNumber(toBN(this).maskn(e));
  }
  shl(e) {
    return (this.isNegative() || e < 0) && throwFault("negative-width", "shl"), toBigNumber(toBN(this).shln(e));
  }
  shr(e) {
    return (this.isNegative() || e < 0) && throwFault("negative-width", "shr"), toBigNumber(toBN(this).shrn(e));
  }
  eq(e) {
    return toBN(this).eq(toBN(e));
  }
  lt(e) {
    return toBN(this).lt(toBN(e));
  }
  lte(e) {
    return toBN(this).lte(toBN(e));
  }
  gt(e) {
    return toBN(this).gt(toBN(e));
  }
  gte(e) {
    return toBN(this).gte(toBN(e));
  }
  isNegative() {
    return this._hex[0] === "-";
  }
  isZero() {
    return toBN(this).isZero();
  }
  toNumber() {
    try {
      return toBN(this).toNumber();
    } catch {
      throwFault("overflow", "toNumber", this.toString());
    }
    return null;
  }
  toBigInt() {
    try {
      return BigInt(this.toString());
    } catch {
    }
    return logger$m.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
      value: this.toString()
    });
  }
  toString() {
    return arguments.length > 0 && (arguments[0] === 10 ? _warnedToStringRadix || (_warnedToStringRadix = !0, logger$m.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")) : arguments[0] === 16 ? logger$m.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {}) : logger$m.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {})), toBN(this).toString(10);
  }
  toHexString() {
    return this._hex;
  }
  toJSON(e) {
    return { type: "BigNumber", hex: this.toHexString() };
  }
  static from(e) {
    if (e instanceof BigNumber)
      return e;
    if (typeof e == "string")
      return e.match(/^-?0x[0-9a-f]+$/i) ? new BigNumber(_constructorGuard$2, toHex(e)) : e.match(/^-?[0-9]+$/) ? new BigNumber(_constructorGuard$2, toHex(new BN$1(e))) : logger$m.throwArgumentError("invalid BigNumber string", "value", e);
    if (typeof e == "number")
      return e % 1 && throwFault("underflow", "BigNumber.from", e), (e >= MAX_SAFE || e <= -MAX_SAFE) && throwFault("overflow", "BigNumber.from", e), BigNumber.from(String(e));
    const n = e;
    if (typeof n == "bigint")
      return BigNumber.from(n.toString());
    if (isBytes$3(n))
      return BigNumber.from(hexlify(n));
    if (n)
      if (n.toHexString) {
        const a = n.toHexString();
        if (typeof a == "string")
          return BigNumber.from(a);
      } else {
        let a = n._hex;
        if (a == null && n.type === "BigNumber" && (a = n.hex), typeof a == "string" && (isHexString$1(a) || a[0] === "-" && isHexString$1(a.substring(1))))
          return BigNumber.from(a);
      }
    return logger$m.throwArgumentError("invalid BigNumber value", "value", e);
  }
  static isBigNumber(e) {
    return !!(e && e._isBigNumber);
  }
}
function toHex(t) {
  if (typeof t != "string")
    return toHex(t.toString(16));
  if (t[0] === "-")
    return t = t.substring(1), t[0] === "-" && logger$m.throwArgumentError("invalid hex", "value", t), t = toHex(t), t === "0x00" ? t : "-" + t;
  if (t.substring(0, 2) !== "0x" && (t = "0x" + t), t === "0x")
    return "0x00";
  for (t.length % 2 && (t = "0x0" + t.substring(2)); t.length > 4 && t.substring(0, 4) === "0x00"; )
    t = "0x" + t.substring(4);
  return t;
}
function toBigNumber(t) {
  return BigNumber.from(toHex(t));
}
function toBN(t) {
  const e = BigNumber.from(t).toHexString();
  return e[0] === "-" ? new BN$1("-" + e.substring(3), 16) : new BN$1(e.substring(2), 16);
}
function throwFault(t, e, n) {
  const a = { fault: t, operation: e };
  return n != null && (a.value = n), logger$m.throwError(t, Logger.errors.NUMERIC_FAULT, a);
}
function _base36To16(t) {
  return new BN$1(t, 36).toString(16);
}
const NegativeOne$1 = /* @__PURE__ */ BigNumber.from(-1), Zero$1 = /* @__PURE__ */ BigNumber.from(0), One$1 = /* @__PURE__ */ BigNumber.from(1), MaxUint256$1 = /* @__PURE__ */ BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), version$h = "strings/5.7.0", logger$l = new Logger(version$h);
var UnicodeNormalizationForm;
(function(t) {
  t.current = "", t.NFC = "NFC", t.NFD = "NFD", t.NFKC = "NFKC", t.NFKD = "NFKD";
})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
var Utf8ErrorReason;
(function(t) {
  t.UNEXPECTED_CONTINUE = "unexpected continuation byte", t.BAD_PREFIX = "bad codepoint prefix", t.OVERRUN = "string overrun", t.MISSING_CONTINUE = "missing continuation byte", t.OUT_OF_RANGE = "out of UTF-8 range", t.UTF16_SURROGATE = "UTF-16 surrogate", t.OVERLONG = "overlong representation";
})(Utf8ErrorReason || (Utf8ErrorReason = {}));
function errorFunc(t, e, n, a, c) {
  return logger$l.throwArgumentError(`invalid codepoint at offset ${e}; ${t}`, "bytes", n);
}
function ignoreFunc(t, e, n, a, c) {
  if (t === Utf8ErrorReason.BAD_PREFIX || t === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
    let o = 0;
    for (let d = e + 1; d < n.length && n[d] >> 6 === 2; d++)
      o++;
    return o;
  }
  return t === Utf8ErrorReason.OVERRUN ? n.length - e - 1 : 0;
}
function replaceFunc(t, e, n, a, c) {
  return t === Utf8ErrorReason.OVERLONG ? (a.push(c), 0) : (a.push(65533), ignoreFunc(t, e, n));
}
const Utf8ErrorFuncs = Object.freeze({
  error: errorFunc,
  ignore: ignoreFunc,
  replace: replaceFunc
});
function getUtf8CodePoints(t, e) {
  e == null && (e = Utf8ErrorFuncs.error), t = arrayify(t);
  const n = [];
  let a = 0;
  for (; a < t.length; ) {
    const c = t[a++];
    if (!(c >> 7)) {
      n.push(c);
      continue;
    }
    let o = null, d = null;
    if ((c & 224) === 192)
      o = 1, d = 127;
    else if ((c & 240) === 224)
      o = 2, d = 2047;
    else if ((c & 248) === 240)
      o = 3, d = 65535;
    else {
      (c & 192) === 128 ? a += e(Utf8ErrorReason.UNEXPECTED_CONTINUE, a - 1, t, n) : a += e(Utf8ErrorReason.BAD_PREFIX, a - 1, t, n);
      continue;
    }
    if (a - 1 + o >= t.length) {
      a += e(Utf8ErrorReason.OVERRUN, a - 1, t, n);
      continue;
    }
    let m = c & (1 << 8 - o - 1) - 1;
    for (let w = 0; w < o; w++) {
      let S = t[a];
      if ((S & 192) != 128) {
        a += e(Utf8ErrorReason.MISSING_CONTINUE, a, t, n), m = null;
        break;
      }
      m = m << 6 | S & 63, a++;
    }
    if (m !== null) {
      if (m > 1114111) {
        a += e(Utf8ErrorReason.OUT_OF_RANGE, a - 1 - o, t, n, m);
        continue;
      }
      if (m >= 55296 && m <= 57343) {
        a += e(Utf8ErrorReason.UTF16_SURROGATE, a - 1 - o, t, n, m);
        continue;
      }
      if (m <= d) {
        a += e(Utf8ErrorReason.OVERLONG, a - 1 - o, t, n, m);
        continue;
      }
      n.push(m);
    }
  }
  return n;
}
function toUtf8Bytes(t, e = UnicodeNormalizationForm.current) {
  e != UnicodeNormalizationForm.current && (logger$l.checkNormalize(), t = t.normalize(e));
  let n = [];
  for (let a = 0; a < t.length; a++) {
    const c = t.charCodeAt(a);
    if (c < 128)
      n.push(c);
    else if (c < 2048)
      n.push(c >> 6 | 192), n.push(c & 63 | 128);
    else if ((c & 64512) == 55296) {
      a++;
      const o = t.charCodeAt(a);
      if (a >= t.length || (o & 64512) !== 56320)
        throw new Error("invalid utf-8 string");
      const d = 65536 + ((c & 1023) << 10) + (o & 1023);
      n.push(d >> 18 | 240), n.push(d >> 12 & 63 | 128), n.push(d >> 6 & 63 | 128), n.push(d & 63 | 128);
    } else
      n.push(c >> 12 | 224), n.push(c >> 6 & 63 | 128), n.push(c & 63 | 128);
  }
  return arrayify(n);
}
function _toUtf8String(t) {
  return t.map((e) => e <= 65535 ? String.fromCharCode(e) : (e -= 65536, String.fromCharCode((e >> 10 & 1023) + 55296, (e & 1023) + 56320))).join("");
}
function toUtf8String(t, e) {
  return _toUtf8String(getUtf8CodePoints(t, e));
}
function id(t) {
  return keccak256$1(toUtf8Bytes(t));
}
const version$g = "hash/5.7.0", messagePrefix = `Ethereum Signed Message:
`;
function hashMessage(t) {
  return typeof t == "string" && (t = toUtf8Bytes(t)), keccak256$1(concat([
    toUtf8Bytes(messagePrefix),
    toUtf8Bytes(String(t.length)),
    t
  ]));
}
const version$f = "rlp/5.7.0", logger$k = new Logger(version$f);
function arrayifyInteger(t) {
  const e = [];
  for (; t; )
    e.unshift(t & 255), t >>= 8;
  return e;
}
function _encode(t) {
  if (Array.isArray(t)) {
    let a = [];
    if (t.forEach(function(o) {
      a = a.concat(_encode(o));
    }), a.length <= 55)
      return a.unshift(192 + a.length), a;
    const c = arrayifyInteger(a.length);
    return c.unshift(247 + c.length), c.concat(a);
  }
  isBytesLike(t) || logger$k.throwArgumentError("RLP object must be BytesLike", "object", t);
  const e = Array.prototype.slice.call(arrayify(t));
  if (e.length === 1 && e[0] <= 127)
    return e;
  if (e.length <= 55)
    return e.unshift(128 + e.length), e;
  const n = arrayifyInteger(e.length);
  return n.unshift(183 + n.length), n.concat(e);
}
function encode$1(t) {
  return hexlify(_encode(t));
}
const version$e = "address/5.7.0", logger$j = new Logger(version$e);
function getChecksumAddress(t) {
  isHexString$1(t, 20) || logger$j.throwArgumentError("invalid address", "address", t), t = t.toLowerCase();
  const e = t.substring(2).split(""), n = new Uint8Array(40);
  for (let c = 0; c < 40; c++)
    n[c] = e[c].charCodeAt(0);
  const a = arrayify(keccak256$1(n));
  for (let c = 0; c < 40; c += 2)
    a[c >> 1] >> 4 >= 8 && (e[c] = e[c].toUpperCase()), (a[c >> 1] & 15) >= 8 && (e[c + 1] = e[c + 1].toUpperCase());
  return "0x" + e.join("");
}
const MAX_SAFE_INTEGER = 9007199254740991;
function log10(t) {
  return Math.log10 ? Math.log10(t) : Math.log(t) / Math.LN10;
}
const ibanLookup = {};
for (let t = 0; t < 10; t++)
  ibanLookup[String(t)] = String(t);
for (let t = 0; t < 26; t++)
  ibanLookup[String.fromCharCode(65 + t)] = String(10 + t);
const safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
function ibanChecksum(t) {
  t = t.toUpperCase(), t = t.substring(4) + t.substring(0, 2) + "00";
  let e = t.split("").map((a) => ibanLookup[a]).join("");
  for (; e.length >= safeDigits; ) {
    let a = e.substring(0, safeDigits);
    e = parseInt(a, 10) % 97 + e.substring(a.length);
  }
  let n = String(98 - parseInt(e, 10) % 97);
  for (; n.length < 2; )
    n = "0" + n;
  return n;
}
function getAddress(t) {
  let e = null;
  if (typeof t != "string" && logger$j.throwArgumentError("invalid address", "address", t), t.match(/^(0x)?[0-9a-fA-F]{40}$/))
    t.substring(0, 2) !== "0x" && (t = "0x" + t), e = getChecksumAddress(t), t.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && e !== t && logger$j.throwArgumentError("bad address checksum", "address", t);
  else if (t.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    for (t.substring(2, 4) !== ibanChecksum(t) && logger$j.throwArgumentError("bad icap checksum", "address", t), e = _base36To16(t.substring(4)); e.length < 40; )
      e = "0" + e;
    e = getChecksumAddress("0x" + e);
  } else
    logger$j.throwArgumentError("invalid address", "address", t);
  return e;
}
function getContractAddress(t) {
  let e = null;
  try {
    e = getAddress(t.from);
  } catch {
    logger$j.throwArgumentError("missing from address", "transaction", t);
  }
  const n = stripZeros(arrayify(BigNumber.from(t.nonce).toHexString()));
  return getAddress(hexDataSlice(keccak256$1(encode$1([e, n])), 12));
}
const version$d = "properties/5.7.0";
var __awaiter$e = function(t, e, n, a) {
  function c(o) {
    return o instanceof n ? o : new n(function(d) {
      d(o);
    });
  }
  return new (n || (n = Promise))(function(o, d) {
    function m(A) {
      try {
        S(a.next(A));
      } catch (B) {
        d(B);
      }
    }
    function w(A) {
      try {
        S(a.throw(A));
      } catch (B) {
        d(B);
      }
    }
    function S(A) {
      A.done ? o(A.value) : c(A.value).then(m, w);
    }
    S((a = a.apply(t, e || [])).next());
  });
};
const logger$i = new Logger(version$d);
function defineReadOnly(t, e, n) {
  Object.defineProperty(t, e, {
    enumerable: !0,
    value: n,
    writable: !1
  });
}
function getStatic(t, e) {
  for (let n = 0; n < 32; n++) {
    if (t[e])
      return t[e];
    if (!t.prototype || typeof t.prototype != "object")
      break;
    t = Object.getPrototypeOf(t.prototype).constructor;
  }
  return null;
}
function resolveProperties(t) {
  return __awaiter$e(this, void 0, void 0, function* () {
    const e = Object.keys(t).map((a) => {
      const c = t[a];
      return Promise.resolve(c).then((o) => ({ key: a, value: o }));
    });
    return (yield Promise.all(e)).reduce((a, c) => (a[c.key] = c.value, a), {});
  });
}
function checkProperties(t, e) {
  (!t || typeof t != "object") && logger$i.throwArgumentError("invalid object", "object", t), Object.keys(t).forEach((n) => {
    e[n] || logger$i.throwArgumentError("invalid object key - " + n, "transaction:" + n, t);
  });
}
function shallowCopy(t) {
  const e = {};
  for (const n in t)
    e[n] = t[n];
  return e;
}
const opaque = { bigint: !0, boolean: !0, function: !0, number: !0, string: !0 };
function _isFrozen(t) {
  if (t == null || opaque[typeof t])
    return !0;
  if (Array.isArray(t) || typeof t == "object") {
    if (!Object.isFrozen(t))
      return !1;
    const e = Object.keys(t);
    for (let n = 0; n < e.length; n++) {
      let a = null;
      try {
        a = t[e[n]];
      } catch {
        continue;
      }
      if (!_isFrozen(a))
        return !1;
    }
    return !0;
  }
  return logger$i.throwArgumentError(`Cannot deepCopy ${typeof t}`, "object", t);
}
function _deepCopy(t) {
  if (_isFrozen(t))
    return t;
  if (Array.isArray(t))
    return Object.freeze(t.map((e) => deepCopy(e)));
  if (typeof t == "object") {
    const e = {};
    for (const n in t) {
      const a = t[n];
      a !== void 0 && defineReadOnly(e, n, deepCopy(a));
    }
    return e;
  }
  return logger$i.throwArgumentError(`Cannot deepCopy ${typeof t}`, "object", t);
}
function deepCopy(t) {
  return _deepCopy(t);
}
class Description {
  constructor(e) {
    for (const n in e)
      this[n] = deepCopy(e[n]);
  }
}
var __awaiter$d = function(t, e, n, a) {
  function c(o) {
    return o instanceof n ? o : new n(function(d) {
      d(o);
    });
  }
  return new (n || (n = Promise))(function(o, d) {
    function m(A) {
      try {
        S(a.next(A));
      } catch (B) {
        d(B);
      }
    }
    function w(A) {
      try {
        S(a.throw(A));
      } catch (B) {
        d(B);
      }
    }
    function S(A) {
      A.done ? o(A.value) : c(A.value).then(m, w);
    }
    S((a = a.apply(t, e || [])).next());
  });
};
const logger$h = new Logger(version$g), padding = new Uint8Array(32);
padding.fill(0);
const NegativeOne = BigNumber.from(-1), Zero = BigNumber.from(0), One = BigNumber.from(1), MaxUint256 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
function hexPadRight(t) {
  const e = arrayify(t), n = e.length % 32;
  return n ? hexConcat([e, padding.slice(n)]) : hexlify(e);
}
const hexTrue = hexZeroPad(One.toHexString(), 32), hexFalse = hexZeroPad(Zero.toHexString(), 32), domainFieldTypes = {
  name: "string",
  version: "string",
  chainId: "uint256",
  verifyingContract: "address",
  salt: "bytes32"
}, domainFieldNames = [
  "name",
  "version",
  "chainId",
  "verifyingContract",
  "salt"
];
function checkString(t) {
  return function(e) {
    return typeof e != "string" && logger$h.throwArgumentError(`invalid domain value for ${JSON.stringify(t)}`, `domain.${t}`, e), e;
  };
}
const domainChecks = {
  name: checkString("name"),
  version: checkString("version"),
  chainId: function(t) {
    try {
      return BigNumber.from(t).toString();
    } catch {
    }
    return logger$h.throwArgumentError('invalid domain value for "chainId"', "domain.chainId", t);
  },
  verifyingContract: function(t) {
    try {
      return getAddress(t).toLowerCase();
    } catch {
    }
    return logger$h.throwArgumentError('invalid domain value "verifyingContract"', "domain.verifyingContract", t);
  },
  salt: function(t) {
    try {
      const e = arrayify(t);
      if (e.length !== 32)
        throw new Error("bad length");
      return hexlify(e);
    } catch {
    }
    return logger$h.throwArgumentError('invalid domain value "salt"', "domain.salt", t);
  }
};
function getBaseEncoder(t) {
  {
    const e = t.match(/^(u?)int(\d*)$/);
    if (e) {
      const n = e[1] === "", a = parseInt(e[2] || "256");
      (a % 8 !== 0 || a > 256 || e[2] && e[2] !== String(a)) && logger$h.throwArgumentError("invalid numeric width", "type", t);
      const c = MaxUint256.mask(n ? a - 1 : a), o = n ? c.add(One).mul(NegativeOne) : Zero;
      return function(d) {
        const m = BigNumber.from(d);
        return (m.lt(o) || m.gt(c)) && logger$h.throwArgumentError(`value out-of-bounds for ${t}`, "value", d), hexZeroPad(m.toTwos(256).toHexString(), 32);
      };
    }
  }
  {
    const e = t.match(/^bytes(\d+)$/);
    if (e) {
      const n = parseInt(e[1]);
      return (n === 0 || n > 32 || e[1] !== String(n)) && logger$h.throwArgumentError("invalid bytes width", "type", t), function(a) {
        return arrayify(a).length !== n && logger$h.throwArgumentError(`invalid length for ${t}`, "value", a), hexPadRight(a);
      };
    }
  }
  switch (t) {
    case "address":
      return function(e) {
        return hexZeroPad(getAddress(e), 32);
      };
    case "bool":
      return function(e) {
        return e ? hexTrue : hexFalse;
      };
    case "bytes":
      return function(e) {
        return keccak256$1(e);
      };
    case "string":
      return function(e) {
        return id(e);
      };
  }
  return null;
}
function encodeType(t, e) {
  return `${t}(${e.map(({ name: n, type: a }) => a + " " + n).join(",")})`;
}
class TypedDataEncoder {
  constructor(e) {
    defineReadOnly(this, "types", Object.freeze(deepCopy(e))), defineReadOnly(this, "_encoderCache", {}), defineReadOnly(this, "_types", {});
    const n = {}, a = {}, c = {};
    Object.keys(e).forEach((m) => {
      n[m] = {}, a[m] = [], c[m] = {};
    });
    for (const m in e) {
      const w = {};
      e[m].forEach((S) => {
        w[S.name] && logger$h.throwArgumentError(`duplicate variable name ${JSON.stringify(S.name)} in ${JSON.stringify(m)}`, "types", e), w[S.name] = !0;
        const A = S.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
        A === m && logger$h.throwArgumentError(`circular type reference to ${JSON.stringify(A)}`, "types", e), !getBaseEncoder(A) && (a[A] || logger$h.throwArgumentError(`unknown type ${JSON.stringify(A)}`, "types", e), a[A].push(m), n[m][A] = !0);
      });
    }
    const o = Object.keys(a).filter((m) => a[m].length === 0);
    o.length === 0 ? logger$h.throwArgumentError("missing primary type", "types", e) : o.length > 1 && logger$h.throwArgumentError(`ambiguous primary types or unused types: ${o.map((m) => JSON.stringify(m)).join(", ")}`, "types", e), defineReadOnly(this, "primaryType", o[0]);
    function d(m, w) {
      w[m] && logger$h.throwArgumentError(`circular type reference to ${JSON.stringify(m)}`, "types", e), w[m] = !0, Object.keys(n[m]).forEach((S) => {
        a[S] && (d(S, w), Object.keys(w).forEach((A) => {
          c[A][S] = !0;
        }));
      }), delete w[m];
    }
    d(this.primaryType, {});
    for (const m in c) {
      const w = Object.keys(c[m]);
      w.sort(), this._types[m] = encodeType(m, e[m]) + w.map((S) => encodeType(S, e[S])).join("");
    }
  }
  getEncoder(e) {
    let n = this._encoderCache[e];
    return n || (n = this._encoderCache[e] = this._getEncoder(e)), n;
  }
  _getEncoder(e) {
    {
      const c = getBaseEncoder(e);
      if (c)
        return c;
    }
    const n = e.match(/^(.*)(\x5b(\d*)\x5d)$/);
    if (n) {
      const c = n[1], o = this.getEncoder(c), d = parseInt(n[3]);
      return (m) => {
        d >= 0 && m.length !== d && logger$h.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", m);
        let w = m.map(o);
        return this._types[c] && (w = w.map(keccak256$1)), keccak256$1(hexConcat(w));
      };
    }
    const a = this.types[e];
    if (a) {
      const c = id(this._types[e]);
      return (o) => {
        const d = a.map(({ name: m, type: w }) => {
          const S = this.getEncoder(w)(o[m]);
          return this._types[w] ? keccak256$1(S) : S;
        });
        return d.unshift(c), hexConcat(d);
      };
    }
    return logger$h.throwArgumentError(`unknown type: ${e}`, "type", e);
  }
  encodeType(e) {
    const n = this._types[e];
    return n || logger$h.throwArgumentError(`unknown type: ${JSON.stringify(e)}`, "name", e), n;
  }
  encodeData(e, n) {
    return this.getEncoder(e)(n);
  }
  hashStruct(e, n) {
    return keccak256$1(this.encodeData(e, n));
  }
  encode(e) {
    return this.encodeData(this.primaryType, e);
  }
  hash(e) {
    return this.hashStruct(this.primaryType, e);
  }
  _visit(e, n, a) {
    if (getBaseEncoder(e))
      return a(e, n);
    const c = e.match(/^(.*)(\x5b(\d*)\x5d)$/);
    if (c) {
      const d = c[1], m = parseInt(c[3]);
      return m >= 0 && n.length !== m && logger$h.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", n), n.map((w) => this._visit(d, w, a));
    }
    const o = this.types[e];
    return o ? o.reduce((d, { name: m, type: w }) => (d[m] = this._visit(w, n[m], a), d), {}) : logger$h.throwArgumentError(`unknown type: ${e}`, "type", e);
  }
  visit(e, n) {
    return this._visit(this.primaryType, e, n);
  }
  static from(e) {
    return new TypedDataEncoder(e);
  }
  static getPrimaryType(e) {
    return TypedDataEncoder.from(e).primaryType;
  }
  static hashStruct(e, n, a) {
    return TypedDataEncoder.from(n).hashStruct(e, a);
  }
  static hashDomain(e) {
    const n = [];
    for (const a in e) {
      const c = domainFieldTypes[a];
      c || logger$h.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(a)}`, "domain", e), n.push({ name: a, type: c });
    }
    return n.sort((a, c) => domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(c.name)), TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: n }, e);
  }
  static encode(e, n, a) {
    return hexConcat([
      "0x1901",
      TypedDataEncoder.hashDomain(e),
      TypedDataEncoder.from(n).hash(a)
    ]);
  }
  static hash(e, n, a) {
    return keccak256$1(TypedDataEncoder.encode(e, n, a));
  }
  // Replaces all address types with ENS names with their looked up address
  static resolveNames(e, n, a, c) {
    return __awaiter$d(this, void 0, void 0, function* () {
      e = shallowCopy(e);
      const o = {};
      e.verifyingContract && !isHexString$1(e.verifyingContract, 20) && (o[e.verifyingContract] = "0x");
      const d = TypedDataEncoder.from(n);
      d.visit(a, (m, w) => (m === "address" && !isHexString$1(w, 20) && (o[w] = "0x"), w));
      for (const m in o)
        o[m] = yield c(m);
      return e.verifyingContract && o[e.verifyingContract] && (e.verifyingContract = o[e.verifyingContract]), a = d.visit(a, (m, w) => m === "address" && o[w] ? o[w] : w), { domain: e, value: a };
    });
  }
  static getPayload(e, n, a) {
    TypedDataEncoder.hashDomain(e);
    const c = {}, o = [];
    domainFieldNames.forEach((w) => {
      const S = e[w];
      S != null && (c[w] = domainChecks[w](S), o.push({ name: w, type: domainFieldTypes[w] }));
    });
    const d = TypedDataEncoder.from(n), m = shallowCopy(n);
    return m.EIP712Domain ? logger$h.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", n) : m.EIP712Domain = o, d.encode(a), {
      types: m,
      domain: c,
      primaryType: d.primaryType,
      message: d.visit(a, (w, S) => {
        if (w.match(/^bytes(\d*)/))
          return hexlify(arrayify(S));
        if (w.match(/^u?int/))
          return BigNumber.from(S).toString();
        switch (w) {
          case "address":
            return S.toLowerCase();
          case "bool":
            return !!S;
          case "string":
            return typeof S != "string" && logger$h.throwArgumentError("invalid string", "value", S), S;
        }
        return logger$h.throwArgumentError("unsupported type", "type", w);
      })
    };
  }
}
function createCommonjsModule(t, e, n) {
  return n = {
    path: e,
    exports: {},
    require: function(a, c) {
      return commonjsRequire$1(a, c ?? n.path);
    }
  }, t(n, n.exports), n.exports;
}
function commonjsRequire$1() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var minimalisticAssert = assert$5;
function assert$5(t, e) {
  if (!t)
    throw new Error(e || "Assertion failed");
}
assert$5.equal = function(e, n, a) {
  if (e != n)
    throw new Error(a || "Assertion failed: " + e + " != " + n);
};
var utils_1$1 = createCommonjsModule(function(t, e) {
  var n = e;
  function a(d, m) {
    if (Array.isArray(d))
      return d.slice();
    if (!d)
      return [];
    var w = [];
    if (typeof d != "string") {
      for (var S = 0; S < d.length; S++)
        w[S] = d[S] | 0;
      return w;
    }
    if (m === "hex") {
      d = d.replace(/[^a-z0-9]+/ig, ""), d.length % 2 !== 0 && (d = "0" + d);
      for (var S = 0; S < d.length; S += 2)
        w.push(parseInt(d[S] + d[S + 1], 16));
    } else
      for (var S = 0; S < d.length; S++) {
        var A = d.charCodeAt(S), B = A >> 8, P = A & 255;
        B ? w.push(B, P) : w.push(P);
      }
    return w;
  }
  n.toArray = a;
  function c(d) {
    return d.length === 1 ? "0" + d : d;
  }
  n.zero2 = c;
  function o(d) {
    for (var m = "", w = 0; w < d.length; w++)
      m += c(d[w].toString(16));
    return m;
  }
  n.toHex = o, n.encode = function(m, w) {
    return w === "hex" ? o(m) : m;
  };
}), utils_1$1$1 = createCommonjsModule(function(t, e) {
  var n = e;
  n.assert = minimalisticAssert, n.toArray = utils_1$1.toArray, n.zero2 = utils_1$1.zero2, n.toHex = utils_1$1.toHex, n.encode = utils_1$1.encode;
  function a(w, S, A) {
    var B = new Array(Math.max(w.bitLength(), A) + 1);
    B.fill(0);
    for (var P = 1 << S + 1, I = w.clone(), O = 0; O < B.length; O++) {
      var L, C = I.andln(P - 1);
      I.isOdd() ? (C > (P >> 1) - 1 ? L = (P >> 1) - C : L = C, I.isubn(L)) : L = 0, B[O] = L, I.iushrn(1);
    }
    return B;
  }
  n.getNAF = a;
  function c(w, S) {
    var A = [
      [],
      []
    ];
    w = w.clone(), S = S.clone();
    for (var B = 0, P = 0, I; w.cmpn(-B) > 0 || S.cmpn(-P) > 0; ) {
      var O = w.andln(3) + B & 3, L = S.andln(3) + P & 3;
      O === 3 && (O = -1), L === 3 && (L = -1);
      var C;
      O & 1 ? (I = w.andln(7) + B & 7, (I === 3 || I === 5) && L === 2 ? C = -O : C = O) : C = 0, A[0].push(C);
      var z;
      L & 1 ? (I = S.andln(7) + P & 7, (I === 3 || I === 5) && O === 2 ? z = -L : z = L) : z = 0, A[1].push(z), 2 * B === C + 1 && (B = 1 - B), 2 * P === z + 1 && (P = 1 - P), w.iushrn(1), S.iushrn(1);
    }
    return A;
  }
  n.getJSF = c;
  function o(w, S, A) {
    var B = "_" + S;
    w.prototype[S] = function() {
      return this[B] !== void 0 ? this[B] : this[B] = A.call(this);
    };
  }
  n.cachedProperty = o;
  function d(w) {
    return typeof w == "string" ? n.toArray(w, "hex") : w;
  }
  n.parseBytes = d;
  function m(w) {
    return new BN$d(w, "hex", "le");
  }
  n.intFromLE = m;
}), getNAF = utils_1$1$1.getNAF, getJSF = utils_1$1$1.getJSF, assert$1$1 = utils_1$1$1.assert;
function BaseCurve(t, e) {
  this.type = t, this.p = new BN$d(e.p, 16), this.red = e.prime ? BN$d.red(e.prime) : BN$d.mont(this.p), this.zero = new BN$d(0).toRed(this.red), this.one = new BN$d(1).toRed(this.red), this.two = new BN$d(2).toRed(this.red), this.n = e.n && new BN$d(e.n, 16), this.g = e.g && this.pointFromJSON(e.g, e.gRed), this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;
  var n = this.n && this.p.div(this.n);
  !n || n.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = !0, this.redN = this.n.toRed(this.red));
}
var base$4 = BaseCurve;
BaseCurve.prototype.point = function() {
  throw new Error("Not implemented");
};
BaseCurve.prototype.validate = function() {
  throw new Error("Not implemented");
};
BaseCurve.prototype._fixedNafMul = function(e, n) {
  assert$1$1(e.precomputed);
  var a = e._getDoubles(), c = getNAF(n, 1, this._bitLength), o = (1 << a.step + 1) - (a.step % 2 === 0 ? 2 : 1);
  o /= 3;
  var d = [], m, w;
  for (m = 0; m < c.length; m += a.step) {
    w = 0;
    for (var S = m + a.step - 1; S >= m; S--)
      w = (w << 1) + c[S];
    d.push(w);
  }
  for (var A = this.jpoint(null, null, null), B = this.jpoint(null, null, null), P = o; P > 0; P--) {
    for (m = 0; m < d.length; m++)
      w = d[m], w === P ? B = B.mixedAdd(a.points[m]) : w === -P && (B = B.mixedAdd(a.points[m].neg()));
    A = A.add(B);
  }
  return A.toP();
};
BaseCurve.prototype._wnafMul = function(e, n) {
  var a = 4, c = e._getNAFPoints(a);
  a = c.wnd;
  for (var o = c.points, d = getNAF(n, a, this._bitLength), m = this.jpoint(null, null, null), w = d.length - 1; w >= 0; w--) {
    for (var S = 0; w >= 0 && d[w] === 0; w--)
      S++;
    if (w >= 0 && S++, m = m.dblp(S), w < 0)
      break;
    var A = d[w];
    assert$1$1(A !== 0), e.type === "affine" ? A > 0 ? m = m.mixedAdd(o[A - 1 >> 1]) : m = m.mixedAdd(o[-A - 1 >> 1].neg()) : A > 0 ? m = m.add(o[A - 1 >> 1]) : m = m.add(o[-A - 1 >> 1].neg());
  }
  return e.type === "affine" ? m.toP() : m;
};
BaseCurve.prototype._wnafMulAdd = function(e, n, a, c, o) {
  var d = this._wnafT1, m = this._wnafT2, w = this._wnafT3, S = 0, A, B, P;
  for (A = 0; A < c; A++) {
    P = n[A];
    var I = P._getNAFPoints(e);
    d[A] = I.wnd, m[A] = I.points;
  }
  for (A = c - 1; A >= 1; A -= 2) {
    var O = A - 1, L = A;
    if (d[O] !== 1 || d[L] !== 1) {
      w[O] = getNAF(a[O], d[O], this._bitLength), w[L] = getNAF(a[L], d[L], this._bitLength), S = Math.max(w[O].length, S), S = Math.max(w[L].length, S);
      continue;
    }
    var C = [
      n[O],
      /* 1 */
      null,
      /* 3 */
      null,
      /* 5 */
      n[L]
      /* 7 */
    ];
    n[O].y.cmp(n[L].y) === 0 ? (C[1] = n[O].add(n[L]), C[2] = n[O].toJ().mixedAdd(n[L].neg())) : n[O].y.cmp(n[L].y.redNeg()) === 0 ? (C[1] = n[O].toJ().mixedAdd(n[L]), C[2] = n[O].add(n[L].neg())) : (C[1] = n[O].toJ().mixedAdd(n[L]), C[2] = n[O].toJ().mixedAdd(n[L].neg()));
    var z = [
      -3,
      /* -1 -1 */
      -1,
      /* -1 0 */
      -5,
      /* -1 1 */
      -7,
      /* 0 -1 */
      0,
      /* 0 0 */
      7,
      /* 0 1 */
      5,
      /* 1 -1 */
      1,
      /* 1 0 */
      3
      /* 1 1 */
    ], q = getJSF(a[O], a[L]);
    for (S = Math.max(q[0].length, S), w[O] = new Array(S), w[L] = new Array(S), B = 0; B < S; B++) {
      var Z = q[0][B] | 0, X = q[1][B] | 0;
      w[O][B] = z[(Z + 1) * 3 + (X + 1)], w[L][B] = 0, m[O] = C;
    }
  }
  var ie = this.jpoint(null, null, null), fe = this._wnafT4;
  for (A = S; A >= 0; A--) {
    for (var ye = 0; A >= 0; ) {
      var j = !0;
      for (B = 0; B < c; B++)
        fe[B] = w[B][A] | 0, fe[B] !== 0 && (j = !1);
      if (!j)
        break;
      ye++, A--;
    }
    if (A >= 0 && ye++, ie = ie.dblp(ye), A < 0)
      break;
    for (B = 0; B < c; B++) {
      var V = fe[B];
      V !== 0 && (V > 0 ? P = m[B][V - 1 >> 1] : V < 0 && (P = m[B][-V - 1 >> 1].neg()), P.type === "affine" ? ie = ie.mixedAdd(P) : ie = ie.add(P));
    }
  }
  for (A = 0; A < c; A++)
    m[A] = null;
  return o ? ie : ie.toP();
};
function BasePoint(t, e) {
  this.curve = t, this.type = e, this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;
BasePoint.prototype.eq = function() {
  throw new Error("Not implemented");
};
BasePoint.prototype.validate = function() {
  return this.curve.validate(this);
};
BaseCurve.prototype.decodePoint = function(e, n) {
  e = utils_1$1$1.toArray(e, n);
  var a = this.p.byteLength();
  if ((e[0] === 4 || e[0] === 6 || e[0] === 7) && e.length - 1 === 2 * a) {
    e[0] === 6 ? assert$1$1(e[e.length - 1] % 2 === 0) : e[0] === 7 && assert$1$1(e[e.length - 1] % 2 === 1);
    var c = this.point(
      e.slice(1, 1 + a),
      e.slice(1 + a, 1 + 2 * a)
    );
    return c;
  } else if ((e[0] === 2 || e[0] === 3) && e.length - 1 === a)
    return this.pointFromX(e.slice(1, 1 + a), e[0] === 3);
  throw new Error("Unknown point format");
};
BasePoint.prototype.encodeCompressed = function(e) {
  return this.encode(e, !0);
};
BasePoint.prototype._encode = function(e) {
  var n = this.curve.p.byteLength(), a = this.getX().toArray("be", n);
  return e ? [this.getY().isEven() ? 2 : 3].concat(a) : [4].concat(a, this.getY().toArray("be", n));
};
BasePoint.prototype.encode = function(e, n) {
  return utils_1$1$1.encode(this._encode(n), e);
};
BasePoint.prototype.precompute = function(e) {
  if (this.precomputed)
    return this;
  var n = {
    doubles: null,
    naf: null,
    beta: null
  };
  return n.naf = this._getNAFPoints(8), n.doubles = this._getDoubles(4, e), n.beta = this._getBeta(), this.precomputed = n, this;
};
BasePoint.prototype._hasDoubles = function(e) {
  if (!this.precomputed)
    return !1;
  var n = this.precomputed.doubles;
  return n ? n.points.length >= Math.ceil((e.bitLength() + 1) / n.step) : !1;
};
BasePoint.prototype._getDoubles = function(e, n) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;
  for (var a = [this], c = this, o = 0; o < n; o += e) {
    for (var d = 0; d < e; d++)
      c = c.dbl();
    a.push(c);
  }
  return {
    step: e,
    points: a
  };
};
BasePoint.prototype._getNAFPoints = function(e) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;
  for (var n = [this], a = (1 << e) - 1, c = a === 1 ? null : this.dbl(), o = 1; o < a; o++)
    n[o] = n[o - 1].add(c);
  return {
    wnd: e,
    points: n
  };
};
BasePoint.prototype._getBeta = function() {
  return null;
};
BasePoint.prototype.dblp = function(e) {
  for (var n = this, a = 0; a < e; a++)
    n = n.dbl();
  return n;
};
var inherits_browser = createCommonjsModule(function(t) {
  typeof Object.create == "function" ? t.exports = function(n, a) {
    a && (n.super_ = a, n.prototype = Object.create(a.prototype, {
      constructor: {
        value: n,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }));
  } : t.exports = function(n, a) {
    if (a) {
      n.super_ = a;
      var c = function() {
      };
      c.prototype = a.prototype, n.prototype = new c(), n.prototype.constructor = n;
    }
  };
}), assert$2$1 = utils_1$1$1.assert;
function ShortCurve(t) {
  base$4.call(this, "short", t), this.a = new BN$d(t.a, 16).toRed(this.red), this.b = new BN$d(t.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = this.a.fromRed().cmpn(0) === 0, this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0, this.endo = this._getEndomorphism(t), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
}
inherits_browser(ShortCurve, base$4);
var short_1 = ShortCurve;
ShortCurve.prototype._getEndomorphism = function(e) {
  if (!(!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)) {
    var n, a;
    if (e.beta)
      n = new BN$d(e.beta, 16).toRed(this.red);
    else {
      var c = this._getEndoRoots(this.p);
      n = c[0].cmp(c[1]) < 0 ? c[0] : c[1], n = n.toRed(this.red);
    }
    if (e.lambda)
      a = new BN$d(e.lambda, 16);
    else {
      var o = this._getEndoRoots(this.n);
      this.g.mul(o[0]).x.cmp(this.g.x.redMul(n)) === 0 ? a = o[0] : (a = o[1], assert$2$1(this.g.mul(a).x.cmp(this.g.x.redMul(n)) === 0));
    }
    var d;
    return e.basis ? d = e.basis.map(function(m) {
      return {
        a: new BN$d(m.a, 16),
        b: new BN$d(m.b, 16)
      };
    }) : d = this._getEndoBasis(a), {
      beta: n,
      lambda: a,
      basis: d
    };
  }
};
ShortCurve.prototype._getEndoRoots = function(e) {
  var n = e === this.p ? this.red : BN$d.mont(e), a = new BN$d(2).toRed(n).redInvm(), c = a.redNeg(), o = new BN$d(3).toRed(n).redNeg().redSqrt().redMul(a), d = c.redAdd(o).fromRed(), m = c.redSub(o).fromRed();
  return [d, m];
};
ShortCurve.prototype._getEndoBasis = function(e) {
  for (var n = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), a = e, c = this.n.clone(), o = new BN$d(1), d = new BN$d(0), m = new BN$d(0), w = new BN$d(1), S, A, B, P, I, O, L, C = 0, z, q; a.cmpn(0) !== 0; ) {
    var Z = c.div(a);
    z = c.sub(Z.mul(a)), q = m.sub(Z.mul(o));
    var X = w.sub(Z.mul(d));
    if (!B && z.cmp(n) < 0)
      S = L.neg(), A = o, B = z.neg(), P = q;
    else if (B && ++C === 2)
      break;
    L = z, c = a, a = z, m = o, o = q, w = d, d = X;
  }
  I = z.neg(), O = q;
  var ie = B.sqr().add(P.sqr()), fe = I.sqr().add(O.sqr());
  return fe.cmp(ie) >= 0 && (I = S, O = A), B.negative && (B = B.neg(), P = P.neg()), I.negative && (I = I.neg(), O = O.neg()), [
    { a: B, b: P },
    { a: I, b: O }
  ];
};
ShortCurve.prototype._endoSplit = function(e) {
  var n = this.endo.basis, a = n[0], c = n[1], o = c.b.mul(e).divRound(this.n), d = a.b.neg().mul(e).divRound(this.n), m = o.mul(a.a), w = d.mul(c.a), S = o.mul(a.b), A = d.mul(c.b), B = e.sub(m).sub(w), P = S.add(A).neg();
  return { k1: B, k2: P };
};
ShortCurve.prototype.pointFromX = function(e, n) {
  e = new BN$d(e, 16), e.red || (e = e.toRed(this.red));
  var a = e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b), c = a.redSqrt();
  if (c.redSqr().redSub(a).cmp(this.zero) !== 0)
    throw new Error("invalid point");
  var o = c.fromRed().isOdd();
  return (n && !o || !n && o) && (c = c.redNeg()), this.point(e, c);
};
ShortCurve.prototype.validate = function(e) {
  if (e.inf)
    return !0;
  var n = e.x, a = e.y, c = this.a.redMul(n), o = n.redSqr().redMul(n).redIAdd(c).redIAdd(this.b);
  return a.redSqr().redISub(o).cmpn(0) === 0;
};
ShortCurve.prototype._endoWnafMulAdd = function(e, n, a) {
  for (var c = this._endoWnafT1, o = this._endoWnafT2, d = 0; d < e.length; d++) {
    var m = this._endoSplit(n[d]), w = e[d], S = w._getBeta();
    m.k1.negative && (m.k1.ineg(), w = w.neg(!0)), m.k2.negative && (m.k2.ineg(), S = S.neg(!0)), c[d * 2] = w, c[d * 2 + 1] = S, o[d * 2] = m.k1, o[d * 2 + 1] = m.k2;
  }
  for (var A = this._wnafMulAdd(1, c, o, d * 2, a), B = 0; B < d * 2; B++)
    c[B] = null, o[B] = null;
  return A;
};
function Point(t, e, n, a) {
  base$4.BasePoint.call(this, t, "affine"), e === null && n === null ? (this.x = null, this.y = null, this.inf = !0) : (this.x = new BN$d(e, 16), this.y = new BN$d(n, 16), a && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = !1);
}
inherits_browser(Point, base$4.BasePoint);
ShortCurve.prototype.point = function(e, n, a) {
  return new Point(this, e, n, a);
};
ShortCurve.prototype.pointFromJSON = function(e, n) {
  return Point.fromJSON(this, e, n);
};
Point.prototype._getBeta = function() {
  if (this.curve.endo) {
    var e = this.precomputed;
    if (e && e.beta)
      return e.beta;
    var n = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (e) {
      var a = this.curve, c = function(o) {
        return a.point(o.x.redMul(a.endo.beta), o.y);
      };
      e.beta = n, n.precomputed = {
        beta: null,
        naf: e.naf && {
          wnd: e.naf.wnd,
          points: e.naf.points.map(c)
        },
        doubles: e.doubles && {
          step: e.doubles.step,
          points: e.doubles.points.map(c)
        }
      };
    }
    return n;
  }
};
Point.prototype.toJSON = function() {
  return this.precomputed ? [this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  }] : [this.x, this.y];
};
Point.fromJSON = function(e, n, a) {
  typeof n == "string" && (n = JSON.parse(n));
  var c = e.point(n[0], n[1], a);
  if (!n[2])
    return c;
  function o(m) {
    return e.point(m[0], m[1], a);
  }
  var d = n[2];
  return c.precomputed = {
    beta: null,
    doubles: d.doubles && {
      step: d.doubles.step,
      points: [c].concat(d.doubles.points.map(o))
    },
    naf: d.naf && {
      wnd: d.naf.wnd,
      points: [c].concat(d.naf.points.map(o))
    }
  }, c;
};
Point.prototype.inspect = function() {
  return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
};
Point.prototype.isInfinity = function() {
  return this.inf;
};
Point.prototype.add = function(e) {
  if (this.inf)
    return e;
  if (e.inf)
    return this;
  if (this.eq(e))
    return this.dbl();
  if (this.neg().eq(e))
    return this.curve.point(null, null);
  if (this.x.cmp(e.x) === 0)
    return this.curve.point(null, null);
  var n = this.y.redSub(e.y);
  n.cmpn(0) !== 0 && (n = n.redMul(this.x.redSub(e.x).redInvm()));
  var a = n.redSqr().redISub(this.x).redISub(e.x), c = n.redMul(this.x.redSub(a)).redISub(this.y);
  return this.curve.point(a, c);
};
Point.prototype.dbl = function() {
  if (this.inf)
    return this;
  var e = this.y.redAdd(this.y);
  if (e.cmpn(0) === 0)
    return this.curve.point(null, null);
  var n = this.curve.a, a = this.x.redSqr(), c = e.redInvm(), o = a.redAdd(a).redIAdd(a).redIAdd(n).redMul(c), d = o.redSqr().redISub(this.x.redAdd(this.x)), m = o.redMul(this.x.redSub(d)).redISub(this.y);
  return this.curve.point(d, m);
};
Point.prototype.getX = function() {
  return this.x.fromRed();
};
Point.prototype.getY = function() {
  return this.y.fromRed();
};
Point.prototype.mul = function(e) {
  return e = new BN$d(e, 16), this.isInfinity() ? this : this._hasDoubles(e) ? this.curve._fixedNafMul(this, e) : this.curve.endo ? this.curve._endoWnafMulAdd([this], [e]) : this.curve._wnafMul(this, e);
};
Point.prototype.mulAdd = function(e, n, a) {
  var c = [this, n], o = [e, a];
  return this.curve.endo ? this.curve._endoWnafMulAdd(c, o) : this.curve._wnafMulAdd(1, c, o, 2);
};
Point.prototype.jmulAdd = function(e, n, a) {
  var c = [this, n], o = [e, a];
  return this.curve.endo ? this.curve._endoWnafMulAdd(c, o, !0) : this.curve._wnafMulAdd(1, c, o, 2, !0);
};
Point.prototype.eq = function(e) {
  return this === e || this.inf === e.inf && (this.inf || this.x.cmp(e.x) === 0 && this.y.cmp(e.y) === 0);
};
Point.prototype.neg = function(e) {
  if (this.inf)
    return this;
  var n = this.curve.point(this.x, this.y.redNeg());
  if (e && this.precomputed) {
    var a = this.precomputed, c = function(o) {
      return o.neg();
    };
    n.precomputed = {
      naf: a.naf && {
        wnd: a.naf.wnd,
        points: a.naf.points.map(c)
      },
      doubles: a.doubles && {
        step: a.doubles.step,
        points: a.doubles.points.map(c)
      }
    };
  }
  return n;
};
Point.prototype.toJ = function() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);
  var e = this.curve.jpoint(this.x, this.y, this.curve.one);
  return e;
};
function JPoint(t, e, n, a) {
  base$4.BasePoint.call(this, t, "jacobian"), e === null && n === null && a === null ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new BN$d(0)) : (this.x = new BN$d(e, 16), this.y = new BN$d(n, 16), this.z = new BN$d(a, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
}
inherits_browser(JPoint, base$4.BasePoint);
ShortCurve.prototype.jpoint = function(e, n, a) {
  return new JPoint(this, e, n, a);
};
JPoint.prototype.toP = function() {
  if (this.isInfinity())
    return this.curve.point(null, null);
  var e = this.z.redInvm(), n = e.redSqr(), a = this.x.redMul(n), c = this.y.redMul(n).redMul(e);
  return this.curve.point(a, c);
};
JPoint.prototype.neg = function() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};
JPoint.prototype.add = function(e) {
  if (this.isInfinity())
    return e;
  if (e.isInfinity())
    return this;
  var n = e.z.redSqr(), a = this.z.redSqr(), c = this.x.redMul(n), o = e.x.redMul(a), d = this.y.redMul(n.redMul(e.z)), m = e.y.redMul(a.redMul(this.z)), w = c.redSub(o), S = d.redSub(m);
  if (w.cmpn(0) === 0)
    return S.cmpn(0) !== 0 ? this.curve.jpoint(null, null, null) : this.dbl();
  var A = w.redSqr(), B = A.redMul(w), P = c.redMul(A), I = S.redSqr().redIAdd(B).redISub(P).redISub(P), O = S.redMul(P.redISub(I)).redISub(d.redMul(B)), L = this.z.redMul(e.z).redMul(w);
  return this.curve.jpoint(I, O, L);
};
JPoint.prototype.mixedAdd = function(e) {
  if (this.isInfinity())
    return e.toJ();
  if (e.isInfinity())
    return this;
  var n = this.z.redSqr(), a = this.x, c = e.x.redMul(n), o = this.y, d = e.y.redMul(n).redMul(this.z), m = a.redSub(c), w = o.redSub(d);
  if (m.cmpn(0) === 0)
    return w.cmpn(0) !== 0 ? this.curve.jpoint(null, null, null) : this.dbl();
  var S = m.redSqr(), A = S.redMul(m), B = a.redMul(S), P = w.redSqr().redIAdd(A).redISub(B).redISub(B), I = w.redMul(B.redISub(P)).redISub(o.redMul(A)), O = this.z.redMul(m);
  return this.curve.jpoint(P, I, O);
};
JPoint.prototype.dblp = function(e) {
  if (e === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!e)
    return this.dbl();
  var n;
  if (this.curve.zeroA || this.curve.threeA) {
    var a = this;
    for (n = 0; n < e; n++)
      a = a.dbl();
    return a;
  }
  var c = this.curve.a, o = this.curve.tinv, d = this.x, m = this.y, w = this.z, S = w.redSqr().redSqr(), A = m.redAdd(m);
  for (n = 0; n < e; n++) {
    var B = d.redSqr(), P = A.redSqr(), I = P.redSqr(), O = B.redAdd(B).redIAdd(B).redIAdd(c.redMul(S)), L = d.redMul(P), C = O.redSqr().redISub(L.redAdd(L)), z = L.redISub(C), q = O.redMul(z);
    q = q.redIAdd(q).redISub(I);
    var Z = A.redMul(w);
    n + 1 < e && (S = S.redMul(I)), d = C, w = Z, A = q;
  }
  return this.curve.jpoint(d, A.redMul(o), w);
};
JPoint.prototype.dbl = function() {
  return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
};
JPoint.prototype._zeroDbl = function() {
  var e, n, a;
  if (this.zOne) {
    var c = this.x.redSqr(), o = this.y.redSqr(), d = o.redSqr(), m = this.x.redAdd(o).redSqr().redISub(c).redISub(d);
    m = m.redIAdd(m);
    var w = c.redAdd(c).redIAdd(c), S = w.redSqr().redISub(m).redISub(m), A = d.redIAdd(d);
    A = A.redIAdd(A), A = A.redIAdd(A), e = S, n = w.redMul(m.redISub(S)).redISub(A), a = this.y.redAdd(this.y);
  } else {
    var B = this.x.redSqr(), P = this.y.redSqr(), I = P.redSqr(), O = this.x.redAdd(P).redSqr().redISub(B).redISub(I);
    O = O.redIAdd(O);
    var L = B.redAdd(B).redIAdd(B), C = L.redSqr(), z = I.redIAdd(I);
    z = z.redIAdd(z), z = z.redIAdd(z), e = C.redISub(O).redISub(O), n = L.redMul(O.redISub(e)).redISub(z), a = this.y.redMul(this.z), a = a.redIAdd(a);
  }
  return this.curve.jpoint(e, n, a);
};
JPoint.prototype._threeDbl = function() {
  var e, n, a;
  if (this.zOne) {
    var c = this.x.redSqr(), o = this.y.redSqr(), d = o.redSqr(), m = this.x.redAdd(o).redSqr().redISub(c).redISub(d);
    m = m.redIAdd(m);
    var w = c.redAdd(c).redIAdd(c).redIAdd(this.curve.a), S = w.redSqr().redISub(m).redISub(m);
    e = S;
    var A = d.redIAdd(d);
    A = A.redIAdd(A), A = A.redIAdd(A), n = w.redMul(m.redISub(S)).redISub(A), a = this.y.redAdd(this.y);
  } else {
    var B = this.z.redSqr(), P = this.y.redSqr(), I = this.x.redMul(P), O = this.x.redSub(B).redMul(this.x.redAdd(B));
    O = O.redAdd(O).redIAdd(O);
    var L = I.redIAdd(I);
    L = L.redIAdd(L);
    var C = L.redAdd(L);
    e = O.redSqr().redISub(C), a = this.y.redAdd(this.z).redSqr().redISub(P).redISub(B);
    var z = P.redSqr();
    z = z.redIAdd(z), z = z.redIAdd(z), z = z.redIAdd(z), n = O.redMul(L.redISub(e)).redISub(z);
  }
  return this.curve.jpoint(e, n, a);
};
JPoint.prototype._dbl = function() {
  var e = this.curve.a, n = this.x, a = this.y, c = this.z, o = c.redSqr().redSqr(), d = n.redSqr(), m = a.redSqr(), w = d.redAdd(d).redIAdd(d).redIAdd(e.redMul(o)), S = n.redAdd(n);
  S = S.redIAdd(S);
  var A = S.redMul(m), B = w.redSqr().redISub(A.redAdd(A)), P = A.redISub(B), I = m.redSqr();
  I = I.redIAdd(I), I = I.redIAdd(I), I = I.redIAdd(I);
  var O = w.redMul(P).redISub(I), L = a.redAdd(a).redMul(c);
  return this.curve.jpoint(B, O, L);
};
JPoint.prototype.trpl = function() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);
  var e = this.x.redSqr(), n = this.y.redSqr(), a = this.z.redSqr(), c = n.redSqr(), o = e.redAdd(e).redIAdd(e), d = o.redSqr(), m = this.x.redAdd(n).redSqr().redISub(e).redISub(c);
  m = m.redIAdd(m), m = m.redAdd(m).redIAdd(m), m = m.redISub(d);
  var w = m.redSqr(), S = c.redIAdd(c);
  S = S.redIAdd(S), S = S.redIAdd(S), S = S.redIAdd(S);
  var A = o.redIAdd(m).redSqr().redISub(d).redISub(w).redISub(S), B = n.redMul(A);
  B = B.redIAdd(B), B = B.redIAdd(B);
  var P = this.x.redMul(w).redISub(B);
  P = P.redIAdd(P), P = P.redIAdd(P);
  var I = this.y.redMul(A.redMul(S.redISub(A)).redISub(m.redMul(w)));
  I = I.redIAdd(I), I = I.redIAdd(I), I = I.redIAdd(I);
  var O = this.z.redAdd(m).redSqr().redISub(a).redISub(w);
  return this.curve.jpoint(P, I, O);
};
JPoint.prototype.mul = function(e, n) {
  return e = new BN$d(e, n), this.curve._wnafMul(this, e);
};
JPoint.prototype.eq = function(e) {
  if (e.type === "affine")
    return this.eq(e.toJ());
  if (this === e)
    return !0;
  var n = this.z.redSqr(), a = e.z.redSqr();
  if (this.x.redMul(a).redISub(e.x.redMul(n)).cmpn(0) !== 0)
    return !1;
  var c = n.redMul(this.z), o = a.redMul(e.z);
  return this.y.redMul(o).redISub(e.y.redMul(c)).cmpn(0) === 0;
};
JPoint.prototype.eqXToP = function(e) {
  var n = this.z.redSqr(), a = e.toRed(this.curve.red).redMul(n);
  if (this.x.cmp(a) === 0)
    return !0;
  for (var c = e.clone(), o = this.curve.redN.redMul(n); ; ) {
    if (c.iadd(this.curve.n), c.cmp(this.curve.p) >= 0)
      return !1;
    if (a.redIAdd(o), this.x.cmp(a) === 0)
      return !0;
  }
};
JPoint.prototype.inspect = function() {
  return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
};
JPoint.prototype.isInfinity = function() {
  return this.z.cmpn(0) === 0;
};
var curve_1 = createCommonjsModule(function(t, e) {
  var n = e;
  n.base = base$4, n.short = short_1, n.mont = /*RicMoo:ethers:require(./mont)*/
  null, n.edwards = /*RicMoo:ethers:require(./edwards)*/
  null;
}), curves_1 = createCommonjsModule(function(t, e) {
  var n = e, a = utils_1$1$1.assert;
  function c(m) {
    m.type === "short" ? this.curve = new curve_1.short(m) : m.type === "edwards" ? this.curve = new curve_1.edwards(m) : this.curve = new curve_1.mont(m), this.g = this.curve.g, this.n = this.curve.n, this.hash = m.hash, a(this.g.validate(), "Invalid curve"), a(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
  }
  n.PresetCurve = c;
  function o(m, w) {
    Object.defineProperty(n, m, {
      configurable: !0,
      enumerable: !0,
      get: function() {
        var S = new c(w);
        return Object.defineProperty(n, m, {
          configurable: !0,
          enumerable: !0,
          value: S
        }), S;
      }
    });
  }
  o("p192", {
    type: "short",
    prime: "p192",
    p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
    b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
    n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
    hash: hash$5.sha256,
    gRed: !1,
    g: [
      "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
      "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
    ]
  }), o("p224", {
    type: "short",
    prime: "p224",
    p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
    b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
    n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
    hash: hash$5.sha256,
    gRed: !1,
    g: [
      "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
      "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
    ]
  }), o("p256", {
    type: "short",
    prime: null,
    p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
    a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
    b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
    n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
    hash: hash$5.sha256,
    gRed: !1,
    g: [
      "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
      "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
    ]
  }), o("p384", {
    type: "short",
    prime: null,
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
    hash: hash$5.sha384,
    gRed: !1,
    g: [
      "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
      "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
    ]
  }), o("p521", {
    type: "short",
    prime: null,
    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
    hash: hash$5.sha512,
    gRed: !1,
    g: [
      "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
      "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
    ]
  }), o("curve25519", {
    type: "mont",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "76d06",
    b: "1",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: hash$5.sha256,
    gRed: !1,
    g: [
      "9"
    ]
  }), o("ed25519", {
    type: "edwards",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "-1",
    c: "1",
    // -121665 * (121666^(-1)) (mod P)
    d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: hash$5.sha256,
    gRed: !1,
    g: [
      "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
      // 4/5
      "6666666666666666666666666666666666666666666666666666666666666658"
    ]
  });
  var d;
  try {
    d = /*RicMoo:ethers:require(./precomputed/secp256k1)*/
    null.crash();
  } catch {
    d = void 0;
  }
  o("secp256k1", {
    type: "short",
    prime: "k256",
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
    a: "0",
    b: "7",
    n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
    h: "1",
    hash: hash$5.sha256,
    // Precomputed endomorphism
    beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
    lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
    basis: [
      {
        a: "3086d221a7d46bcde86c90e49284eb15",
        b: "-e4437ed6010e88286f547fa90abfe4c3"
      },
      {
        a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
        b: "3086d221a7d46bcde86c90e49284eb15"
      }
    ],
    gRed: !1,
    g: [
      "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
      "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
      d
    ]
  });
});
function HmacDRBG(t) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(t);
  this.hash = t.hash, this.predResist = !!t.predResist, this.outLen = this.hash.outSize, this.minEntropy = t.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
  var e = utils_1$1.toArray(t.entropy, t.entropyEnc || "hex"), n = utils_1$1.toArray(t.nonce, t.nonceEnc || "hex"), a = utils_1$1.toArray(t.pers, t.persEnc || "hex");
  minimalisticAssert(
    e.length >= this.minEntropy / 8,
    "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
  ), this._init(e, n, a);
}
var hmacDrbg = HmacDRBG;
HmacDRBG.prototype._init = function(e, n, a) {
  var c = e.concat(n).concat(a);
  this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);
  for (var o = 0; o < this.V.length; o++)
    this.K[o] = 0, this.V[o] = 1;
  this._update(c), this._reseed = 1, this.reseedInterval = 281474976710656;
};
HmacDRBG.prototype._hmac = function() {
  return new hash$5.hmac(this.hash, this.K);
};
HmacDRBG.prototype._update = function(e) {
  var n = this._hmac().update(this.V).update([0]);
  e && (n = n.update(e)), this.K = n.digest(), this.V = this._hmac().update(this.V).digest(), e && (this.K = this._hmac().update(this.V).update([1]).update(e).digest(), this.V = this._hmac().update(this.V).digest());
};
HmacDRBG.prototype.reseed = function(e, n, a, c) {
  typeof n != "string" && (c = a, a = n, n = null), e = utils_1$1.toArray(e, n), a = utils_1$1.toArray(a, c), minimalisticAssert(
    e.length >= this.minEntropy / 8,
    "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
  ), this._update(e.concat(a || [])), this._reseed = 1;
};
HmacDRBG.prototype.generate = function(e, n, a, c) {
  if (this._reseed > this.reseedInterval)
    throw new Error("Reseed is required");
  typeof n != "string" && (c = a, a = n, n = null), a && (a = utils_1$1.toArray(a, c || "hex"), this._update(a));
  for (var o = []; o.length < e; )
    this.V = this._hmac().update(this.V).digest(), o = o.concat(this.V);
  var d = o.slice(0, e);
  return this._update(a), this._reseed++, utils_1$1.encode(d, n);
};
var assert$3$1 = utils_1$1$1.assert;
function KeyPair$2(t, e) {
  this.ec = t, this.priv = null, this.pub = null, e.priv && this._importPrivate(e.priv, e.privEnc), e.pub && this._importPublic(e.pub, e.pubEnc);
}
var key = KeyPair$2;
KeyPair$2.fromPublic = function(e, n, a) {
  return n instanceof KeyPair$2 ? n : new KeyPair$2(e, {
    pub: n,
    pubEnc: a
  });
};
KeyPair$2.fromPrivate = function(e, n, a) {
  return n instanceof KeyPair$2 ? n : new KeyPair$2(e, {
    priv: n,
    privEnc: a
  });
};
KeyPair$2.prototype.validate = function() {
  var e = this.getPublic();
  return e.isInfinity() ? { result: !1, reason: "Invalid public key" } : e.validate() ? e.mul(this.ec.curve.n).isInfinity() ? { result: !0, reason: null } : { result: !1, reason: "Public key * N != O" } : { result: !1, reason: "Public key is not a point" };
};
KeyPair$2.prototype.getPublic = function(e, n) {
  return typeof e == "string" && (n = e, e = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), n ? this.pub.encode(n, e) : this.pub;
};
KeyPair$2.prototype.getPrivate = function(e) {
  return e === "hex" ? this.priv.toString(16, 2) : this.priv;
};
KeyPair$2.prototype._importPrivate = function(e, n) {
  this.priv = new BN$d(e, n || 16), this.priv = this.priv.umod(this.ec.curve.n);
};
KeyPair$2.prototype._importPublic = function(e, n) {
  if (e.x || e.y) {
    this.ec.curve.type === "mont" ? assert$3$1(e.x, "Need x coordinate") : (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") && assert$3$1(e.x && e.y, "Need both x and y coordinate"), this.pub = this.ec.curve.point(e.x, e.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(e, n);
};
KeyPair$2.prototype.derive = function(e) {
  return e.validate() || assert$3$1(e.validate(), "public point not validated"), e.mul(this.priv).getX();
};
KeyPair$2.prototype.sign = function(e, n, a) {
  return this.ec.sign(e, this, n, a);
};
KeyPair$2.prototype.verify = function(e, n) {
  return this.ec.verify(e, n, this);
};
KeyPair$2.prototype.inspect = function() {
  return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
};
var assert$4$1 = utils_1$1$1.assert;
function Signature$1(t, e) {
  if (t instanceof Signature$1)
    return t;
  this._importDER(t, e) || (assert$4$1(t.r && t.s, "Signature without r or s"), this.r = new BN$d(t.r, 16), this.s = new BN$d(t.s, 16), t.recoveryParam === void 0 ? this.recoveryParam = null : this.recoveryParam = t.recoveryParam);
}
var signature$2 = Signature$1;
function Position() {
  this.place = 0;
}
function getLength(t, e) {
  var n = t[e.place++];
  if (!(n & 128))
    return n;
  var a = n & 15;
  if (a === 0 || a > 4)
    return !1;
  for (var c = 0, o = 0, d = e.place; o < a; o++, d++)
    c <<= 8, c |= t[d], c >>>= 0;
  return c <= 127 ? !1 : (e.place = d, c);
}
function rmPadding(t) {
  for (var e = 0, n = t.length - 1; !t[e] && !(t[e + 1] & 128) && e < n; )
    e++;
  return e === 0 ? t : t.slice(e);
}
Signature$1.prototype._importDER = function(e, n) {
  e = utils_1$1$1.toArray(e, n);
  var a = new Position();
  if (e[a.place++] !== 48)
    return !1;
  var c = getLength(e, a);
  if (c === !1 || c + a.place !== e.length || e[a.place++] !== 2)
    return !1;
  var o = getLength(e, a);
  if (o === !1)
    return !1;
  var d = e.slice(a.place, o + a.place);
  if (a.place += o, e[a.place++] !== 2)
    return !1;
  var m = getLength(e, a);
  if (m === !1 || e.length !== m + a.place)
    return !1;
  var w = e.slice(a.place, m + a.place);
  if (d[0] === 0)
    if (d[1] & 128)
      d = d.slice(1);
    else
      return !1;
  if (w[0] === 0)
    if (w[1] & 128)
      w = w.slice(1);
    else
      return !1;
  return this.r = new BN$d(d), this.s = new BN$d(w), this.recoveryParam = null, !0;
};
function constructLength(t, e) {
  if (e < 128) {
    t.push(e);
    return;
  }
  var n = 1 + (Math.log(e) / Math.LN2 >>> 3);
  for (t.push(n | 128); --n; )
    t.push(e >>> (n << 3) & 255);
  t.push(e);
}
Signature$1.prototype.toDER = function(e) {
  var n = this.r.toArray(), a = this.s.toArray();
  for (n[0] & 128 && (n = [0].concat(n)), a[0] & 128 && (a = [0].concat(a)), n = rmPadding(n), a = rmPadding(a); !a[0] && !(a[1] & 128); )
    a = a.slice(1);
  var c = [2];
  constructLength(c, n.length), c = c.concat(n), c.push(2), constructLength(c, a.length);
  var o = c.concat(a), d = [48];
  return constructLength(d, o.length), d = d.concat(o), utils_1$1$1.encode(d, e);
};
var rand = (
  /*RicMoo:ethers:require(brorand)*/
  function() {
    throw new Error("unsupported");
  }
), assert$5$1 = utils_1$1$1.assert;
function EC$1(t) {
  if (!(this instanceof EC$1))
    return new EC$1(t);
  typeof t == "string" && (assert$5$1(
    Object.prototype.hasOwnProperty.call(curves_1, t),
    "Unknown curve " + t
  ), t = curves_1[t]), t instanceof curves_1.PresetCurve && (t = { curve: t }), this.curve = t.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = t.curve.g, this.g.precompute(t.curve.n.bitLength() + 1), this.hash = t.hash || t.curve.hash;
}
var ec$1 = EC$1;
EC$1.prototype.keyPair = function(e) {
  return new key(this, e);
};
EC$1.prototype.keyFromPrivate = function(e, n) {
  return key.fromPrivate(this, e, n);
};
EC$1.prototype.keyFromPublic = function(e, n) {
  return key.fromPublic(this, e, n);
};
EC$1.prototype.genKeyPair = function(e) {
  e || (e = {});
  for (var n = new hmacDrbg({
    hash: this.hash,
    pers: e.pers,
    persEnc: e.persEnc || "utf8",
    entropy: e.entropy || rand(this.hash.hmacStrength),
    entropyEnc: e.entropy && e.entropyEnc || "utf8",
    nonce: this.n.toArray()
  }), a = this.n.byteLength(), c = this.n.sub(new BN$d(2)); ; ) {
    var o = new BN$d(n.generate(a));
    if (!(o.cmp(c) > 0))
      return o.iaddn(1), this.keyFromPrivate(o);
  }
};
EC$1.prototype._truncateToN = function(e, n) {
  var a = e.byteLength() * 8 - this.n.bitLength();
  return a > 0 && (e = e.ushrn(a)), !n && e.cmp(this.n) >= 0 ? e.sub(this.n) : e;
};
EC$1.prototype.sign = function(e, n, a, c) {
  typeof a == "object" && (c = a, a = null), c || (c = {}), n = this.keyFromPrivate(n, a), e = this._truncateToN(new BN$d(e, 16));
  for (var o = this.n.byteLength(), d = n.getPrivate().toArray("be", o), m = e.toArray("be", o), w = new hmacDrbg({
    hash: this.hash,
    entropy: d,
    nonce: m,
    pers: c.pers,
    persEnc: c.persEnc || "utf8"
  }), S = this.n.sub(new BN$d(1)), A = 0; ; A++) {
    var B = c.k ? c.k(A) : new BN$d(w.generate(this.n.byteLength()));
    if (B = this._truncateToN(B, !0), !(B.cmpn(1) <= 0 || B.cmp(S) >= 0)) {
      var P = this.g.mul(B);
      if (!P.isInfinity()) {
        var I = P.getX(), O = I.umod(this.n);
        if (O.cmpn(0) !== 0) {
          var L = B.invm(this.n).mul(O.mul(n.getPrivate()).iadd(e));
          if (L = L.umod(this.n), L.cmpn(0) !== 0) {
            var C = (P.getY().isOdd() ? 1 : 0) | (I.cmp(O) !== 0 ? 2 : 0);
            return c.canonical && L.cmp(this.nh) > 0 && (L = this.n.sub(L), C ^= 1), new signature$2({ r: O, s: L, recoveryParam: C });
          }
        }
      }
    }
  }
};
EC$1.prototype.verify = function(e, n, a, c) {
  e = this._truncateToN(new BN$d(e, 16)), a = this.keyFromPublic(a, c), n = new signature$2(n, "hex");
  var o = n.r, d = n.s;
  if (o.cmpn(1) < 0 || o.cmp(this.n) >= 0 || d.cmpn(1) < 0 || d.cmp(this.n) >= 0)
    return !1;
  var m = d.invm(this.n), w = m.mul(e).umod(this.n), S = m.mul(o).umod(this.n), A;
  return this.curve._maxwellTrick ? (A = this.g.jmulAdd(w, a.getPublic(), S), A.isInfinity() ? !1 : A.eqXToP(o)) : (A = this.g.mulAdd(w, a.getPublic(), S), A.isInfinity() ? !1 : A.getX().umod(this.n).cmp(o) === 0);
};
EC$1.prototype.recoverPubKey = function(t, e, n, a) {
  assert$5$1((3 & n) === n, "The recovery param is more than two bits"), e = new signature$2(e, a);
  var c = this.n, o = new BN$d(t), d = e.r, m = e.s, w = n & 1, S = n >> 1;
  if (d.cmp(this.curve.p.umod(this.curve.n)) >= 0 && S)
    throw new Error("Unable to find sencond key candinate");
  S ? d = this.curve.pointFromX(d.add(this.curve.n), w) : d = this.curve.pointFromX(d, w);
  var A = e.r.invm(c), B = c.sub(o).mul(A).umod(c), P = m.mul(A).umod(c);
  return this.g.mulAdd(B, d, P);
};
EC$1.prototype.getKeyRecoveryParam = function(t, e, n, a) {
  if (e = new signature$2(e, a), e.recoveryParam !== null)
    return e.recoveryParam;
  for (var c = 0; c < 4; c++) {
    var o;
    try {
      o = this.recoverPubKey(t, e, c);
    } catch {
      continue;
    }
    if (o.eq(n))
      return c;
  }
  throw new Error("Unable to find valid recovery factor");
};
var elliptic_1 = createCommonjsModule(function(t, e) {
  var n = e;
  n.version = "6.5.4", n.utils = utils_1$1$1, n.rand = /*RicMoo:ethers:require(brorand)*/
  function() {
    throw new Error("unsupported");
  }, n.curve = curve_1, n.curves = curves_1, n.ec = ec$1, n.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/
  null;
}), EC$1$1 = elliptic_1.ec;
const version$c = "signing-key/5.7.0", logger$g = new Logger(version$c);
let _curve = null;
function getCurve() {
  return _curve || (_curve = new EC$1$1("secp256k1")), _curve;
}
class SigningKey {
  constructor(e) {
    defineReadOnly(this, "curve", "secp256k1"), defineReadOnly(this, "privateKey", hexlify(e)), hexDataLength(this.privateKey) !== 32 && logger$g.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
    const n = getCurve().keyFromPrivate(arrayify(this.privateKey));
    defineReadOnly(this, "publicKey", "0x" + n.getPublic(!1, "hex")), defineReadOnly(this, "compressedPublicKey", "0x" + n.getPublic(!0, "hex")), defineReadOnly(this, "_isSigningKey", !0);
  }
  _addPoint(e) {
    const n = getCurve().keyFromPublic(arrayify(this.publicKey)), a = getCurve().keyFromPublic(arrayify(e));
    return "0x" + n.pub.add(a.pub).encodeCompressed("hex");
  }
  signDigest(e) {
    const n = getCurve().keyFromPrivate(arrayify(this.privateKey)), a = arrayify(e);
    a.length !== 32 && logger$g.throwArgumentError("bad digest length", "digest", e);
    const c = n.sign(a, { canonical: !0 });
    return splitSignature({
      recoveryParam: c.recoveryParam,
      r: hexZeroPad("0x" + c.r.toString(16), 32),
      s: hexZeroPad("0x" + c.s.toString(16), 32)
    });
  }
  computeSharedSecret(e) {
    const n = getCurve().keyFromPrivate(arrayify(this.privateKey)), a = getCurve().keyFromPublic(arrayify(computePublicKey(e)));
    return hexZeroPad("0x" + n.derive(a.getPublic()).toString(16), 32);
  }
  static isSigningKey(e) {
    return !!(e && e._isSigningKey);
  }
}
function recoverPublicKey(t, e) {
  const n = splitSignature(e), a = { r: arrayify(n.r), s: arrayify(n.s) };
  return "0x" + getCurve().recoverPubKey(arrayify(t), a, n.recoveryParam).encode("hex", !1);
}
function computePublicKey(t, e) {
  const n = arrayify(t);
  if (n.length === 32) {
    const a = new SigningKey(n);
    return e ? "0x" + getCurve().keyFromPrivate(n).getPublic(!0, "hex") : a.publicKey;
  } else {
    if (n.length === 33)
      return e ? hexlify(n) : "0x" + getCurve().keyFromPublic(n).getPublic(!1, "hex");
    if (n.length === 65)
      return e ? "0x" + getCurve().keyFromPublic(n).getPublic(!0, "hex") : hexlify(n);
  }
  return logger$g.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
}
const version$b = "transactions/5.7.0", logger$f = new Logger(version$b);
var TransactionTypes;
(function(t) {
  t[t.legacy = 0] = "legacy", t[t.eip2930 = 1] = "eip2930", t[t.eip1559 = 2] = "eip1559";
})(TransactionTypes || (TransactionTypes = {}));
const transactionFields = [
  { name: "nonce", maxLength: 32, numeric: !0 },
  { name: "gasPrice", maxLength: 32, numeric: !0 },
  { name: "gasLimit", maxLength: 32, numeric: !0 },
  { name: "to", length: 20 },
  { name: "value", maxLength: 32, numeric: !0 },
  { name: "data" }
], allowedTransactionKeys$1 = {
  chainId: !0,
  data: !0,
  gasLimit: !0,
  gasPrice: !0,
  nonce: !0,
  to: !0,
  type: !0,
  value: !0
};
function computeAddress(t) {
  const e = computePublicKey(t);
  return getAddress(hexDataSlice(keccak256$1(hexDataSlice(e, 1)), 12));
}
function recoverAddress(t, e) {
  return computeAddress(recoverPublicKey(arrayify(t), e));
}
function formatNumber(t, e) {
  const n = stripZeros(BigNumber.from(t).toHexString());
  return n.length > 32 && logger$f.throwArgumentError("invalid length for " + e, "transaction:" + e, t), n;
}
function accessSetify(t, e) {
  return {
    address: getAddress(t),
    storageKeys: (e || []).map((n, a) => (hexDataLength(n) !== 32 && logger$f.throwArgumentError("invalid access list storageKey", `accessList[${t}:${a}]`, n), n.toLowerCase()))
  };
}
function accessListify(t) {
  if (Array.isArray(t))
    return t.map((n, a) => Array.isArray(n) ? (n.length > 2 && logger$f.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${a}]`, n), accessSetify(n[0], n[1])) : accessSetify(n.address, n.storageKeys));
  const e = Object.keys(t).map((n) => {
    const a = t[n].reduce((c, o) => (c[o] = !0, c), {});
    return accessSetify(n, Object.keys(a).sort());
  });
  return e.sort((n, a) => n.address.localeCompare(a.address)), e;
}
function formatAccessList(t) {
  return accessListify(t).map((e) => [e.address, e.storageKeys]);
}
function _serializeEip1559(t, e) {
  if (t.gasPrice != null) {
    const a = BigNumber.from(t.gasPrice), c = BigNumber.from(t.maxFeePerGas || 0);
    a.eq(c) || logger$f.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
      gasPrice: a,
      maxFeePerGas: c
    });
  }
  const n = [
    formatNumber(t.chainId || 0, "chainId"),
    formatNumber(t.nonce || 0, "nonce"),
    formatNumber(t.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
    formatNumber(t.maxFeePerGas || 0, "maxFeePerGas"),
    formatNumber(t.gasLimit || 0, "gasLimit"),
    t.to != null ? getAddress(t.to) : "0x",
    formatNumber(t.value || 0, "value"),
    t.data || "0x",
    formatAccessList(t.accessList || [])
  ];
  if (e) {
    const a = splitSignature(e);
    n.push(formatNumber(a.recoveryParam, "recoveryParam")), n.push(stripZeros(a.r)), n.push(stripZeros(a.s));
  }
  return hexConcat(["0x02", encode$1(n)]);
}
function _serializeEip2930(t, e) {
  const n = [
    formatNumber(t.chainId || 0, "chainId"),
    formatNumber(t.nonce || 0, "nonce"),
    formatNumber(t.gasPrice || 0, "gasPrice"),
    formatNumber(t.gasLimit || 0, "gasLimit"),
    t.to != null ? getAddress(t.to) : "0x",
    formatNumber(t.value || 0, "value"),
    t.data || "0x",
    formatAccessList(t.accessList || [])
  ];
  if (e) {
    const a = splitSignature(e);
    n.push(formatNumber(a.recoveryParam, "recoveryParam")), n.push(stripZeros(a.r)), n.push(stripZeros(a.s));
  }
  return hexConcat(["0x01", encode$1(n)]);
}
function _serialize(t, e) {
  checkProperties(t, allowedTransactionKeys$1);
  const n = [];
  transactionFields.forEach(function(d) {
    let m = t[d.name] || [];
    const w = {};
    d.numeric && (w.hexPad = "left"), m = arrayify(hexlify(m, w)), d.length && m.length !== d.length && m.length > 0 && logger$f.throwArgumentError("invalid length for " + d.name, "transaction:" + d.name, m), d.maxLength && (m = stripZeros(m), m.length > d.maxLength && logger$f.throwArgumentError("invalid length for " + d.name, "transaction:" + d.name, m)), n.push(hexlify(m));
  });
  let a = 0;
  if (t.chainId != null ? (a = t.chainId, typeof a != "number" && logger$f.throwArgumentError("invalid transaction.chainId", "transaction", t)) : e && !isBytesLike(e) && e.v > 28 && (a = Math.floor((e.v - 35) / 2)), a !== 0 && (n.push(hexlify(a)), n.push("0x"), n.push("0x")), !e)
    return encode$1(n);
  const c = splitSignature(e);
  let o = 27 + c.recoveryParam;
  return a !== 0 ? (n.pop(), n.pop(), n.pop(), o += a * 2 + 8, c.v > 28 && c.v !== o && logger$f.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", e)) : c.v !== o && logger$f.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", e), n.push(hexlify(o)), n.push(stripZeros(arrayify(c.r))), n.push(stripZeros(arrayify(c.s))), encode$1(n);
}
function serialize$1(t, e) {
  if (t.type == null || t.type === 0)
    return t.accessList != null && logger$f.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", t), _serialize(t, e);
  switch (t.type) {
    case 1:
      return _serializeEip2930(t, e);
    case 2:
      return _serializeEip1559(t, e);
  }
  return logger$f.throwError(`unsupported transaction type: ${t.type}`, Logger.errors.UNSUPPORTED_OPERATION, {
    operation: "serializeTransaction",
    transactionType: t.type
  });
}
const version$a = "abstract-provider/5.7.0";
var __awaiter$c = function(t, e, n, a) {
  function c(o) {
    return o instanceof n ? o : new n(function(d) {
      d(o);
    });
  }
  return new (n || (n = Promise))(function(o, d) {
    function m(A) {
      try {
        S(a.next(A));
      } catch (B) {
        d(B);
      }
    }
    function w(A) {
      try {
        S(a.throw(A));
      } catch (B) {
        d(B);
      }
    }
    function S(A) {
      A.done ? o(A.value) : c(A.value).then(m, w);
    }
    S((a = a.apply(t, e || [])).next());
  });
};
const logger$e = new Logger(version$a);
let Provider$1 = class Yt {
  constructor() {
    logger$e.checkAbstract(new.target, Yt), defineReadOnly(this, "_isProvider", !0);
  }
  getFeeData() {
    return __awaiter$c(this, void 0, void 0, function* () {
      const { block: e, gasPrice: n } = yield resolveProperties({
        block: this.getBlock("latest"),
        gasPrice: this.getGasPrice().catch((d) => null)
      });
      let a = null, c = null, o = null;
      return e && e.baseFeePerGas && (a = e.baseFeePerGas, o = BigNumber.from("1500000000"), c = e.baseFeePerGas.mul(2).add(o)), { lastBaseFeePerGas: a, maxFeePerGas: c, maxPriorityFeePerGas: o, gasPrice: n };
    });
  }
  // Alias for "on"
  addListener(e, n) {
    return this.on(e, n);
  }
  // Alias for "off"
  removeListener(e, n) {
    return this.off(e, n);
  }
  static isProvider(e) {
    return !!(e && e._isProvider);
  }
};
const version$9 = "abstract-signer/5.7.0";
var __awaiter$b = function(t, e, n, a) {
  function c(o) {
    return o instanceof n ? o : new n(function(d) {
      d(o);
    });
  }
  return new (n || (n = Promise))(function(o, d) {
    function m(A) {
      try {
        S(a.next(A));
      } catch (B) {
        d(B);
      }
    }
    function w(A) {
      try {
        S(a.throw(A));
      } catch (B) {
        d(B);
      }
    }
    function S(A) {
      A.done ? o(A.value) : c(A.value).then(m, w);
    }
    S((a = a.apply(t, e || [])).next());
  });
};
const logger$d = new Logger(version$9), allowedTransactionKeys = [
  "accessList",
  "ccipReadEnabled",
  "chainId",
  "customData",
  "data",
  "from",
  "gasLimit",
  "gasPrice",
  "maxFeePerGas",
  "maxPriorityFeePerGas",
  "nonce",
  "to",
  "type",
  "value"
], forwardErrors = [
  Logger.errors.INSUFFICIENT_FUNDS,
  Logger.errors.NONCE_EXPIRED,
  Logger.errors.REPLACEMENT_UNDERPRICED
];
class Signer {
  ///////////////////
  // Sub-classes MUST call super
  constructor() {
    logger$d.checkAbstract(new.target, Signer), defineReadOnly(this, "_isSigner", !0);
  }
  ///////////////////
  // Sub-classes MAY override these
  getBalance(e) {
    return __awaiter$b(this, void 0, void 0, function* () {
      return this._checkProvider("getBalance"), yield this.provider.getBalance(this.getAddress(), e);
    });
  }
  getTransactionCount(e) {
    return __awaiter$b(this, void 0, void 0, function* () {
      return this._checkProvider("getTransactionCount"), yield this.provider.getTransactionCount(this.getAddress(), e);
    });
  }
  // Populates "from" if unspecified, and estimates the gas for the transaction
  estimateGas(e) {
    return __awaiter$b(this, void 0, void 0, function* () {
      this._checkProvider("estimateGas");
      const n = yield resolveProperties(this.checkTransaction(e));
      return yield this.provider.estimateGas(n);
    });
  }
  // Populates "from" if unspecified, and calls with the transaction
  call(e, n) {
    return __awaiter$b(this, void 0, void 0, function* () {
      this._checkProvider("call");
      const a = yield resolveProperties(this.checkTransaction(e));
      return yield this.provider.call(a, n);
    });
  }
  // Populates all fields in a transaction, signs it and sends it to the network
  sendTransaction(e) {
    return __awaiter$b(this, void 0, void 0, function* () {
      this._checkProvider("sendTransaction");
      const n = yield this.populateTransaction(e), a = yield this.signTransaction(n);
      return yield this.provider.sendTransaction(a);
    });
  }
  getChainId() {
    return __awaiter$b(this, void 0, void 0, function* () {
      return this._checkProvider("getChainId"), (yield this.provider.getNetwork()).chainId;
    });
  }
  getGasPrice() {
    return __awaiter$b(this, void 0, void 0, function* () {
      return this._checkProvider("getGasPrice"), yield this.provider.getGasPrice();
    });
  }
  getFeeData() {
    return __awaiter$b(this, void 0, void 0, function* () {
      return this._checkProvider("getFeeData"), yield this.provider.getFeeData();
    });
  }
  resolveName(e) {
    return __awaiter$b(this, void 0, void 0, function* () {
      return this._checkProvider("resolveName"), yield this.provider.resolveName(e);
    });
  }
  // Checks a transaction does not contain invalid keys and if
  // no "from" is provided, populates it.
  // - does NOT require a provider
  // - adds "from" is not present
  // - returns a COPY (safe to mutate the result)
  // By default called from: (overriding these prevents it)
  //   - call
  //   - estimateGas
  //   - populateTransaction (and therefor sendTransaction)
  checkTransaction(e) {
    for (const a in e)
      allowedTransactionKeys.indexOf(a) === -1 && logger$d.throwArgumentError("invalid transaction key: " + a, "transaction", e);
    const n = shallowCopy(e);
    return n.from == null ? n.from = this.getAddress() : n.from = Promise.all([
      Promise.resolve(n.from),
      this.getAddress()
    ]).then((a) => (a[0].toLowerCase() !== a[1].toLowerCase() && logger$d.throwArgumentError("from address mismatch", "transaction", e), a[0])), n;
  }
  // Populates ALL keys for a transaction and checks that "from" matches
  // this Signer. Should be used by sendTransaction but NOT by signTransaction.
  // By default called from: (overriding these prevents it)
  //   - sendTransaction
  //
  // Notes:
  //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas
  populateTransaction(e) {
    return __awaiter$b(this, void 0, void 0, function* () {
      const n = yield resolveProperties(this.checkTransaction(e));
      n.to != null && (n.to = Promise.resolve(n.to).then((c) => __awaiter$b(this, void 0, void 0, function* () {
        if (c == null)
          return null;
        const o = yield this.resolveName(c);
        return o == null && logger$d.throwArgumentError("provided ENS name resolves to null", "tx.to", c), o;
      })), n.to.catch((c) => {
      }));
      const a = n.maxFeePerGas != null || n.maxPriorityFeePerGas != null;
      if (n.gasPrice != null && (n.type === 2 || a) ? logger$d.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", e) : (n.type === 0 || n.type === 1) && a && logger$d.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", e), (n.type === 2 || n.type == null) && n.maxFeePerGas != null && n.maxPriorityFeePerGas != null)
        n.type = 2;
      else if (n.type === 0 || n.type === 1)
        n.gasPrice == null && (n.gasPrice = this.getGasPrice());
      else {
        const c = yield this.getFeeData();
        if (n.type == null)
          if (c.maxFeePerGas != null && c.maxPriorityFeePerGas != null)
            if (n.type = 2, n.gasPrice != null) {
              const o = n.gasPrice;
              delete n.gasPrice, n.maxFeePerGas = o, n.maxPriorityFeePerGas = o;
            } else
              n.maxFeePerGas == null && (n.maxFeePerGas = c.maxFeePerGas), n.maxPriorityFeePerGas == null && (n.maxPriorityFeePerGas = c.maxPriorityFeePerGas);
          else
            c.gasPrice != null ? (a && logger$d.throwError("network does not support EIP-1559", Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "populateTransaction"
            }), n.gasPrice == null && (n.gasPrice = c.gasPrice), n.type = 0) : logger$d.throwError("failed to get consistent fee data", Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "signer.getFeeData"
            });
        else
          n.type === 2 && (n.maxFeePerGas == null && (n.maxFeePerGas = c.maxFeePerGas), n.maxPriorityFeePerGas == null && (n.maxPriorityFeePerGas = c.maxPriorityFeePerGas));
      }
      return n.nonce == null && (n.nonce = this.getTransactionCount("pending")), n.gasLimit == null && (n.gasLimit = this.estimateGas(n).catch((c) => {
        if (forwardErrors.indexOf(c.code) >= 0)
          throw c;
        return logger$d.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
          error: c,
          tx: n
        });
      })), n.chainId == null ? n.chainId = this.getChainId() : n.chainId = Promise.all([
        Promise.resolve(n.chainId),
        this.getChainId()
      ]).then((c) => (c[1] !== 0 && c[0] !== c[1] && logger$d.throwArgumentError("chainId address mismatch", "transaction", e), c[0])), yield resolveProperties(n);
    });
  }
  ///////////////////
  // Sub-classes SHOULD leave these alone
  _checkProvider(e) {
    this.provider || logger$d.throwError("missing provider", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: e || "_checkProvider"
    });
  }
  static isSigner(e) {
    return !!(e && e._isSigner);
  }
}
class VoidSigner extends Signer {
  constructor(e, n) {
    super(), defineReadOnly(this, "address", e), defineReadOnly(this, "provider", n || null);
  }
  getAddress() {
    return Promise.resolve(this.address);
  }
  _fail(e, n) {
    return Promise.resolve().then(() => {
      logger$d.throwError(e, Logger.errors.UNSUPPORTED_OPERATION, { operation: n });
    });
  }
  signMessage(e) {
    return this._fail("VoidSigner cannot sign messages", "signMessage");
  }
  signTransaction(e) {
    return this._fail("VoidSigner cannot sign transactions", "signTransaction");
  }
  _signTypedData(e, n, a) {
    return this._fail("VoidSigner cannot sign typed data", "signTypedData");
  }
  connect(e) {
    return new VoidSigner(this.address, e);
  }
}
class BaseX {
  constructor(e) {
    defineReadOnly(this, "alphabet", e), defineReadOnly(this, "base", e.length), defineReadOnly(this, "_alphabetMap", {}), defineReadOnly(this, "_leader", e.charAt(0));
    for (let n = 0; n < e.length; n++)
      this._alphabetMap[e.charAt(n)] = n;
  }
  encode(e) {
    let n = arrayify(e);
    if (n.length === 0)
      return "";
    let a = [0];
    for (let o = 0; o < n.length; ++o) {
      let d = n[o];
      for (let m = 0; m < a.length; ++m)
        d += a[m] << 8, a[m] = d % this.base, d = d / this.base | 0;
      for (; d > 0; )
        a.push(d % this.base), d = d / this.base | 0;
    }
    let c = "";
    for (let o = 0; n[o] === 0 && o < n.length - 1; ++o)
      c += this._leader;
    for (let o = a.length - 1; o >= 0; --o)
      c += this.alphabet[a[o]];
    return c;
  }
  decode(e) {
    if (typeof e != "string")
      throw new TypeError("Expected String");
    let n = [];
    if (e.length === 0)
      return new Uint8Array(n);
    n.push(0);
    for (let a = 0; a < e.length; a++) {
      let c = this._alphabetMap[e[a]];
      if (c === void 0)
        throw new Error("Non-base" + this.base + " character");
      let o = c;
      for (let d = 0; d < n.length; ++d)
        o += n[d] * this.base, n[d] = o & 255, o >>= 8;
      for (; o > 0; )
        n.push(o & 255), o >>= 8;
    }
    for (let a = 0; e[a] === this._leader && a < e.length - 1; ++a)
      n.push(0);
    return arrayify(new Uint8Array(n.reverse()));
  }
}
new BaseX("abcdefghijklmnopqrstuvwxyz234567");
const Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
var SupportedAlgorithm;
(function(t) {
  t.sha256 = "sha256", t.sha512 = "sha512";
})(SupportedAlgorithm || (SupportedAlgorithm = {}));
const version$8 = "sha2/5.7.0", logger$c = new Logger(version$8);
function ripemd160(t) {
  return "0x" + hash$5.ripemd160().update(arrayify(t)).digest("hex");
}
function sha256$3(t) {
  return "0x" + hash$5.sha256().update(arrayify(t)).digest("hex");
}
function computeHmac(t, e, n) {
  return SupportedAlgorithm[t] || logger$c.throwError("unsupported algorithm " + t, Logger.errors.UNSUPPORTED_OPERATION, {
    operation: "hmac",
    algorithm: t
  }), "0x" + hash$5.hmac(hash$5[t], arrayify(e)).update(arrayify(n)).digest("hex");
}
function pbkdf2$3(t, e, n, a, c) {
  t = arrayify(t), e = arrayify(e);
  let o, d = 1;
  const m = new Uint8Array(a), w = new Uint8Array(e.length + 4);
  w.set(e);
  let S, A;
  for (let B = 1; B <= d; B++) {
    w[e.length] = B >> 24 & 255, w[e.length + 1] = B >> 16 & 255, w[e.length + 2] = B >> 8 & 255, w[e.length + 3] = B & 255;
    let P = arrayify(computeHmac(c, t, w));
    o || (o = P.length, A = new Uint8Array(o), d = Math.ceil(a / o), S = a - (d - 1) * o), A.set(P);
    for (let L = 1; L < n; L++) {
      P = arrayify(computeHmac(c, t, P));
      for (let C = 0; C < o; C++)
        A[C] ^= P[C];
    }
    const I = (B - 1) * o, O = B === d ? S : o;
    m.set(arrayify(A).slice(0, O), I);
  }
  return hexlify(m);
}
const version$7 = "wordlists/5.7.0", logger$b = new Logger(version$7);
class Wordlist {
  constructor(e) {
    logger$b.checkAbstract(new.target, Wordlist), defineReadOnly(this, "locale", e);
  }
  // Subclasses may override this
  split(e) {
    return e.toLowerCase().split(/ +/g);
  }
  // Subclasses may override this
  join(e) {
    return e.join(" ");
  }
  static check(e) {
    const n = [];
    for (let a = 0; a < 2048; a++) {
      const c = e.getWord(a);
      if (a !== e.getWordIndex(c))
        return "0x";
      n.push(c);
    }
    return id(n.join(`
`) + `
`);
  }
  static register(e, n) {
    n || (n = e.locale);
  }
}
const words = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
let wordlist = null;
function loadWords(t) {
  if (wordlist == null && (wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" "), Wordlist.check(t) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60"))
    throw wordlist = null, new Error("BIP39 Wordlist for en (English) FAILED");
}
class LangEn extends Wordlist {
  constructor() {
    super("en");
  }
  getWord(e) {
    return loadWords(this), wordlist[e];
  }
  getWordIndex(e) {
    return loadWords(this), wordlist.indexOf(e);
  }
}
const langEn = new LangEn();
Wordlist.register(langEn);
const wordlists = {
  en: langEn
}, version$6 = "hdnode/5.7.0", logger$a = new Logger(version$6), N = BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"), MasterSecret = toUtf8Bytes("Bitcoin seed"), HardenedBit = 2147483648;
function getUpperMask(t) {
  return (1 << t) - 1 << 8 - t;
}
function getLowerMask(t) {
  return (1 << t) - 1;
}
function bytes32(t) {
  return hexZeroPad(hexlify(t), 32);
}
function base58check(t) {
  return Base58.encode(concat([t, hexDataSlice(sha256$3(sha256$3(t)), 0, 4)]));
}
function getWordlist(t) {
  if (t == null)
    return wordlists.en;
  if (typeof t == "string") {
    const e = wordlists[t];
    return e == null && logger$a.throwArgumentError("unknown locale", "wordlist", t), e;
  }
  return t;
}
const _constructorGuard$1 = {}, defaultPath = "m/44'/60'/0'/0/0";
class HDNode {
  /**
   *  This constructor should not be called directly.
   *
   *  Please use:
   *   - fromMnemonic
   *   - fromSeed
   */
  constructor(e, n, a, c, o, d, m, w) {
    if (e !== _constructorGuard$1)
      throw new Error("HDNode constructor cannot be called directly");
    if (n) {
      const S = new SigningKey(n);
      defineReadOnly(this, "privateKey", S.privateKey), defineReadOnly(this, "publicKey", S.compressedPublicKey);
    } else
      defineReadOnly(this, "privateKey", null), defineReadOnly(this, "publicKey", hexlify(a));
    defineReadOnly(this, "parentFingerprint", c), defineReadOnly(this, "fingerprint", hexDataSlice(ripemd160(sha256$3(this.publicKey)), 0, 4)), defineReadOnly(this, "address", computeAddress(this.publicKey)), defineReadOnly(this, "chainCode", o), defineReadOnly(this, "index", d), defineReadOnly(this, "depth", m), w == null ? (defineReadOnly(this, "mnemonic", null), defineReadOnly(this, "path", null)) : typeof w == "string" ? (defineReadOnly(this, "mnemonic", null), defineReadOnly(this, "path", w)) : (defineReadOnly(this, "mnemonic", w), defineReadOnly(this, "path", w.path));
  }
  get extendedKey() {
    if (this.depth >= 256)
      throw new Error("Depth too large!");
    return base58check(concat([
      this.privateKey != null ? "0x0488ADE4" : "0x0488B21E",
      hexlify(this.depth),
      this.parentFingerprint,
      hexZeroPad(hexlify(this.index), 4),
      this.chainCode,
      this.privateKey != null ? concat(["0x00", this.privateKey]) : this.publicKey
    ]));
  }
  neuter() {
    return new HDNode(_constructorGuard$1, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
  }
  _derive(e) {
    if (e > 4294967295)
      throw new Error("invalid index - " + String(e));
    let n = this.path;
    n && (n += "/" + (e & ~HardenedBit));
    const a = new Uint8Array(37);
    if (e & HardenedBit) {
      if (!this.privateKey)
        throw new Error("cannot derive child of neutered node");
      a.set(arrayify(this.privateKey), 1), n && (n += "'");
    } else
      a.set(arrayify(this.publicKey));
    for (let B = 24; B >= 0; B -= 8)
      a[33 + (B >> 3)] = e >> 24 - B & 255;
    const c = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, a)), o = c.slice(0, 32), d = c.slice(32);
    let m = null, w = null;
    this.privateKey ? m = bytes32(BigNumber.from(o).add(this.privateKey).mod(N)) : w = new SigningKey(hexlify(o))._addPoint(this.publicKey);
    let S = n;
    const A = this.mnemonic;
    return A && (S = Object.freeze({
      phrase: A.phrase,
      path: n,
      locale: A.locale || "en"
    })), new HDNode(_constructorGuard$1, m, w, this.fingerprint, bytes32(d), e, this.depth + 1, S);
  }
  derivePath(e) {
    const n = e.split("/");
    if (n.length === 0 || n[0] === "m" && this.depth !== 0)
      throw new Error("invalid path - " + e);
    n[0] === "m" && n.shift();
    let a = this;
    for (let c = 0; c < n.length; c++) {
      const o = n[c];
      if (o.match(/^[0-9]+'$/)) {
        const d = parseInt(o.substring(0, o.length - 1));
        if (d >= HardenedBit)
          throw new Error("invalid path index - " + o);
        a = a._derive(HardenedBit + d);
      } else if (o.match(/^[0-9]+$/)) {
        const d = parseInt(o);
        if (d >= HardenedBit)
          throw new Error("invalid path index - " + o);
        a = a._derive(d);
      } else
        throw new Error("invalid path component - " + o);
    }
    return a;
  }
  static _fromSeed(e, n) {
    const a = arrayify(e);
    if (a.length < 16 || a.length > 64)
      throw new Error("invalid seed");
    const c = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, a));
    return new HDNode(_constructorGuard$1, bytes32(c.slice(0, 32)), null, "0x00000000", bytes32(c.slice(32)), 0, 0, n);
  }
  static fromMnemonic(e, n, a) {
    return a = getWordlist(a), e = entropyToMnemonic$1(mnemonicToEntropy$1(e, a), a), HDNode._fromSeed(mnemonicToSeed$1(e, n), {
      phrase: e,
      path: "m",
      locale: a.locale
    });
  }
  static fromSeed(e) {
    return HDNode._fromSeed(e, null);
  }
  static fromExtendedKey(e) {
    const n = Base58.decode(e);
    (n.length !== 82 || base58check(n.slice(0, 78)) !== e) && logger$a.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
    const a = n[4], c = hexlify(n.slice(5, 9)), o = parseInt(hexlify(n.slice(9, 13)).substring(2), 16), d = hexlify(n.slice(13, 45)), m = n.slice(45, 78);
    switch (hexlify(n.slice(0, 4))) {
      case "0x0488b21e":
      case "0x043587cf":
        return new HDNode(_constructorGuard$1, null, hexlify(m), c, d, o, a, null);
      case "0x0488ade4":
      case "0x04358394 ":
        if (m[0] !== 0)
          break;
        return new HDNode(_constructorGuard$1, hexlify(m.slice(1)), null, c, d, o, a, null);
    }
    return logger$a.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
  }
}
function mnemonicToSeed$1(t, e) {
  e || (e = "");
  const n = toUtf8Bytes("mnemonic" + e, UnicodeNormalizationForm.NFKD);
  return pbkdf2$3(toUtf8Bytes(t, UnicodeNormalizationForm.NFKD), n, 2048, 64, "sha512");
}
function mnemonicToEntropy$1(t, e) {
  e = getWordlist(e), logger$a.checkNormalize();
  const n = e.split(t);
  if (n.length % 3 !== 0)
    throw new Error("invalid mnemonic");
  const a = arrayify(new Uint8Array(Math.ceil(11 * n.length / 8)));
  let c = 0;
  for (let S = 0; S < n.length; S++) {
    let A = e.getWordIndex(n[S].normalize("NFKD"));
    if (A === -1)
      throw new Error("invalid mnemonic");
    for (let B = 0; B < 11; B++)
      A & 1 << 10 - B && (a[c >> 3] |= 1 << 7 - c % 8), c++;
  }
  const o = 32 * n.length / 3, d = n.length / 3, m = getUpperMask(d);
  if ((arrayify(sha256$3(a.slice(0, o / 8)))[0] & m) !== (a[a.length - 1] & m))
    throw new Error("invalid checksum");
  return hexlify(a.slice(0, o / 8));
}
function entropyToMnemonic$1(t, e) {
  if (e = getWordlist(e), t = arrayify(t), t.length % 4 !== 0 || t.length < 16 || t.length > 32)
    throw new Error("invalid entropy");
  const n = [0];
  let a = 11;
  for (let d = 0; d < t.length; d++)
    a > 8 ? (n[n.length - 1] <<= 8, n[n.length - 1] |= t[d], a -= 8) : (n[n.length - 1] <<= a, n[n.length - 1] |= t[d] >> 8 - a, n.push(t[d] & getLowerMask(8 - a)), a += 3);
  const c = t.length / 4, o = arrayify(sha256$3(t))[0] & getUpperMask(c);
  return n[n.length - 1] <<= c, n[n.length - 1] |= o >> 8 - c, e.join(n.map((d) => e.getWord(d)));
}
const version$5 = "random/5.7.0", logger$9 = new Logger(version$5);
function getGlobal() {
  if (typeof self < "u")
    return self;
  if (typeof window < "u")
    return window;
  if (typeof global$1 < "u")
    return global$1;
  throw new Error("unable to locate global object");
}
const anyGlobal = getGlobal();
let crypto$2 = anyGlobal.crypto || anyGlobal.msCrypto;
(!crypto$2 || !crypto$2.getRandomValues) && (logger$9.warn("WARNING: Missing strong random number source"), crypto$2 = {
  getRandomValues: function(t) {
    return logger$9.throwError("no secure random source avaialble", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "crypto.getRandomValues"
    });
  }
});
function randomBytes$1(t) {
  (t <= 0 || t > 1024 || t % 1 || t != t) && logger$9.throwArgumentError("invalid length", "length", t);
  const e = new Uint8Array(t);
  return crypto$2.getRandomValues(e), arrayify(e);
}
var aesJs = { exports: {} };
(function(t, e) {
  (function(n) {
    function a(b) {
      return parseInt(b) === b;
    }
    function c(b) {
      if (!a(b.length))
        return !1;
      for (var M = 0; M < b.length; M++)
        if (!a(b[M]) || b[M] < 0 || b[M] > 255)
          return !1;
      return !0;
    }
    function o(b, M) {
      if (b.buffer && ArrayBuffer.isView(b) && b.name === "Uint8Array")
        return M && (b.slice ? b = b.slice() : b = Array.prototype.slice.call(b)), b;
      if (Array.isArray(b)) {
        if (!c(b))
          throw new Error("Array contains invalid value: " + b);
        return new Uint8Array(b);
      }
      if (a(b.length) && c(b))
        return new Uint8Array(b);
      throw new Error("unsupported array-like object");
    }
    function d(b) {
      return new Uint8Array(b);
    }
    function m(b, M, k, U, T) {
      (U != null || T != null) && (b.slice ? b = b.slice(U, T) : b = Array.prototype.slice.call(b, U, T)), M.set(b, k);
    }
    var w = /* @__PURE__ */ function() {
      function b(k) {
        var U = [], T = 0;
        for (k = encodeURI(k); T < k.length; ) {
          var H = k.charCodeAt(T++);
          H === 37 ? (U.push(parseInt(k.substr(T, 2), 16)), T += 2) : U.push(H);
        }
        return o(U);
      }
      function M(k) {
        for (var U = [], T = 0; T < k.length; ) {
          var H = k[T];
          H < 128 ? (U.push(String.fromCharCode(H)), T++) : H > 191 && H < 224 ? (U.push(String.fromCharCode((H & 31) << 6 | k[T + 1] & 63)), T += 2) : (U.push(String.fromCharCode((H & 15) << 12 | (k[T + 1] & 63) << 6 | k[T + 2] & 63)), T += 3);
        }
        return U.join("");
      }
      return {
        toBytes: b,
        fromBytes: M
      };
    }(), S = /* @__PURE__ */ function() {
      function b(U) {
        for (var T = [], H = 0; H < U.length; H += 2)
          T.push(parseInt(U.substr(H, 2), 16));
        return T;
      }
      var M = "0123456789abcdef";
      function k(U) {
        for (var T = [], H = 0; H < U.length; H++) {
          var Y = U[H];
          T.push(M[(Y & 240) >> 4] + M[Y & 15]);
        }
        return T.join("");
      }
      return {
        toBytes: b,
        fromBytes: k
      };
    }(), A = { 16: 10, 24: 12, 32: 14 }, B = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145], P = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22], I = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125], O = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986], L = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766], C = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126], z = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436], q = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890], Z = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935], X = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600], ie = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480], fe = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795], ye = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855], j = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150], V = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
    function ae(b) {
      for (var M = [], k = 0; k < b.length; k += 4)
        M.push(
          b[k] << 24 | b[k + 1] << 16 | b[k + 2] << 8 | b[k + 3]
        );
      return M;
    }
    var _ = function(b) {
      if (!(this instanceof _))
        throw Error("AES must be instanitated with `new`");
      Object.defineProperty(this, "key", {
        value: o(b, !0)
      }), this._prepare();
    };
    _.prototype._prepare = function() {
      var b = A[this.key.length];
      if (b == null)
        throw new Error("invalid key size (must be 16, 24 or 32 bytes)");
      this._Ke = [], this._Kd = [];
      for (var M = 0; M <= b; M++)
        this._Ke.push([0, 0, 0, 0]), this._Kd.push([0, 0, 0, 0]);
      for (var k = (b + 1) * 4, U = this.key.length / 4, T = ae(this.key), H, M = 0; M < U; M++)
        H = M >> 2, this._Ke[H][M % 4] = T[M], this._Kd[b - H][M % 4] = T[M];
      for (var Y = 0, le = U, ce; le < k; ) {
        if (ce = T[U - 1], T[0] ^= P[ce >> 16 & 255] << 24 ^ P[ce >> 8 & 255] << 16 ^ P[ce & 255] << 8 ^ P[ce >> 24 & 255] ^ B[Y] << 24, Y += 1, U != 8)
          for (var M = 1; M < U; M++)
            T[M] ^= T[M - 1];
        else {
          for (var M = 1; M < U / 2; M++)
            T[M] ^= T[M - 1];
          ce = T[U / 2 - 1], T[U / 2] ^= P[ce & 255] ^ P[ce >> 8 & 255] << 8 ^ P[ce >> 16 & 255] << 16 ^ P[ce >> 24 & 255] << 24;
          for (var M = U / 2 + 1; M < U; M++)
            T[M] ^= T[M - 1];
        }
        for (var M = 0, de, ue; M < U && le < k; )
          de = le >> 2, ue = le % 4, this._Ke[de][ue] = T[M], this._Kd[b - de][ue] = T[M++], le++;
      }
      for (var de = 1; de < b; de++)
        for (var ue = 0; ue < 4; ue++)
          ce = this._Kd[de][ue], this._Kd[de][ue] = fe[ce >> 24 & 255] ^ ye[ce >> 16 & 255] ^ j[ce >> 8 & 255] ^ V[ce & 255];
    }, _.prototype.encrypt = function(b) {
      if (b.length != 16)
        throw new Error("invalid plaintext size (must be 16 bytes)");
      for (var M = this._Ke.length - 1, k = [0, 0, 0, 0], U = ae(b), T = 0; T < 4; T++)
        U[T] ^= this._Ke[0][T];
      for (var H = 1; H < M; H++) {
        for (var T = 0; T < 4; T++)
          k[T] = O[U[T] >> 24 & 255] ^ L[U[(T + 1) % 4] >> 16 & 255] ^ C[U[(T + 2) % 4] >> 8 & 255] ^ z[U[(T + 3) % 4] & 255] ^ this._Ke[H][T];
        U = k.slice();
      }
      for (var Y = d(16), le, T = 0; T < 4; T++)
        le = this._Ke[M][T], Y[4 * T] = (P[U[T] >> 24 & 255] ^ le >> 24) & 255, Y[4 * T + 1] = (P[U[(T + 1) % 4] >> 16 & 255] ^ le >> 16) & 255, Y[4 * T + 2] = (P[U[(T + 2) % 4] >> 8 & 255] ^ le >> 8) & 255, Y[4 * T + 3] = (P[U[(T + 3) % 4] & 255] ^ le) & 255;
      return Y;
    }, _.prototype.decrypt = function(b) {
      if (b.length != 16)
        throw new Error("invalid ciphertext size (must be 16 bytes)");
      for (var M = this._Kd.length - 1, k = [0, 0, 0, 0], U = ae(b), T = 0; T < 4; T++)
        U[T] ^= this._Kd[0][T];
      for (var H = 1; H < M; H++) {
        for (var T = 0; T < 4; T++)
          k[T] = q[U[T] >> 24 & 255] ^ Z[U[(T + 3) % 4] >> 16 & 255] ^ X[U[(T + 2) % 4] >> 8 & 255] ^ ie[U[(T + 1) % 4] & 255] ^ this._Kd[H][T];
        U = k.slice();
      }
      for (var Y = d(16), le, T = 0; T < 4; T++)
        le = this._Kd[M][T], Y[4 * T] = (I[U[T] >> 24 & 255] ^ le >> 24) & 255, Y[4 * T + 1] = (I[U[(T + 3) % 4] >> 16 & 255] ^ le >> 16) & 255, Y[4 * T + 2] = (I[U[(T + 2) % 4] >> 8 & 255] ^ le >> 8) & 255, Y[4 * T + 3] = (I[U[(T + 1) % 4] & 255] ^ le) & 255;
      return Y;
    };
    var u = function(b) {
      if (!(this instanceof u))
        throw Error("AES must be instanitated with `new`");
      this.description = "Electronic Code Block", this.name = "ecb", this._aes = new _(b);
    };
    u.prototype.encrypt = function(b) {
      if (b = o(b), b.length % 16 !== 0)
        throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
      for (var M = d(b.length), k = d(16), U = 0; U < b.length; U += 16)
        m(b, k, 0, U, U + 16), k = this._aes.encrypt(k), m(k, M, U);
      return M;
    }, u.prototype.decrypt = function(b) {
      if (b = o(b), b.length % 16 !== 0)
        throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
      for (var M = d(b.length), k = d(16), U = 0; U < b.length; U += 16)
        m(b, k, 0, U, U + 16), k = this._aes.decrypt(k), m(k, M, U);
      return M;
    };
    var h = function(b, M) {
      if (!(this instanceof h))
        throw Error("AES must be instanitated with `new`");
      if (this.description = "Cipher Block Chaining", this.name = "cbc", !M)
        M = d(16);
      else if (M.length != 16)
        throw new Error("invalid initialation vector size (must be 16 bytes)");
      this._lastCipherblock = o(M, !0), this._aes = new _(b);
    };
    h.prototype.encrypt = function(b) {
      if (b = o(b), b.length % 16 !== 0)
        throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
      for (var M = d(b.length), k = d(16), U = 0; U < b.length; U += 16) {
        m(b, k, 0, U, U + 16);
        for (var T = 0; T < 16; T++)
          k[T] ^= this._lastCipherblock[T];
        this._lastCipherblock = this._aes.encrypt(k), m(this._lastCipherblock, M, U);
      }
      return M;
    }, h.prototype.decrypt = function(b) {
      if (b = o(b), b.length % 16 !== 0)
        throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
      for (var M = d(b.length), k = d(16), U = 0; U < b.length; U += 16) {
        m(b, k, 0, U, U + 16), k = this._aes.decrypt(k);
        for (var T = 0; T < 16; T++)
          M[U + T] = k[T] ^ this._lastCipherblock[T];
        m(b, this._lastCipherblock, 0, U, U + 16);
      }
      return M;
    };
    var p = function(b, M, k) {
      if (!(this instanceof p))
        throw Error("AES must be instanitated with `new`");
      if (this.description = "Cipher Feedback", this.name = "cfb", !M)
        M = d(16);
      else if (M.length != 16)
        throw new Error("invalid initialation vector size (must be 16 size)");
      k || (k = 1), this.segmentSize = k, this._shiftRegister = o(M, !0), this._aes = new _(b);
    };
    p.prototype.encrypt = function(b) {
      if (b.length % this.segmentSize != 0)
        throw new Error("invalid plaintext size (must be segmentSize bytes)");
      for (var M = o(b, !0), k, U = 0; U < M.length; U += this.segmentSize) {
        k = this._aes.encrypt(this._shiftRegister);
        for (var T = 0; T < this.segmentSize; T++)
          M[U + T] ^= k[T];
        m(this._shiftRegister, this._shiftRegister, 0, this.segmentSize), m(M, this._shiftRegister, 16 - this.segmentSize, U, U + this.segmentSize);
      }
      return M;
    }, p.prototype.decrypt = function(b) {
      if (b.length % this.segmentSize != 0)
        throw new Error("invalid ciphertext size (must be segmentSize bytes)");
      for (var M = o(b, !0), k, U = 0; U < M.length; U += this.segmentSize) {
        k = this._aes.encrypt(this._shiftRegister);
        for (var T = 0; T < this.segmentSize; T++)
          M[U + T] ^= k[T];
        m(this._shiftRegister, this._shiftRegister, 0, this.segmentSize), m(b, this._shiftRegister, 16 - this.segmentSize, U, U + this.segmentSize);
      }
      return M;
    };
    var y = function(b, M) {
      if (!(this instanceof y))
        throw Error("AES must be instanitated with `new`");
      if (this.description = "Output Feedback", this.name = "ofb", !M)
        M = d(16);
      else if (M.length != 16)
        throw new Error("invalid initialation vector size (must be 16 bytes)");
      this._lastPrecipher = o(M, !0), this._lastPrecipherIndex = 16, this._aes = new _(b);
    };
    y.prototype.encrypt = function(b) {
      for (var M = o(b, !0), k = 0; k < M.length; k++)
        this._lastPrecipherIndex === 16 && (this._lastPrecipher = this._aes.encrypt(this._lastPrecipher), this._lastPrecipherIndex = 0), M[k] ^= this._lastPrecipher[this._lastPrecipherIndex++];
      return M;
    }, y.prototype.decrypt = y.prototype.encrypt;
    var v = function(b) {
      if (!(this instanceof v))
        throw Error("Counter must be instanitated with `new`");
      b !== 0 && !b && (b = 1), typeof b == "number" ? (this._counter = d(16), this.setValue(b)) : this.setBytes(b);
    };
    v.prototype.setValue = function(b) {
      if (typeof b != "number" || parseInt(b) != b)
        throw new Error("invalid counter value (must be an integer)");
      for (var M = 15; M >= 0; --M)
        this._counter[M] = b % 256, b = b >> 8;
    }, v.prototype.setBytes = function(b) {
      if (b = o(b, !0), b.length != 16)
        throw new Error("invalid counter bytes size (must be 16 bytes)");
      this._counter = b;
    }, v.prototype.increment = function() {
      for (var b = 15; b >= 0; b--)
        if (this._counter[b] === 255)
          this._counter[b] = 0;
        else {
          this._counter[b]++;
          break;
        }
    };
    var $ = function(b, M) {
      if (!(this instanceof $))
        throw Error("AES must be instanitated with `new`");
      this.description = "Counter", this.name = "ctr", M instanceof v || (M = new v(M)), this._counter = M, this._remainingCounter = null, this._remainingCounterIndex = 16, this._aes = new _(b);
    };
    $.prototype.encrypt = function(b) {
      for (var M = o(b, !0), k = 0; k < M.length; k++)
        this._remainingCounterIndex === 16 && (this._remainingCounter = this._aes.encrypt(this._counter._counter), this._remainingCounterIndex = 0, this._counter.increment()), M[k] ^= this._remainingCounter[this._remainingCounterIndex++];
      return M;
    }, $.prototype.decrypt = $.prototype.encrypt;
    function E(b) {
      b = o(b, !0);
      var M = 16 - b.length % 16, k = d(b.length + M);
      m(b, k);
      for (var U = b.length; U < k.length; U++)
        k[U] = M;
      return k;
    }
    function x(b) {
      if (b = o(b, !0), b.length < 16)
        throw new Error("PKCS#7 invalid length");
      var M = b[b.length - 1];
      if (M > 16)
        throw new Error("PKCS#7 padding byte out of range");
      for (var k = b.length - M, U = 0; U < M; U++)
        if (b[k + U] !== M)
          throw new Error("PKCS#7 invalid padding byte");
      var T = d(k);
      return m(b, T, 0, 0, k), T;
    }
    var l = {
      AES: _,
      Counter: v,
      ModeOfOperation: {
        ecb: u,
        cbc: h,
        cfb: p,
        ofb: y,
        ctr: $
      },
      utils: {
        hex: S,
        utf8: w
      },
      padding: {
        pkcs7: {
          pad: E,
          strip: x
        }
      },
      _arrayTest: {
        coerceArray: o,
        createArray: d,
        copyArray: m
      }
    };
    t.exports = l;
  })();
})(aesJs);
var aesJsExports = aesJs.exports;
const aes = /* @__PURE__ */ getDefaultExportFromCjs$2(aesJsExports), version$4 = "json-wallets/5.7.0";
function looseArrayify(t) {
  return typeof t == "string" && t.substring(0, 2) !== "0x" && (t = "0x" + t), arrayify(t);
}
function zpad(t, e) {
  for (t = String(t); t.length < e; )
    t = "0" + t;
  return t;
}
function getPassword(t) {
  return typeof t == "string" ? toUtf8Bytes(t, UnicodeNormalizationForm.NFKC) : arrayify(t);
}
function searchPath(t, e) {
  let n = t;
  const a = e.toLowerCase().split("/");
  for (let c = 0; c < a.length; c++) {
    let o = null;
    for (const d in n)
      if (d.toLowerCase() === a[c]) {
        o = n[d];
        break;
      }
    if (o === null)
      return null;
    n = o;
  }
  return n;
}
function uuidV4(t) {
  const e = arrayify(t);
  e[6] = e[6] & 15 | 64, e[8] = e[8] & 63 | 128;
  const n = hexlify(e);
  return [
    n.substring(2, 10),
    n.substring(10, 14),
    n.substring(14, 18),
    n.substring(18, 22),
    n.substring(22, 34)
  ].join("-");
}
const logger$8 = new Logger(version$4);
class CrowdsaleAccount extends Description {
  isCrowdsaleAccount(e) {
    return !!(e && e._isCrowdsaleAccount);
  }
}
function decrypt$1(t, e) {
  const n = JSON.parse(t);
  e = getPassword(e);
  const a = getAddress(searchPath(n, "ethaddr")), c = looseArrayify(searchPath(n, "encseed"));
  (!c || c.length % 16 !== 0) && logger$8.throwArgumentError("invalid encseed", "json", t);
  const o = arrayify(pbkdf2$3(e, e, 2e3, 32, "sha256")).slice(0, 16), d = c.slice(0, 16), m = c.slice(16), w = new aes.ModeOfOperation.cbc(o, d), S = aes.padding.pkcs7.strip(arrayify(w.decrypt(m)));
  let A = "";
  for (let I = 0; I < S.length; I++)
    A += String.fromCharCode(S[I]);
  const B = toUtf8Bytes(A), P = keccak256$1(B);
  return new CrowdsaleAccount({
    _isCrowdsaleAccount: !0,
    address: a,
    privateKey: P
  });
}
function isCrowdsaleWallet(t) {
  let e = null;
  try {
    e = JSON.parse(t);
  } catch {
    return !1;
  }
  return e.encseed && e.ethaddr;
}
function isKeystoreWallet(t) {
  let e = null;
  try {
    e = JSON.parse(t);
  } catch {
    return !1;
  }
  return !(!e.version || parseInt(e.version) !== e.version || parseInt(e.version) !== 3);
}
var scrypt$1 = { exports: {} };
(function(t, e) {
  (function(n) {
    function c(L) {
      const C = new Uint32Array([
        1116352408,
        1899447441,
        3049323471,
        3921009573,
        961987163,
        1508970993,
        2453635748,
        2870763221,
        3624381080,
        310598401,
        607225278,
        1426881987,
        1925078388,
        2162078206,
        2614888103,
        3248222580,
        3835390401,
        4022224774,
        264347078,
        604807628,
        770255983,
        1249150122,
        1555081692,
        1996064986,
        2554220882,
        2821834349,
        2952996808,
        3210313671,
        3336571891,
        3584528711,
        113926993,
        338241895,
        666307205,
        773529912,
        1294757372,
        1396182291,
        1695183700,
        1986661051,
        2177026350,
        2456956037,
        2730485921,
        2820302411,
        3259730800,
        3345764771,
        3516065817,
        3600352804,
        4094571909,
        275423344,
        430227734,
        506948616,
        659060556,
        883997877,
        958139571,
        1322822218,
        1537002063,
        1747873779,
        1955562222,
        2024104815,
        2227730452,
        2361852424,
        2428436474,
        2756734187,
        3204031479,
        3329325298
      ]);
      let z = 1779033703, q = 3144134277, Z = 1013904242, X = 2773480762, ie = 1359893119, fe = 2600822924, ye = 528734635, j = 1541459225;
      const V = new Uint32Array(64);
      function ae($) {
        let E = 0, x = $.length;
        for (; x >= 64; ) {
          let l = z, b = q, M = Z, k = X, U = ie, T = fe, H = ye, Y = j, le, ce, de, ue, re;
          for (ce = 0; ce < 16; ce++)
            de = E + ce * 4, V[ce] = ($[de] & 255) << 24 | ($[de + 1] & 255) << 16 | ($[de + 2] & 255) << 8 | $[de + 3] & 255;
          for (ce = 16; ce < 64; ce++)
            le = V[ce - 2], ue = (le >>> 17 | le << 15) ^ (le >>> 19 | le << 13) ^ le >>> 10, le = V[ce - 15], re = (le >>> 7 | le << 25) ^ (le >>> 18 | le << 14) ^ le >>> 3, V[ce] = (ue + V[ce - 7] | 0) + (re + V[ce - 16] | 0) | 0;
          for (ce = 0; ce < 64; ce++)
            ue = (((U >>> 6 | U << 26) ^ (U >>> 11 | U << 21) ^ (U >>> 25 | U << 7)) + (U & T ^ ~U & H) | 0) + (Y + (C[ce] + V[ce] | 0) | 0) | 0, re = ((l >>> 2 | l << 30) ^ (l >>> 13 | l << 19) ^ (l >>> 22 | l << 10)) + (l & b ^ l & M ^ b & M) | 0, Y = H, H = T, T = U, U = k + ue | 0, k = M, M = b, b = l, l = ue + re | 0;
          z = z + l | 0, q = q + b | 0, Z = Z + M | 0, X = X + k | 0, ie = ie + U | 0, fe = fe + T | 0, ye = ye + H | 0, j = j + Y | 0, E += 64, x -= 64;
        }
      }
      ae(L);
      let _, u = L.length % 64, h = L.length / 536870912 | 0, p = L.length << 3, y = u < 56 ? 56 : 120, v = L.slice(L.length - u, L.length);
      for (v.push(128), _ = u + 1; _ < y; _++)
        v.push(0);
      return v.push(h >>> 24 & 255), v.push(h >>> 16 & 255), v.push(h >>> 8 & 255), v.push(h >>> 0 & 255), v.push(p >>> 24 & 255), v.push(p >>> 16 & 255), v.push(p >>> 8 & 255), v.push(p >>> 0 & 255), ae(v), [
        z >>> 24 & 255,
        z >>> 16 & 255,
        z >>> 8 & 255,
        z >>> 0 & 255,
        q >>> 24 & 255,
        q >>> 16 & 255,
        q >>> 8 & 255,
        q >>> 0 & 255,
        Z >>> 24 & 255,
        Z >>> 16 & 255,
        Z >>> 8 & 255,
        Z >>> 0 & 255,
        X >>> 24 & 255,
        X >>> 16 & 255,
        X >>> 8 & 255,
        X >>> 0 & 255,
        ie >>> 24 & 255,
        ie >>> 16 & 255,
        ie >>> 8 & 255,
        ie >>> 0 & 255,
        fe >>> 24 & 255,
        fe >>> 16 & 255,
        fe >>> 8 & 255,
        fe >>> 0 & 255,
        ye >>> 24 & 255,
        ye >>> 16 & 255,
        ye >>> 8 & 255,
        ye >>> 0 & 255,
        j >>> 24 & 255,
        j >>> 16 & 255,
        j >>> 8 & 255,
        j >>> 0 & 255
      ];
    }
    function o(L, C, z) {
      L = L.length <= 64 ? L : c(L);
      const q = 64 + C.length + 4, Z = new Array(q), X = new Array(64);
      let ie, fe = [];
      for (ie = 0; ie < 64; ie++)
        Z[ie] = 54;
      for (ie = 0; ie < L.length; ie++)
        Z[ie] ^= L[ie];
      for (ie = 0; ie < C.length; ie++)
        Z[64 + ie] = C[ie];
      for (ie = q - 4; ie < q; ie++)
        Z[ie] = 0;
      for (ie = 0; ie < 64; ie++)
        X[ie] = 92;
      for (ie = 0; ie < L.length; ie++)
        X[ie] ^= L[ie];
      function ye() {
        for (let j = q - 1; j >= q - 4; j--) {
          if (Z[j]++, Z[j] <= 255)
            return;
          Z[j] = 0;
        }
      }
      for (; z >= 32; )
        ye(), fe = fe.concat(c(X.concat(c(Z)))), z -= 32;
      return z > 0 && (ye(), fe = fe.concat(c(X.concat(c(Z))).slice(0, z))), fe;
    }
    function d(L, C, z, q, Z) {
      let X;
      for (A(L, (2 * z - 1) * 16, Z, 0, 16), X = 0; X < 2 * z; X++)
        S(L, X * 16, Z, 16), w(Z, q), A(Z, 0, L, C + X * 16, 16);
      for (X = 0; X < z; X++)
        A(L, C + X * 2 * 16, L, X * 16, 16);
      for (X = 0; X < z; X++)
        A(L, C + (X * 2 + 1) * 16, L, (X + z) * 16, 16);
    }
    function m(L, C) {
      return L << C | L >>> 32 - C;
    }
    function w(L, C) {
      A(L, 0, C, 0, 16);
      for (let z = 8; z > 0; z -= 2)
        C[4] ^= m(C[0] + C[12], 7), C[8] ^= m(C[4] + C[0], 9), C[12] ^= m(C[8] + C[4], 13), C[0] ^= m(C[12] + C[8], 18), C[9] ^= m(C[5] + C[1], 7), C[13] ^= m(C[9] + C[5], 9), C[1] ^= m(C[13] + C[9], 13), C[5] ^= m(C[1] + C[13], 18), C[14] ^= m(C[10] + C[6], 7), C[2] ^= m(C[14] + C[10], 9), C[6] ^= m(C[2] + C[14], 13), C[10] ^= m(C[6] + C[2], 18), C[3] ^= m(C[15] + C[11], 7), C[7] ^= m(C[3] + C[15], 9), C[11] ^= m(C[7] + C[3], 13), C[15] ^= m(C[11] + C[7], 18), C[1] ^= m(C[0] + C[3], 7), C[2] ^= m(C[1] + C[0], 9), C[3] ^= m(C[2] + C[1], 13), C[0] ^= m(C[3] + C[2], 18), C[6] ^= m(C[5] + C[4], 7), C[7] ^= m(C[6] + C[5], 9), C[4] ^= m(C[7] + C[6], 13), C[5] ^= m(C[4] + C[7], 18), C[11] ^= m(C[10] + C[9], 7), C[8] ^= m(C[11] + C[10], 9), C[9] ^= m(C[8] + C[11], 13), C[10] ^= m(C[9] + C[8], 18), C[12] ^= m(C[15] + C[14], 7), C[13] ^= m(C[12] + C[15], 9), C[14] ^= m(C[13] + C[12], 13), C[15] ^= m(C[14] + C[13], 18);
      for (let z = 0; z < 16; ++z)
        L[z] += C[z];
    }
    function S(L, C, z, q) {
      for (let Z = 0; Z < q; Z++)
        z[Z] ^= L[C + Z];
    }
    function A(L, C, z, q, Z) {
      for (; Z--; )
        z[q++] = L[C++];
    }
    function B(L) {
      if (!L || typeof L.length != "number")
        return !1;
      for (let C = 0; C < L.length; C++) {
        const z = L[C];
        if (typeof z != "number" || z % 1 || z < 0 || z >= 256)
          return !1;
      }
      return !0;
    }
    function P(L, C) {
      if (typeof L != "number" || L % 1)
        throw new Error("invalid " + C);
      return L;
    }
    function I(L, C, z, q, Z, X, ie) {
      if (z = P(z, "N"), q = P(q, "r"), Z = P(Z, "p"), X = P(X, "dkLen"), z === 0 || z & z - 1)
        throw new Error("N must be power of 2");
      if (z > 2147483647 / 128 / q)
        throw new Error("N too large");
      if (q > 2147483647 / 128 / Z)
        throw new Error("r too large");
      if (!B(L))
        throw new Error("password must be an array or buffer");
      if (L = Array.prototype.slice.call(L), !B(C))
        throw new Error("salt must be an array or buffer");
      C = Array.prototype.slice.call(C);
      let fe = o(L, C, Z * 128 * q);
      const ye = new Uint32Array(Z * 32 * q);
      for (let U = 0; U < ye.length; U++) {
        const T = U * 4;
        ye[U] = (fe[T + 3] & 255) << 24 | (fe[T + 2] & 255) << 16 | (fe[T + 1] & 255) << 8 | (fe[T + 0] & 255) << 0;
      }
      const j = new Uint32Array(64 * q), V = new Uint32Array(32 * q * z), ae = 32 * q, _ = new Uint32Array(16), u = new Uint32Array(16), h = Z * z * 2;
      let p = 0, y = null, v = !1, $ = 0, E = 0, x, l;
      const b = ie ? parseInt(1e3 / q) : 4294967295, M = typeof setImmediate < "u" ? setImmediate : setTimeout, k = function() {
        if (v)
          return ie(new Error("cancelled"), p / h);
        let U;
        switch ($) {
          case 0:
            l = E * 32 * q, A(ye, l, j, 0, ae), $ = 1, x = 0;
          case 1:
            U = z - x, U > b && (U = b);
            for (let H = 0; H < U; H++)
              A(j, 0, V, (x + H) * ae, ae), d(j, ae, q, _, u);
            if (x += U, p += U, ie) {
              const H = parseInt(1e3 * p / h);
              if (H !== y) {
                if (v = ie(null, p / h), v)
                  break;
                y = H;
              }
            }
            if (x < z)
              break;
            x = 0, $ = 2;
          case 2:
            U = z - x, U > b && (U = b);
            for (let H = 0; H < U; H++) {
              const Y = (2 * q - 1) * 16, le = j[Y] & z - 1;
              S(V, le * ae, j, ae), d(j, ae, q, _, u);
            }
            if (x += U, p += U, ie) {
              const H = parseInt(1e3 * p / h);
              if (H !== y) {
                if (v = ie(null, p / h), v)
                  break;
                y = H;
              }
            }
            if (x < z)
              break;
            if (A(j, 0, ye, l, ae), E++, E < Z) {
              $ = 0;
              break;
            }
            fe = [];
            for (let H = 0; H < ye.length; H++)
              fe.push(ye[H] >> 0 & 255), fe.push(ye[H] >> 8 & 255), fe.push(ye[H] >> 16 & 255), fe.push(ye[H] >> 24 & 255);
            const T = o(L, fe, X);
            return ie && ie(null, 1, T), T;
        }
        ie && M(k);
      };
      if (!ie)
        for (; ; ) {
          const U = k();
          if (U != null)
            return U;
        }
      k();
    }
    const O = {
      scrypt: function(L, C, z, q, Z, X, ie) {
        return new Promise(function(fe, ye) {
          let j = 0;
          ie && ie(0), I(L, C, z, q, Z, X, function(V, ae, _) {
            if (V)
              ye(V);
            else if (_)
              ie && j !== 1 && ie(1), fe(new Uint8Array(_));
            else if (ie && ae !== j)
              return j = ae, ie(ae);
          });
        });
      },
      syncScrypt: function(L, C, z, q, Z, X) {
        return new Uint8Array(I(L, C, z, q, Z, X));
      }
    };
    t.exports = O;
  })();
})(scrypt$1);
var scryptExports = scrypt$1.exports;
const scrypt = /* @__PURE__ */ getDefaultExportFromCjs$2(scryptExports);
var __awaiter$a = function(t, e, n, a) {
  function c(o) {
    return o instanceof n ? o : new n(function(d) {
      d(o);
    });
  }
  return new (n || (n = Promise))(function(o, d) {
    function m(A) {
      try {
        S(a.next(A));
      } catch (B) {
        d(B);
      }
    }
    function w(A) {
      try {
        S(a.throw(A));
      } catch (B) {
        d(B);
      }
    }
    function S(A) {
      A.done ? o(A.value) : c(A.value).then(m, w);
    }
    S((a = a.apply(t, e || [])).next());
  });
};
const logger$7 = new Logger(version$4);
function hasMnemonic$1(t) {
  return t != null && t.mnemonic && t.mnemonic.phrase;
}
class KeystoreAccount extends Description {
  isKeystoreAccount(e) {
    return !!(e && e._isKeystoreAccount);
  }
}
function _decrypt(t, e, n) {
  if (searchPath(t, "crypto/cipher") === "aes-128-ctr") {
    const c = looseArrayify(searchPath(t, "crypto/cipherparams/iv")), o = new aes.Counter(c), d = new aes.ModeOfOperation.ctr(e, o);
    return arrayify(d.decrypt(n));
  }
  return null;
}
function _getAccount(t, e) {
  const n = looseArrayify(searchPath(t, "crypto/ciphertext"));
  if (hexlify(keccak256$1(concat([e.slice(16, 32), n]))).substring(2) !== searchPath(t, "crypto/mac").toLowerCase())
    throw new Error("invalid password");
  const c = _decrypt(t, e.slice(0, 16), n);
  c || logger$7.throwError("unsupported cipher", Logger.errors.UNSUPPORTED_OPERATION, {
    operation: "decrypt"
  });
  const o = e.slice(32, 64), d = computeAddress(c);
  if (t.address) {
    let w = t.address.toLowerCase();
    if (w.substring(0, 2) !== "0x" && (w = "0x" + w), getAddress(w) !== d)
      throw new Error("address mismatch");
  }
  const m = {
    _isKeystoreAccount: !0,
    address: d,
    privateKey: hexlify(c)
  };
  if (searchPath(t, "x-ethers/version") === "0.1") {
    const w = looseArrayify(searchPath(t, "x-ethers/mnemonicCiphertext")), S = looseArrayify(searchPath(t, "x-ethers/mnemonicCounter")), A = new aes.Counter(S), B = new aes.ModeOfOperation.ctr(o, A), P = searchPath(t, "x-ethers/path") || defaultPath, I = searchPath(t, "x-ethers/locale") || "en", O = arrayify(B.decrypt(w));
    try {
      const L = entropyToMnemonic$1(O, I), C = HDNode.fromMnemonic(L, null, I).derivePath(P);
      if (C.privateKey != m.privateKey)
        throw new Error("mnemonic mismatch");
      m.mnemonic = C.mnemonic;
    } catch (L) {
      if (L.code !== Logger.errors.INVALID_ARGUMENT || L.argument !== "wordlist")
        throw L;
    }
  }
  return new KeystoreAccount(m);
}
function pbkdf2Sync(t, e, n, a, c) {
  return arrayify(pbkdf2$3(t, e, n, a, c));
}
function pbkdf2$2(t, e, n, a, c) {
  return Promise.resolve(pbkdf2Sync(t, e, n, a, c));
}
function _computeKdfKey(t, e, n, a, c) {
  const o = getPassword(e), d = searchPath(t, "crypto/kdf");
  if (d && typeof d == "string") {
    const m = function(w, S) {
      return logger$7.throwArgumentError("invalid key-derivation function parameters", w, S);
    };
    if (d.toLowerCase() === "scrypt") {
      const w = looseArrayify(searchPath(t, "crypto/kdfparams/salt")), S = parseInt(searchPath(t, "crypto/kdfparams/n")), A = parseInt(searchPath(t, "crypto/kdfparams/r")), B = parseInt(searchPath(t, "crypto/kdfparams/p"));
      (!S || !A || !B) && m("kdf", d), S & S - 1 && m("N", S);
      const P = parseInt(searchPath(t, "crypto/kdfparams/dklen"));
      return P !== 32 && m("dklen", P), a(o, w, S, A, B, 64, c);
    } else if (d.toLowerCase() === "pbkdf2") {
      const w = looseArrayify(searchPath(t, "crypto/kdfparams/salt"));
      let S = null;
      const A = searchPath(t, "crypto/kdfparams/prf");
      A === "hmac-sha256" ? S = "sha256" : A === "hmac-sha512" ? S = "sha512" : m("prf", A);
      const B = parseInt(searchPath(t, "crypto/kdfparams/c")), P = parseInt(searchPath(t, "crypto/kdfparams/dklen"));
      return P !== 32 && m("dklen", P), n(o, w, B, P, S);
    }
  }
  return logger$7.throwArgumentError("unsupported key-derivation function", "kdf", d);
}
function decryptSync(t, e) {
  const n = JSON.parse(t), a = _computeKdfKey(n, e, pbkdf2Sync, scrypt.syncScrypt);
  return _getAccount(n, a);
}
function decrypt(t, e, n) {
  return __awaiter$a(this, void 0, void 0, function* () {
    const a = JSON.parse(t), c = yield _computeKdfKey(a, e, pbkdf2$2, scrypt.scrypt, n);
    return _getAccount(a, c);
  });
}
function encrypt(t, e, n, a) {
  try {
    if (getAddress(t.address) !== computeAddress(t.privateKey))
      throw new Error("address/privateKey mismatch");
    if (hasMnemonic$1(t)) {
      const C = t.mnemonic;
      if (HDNode.fromMnemonic(C.phrase, null, C.locale).derivePath(C.path || defaultPath).privateKey != t.privateKey)
        throw new Error("mnemonic mismatch");
    }
  } catch (C) {
    return Promise.reject(C);
  }
  typeof n == "function" && !a && (a = n, n = {}), n || (n = {});
  const c = arrayify(t.privateKey), o = getPassword(e);
  let d = null, m = null, w = null;
  if (hasMnemonic$1(t)) {
    const C = t.mnemonic;
    d = arrayify(mnemonicToEntropy$1(C.phrase, C.locale || "en")), m = C.path || defaultPath, w = C.locale || "en";
  }
  let S = n.client;
  S || (S = "ethers.js");
  let A = null;
  n.salt ? A = arrayify(n.salt) : A = randomBytes$1(32);
  let B = null;
  if (n.iv) {
    if (B = arrayify(n.iv), B.length !== 16)
      throw new Error("invalid iv");
  } else
    B = randomBytes$1(16);
  let P = null;
  if (n.uuid) {
    if (P = arrayify(n.uuid), P.length !== 16)
      throw new Error("invalid uuid");
  } else
    P = randomBytes$1(16);
  let I = 1 << 17, O = 8, L = 1;
  return n.scrypt && (n.scrypt.N && (I = n.scrypt.N), n.scrypt.r && (O = n.scrypt.r), n.scrypt.p && (L = n.scrypt.p)), scrypt.scrypt(o, A, I, O, L, 64, a).then((C) => {
    C = arrayify(C);
    const z = C.slice(0, 16), q = C.slice(16, 32), Z = C.slice(32, 64), X = new aes.Counter(B), ie = new aes.ModeOfOperation.ctr(z, X), fe = arrayify(ie.encrypt(c)), ye = keccak256$1(concat([q, fe])), j = {
      address: t.address.substring(2).toLowerCase(),
      id: uuidV4(P),
      version: 3,
      crypto: {
        cipher: "aes-128-ctr",
        cipherparams: {
          iv: hexlify(B).substring(2)
        },
        ciphertext: hexlify(fe).substring(2),
        kdf: "scrypt",
        kdfparams: {
          salt: hexlify(A).substring(2),
          n: I,
          dklen: 32,
          p: L,
          r: O
        },
        mac: ye.substring(2)
      }
    };
    if (d) {
      const V = randomBytes$1(16), ae = new aes.Counter(V), _ = new aes.ModeOfOperation.ctr(Z, ae), u = arrayify(_.encrypt(d)), h = /* @__PURE__ */ new Date(), p = h.getUTCFullYear() + "-" + zpad(h.getUTCMonth() + 1, 2) + "-" + zpad(h.getUTCDate(), 2) + "T" + zpad(h.getUTCHours(), 2) + "-" + zpad(h.getUTCMinutes(), 2) + "-" + zpad(h.getUTCSeconds(), 2) + ".0Z";
      j["x-ethers"] = {
        client: S,
        gethFilename: "UTC--" + p + "--" + j.address,
        mnemonicCounter: hexlify(V).substring(2),
        mnemonicCiphertext: hexlify(u).substring(2),
        path: m,
        locale: w,
        version: "0.1"
      };
    }
    return JSON.stringify(j);
  });
}
function decryptJsonWallet(t, e, n) {
  if (isCrowdsaleWallet(t)) {
    n && n(0);
    const a = decrypt$1(t, e);
    return n && n(1), Promise.resolve(a);
  }
  return isKeystoreWallet(t) ? decrypt(t, e, n) : Promise.reject(new Error("invalid JSON wallet"));
}
function decryptJsonWalletSync(t, e) {
  if (isCrowdsaleWallet(t))
    return decrypt$1(t, e);
  if (isKeystoreWallet(t))
    return decryptSync(t, e);
  throw new Error("invalid JSON wallet");
}
const version$3 = "wallet/5.7.0";
var __awaiter$9 = function(t, e, n, a) {
  function c(o) {
    return o instanceof n ? o : new n(function(d) {
      d(o);
    });
  }
  return new (n || (n = Promise))(function(o, d) {
    function m(A) {
      try {
        S(a.next(A));
      } catch (B) {
        d(B);
      }
    }
    function w(A) {
      try {
        S(a.throw(A));
      } catch (B) {
        d(B);
      }
    }
    function S(A) {
      A.done ? o(A.value) : c(A.value).then(m, w);
    }
    S((a = a.apply(t, e || [])).next());
  });
};
const logger$6 = new Logger(version$3);
function isAccount(t) {
  return t != null && isHexString$1(t.privateKey, 32) && t.address != null;
}
function hasMnemonic(t) {
  const e = t.mnemonic;
  return e && e.phrase;
}
let Wallet$1 = class jt extends Signer {
  constructor(e, n) {
    if (super(), isAccount(e)) {
      const a = new SigningKey(e.privateKey);
      if (defineReadOnly(this, "_signingKey", () => a), defineReadOnly(this, "address", computeAddress(this.publicKey)), this.address !== getAddress(e.address) && logger$6.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]"), hasMnemonic(e)) {
        const c = e.mnemonic;
        defineReadOnly(this, "_mnemonic", () => ({
          phrase: c.phrase,
          path: c.path || defaultPath,
          locale: c.locale || "en"
        }));
        const o = this.mnemonic, d = HDNode.fromMnemonic(o.phrase, null, o.locale).derivePath(o.path);
        computeAddress(d.privateKey) !== this.address && logger$6.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
      } else
        defineReadOnly(this, "_mnemonic", () => null);
    } else {
      if (SigningKey.isSigningKey(e))
        e.curve !== "secp256k1" && logger$6.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]"), defineReadOnly(this, "_signingKey", () => e);
      else {
        typeof e == "string" && e.match(/^[0-9a-f]*$/i) && e.length === 64 && (e = "0x" + e);
        const a = new SigningKey(e);
        defineReadOnly(this, "_signingKey", () => a);
      }
      defineReadOnly(this, "_mnemonic", () => null), defineReadOnly(this, "address", computeAddress(this.publicKey));
    }
    n && !Provider$1.isProvider(n) && logger$6.throwArgumentError("invalid provider", "provider", n), defineReadOnly(this, "provider", n || null);
  }
  get mnemonic() {
    return this._mnemonic();
  }
  get privateKey() {
    return this._signingKey().privateKey;
  }
  get publicKey() {
    return this._signingKey().publicKey;
  }
  getAddress() {
    return Promise.resolve(this.address);
  }
  connect(e) {
    return new jt(this, e);
  }
  signTransaction(e) {
    return resolveProperties(e).then((n) => {
      n.from != null && (getAddress(n.from) !== this.address && logger$6.throwArgumentError("transaction from address mismatch", "transaction.from", e.from), delete n.from);
      const a = this._signingKey().signDigest(keccak256$1(serialize$1(n)));
      return serialize$1(n, a);
    });
  }
  signMessage(e) {
    return __awaiter$9(this, void 0, void 0, function* () {
      return joinSignature(this._signingKey().signDigest(hashMessage(e)));
    });
  }
  _signTypedData(e, n, a) {
    return __awaiter$9(this, void 0, void 0, function* () {
      const c = yield TypedDataEncoder.resolveNames(e, n, a, (o) => (this.provider == null && logger$6.throwError("cannot resolve ENS names without a provider", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "resolveName",
        value: o
      }), this.provider.resolveName(o)));
      return joinSignature(this._signingKey().signDigest(TypedDataEncoder.hash(c.domain, n, c.value)));
    });
  }
  encrypt(e, n, a) {
    if (typeof n == "function" && !a && (a = n, n = {}), a && typeof a != "function")
      throw new Error("invalid callback");
    return n || (n = {}), encrypt(this, e, n, a);
  }
  /**
   *  Static methods to create Wallet instances.
   */
  static createRandom(e) {
    let n = randomBytes$1(16);
    e || (e = {}), e.extraEntropy && (n = arrayify(hexDataSlice(keccak256$1(concat([n, e.extraEntropy])), 0, 16)));
    const a = entropyToMnemonic$1(n, e.locale);
    return jt.fromMnemonic(a, e.path, e.locale);
  }
  static fromEncryptedJson(e, n, a) {
    return decryptJsonWallet(e, n, a).then((c) => new jt(c));
  }
  static fromEncryptedJsonSync(e, n) {
    return new jt(decryptJsonWalletSync(e, n));
  }
  static fromMnemonic(e, n, a) {
    return n || (n = defaultPath), new jt(HDNode.fromMnemonic(e, null, a).derivePath(n));
  }
};
function verifyMessage(t, e) {
  return recoverAddress(hashMessage(t), e);
}
function verifyTypedData(t, e, n, a) {
  return recoverAddress(TypedDataEncoder.hash(t, e, n), a);
}
class InjectedEthereumSigner {
  // protected signer: JsonRpcSigner;
  signer;
  publicKey;
  ownerLength = SIG_CONFIG[SignatureConfig.ETHEREUM].pubLength;
  signatureLength = SIG_CONFIG[SignatureConfig.ETHEREUM].sigLength;
  signatureType = SignatureConfig.ETHEREUM;
  constructor(e) {
    this.signer = e.getSigner();
  }
  async setPublicKey() {
    const e = "sign this message to connect to Bundlr.Network", n = await this.signer.signMessage(e), a = await hashMessage(e), c = recoverPublicKey(arrayify(a), n);
    this.publicKey = Buffer$F.from(arrayify(c));
  }
  async sign(e) {
    this.publicKey || await this.setPublicKey();
    const n = await this.signer.signMessage(e);
    return Buffer$F.from(n.slice(2), "hex");
  }
  static verify(e, n, a) {
    const c = computeAddress(e);
    return verifyMessage(n, a) === c;
  }
}
var _Buffer$2 = safeBufferExports.Buffer;
function base$3(t) {
  if (t.length >= 255)
    throw new TypeError("Alphabet too long");
  for (var e = new Uint8Array(256), n = 0; n < e.length; n++)
    e[n] = 255;
  for (var a = 0; a < t.length; a++) {
    var c = t.charAt(a), o = c.charCodeAt(0);
    if (e[o] !== 255)
      throw new TypeError(c + " is ambiguous");
    e[o] = a;
  }
  var d = t.length, m = t.charAt(0), w = Math.log(d) / Math.log(256), S = Math.log(256) / Math.log(d);
  function A(I) {
    if ((Array.isArray(I) || I instanceof Uint8Array) && (I = _Buffer$2.from(I)), !_Buffer$2.isBuffer(I))
      throw new TypeError("Expected Buffer");
    if (I.length === 0)
      return "";
    for (var O = 0, L = 0, C = 0, z = I.length; C !== z && I[C] === 0; )
      C++, O++;
    for (var q = (z - C) * S + 1 >>> 0, Z = new Uint8Array(q); C !== z; ) {
      for (var X = I[C], ie = 0, fe = q - 1; (X !== 0 || ie < L) && fe !== -1; fe--, ie++)
        X += 256 * Z[fe] >>> 0, Z[fe] = X % d >>> 0, X = X / d >>> 0;
      if (X !== 0)
        throw new Error("Non-zero carry");
      L = ie, C++;
    }
    for (var ye = q - L; ye !== q && Z[ye] === 0; )
      ye++;
    for (var j = m.repeat(O); ye < q; ++ye)
      j += t.charAt(Z[ye]);
    return j;
  }
  function B(I) {
    if (typeof I != "string")
      throw new TypeError("Expected String");
    if (I.length === 0)
      return _Buffer$2.alloc(0);
    for (var O = 0, L = 0, C = 0; I[O] === m; )
      L++, O++;
    for (var z = (I.length - O) * w + 1 >>> 0, q = new Uint8Array(z); I[O]; ) {
      var Z = e[I.charCodeAt(O)];
      if (Z === 255)
        return;
      for (var X = 0, ie = z - 1; (Z !== 0 || X < C) && ie !== -1; ie--, X++)
        Z += d * q[ie] >>> 0, q[ie] = Z % 256 >>> 0, Z = Z / 256 >>> 0;
      if (Z !== 0)
        throw new Error("Non-zero carry");
      C = X, O++;
    }
    for (var fe = z - C; fe !== z && q[fe] === 0; )
      fe++;
    var ye = _Buffer$2.allocUnsafe(L + (z - fe));
    ye.fill(0, 0, L);
    for (var j = L; fe !== z; )
      ye[j++] = q[fe++];
    return ye;
  }
  function P(I) {
    var O = B(I);
    if (O)
      return O;
    throw new Error("Non-base" + d + " character");
  }
  return {
    encode: A,
    decodeUnsafe: B,
    decode: P
  };
}
var src$3 = base$3, basex$3 = src$3, ALPHABET$3 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz", bs58$5 = basex$3(ALPHABET$3);
const bs58$6 = /* @__PURE__ */ getDefaultExportFromCjs$2(bs58$5);
class SolanaSigner extends Curve25519 {
  get publicKey() {
    return bs58$6.decode(this.pk);
  }
  get key() {
    return bs58$6.decode(this._key);
  }
  constructor(e) {
    const n = bs58$6.decode(e);
    super(bs58$6.encode(n.subarray(0, 32)), bs58$6.encode(n.subarray(32, 64)));
  }
}
const errors$2 = {
  IMPOSSIBLE_CASE: "Impossible case. Please create issue.",
  TWEAK_ADD: "The tweak was out of range or the resulted private key is invalid",
  TWEAK_MUL: "The tweak was out of range or equal to zero",
  CONTEXT_RANDOMIZE_UNKNOW: "Unknow error on context randomization",
  SECKEY_INVALID: "Private Key is invalid",
  PUBKEY_PARSE: "Public Key could not be parsed",
  PUBKEY_SERIALIZE: "Public Key serialization error",
  PUBKEY_COMBINE: "The sum of the public keys is not valid",
  SIG_PARSE: "Signature could not be parsed",
  SIGN: "The nonce generation function failed, or the private key was invalid",
  RECOVER: "Public key could not be recover",
  ECDH: "Scalar was invalid (zero or overflow)"
};
function assert$4(t, e) {
  if (!t)
    throw new Error(e);
}
function isUint8Array(t, e, n) {
  if (assert$4(e instanceof Uint8Array, `Expected ${t} to be an Uint8Array`), n !== void 0)
    if (Array.isArray(n)) {
      const a = n.join(", "), c = `Expected ${t} to be an Uint8Array with length [${a}]`;
      assert$4(n.includes(e.length), c);
    } else {
      const a = `Expected ${t} to be an Uint8Array with length ${n}`;
      assert$4(e.length === n, a);
    }
}
function isCompressed(t) {
  assert$4(toTypeString(t) === "Boolean", "Expected compressed to be a Boolean");
}
function getAssertedOutput(t = (n) => new Uint8Array(n), e) {
  return typeof t == "function" && (t = t(e)), isUint8Array("output", t, e), t;
}
function toTypeString(t) {
  return Object.prototype.toString.call(t).slice(8, -1);
}
var lib$9 = (t) => ({
  contextRandomize(e) {
    switch (assert$4(
      e === null || e instanceof Uint8Array,
      "Expected seed to be an Uint8Array or null"
    ), e !== null && isUint8Array("seed", e, 32), t.contextRandomize(e)) {
      case 1:
        throw new Error(errors$2.CONTEXT_RANDOMIZE_UNKNOW);
    }
  },
  privateKeyVerify(e) {
    return isUint8Array("private key", e, 32), t.privateKeyVerify(e) === 0;
  },
  privateKeyNegate(e) {
    switch (isUint8Array("private key", e, 32), t.privateKeyNegate(e)) {
      case 0:
        return e;
      case 1:
        throw new Error(errors$2.IMPOSSIBLE_CASE);
    }
  },
  privateKeyTweakAdd(e, n) {
    switch (isUint8Array("private key", e, 32), isUint8Array("tweak", n, 32), t.privateKeyTweakAdd(e, n)) {
      case 0:
        return e;
      case 1:
        throw new Error(errors$2.TWEAK_ADD);
    }
  },
  privateKeyTweakMul(e, n) {
    switch (isUint8Array("private key", e, 32), isUint8Array("tweak", n, 32), t.privateKeyTweakMul(e, n)) {
      case 0:
        return e;
      case 1:
        throw new Error(errors$2.TWEAK_MUL);
    }
  },
  publicKeyVerify(e) {
    return isUint8Array("public key", e, [33, 65]), t.publicKeyVerify(e) === 0;
  },
  publicKeyCreate(e, n = !0, a) {
    switch (isUint8Array("private key", e, 32), isCompressed(n), a = getAssertedOutput(a, n ? 33 : 65), t.publicKeyCreate(a, e)) {
      case 0:
        return a;
      case 1:
        throw new Error(errors$2.SECKEY_INVALID);
      case 2:
        throw new Error(errors$2.PUBKEY_SERIALIZE);
    }
  },
  publicKeyConvert(e, n = !0, a) {
    switch (isUint8Array("public key", e, [33, 65]), isCompressed(n), a = getAssertedOutput(a, n ? 33 : 65), t.publicKeyConvert(a, e)) {
      case 0:
        return a;
      case 1:
        throw new Error(errors$2.PUBKEY_PARSE);
      case 2:
        throw new Error(errors$2.PUBKEY_SERIALIZE);
    }
  },
  publicKeyNegate(e, n = !0, a) {
    switch (isUint8Array("public key", e, [33, 65]), isCompressed(n), a = getAssertedOutput(a, n ? 33 : 65), t.publicKeyNegate(a, e)) {
      case 0:
        return a;
      case 1:
        throw new Error(errors$2.PUBKEY_PARSE);
      case 2:
        throw new Error(errors$2.IMPOSSIBLE_CASE);
      case 3:
        throw new Error(errors$2.PUBKEY_SERIALIZE);
    }
  },
  publicKeyCombine(e, n = !0, a) {
    assert$4(Array.isArray(e), "Expected public keys to be an Array"), assert$4(e.length > 0, "Expected public keys array will have more than zero items");
    for (const c of e)
      isUint8Array("public key", c, [33, 65]);
    switch (isCompressed(n), a = getAssertedOutput(a, n ? 33 : 65), t.publicKeyCombine(a, e)) {
      case 0:
        return a;
      case 1:
        throw new Error(errors$2.PUBKEY_PARSE);
      case 2:
        throw new Error(errors$2.PUBKEY_COMBINE);
      case 3:
        throw new Error(errors$2.PUBKEY_SERIALIZE);
    }
  },
  publicKeyTweakAdd(e, n, a = !0, c) {
    switch (isUint8Array("public key", e, [33, 65]), isUint8Array("tweak", n, 32), isCompressed(a), c = getAssertedOutput(c, a ? 33 : 65), t.publicKeyTweakAdd(c, e, n)) {
      case 0:
        return c;
      case 1:
        throw new Error(errors$2.PUBKEY_PARSE);
      case 2:
        throw new Error(errors$2.TWEAK_ADD);
    }
  },
  publicKeyTweakMul(e, n, a = !0, c) {
    switch (isUint8Array("public key", e, [33, 65]), isUint8Array("tweak", n, 32), isCompressed(a), c = getAssertedOutput(c, a ? 33 : 65), t.publicKeyTweakMul(c, e, n)) {
      case 0:
        return c;
      case 1:
        throw new Error(errors$2.PUBKEY_PARSE);
      case 2:
        throw new Error(errors$2.TWEAK_MUL);
    }
  },
  signatureNormalize(e) {
    switch (isUint8Array("signature", e, 64), t.signatureNormalize(e)) {
      case 0:
        return e;
      case 1:
        throw new Error(errors$2.SIG_PARSE);
    }
  },
  signatureExport(e, n) {
    isUint8Array("signature", e, 64), n = getAssertedOutput(n, 72);
    const a = { output: n, outputlen: 72 };
    switch (t.signatureExport(a, e)) {
      case 0:
        return n.slice(0, a.outputlen);
      case 1:
        throw new Error(errors$2.SIG_PARSE);
      case 2:
        throw new Error(errors$2.IMPOSSIBLE_CASE);
    }
  },
  signatureImport(e, n) {
    switch (isUint8Array("signature", e), n = getAssertedOutput(n, 64), t.signatureImport(n, e)) {
      case 0:
        return n;
      case 1:
        throw new Error(errors$2.SIG_PARSE);
      case 2:
        throw new Error(errors$2.IMPOSSIBLE_CASE);
    }
  },
  ecdsaSign(e, n, a = {}, c) {
    isUint8Array("message", e, 32), isUint8Array("private key", n, 32), assert$4(toTypeString(a) === "Object", "Expected options to be an Object"), a.data !== void 0 && isUint8Array("options.data", a.data), a.noncefn !== void 0 && assert$4(toTypeString(a.noncefn) === "Function", "Expected options.noncefn to be a Function"), c = getAssertedOutput(c, 64);
    const o = { signature: c, recid: null };
    switch (t.ecdsaSign(o, e, n, a.data, a.noncefn)) {
      case 0:
        return o;
      case 1:
        throw new Error(errors$2.SIGN);
      case 2:
        throw new Error(errors$2.IMPOSSIBLE_CASE);
    }
  },
  ecdsaVerify(e, n, a) {
    switch (isUint8Array("signature", e, 64), isUint8Array("message", n, 32), isUint8Array("public key", a, [33, 65]), t.ecdsaVerify(e, n, a)) {
      case 0:
        return !0;
      case 3:
        return !1;
      case 1:
        throw new Error(errors$2.SIG_PARSE);
      case 2:
        throw new Error(errors$2.PUBKEY_PARSE);
    }
  },
  ecdsaRecover(e, n, a, c = !0, o) {
    switch (isUint8Array("signature", e, 64), assert$4(
      toTypeString(n) === "Number" && n >= 0 && n <= 3,
      "Expected recovery id to be a Number within interval [0, 3]"
    ), isUint8Array("message", a, 32), isCompressed(c), o = getAssertedOutput(o, c ? 33 : 65), t.ecdsaRecover(o, e, n, a)) {
      case 0:
        return o;
      case 1:
        throw new Error(errors$2.SIG_PARSE);
      case 2:
        throw new Error(errors$2.RECOVER);
      case 3:
        throw new Error(errors$2.IMPOSSIBLE_CASE);
    }
  },
  ecdh(e, n, a = {}, c) {
    switch (isUint8Array("public key", e, [33, 65]), isUint8Array("private key", n, 32), assert$4(toTypeString(a) === "Object", "Expected options to be an Object"), a.data !== void 0 && isUint8Array("options.data", a.data), a.hashfn !== void 0 ? (assert$4(toTypeString(a.hashfn) === "Function", "Expected options.hashfn to be a Function"), a.xbuf !== void 0 && isUint8Array("options.xbuf", a.xbuf, 32), a.ybuf !== void 0 && isUint8Array("options.ybuf", a.ybuf, 32), isUint8Array("output", c)) : c = getAssertedOutput(c, 32), t.ecdh(c, e, n, a.data, a.hashfn, a.xbuf, a.ybuf)) {
      case 0:
        return c;
      case 1:
        throw new Error(errors$2.PUBKEY_PARSE);
      case 2:
        throw new Error(errors$2.ECDH);
    }
  }
});
const EC = requireElliptic().ec, ec = new EC("secp256k1"), ecparams = ec.curve, BN = ecparams.n.constructor;
function loadCompressedPublicKey(t, e) {
  let n = new BN(e);
  if (n.cmp(ecparams.p) >= 0)
    return null;
  n = n.toRed(ecparams.red);
  let a = n.redSqr().redIMul(n).redIAdd(ecparams.b).redSqrt();
  return t === 3 !== a.isOdd() && (a = a.redNeg()), ec.keyPair({ pub: { x: n, y: a } });
}
function loadUncompressedPublicKey(t, e, n) {
  let a = new BN(e), c = new BN(n);
  if (a.cmp(ecparams.p) >= 0 || c.cmp(ecparams.p) >= 0 || (a = a.toRed(ecparams.red), c = c.toRed(ecparams.red), (t === 6 || t === 7) && c.isOdd() !== (t === 7)))
    return null;
  const o = a.redSqr().redIMul(a);
  return c.redSqr().redISub(o.redIAdd(ecparams.b)).isZero() ? ec.keyPair({ pub: { x: a, y: c } }) : null;
}
function loadPublicKey(t) {
  const e = t[0];
  switch (e) {
    case 2:
    case 3:
      return t.length !== 33 ? null : loadCompressedPublicKey(e, t.subarray(1, 33));
    case 4:
    case 6:
    case 7:
      return t.length !== 65 ? null : loadUncompressedPublicKey(e, t.subarray(1, 33), t.subarray(33, 65));
    default:
      return null;
  }
}
function savePublicKey(t, e) {
  const n = e.encode(null, t.length === 33);
  for (let a = 0; a < t.length; ++a)
    t[a] = n[a];
}
var elliptic$1 = {
  contextRandomize() {
    return 0;
  },
  privateKeyVerify(t) {
    const e = new BN(t);
    return e.cmp(ecparams.n) < 0 && !e.isZero() ? 0 : 1;
  },
  privateKeyNegate(t) {
    const e = new BN(t), n = ecparams.n.sub(e).umod(ecparams.n).toArrayLike(Uint8Array, "be", 32);
    return t.set(n), 0;
  },
  privateKeyTweakAdd(t, e) {
    const n = new BN(e);
    if (n.cmp(ecparams.n) >= 0 || (n.iadd(new BN(t)), n.cmp(ecparams.n) >= 0 && n.isub(ecparams.n), n.isZero()))
      return 1;
    const a = n.toArrayLike(Uint8Array, "be", 32);
    return t.set(a), 0;
  },
  privateKeyTweakMul(t, e) {
    let n = new BN(e);
    if (n.cmp(ecparams.n) >= 0 || n.isZero())
      return 1;
    n.imul(new BN(t)), n.cmp(ecparams.n) >= 0 && (n = n.umod(ecparams.n));
    const a = n.toArrayLike(Uint8Array, "be", 32);
    return t.set(a), 0;
  },
  publicKeyVerify(t) {
    return loadPublicKey(t) === null ? 1 : 0;
  },
  publicKeyCreate(t, e) {
    const n = new BN(e);
    if (n.cmp(ecparams.n) >= 0 || n.isZero())
      return 1;
    const a = ec.keyFromPrivate(e).getPublic();
    return savePublicKey(t, a), 0;
  },
  publicKeyConvert(t, e) {
    const n = loadPublicKey(e);
    if (n === null)
      return 1;
    const a = n.getPublic();
    return savePublicKey(t, a), 0;
  },
  publicKeyNegate(t, e) {
    const n = loadPublicKey(e);
    if (n === null)
      return 1;
    const a = n.getPublic();
    return a.y = a.y.redNeg(), savePublicKey(t, a), 0;
  },
  publicKeyCombine(t, e) {
    const n = new Array(e.length);
    for (let c = 0; c < e.length; ++c)
      if (n[c] = loadPublicKey(e[c]), n[c] === null)
        return 1;
    let a = n[0].getPublic();
    for (let c = 1; c < n.length; ++c)
      a = a.add(n[c].pub);
    return a.isInfinity() ? 2 : (savePublicKey(t, a), 0);
  },
  publicKeyTweakAdd(t, e, n) {
    const a = loadPublicKey(e);
    if (a === null)
      return 1;
    if (n = new BN(n), n.cmp(ecparams.n) >= 0)
      return 2;
    const c = a.getPublic().add(ecparams.g.mul(n));
    return c.isInfinity() ? 2 : (savePublicKey(t, c), 0);
  },
  publicKeyTweakMul(t, e, n) {
    const a = loadPublicKey(e);
    if (a === null)
      return 1;
    if (n = new BN(n), n.cmp(ecparams.n) >= 0 || n.isZero())
      return 2;
    const c = a.getPublic().mul(n);
    return savePublicKey(t, c), 0;
  },
  signatureNormalize(t) {
    const e = new BN(t.subarray(0, 32)), n = new BN(t.subarray(32, 64));
    return e.cmp(ecparams.n) >= 0 || n.cmp(ecparams.n) >= 0 ? 1 : (n.cmp(ec.nh) === 1 && t.set(ecparams.n.sub(n).toArrayLike(Uint8Array, "be", 32), 32), 0);
  },
  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
  // Adapted for Uint8Array instead Buffer
  signatureExport(t, e) {
    const n = e.subarray(0, 32), a = e.subarray(32, 64);
    if (new BN(n).cmp(ecparams.n) >= 0 || new BN(a).cmp(ecparams.n) >= 0)
      return 1;
    const { output: c } = t;
    let o = c.subarray(4, 37);
    o[0] = 0, o.set(n, 1);
    let d = 33, m = 0;
    for (; d > 1 && o[m] === 0 && !(o[m + 1] & 128); --d, ++m)
      ;
    if (o = o.subarray(m), o[0] & 128 || d > 1 && o[0] === 0 && !(o[1] & 128))
      return 1;
    let w = c.subarray(39, 72);
    w[0] = 0, w.set(a, 1);
    let S = 33, A = 0;
    for (; S > 1 && w[A] === 0 && !(w[A + 1] & 128); --S, ++A)
      ;
    return w = w.subarray(A), w[0] & 128 || S > 1 && w[0] === 0 && !(w[1] & 128) ? 1 : (t.outputlen = 6 + d + S, c[0] = 48, c[1] = t.outputlen - 2, c[2] = 2, c[3] = o.length, c.set(o, 4), c[4 + d] = 2, c[5 + d] = w.length, c.set(w, 6 + d), 0);
  },
  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
  // Adapted for Uint8Array instead Buffer
  signatureImport(t, e) {
    if (e.length < 8 || e.length > 72 || e[0] !== 48 || e[1] !== e.length - 2 || e[2] !== 2)
      return 1;
    const n = e[3];
    if (n === 0 || 5 + n >= e.length || e[4 + n] !== 2)
      return 1;
    const a = e[5 + n];
    if (a === 0 || 6 + n + a !== e.length || e[4] & 128 || n > 1 && e[4] === 0 && !(e[5] & 128) || e[n + 6] & 128 || a > 1 && e[n + 6] === 0 && !(e[n + 7] & 128))
      return 1;
    let c = e.subarray(4, 4 + n);
    if (c.length === 33 && c[0] === 0 && (c = c.subarray(1)), c.length > 32)
      return 1;
    let o = e.subarray(6 + n);
    if (o.length === 33 && o[0] === 0 && (o = o.slice(1)), o.length > 32)
      throw new Error("S length is too long");
    let d = new BN(c);
    d.cmp(ecparams.n) >= 0 && (d = new BN(0));
    let m = new BN(e.subarray(6 + n));
    return m.cmp(ecparams.n) >= 0 && (m = new BN(0)), t.set(d.toArrayLike(Uint8Array, "be", 32), 0), t.set(m.toArrayLike(Uint8Array, "be", 32), 32), 0;
  },
  ecdsaSign(t, e, n, a, c) {
    if (c) {
      const m = c;
      c = (w) => {
        const S = m(e, n, null, a, w);
        if (!(S instanceof Uint8Array && S.length === 32))
          throw new Error("This is the way");
        return new BN(S);
      };
    }
    const o = new BN(n);
    if (o.cmp(ecparams.n) >= 0 || o.isZero())
      return 1;
    let d;
    try {
      d = ec.sign(e, n, { canonical: !0, k: c, pers: a });
    } catch {
      return 1;
    }
    return t.signature.set(d.r.toArrayLike(Uint8Array, "be", 32), 0), t.signature.set(d.s.toArrayLike(Uint8Array, "be", 32), 32), t.recid = d.recoveryParam, 0;
  },
  ecdsaVerify(t, e, n) {
    const a = { r: t.subarray(0, 32), s: t.subarray(32, 64) }, c = new BN(a.r), o = new BN(a.s);
    if (c.cmp(ecparams.n) >= 0 || o.cmp(ecparams.n) >= 0)
      return 1;
    if (o.cmp(ec.nh) === 1 || c.isZero() || o.isZero())
      return 3;
    const d = loadPublicKey(n);
    if (d === null)
      return 2;
    const m = d.getPublic();
    return ec.verify(e, a, m) ? 0 : 3;
  },
  ecdsaRecover(t, e, n, a) {
    const c = { r: e.slice(0, 32), s: e.slice(32, 64) }, o = new BN(c.r), d = new BN(c.s);
    if (o.cmp(ecparams.n) >= 0 || d.cmp(ecparams.n) >= 0)
      return 1;
    if (o.isZero() || d.isZero())
      return 2;
    let m;
    try {
      m = ec.recoverPubKey(a, c, n);
    } catch {
      return 2;
    }
    return savePublicKey(t, m), 0;
  },
  ecdh(t, e, n, a, c, o, d) {
    const m = loadPublicKey(e);
    if (m === null)
      return 1;
    const w = new BN(n);
    if (w.cmp(ecparams.n) >= 0 || w.isZero())
      return 2;
    const S = m.getPublic().mul(w);
    if (c === void 0) {
      const A = S.encode(null, !0), B = ec.hash().update(A).digest();
      for (let P = 0; P < 32; ++P)
        t[P] = B[P];
    } else {
      o || (o = new Uint8Array(32));
      const A = S.getX().toArray("be", 32);
      for (let O = 0; O < 32; ++O)
        o[O] = A[O];
      d || (d = new Uint8Array(32));
      const B = S.getY().toArray("be", 32);
      for (let O = 0; O < 32; ++O)
        d[O] = B[O];
      const P = c(o, d, a);
      if (!(P instanceof Uint8Array && P.length === t.length))
        return 2;
      t.set(P);
    }
    return 0;
  }
}, elliptic = lib$9(elliptic$1);
const secp256k1$1 = /* @__PURE__ */ getDefaultExportFromCjs$2(elliptic), { Transform: Transform$1 } = readableBrowserExports;
var keccak$1 = (t) => class Qt extends Transform$1 {
  constructor(n, a, c, o, d) {
    super(d), this._rate = n, this._capacity = a, this._delimitedSuffix = c, this._hashBitLength = o, this._options = d, this._state = new t(), this._state.initialize(n, a), this._finalized = !1;
  }
  _transform(n, a, c) {
    let o = null;
    try {
      this.update(n, a);
    } catch (d) {
      o = d;
    }
    c(o);
  }
  _flush(n) {
    let a = null;
    try {
      this.push(this.digest());
    } catch (c) {
      a = c;
    }
    n(a);
  }
  update(n, a) {
    if (!Buffer$F.isBuffer(n) && typeof n != "string")
      throw new TypeError("Data must be a string or a buffer");
    if (this._finalized)
      throw new Error("Digest already called");
    return Buffer$F.isBuffer(n) || (n = Buffer$F.from(n, a)), this._state.absorb(n), this;
  }
  digest(n) {
    if (this._finalized)
      throw new Error("Digest already called");
    this._finalized = !0, this._delimitedSuffix && this._state.absorbLastFewBits(this._delimitedSuffix);
    let a = this._state.squeeze(this._hashBitLength / 8);
    return n !== void 0 && (a = a.toString(n)), this._resetState(), a;
  }
  // remove result from memory
  _resetState() {
    return this._state.initialize(this._rate, this._capacity), this;
  }
  // because sometimes we need hash right now and little later
  _clone() {
    const n = new Qt(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);
    return this._state.copy(n._state), n._finalized = this._finalized, n;
  }
};
const { Transform } = readableBrowserExports;
var shake = (t) => class er extends Transform {
  constructor(n, a, c, o) {
    super(o), this._rate = n, this._capacity = a, this._delimitedSuffix = c, this._options = o, this._state = new t(), this._state.initialize(n, a), this._finalized = !1;
  }
  _transform(n, a, c) {
    let o = null;
    try {
      this.update(n, a);
    } catch (d) {
      o = d;
    }
    c(o);
  }
  _flush() {
  }
  _read(n) {
    this.push(this.squeeze(n));
  }
  update(n, a) {
    if (!Buffer$F.isBuffer(n) && typeof n != "string")
      throw new TypeError("Data must be a string or a buffer");
    if (this._finalized)
      throw new Error("Squeeze already called");
    return Buffer$F.isBuffer(n) || (n = Buffer$F.from(n, a)), this._state.absorb(n), this;
  }
  squeeze(n, a) {
    this._finalized || (this._finalized = !0, this._state.absorbLastFewBits(this._delimitedSuffix));
    let c = this._state.squeeze(n);
    return a !== void 0 && (c = c.toString(a)), c;
  }
  _resetState() {
    return this._state.initialize(this._rate, this._capacity), this;
  }
  _clone() {
    const n = new er(this._rate, this._capacity, this._delimitedSuffix, this._options);
    return this._state.copy(n._state), n._finalized = this._finalized, n;
  }
};
const createKeccak = keccak$1, createShake = shake;
var api = function(t) {
  const e = createKeccak(t), n = createShake(t);
  return function(a, c) {
    switch (typeof a == "string" ? a.toLowerCase() : a) {
      case "keccak224":
        return new e(1152, 448, null, 224, c);
      case "keccak256":
        return new e(1088, 512, null, 256, c);
      case "keccak384":
        return new e(832, 768, null, 384, c);
      case "keccak512":
        return new e(576, 1024, null, 512, c);
      case "sha3-224":
        return new e(1152, 448, 6, 224, c);
      case "sha3-256":
        return new e(1088, 512, 6, 256, c);
      case "sha3-384":
        return new e(832, 768, 6, 384, c);
      case "sha3-512":
        return new e(576, 1024, 6, 512, c);
      case "shake128":
        return new n(1344, 256, 31, c);
      case "shake256":
        return new n(1088, 512, 31, c);
      default:
        throw new Error("Invald algorithm: " + a);
    }
  };
}, keccakStateUnroll = {};
const P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
keccakStateUnroll.p1600 = function(t) {
  for (let e = 0; e < 24; ++e) {
    const n = t[0] ^ t[10] ^ t[20] ^ t[30] ^ t[40], a = t[1] ^ t[11] ^ t[21] ^ t[31] ^ t[41], c = t[2] ^ t[12] ^ t[22] ^ t[32] ^ t[42], o = t[3] ^ t[13] ^ t[23] ^ t[33] ^ t[43], d = t[4] ^ t[14] ^ t[24] ^ t[34] ^ t[44], m = t[5] ^ t[15] ^ t[25] ^ t[35] ^ t[45], w = t[6] ^ t[16] ^ t[26] ^ t[36] ^ t[46], S = t[7] ^ t[17] ^ t[27] ^ t[37] ^ t[47], A = t[8] ^ t[18] ^ t[28] ^ t[38] ^ t[48], B = t[9] ^ t[19] ^ t[29] ^ t[39] ^ t[49];
    let P = A ^ (c << 1 | o >>> 31), I = B ^ (o << 1 | c >>> 31);
    const O = t[0] ^ P, L = t[1] ^ I, C = t[10] ^ P, z = t[11] ^ I, q = t[20] ^ P, Z = t[21] ^ I, X = t[30] ^ P, ie = t[31] ^ I, fe = t[40] ^ P, ye = t[41] ^ I;
    P = n ^ (d << 1 | m >>> 31), I = a ^ (m << 1 | d >>> 31);
    const j = t[2] ^ P, V = t[3] ^ I, ae = t[12] ^ P, _ = t[13] ^ I, u = t[22] ^ P, h = t[23] ^ I, p = t[32] ^ P, y = t[33] ^ I, v = t[42] ^ P, $ = t[43] ^ I;
    P = c ^ (w << 1 | S >>> 31), I = o ^ (S << 1 | w >>> 31);
    const E = t[4] ^ P, x = t[5] ^ I, l = t[14] ^ P, b = t[15] ^ I, M = t[24] ^ P, k = t[25] ^ I, U = t[34] ^ P, T = t[35] ^ I, H = t[44] ^ P, Y = t[45] ^ I;
    P = d ^ (A << 1 | B >>> 31), I = m ^ (B << 1 | A >>> 31);
    const le = t[6] ^ P, ce = t[7] ^ I, de = t[16] ^ P, ue = t[17] ^ I, re = t[26] ^ P, ge = t[27] ^ I, Ae = t[36] ^ P, xe = t[37] ^ I, Ee = t[46] ^ P, at = t[47] ^ I;
    P = w ^ (n << 1 | a >>> 31), I = S ^ (a << 1 | n >>> 31);
    const Re = t[8] ^ P, ve = t[9] ^ I, xt = t[18] ^ P, Ne = t[19] ^ I, qe = t[28] ^ P, wt = t[29] ^ I, Te = t[38] ^ P, De = t[39] ^ I, vt = t[48] ^ P, ke = t[49] ^ I, Ue = O, $t = L, ee = z << 4 | C >>> 28, F = C << 4 | z >>> 28, J = q << 3 | Z >>> 29, oe = Z << 3 | q >>> 29, he = ie << 9 | X >>> 23, Se = X << 9 | ie >>> 23, me = fe << 18 | ye >>> 14, Be = ye << 18 | fe >>> 14, gt = j << 1 | V >>> 31, Me = V << 1 | j >>> 31, Oe = _ << 12 | ae >>> 20, ht = ae << 12 | _ >>> 20, He = u << 10 | h >>> 22, Ge = h << 10 | u >>> 22, _t = y << 13 | p >>> 19, Le = p << 13 | y >>> 19, Ke = v << 2 | $ >>> 30, Et = $ << 2 | v >>> 30, Fe = x << 30 | E >>> 2, ze = E << 30 | x >>> 2, At = l << 6 | b >>> 26, Pe = b << 6 | l >>> 26, je = k << 11 | M >>> 21, Q = M << 11 | k >>> 21, te = U << 15 | T >>> 17, ne = T << 15 | U >>> 17, D = Y << 29 | H >>> 3, se = H << 29 | Y >>> 3, pe = le << 28 | ce >>> 4, $e = ce << 28 | le >>> 4, be = ue << 23 | de >>> 9, _e = de << 23 | ue >>> 9, Je = re << 25 | ge >>> 7, We = ge << 25 | re >>> 7, bt = Ae << 21 | xe >>> 11, Ye = xe << 21 | Ae >>> 11, ot = at << 24 | Ee >>> 8, ct = Ee << 24 | at >>> 8, lt = Re << 27 | ve >>> 5, mt = ve << 27 | Re >>> 5, dt = xt << 20 | Ne >>> 12, yt = Ne << 20 | xt >>> 12, pt = wt << 7 | qe >>> 25, tt = qe << 7 | wt >>> 25, st = Te << 8 | De >>> 24, Qe = De << 8 | Te >>> 24, rt = vt << 14 | ke >>> 18, it = ke << 14 | vt >>> 18;
    t[0] = Ue ^ ~Oe & je, t[1] = $t ^ ~ht & Q, t[10] = pe ^ ~dt & J, t[11] = $e ^ ~yt & oe, t[20] = gt ^ ~At & Je, t[21] = Me ^ ~Pe & We, t[30] = lt ^ ~ee & He, t[31] = mt ^ ~F & Ge, t[40] = Fe ^ ~be & pt, t[41] = ze ^ ~_e & tt, t[2] = Oe ^ ~je & bt, t[3] = ht ^ ~Q & Ye, t[12] = dt ^ ~J & _t, t[13] = yt ^ ~oe & Le, t[22] = At ^ ~Je & st, t[23] = Pe ^ ~We & Qe, t[32] = ee ^ ~He & te, t[33] = F ^ ~Ge & ne, t[42] = be ^ ~pt & he, t[43] = _e ^ ~tt & Se, t[4] = je ^ ~bt & rt, t[5] = Q ^ ~Ye & it, t[14] = J ^ ~_t & D, t[15] = oe ^ ~Le & se, t[24] = Je ^ ~st & me, t[25] = We ^ ~Qe & Be, t[34] = He ^ ~te & ot, t[35] = Ge ^ ~ne & ct, t[44] = pt ^ ~he & Ke, t[45] = tt ^ ~Se & Et, t[6] = bt ^ ~rt & Ue, t[7] = Ye ^ ~it & $t, t[16] = _t ^ ~D & pe, t[17] = Le ^ ~se & $e, t[26] = st ^ ~me & gt, t[27] = Qe ^ ~Be & Me, t[36] = te ^ ~ot & lt, t[37] = ne ^ ~ct & mt, t[46] = he ^ ~Ke & Fe, t[47] = Se ^ ~Et & ze, t[8] = rt ^ ~Ue & Oe, t[9] = it ^ ~$t & ht, t[18] = D ^ ~pe & dt, t[19] = se ^ ~$e & yt, t[28] = me ^ ~gt & At, t[29] = Be ^ ~Me & Pe, t[38] = ot ^ ~lt & ee, t[39] = ct ^ ~mt & F, t[48] = Ke ^ ~Fe & be, t[49] = Et ^ ~ze & _e, t[0] ^= P1600_ROUND_CONSTANTS[e * 2], t[1] ^= P1600_ROUND_CONSTANTS[e * 2 + 1];
  }
};
const keccakState = keccakStateUnroll;
function Keccak$1() {
  this.state = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  ], this.blockSize = null, this.count = 0, this.squeezing = !1;
}
Keccak$1.prototype.initialize = function(t, e) {
  for (let n = 0; n < 50; ++n)
    this.state[n] = 0;
  this.blockSize = t / 8, this.count = 0, this.squeezing = !1;
};
Keccak$1.prototype.absorb = function(t) {
  for (let e = 0; e < t.length; ++e)
    this.state[~~(this.count / 4)] ^= t[e] << 8 * (this.count % 4), this.count += 1, this.count === this.blockSize && (keccakState.p1600(this.state), this.count = 0);
};
Keccak$1.prototype.absorbLastFewBits = function(t) {
  this.state[~~(this.count / 4)] ^= t << 8 * (this.count % 4), t & 128 && this.count === this.blockSize - 1 && keccakState.p1600(this.state), this.state[~~((this.blockSize - 1) / 4)] ^= 128 << 8 * ((this.blockSize - 1) % 4), keccakState.p1600(this.state), this.count = 0, this.squeezing = !0;
};
Keccak$1.prototype.squeeze = function(t) {
  this.squeezing || this.absorbLastFewBits(1);
  const e = Buffer$F.alloc(t);
  for (let n = 0; n < t; ++n)
    e[n] = this.state[~~(this.count / 4)] >>> 8 * (this.count % 4) & 255, this.count += 1, this.count === this.blockSize && (keccakState.p1600(this.state), this.count = 0);
  return e;
};
Keccak$1.prototype.copy = function(t) {
  for (let e = 0; e < 50; ++e)
    t.state[e] = this.state[e];
  t.blockSize = this.blockSize, t.count = this.count, t.squeezing = this.squeezing;
};
var keccak = Keccak$1, js = api(keccak);
const createKeccakHash = /* @__PURE__ */ getDefaultExportFromCjs$2(js);
function keccak256(t) {
  return t = toBuffer$1(t), createKeccakHash("keccak256").update(t).digest();
}
function toBuffer$1(t) {
  if (!Buffer$1$1.isBuffer(t))
    if (Array.isArray(t))
      t = Buffer$1$1.from(t);
    else if (typeof t == "string")
      isHexString(t) ? t = Buffer$1$1.from(padToEven(stripHexPrefix(t)), "hex") : t = Buffer$1$1.from(t);
    else if (typeof t == "number")
      t = intToBuffer(t);
    else if (t == null)
      t = Buffer$1$1.allocUnsafe(0);
    else if (BN$d.isBN(t))
      t = t.toArrayLike(Buffer$1$1);
    else if (t.toArray)
      t = Buffer$1$1.from(t.toArray());
    else
      throw new Error("invalid type");
  return t;
}
function isHexString(t, e) {
  return !(typeof t != "string" || !t.match(/^0x[0-9A-Fa-f]*$/) || e && t.length !== 2 + 2 * e);
}
function padToEven(t) {
  if (typeof t != "string")
    throw new Error(`while padding to even, value must be string, is currently ${typeof t}, while padToEven.`);
  return t.length % 2 && (t = `0${t}`), t;
}
function stripHexPrefix(t) {
  return typeof t != "string" ? t : isHexPrefixed(t) ? t.slice(2) : t;
}
function isHexPrefixed(t) {
  if (typeof t != "string")
    throw new Error("value must be type 'string', is currently type " + typeof t + ", while checking isHexPrefixed.");
  return t.startsWith("0x");
}
function intToBuffer(t) {
  const e = intToHex(t);
  return Buffer$1$1.from(padToEven(e.slice(2)), "hex");
}
function intToHex(t) {
  return `0x${t.toString(16)}`;
}
typeof window < "u" && (window.keccak256 = keccak256);
const exportForTesting = {
  intToBuffer,
  intToHex,
  isHexPrefixed,
  stripHexPrefix,
  padToEven,
  isHexString,
  toBuffer: toBuffer$1
};
class Secp256k1 {
  _key;
  ownerLength = SIG_CONFIG[SignatureConfig.ETHEREUM].pubLength;
  signatureLength = SIG_CONFIG[SignatureConfig.ETHEREUM].sigLength;
  signatureType = SignatureConfig.ETHEREUM;
  pk;
  constructor(e, n) {
    this._key = e, this.pk = n.toString("hex");
  }
  get publicKey() {
    throw new Error("You must implement `publicKey`");
  }
  get key() {
    return Buffer$F.from(this._key, "hex");
  }
  static async verify(e, n, a) {
    let c = e;
    typeof e == "string" && (c = base64url.toBuffer(e));
    let o = !1;
    try {
      o = secp256k1$1.ecdsaVerify(a, keccak256(Buffer$F.from(n)), c);
    } catch {
    }
    return o;
  }
  async sign(e) {
    return secp256k1$1.ecdsaSign(keccak256(Buffer$F.from(e)), Buffer$F.from(this.key)).signature;
  }
}
class EthereumSigner extends Secp256k1 {
  get publicKey() {
    return Buffer$F.from(this.pk, "hex");
  }
  constructor(e) {
    e.startsWith("0x") && (e = e.slice(2));
    const n = Buffer$F.from(e, "hex"), a = secp256k1$1.publicKeyCreate(n, !1);
    super(e, Buffer$F.from(a));
  }
  async sign(e) {
    return new Wallet$1(this._key).signMessage(e).then((a) => Buffer$F.from(a.slice(2), "hex"));
  }
  static async verify(e, n, a) {
    return secp256k1$1.ecdsaVerify(a.length === 65 ? a.slice(0, -1) : a, arrayify(hashMessage(n)), typeof e == "string" ? base64url.toBuffer(e) : e);
  }
}
class PolygonSigner extends EthereumSigner {
}
class NearSigner extends SolanaSigner {
  constructor(e) {
    super(e.replace("ed25519:", ""));
  }
}
class AlgorandSigner extends Curve25519 {
  get publicKey() {
    return Buffer$F.from(this.pk);
  }
  get key() {
    return Buffer$F.from(this._key);
  }
  constructor(e, n) {
    super(e.subarray(0, 32), n);
  }
}
let HexSolanaSigner$1 = class extends InjectedSolanaSigner {
  signatureType = 4;
  // for solana sig type
  constructor(e) {
    super(e);
  }
  async sign(e) {
    return super.sign(Buffer$F.from(Buffer$F.from(e).toString("hex")));
  }
  static async verify(e, n, a) {
    return super.verify(e, Buffer$F.from(Buffer$F.from(n).toString("hex")), a);
  }
};
class HexSolanaSigner extends SolanaSigner {
  signatureType = 4;
  // for solana sig type
  constructor(e) {
    super(e);
  }
  async sign(e) {
    return super.sign(Buffer$F.from(Buffer$F.from(e).toString("hex")));
  }
  static async verify(e, n, a) {
    return super.verify(e, Buffer$F.from(Buffer$F.from(n).toString("hex")), a);
  }
}
class AptosSigner extends Curve25519 {
  constructor(e, n) {
    super(e, n);
  }
  get publicKey() {
    return Buffer$F.from(this.pk.slice(2), "hex");
  }
  get key() {
    return Buffer$F.from(this._key.slice(2), "hex");
  }
}
class InjectedAptosSigner {
  _publicKey;
  ownerLength = SIG_CONFIG[SignatureConfig.INJECTEDAPTOS].pubLength;
  signatureLength = SIG_CONFIG[SignatureConfig.INJECTEDAPTOS].sigLength;
  signatureType = SignatureConfig.INJECTEDAPTOS;
  pem;
  provider;
  constructor(e, n) {
    this.provider = e, this._publicKey = n;
  }
  get publicKey() {
    return this._publicKey;
  }
  /**
   * signMessage constructs a message and then signs it.
   * the format is "APTOS(\n)
   * message: <hexString>(\n)
   * nonce: bundlr"
   */
  async sign(e) {
    if (!this.provider.signMessage)
      throw new Error("Selected Wallet does not support message signing");
    const n = await this.provider.signMessage({
      message: Buffer$F.from(e).toString("hex"),
      nonce: "bundlr"
    });
    return Buffer$F.from(n.signature, "hex");
  }
  static async verify(e, n, a) {
    const c = e;
    return verify$1(
      Buffer$F.from(a),
      Buffer$F.from(`APTOS
message: ${Buffer$F.from(n).toString("hex")}
nonce: bundlr`),
      // see comment above sign
      Buffer$F.from(c)
    );
  }
}
class MultiSignatureAptosSigner {
  _publicKey;
  ownerLength = SIG_CONFIG[SignatureConfig.MULTIAPTOS].pubLength;
  signatureLength = SIG_CONFIG[SignatureConfig.MULTIAPTOS].sigLength;
  signatureType = SignatureConfig.MULTIAPTOS;
  collectSignatures;
  provider;
  constructor(e, n) {
    this._publicKey = e, this.collectSignatures = n;
  }
  get publicKey() {
    return this._publicKey;
  }
  async sign(e) {
    const { signatures: n, bitmap: a } = await this.collectSignatures(e), c = 128, o = new Uint8Array([0, 0, 0, 0]), d = /* @__PURE__ */ new Set();
    a.forEach((S) => {
      if (S >= 32)
        throw new Error(`Invalid bit value ${S}.`);
      if (d.has(S))
        throw new Error("Duplicated bits detected.");
      d.add(S);
      const A = Math.floor(S / 8);
      let B = o[A];
      B |= c >> S % 8, o[A] = B;
    });
    const m = Buffer$F.alloc(this.signatureLength);
    let w = 0;
    for (let S = 0; S < 32; S++)
      a.includes(S) && m.set(n[w++], S * 64);
    return m.set(o, this.signatureLength - 4), m;
  }
  static async verify(e, n, a) {
    const o = SIG_CONFIG[SignatureConfig.MULTIAPTOS].sigLength - 4, d = a.slice(0, o), m = a.slice(o);
    let w = !1;
    for (let S = 0; S < 32; S++) {
      const A = Math.floor(S / 8), B = S - A * 8;
      if ((m[A] & 128 >> B) !== 0) {
        const I = d.slice(S * 64, (S + 1) * 64), O = e.slice(S * 32, (S + 1) * 32);
        await verify$1(Buffer$F.from(I), Buffer$F.from(n), Buffer$F.from(O)) || (w = !0);
      }
    }
    return !w;
  }
}
class TypedEthereumSigner extends EthereumSigner {
  ownerLength = SIG_CONFIG[SignatureConfig.TYPEDETHEREUM].pubLength;
  signatureLength = SIG_CONFIG[SignatureConfig.TYPEDETHEREUM].sigLength;
  signatureType = SignatureConfig.TYPEDETHEREUM;
  address;
  signer;
  constructor(e) {
    super(e), this.address = "0x" + keccak256(super.publicKey.slice(1)).slice(-20).toString("hex"), this.signer = new Wallet$1(e);
  }
  get publicKey() {
    return Buffer$F.from(this.address);
  }
  async sign(e) {
    const n = await this.signer._signTypedData(domain, types, {
      address: this.address,
      "Transaction hash": e
    });
    return Buffer$F.from(n.slice(2), "hex");
  }
  static async verify(e, n, a) {
    const c = e.toString(), o = verifyTypedData(domain, types, { address: c, "Transaction hash": n }, a);
    return c.toLowerCase() === o.toLowerCase();
  }
}
const domain = {
  name: "Bundlr",
  version: "1"
}, types = {
  Bundlr: [
    { name: "Transaction hash", type: "bytes" },
    { name: "address", type: "address" }
  ]
};
class InjectedTypedEthereumSigner {
  ownerLength = SIG_CONFIG[SignatureConfig.TYPEDETHEREUM].pubLength;
  signatureLength = SIG_CONFIG[SignatureConfig.TYPEDETHEREUM].sigLength;
  signatureType = SignatureConfig.TYPEDETHEREUM;
  address;
  signer;
  publicKey;
  constructor(e) {
    this.signer = e.getSigner();
  }
  async ready() {
    this.address = (await this.signer.getAddress()).toString().toLowerCase(), this.publicKey = Buffer$F.from(this.address);
  }
  async sign(e) {
    const n = await this.signer._signTypedData(domain, types, {
      address: this.address,
      "Transaction hash": e
    });
    return Buffer$F.from(n.slice(2), "hex");
  }
  static verify(e, n, a) {
    const c = e.toString(), o = verifyTypedData(domain, types, { address: c, "Transaction hash": n }, a);
    return c.toLowerCase() === o.toLowerCase();
  }
}
class InjectedArweaveSigner {
  signer;
  publicKey;
  ownerLength = SIG_CONFIG[SignatureConfig.ARWEAVE].pubLength;
  signatureLength = SIG_CONFIG[SignatureConfig.ARWEAVE].sigLength;
  signatureType = SignatureConfig.ARWEAVE;
  arweave;
  constructor(e, n) {
    this.signer = e, this.arweave = n;
  }
  async setPublicKey() {
    const e = await this.signer.getActivePublicKey();
    this.publicKey = base64url.toBuffer(e);
  }
  async sign(e) {
    this.publicKey || await this.setPublicKey();
    const n = {
      name: "RSA-PSS",
      saltLength: 32
    }, a = await this.signer.signature(e, n);
    return new Uint8Array(Object.values(a).map((o) => +o));
  }
  static async verify(e, n, a) {
    return await getCryptoDriver().verify(e, n, a);
  }
}
const indexToType = {
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-expect-error
  1: ArweaveSigner,
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-expect-error
  2: Curve25519,
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-expect-error
  3: EthereumSigner,
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-expect-error
  4: HexSolanaSigner$1,
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-expect-error
  5: InjectedAptosSigner,
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-expect-error
  6: MultiSignatureAptosSigner,
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-expect-error
  7: TypedEthereumSigner
};
async function getSignatureData(t) {
  return deepHash([
    stringToBuffer("dataitem"),
    stringToBuffer("1"),
    stringToBuffer(t.signatureType.toString()),
    t.rawOwner,
    t.rawTarget,
    t.rawAnchor,
    t.rawTags,
    t.rawData
  ]);
}
function longToNByteArray(t, e) {
  const n = new Uint8Array(t);
  if (e < 0)
    throw new Error("Array is unsigned, cannot represent -ve numbers");
  if (e > 2 ** (t * 8) - 1)
    throw new Error(`Number ${e} is too large for an array of ${t} bytes`);
  for (let a = 0; a < n.length; a++) {
    const c = e & 255;
    n[a] = c, e = (e - c) / 256;
  }
  return n;
}
function longTo8ByteArray(t) {
  return longToNByteArray(8, t);
}
function shortTo2ByteArray(t) {
  return longToNByteArray(2, t);
}
function longTo16ByteArray(t) {
  return longToNByteArray(16, t);
}
function longTo32ByteArray(t) {
  return longToNByteArray(32, t);
}
function byteArrayToLong(t) {
  let e = 0;
  for (let n = t.length - 1; n >= 0; n--)
    e = e * 256 + t[n];
  return e;
}
class AVSCTap {
  buf;
  pos;
  constructor(e = Buffer$F.alloc(MAX_TAG_BYTES), n = 0) {
    this.buf = e, this.pos = n;
  }
  writeTags(e) {
    if (!Array.isArray(e))
      throw new Error("input must be array");
    const n = e.length;
    let a;
    if (n)
      for (this.writeLong(n), a = 0; a < n; a++) {
        const c = e[a];
        if (typeof c?.name != "string" || typeof c?.value != "string")
          throw new Error(`Invalid tag format for ${c}, expected {name:string, value: string}`);
        this.writeString(c.name), this.writeString(c.value);
      }
    this.writeLong(0);
  }
  toBuffer() {
    const e = Buffer$F.alloc(this.pos);
    if (this.pos > this.buf.length)
      throw new Error(`Too many tag bytes (${this.pos} > ${this.buf.length})`);
    return this.buf.copy(e, 0, 0, this.pos), e;
  }
  writeLong(e) {
    const n = this.buf;
    let a, c;
    if (e >= -1073741824 && e < 1073741824) {
      c = e >= 0 ? e << 1 : ~e << 1 | 1;
      do
        n[this.pos] = c & 127, c >>= 7;
      while (c && (n[this.pos++] |= 128));
    } else {
      a = e >= 0 ? e * 2 : -e * 2 - 1;
      do
        n[this.pos] = a & 127, a /= 128;
      while (a >= 1 && (n[this.pos++] |= 128));
    }
    this.pos++, this.buf = n;
  }
  // for some reason using setters/getters with ++ doesn't work right.
  // set pos(newPos: number) {
  //   const d = newPos + 1 - this.buf.length;
  //   if (d > 0) this.buf = Buffer.concat([this.buf, Buffer.alloc(d)]);
  //   this._pos = newPos;
  // }
  // get pos(): number {
  //   return this._pos;
  // }
  // protected safeRead(position): number {
  //   return position > this.buf.length ? 0 : this.buf[position];
  // }
  // protected safeWrite(position, value): Buffer {
  //   if (position > this.buf.length) this.buf = Buffer.concat([this.buf, Buffer.alloc(1)]);
  //   this.buf[position] = value;
  //   return this.buf;
  // }
  writeString(e) {
    const n = Buffer$F.byteLength(e), a = this.buf;
    this.writeLong(n);
    let c = this.pos;
    if (this.pos += n, !(this.pos > a.length)) {
      if (n > 64)
        this.buf.write(e, this.pos - n, n, "utf8");
      else {
        let o, d, m, w;
        for (o = 0, d = n; o < d; o++)
          m = e.charCodeAt(o), m < 128 ? a[c++] = m : m < 2048 ? (a[c++] = m >> 6 | 192, a[c++] = m & 63 | 128) : (m & 64512) === 55296 && ((w = e.charCodeAt(o + 1)) & 64512) === 56320 ? (m = 65536 + ((m & 1023) << 10) + (w & 1023), o++, a[c++] = m >> 18 | 240, a[c++] = m >> 12 & 63 | 128, a[c++] = m >> 6 & 63 | 128, a[c++] = m & 63 | 128) : (a[c++] = m >> 12 | 224, a[c++] = m >> 6 & 63 | 128, a[c++] = m & 63 | 128);
      }
      this.buf = a;
    }
  }
  readLong() {
    let e = 0, n = 0;
    const a = this.buf;
    let c, o, d, m;
    do
      c = a[this.pos++], o = c & 128, e |= (c & 127) << n, n += 7;
    while (o && n < 28);
    if (o) {
      d = e, m = 268435456;
      do
        c = a[this.pos++], d += (c & 127) * m, m *= 128;
      while (c & 128);
      return (d % 2 ? -(d + 1) : d) / 2;
    }
    return e >> 1 ^ -(e & 1);
  }
  skipLong() {
    const e = this.buf;
    for (; e[this.pos++] & 128; )
      ;
  }
  readTags() {
    const e = [];
    let n;
    for (; n = this.readLong(); )
      for (n < 0 && (n = -n, this.skipLong()); n--; ) {
        const a = this.readString(), c = this.readString();
        e.push(
          /* items._read(tap) */
          { name: a, value: c }
        );
      }
    return e;
  }
  readString() {
    const e = this.readLong(), n = this.pos, a = this.buf;
    if (this.pos += e, this.pos > a.length)
      throw new Error("TAP Position out of range");
    return this.buf.slice(n, n + e).toString();
  }
}
function serializeTags(t) {
  if (t?.length === 0)
    return Buffer$F.allocUnsafe(0);
  const e = new AVSCTap();
  return e.writeTags(t), e.toBuffer();
}
function deserializeTags(t) {
  return new AVSCTap(t).readTags();
}
const MIN_BINARY_SIZE = 80, MAX_TAG_BYTES = 4096;
class DataItem {
  binary;
  _id;
  constructor(e) {
    this.binary = e;
  }
  static isDataItem(e) {
    return e.binary !== void 0;
  }
  get signatureType() {
    const e = byteArrayToLong(this.binary.subarray(0, 2));
    if (SignatureConfig?.[e] !== void 0)
      return e;
    throw new Error("Unknown signature type: " + e);
  }
  async isValid() {
    return DataItem.verify(this.binary);
  }
  get id() {
    return base64url.encode(this.rawId);
  }
  set id(e) {
    this._id = base64url.toBuffer(e);
  }
  get rawId() {
    return cryptoBrowserifyExports.createHash("sha256").update(this.rawSignature).digest();
  }
  set rawId(e) {
    this._id = e;
  }
  get rawSignature() {
    return this.binary.subarray(2, 2 + this.signatureLength);
  }
  get signature() {
    return base64url.encode(this.rawSignature);
  }
  set rawOwner(e) {
    if (e.byteLength != this.ownerLength)
      throw new Error(`Expected raw owner (pubkey) to be ${this.ownerLength} bytes, got ${e.byteLength} bytes.`);
    this.binary.set(e, 2 + this.signatureLength);
  }
  get rawOwner() {
    return this.binary.subarray(2 + this.signatureLength, 2 + this.signatureLength + this.ownerLength);
  }
  get signatureLength() {
    return SIG_CONFIG[this.signatureType].sigLength;
  }
  get owner() {
    return base64url.encode(this.rawOwner);
  }
  get ownerLength() {
    return SIG_CONFIG[this.signatureType].pubLength;
  }
  get rawTarget() {
    const e = this.getTargetStart();
    return this.binary[e] == 1 ? this.binary.subarray(e + 1, e + 33) : Buffer$1$1.alloc(0);
  }
  get target() {
    return base64url.encode(this.rawTarget);
  }
  get rawAnchor() {
    const e = this.getAnchorStart();
    return this.binary[e] == 1 ? this.binary.subarray(e + 1, e + 33) : Buffer$1$1.alloc(0);
  }
  get anchor() {
    return this.rawAnchor.toString();
  }
  get rawTags() {
    const e = this.getTagsStart(), n = byteArrayToLong(this.binary.subarray(e + 8, e + 16));
    return this.binary.subarray(e + 16, e + 16 + n);
  }
  get tags() {
    const e = this.getTagsStart();
    if (byteArrayToLong(this.binary.subarray(e, e + 8)) == 0)
      return [];
    const a = byteArrayToLong(this.binary.subarray(e + 8, e + 16));
    return deserializeTags(Buffer$1$1.from(this.binary.subarray(e + 16, e + 16 + a)));
  }
  get tagsB64Url() {
    return this.tags.map((n) => ({
      name: base64url.encode(n.name),
      value: base64url.encode(n.value)
    }));
  }
  getStartOfData() {
    const e = this.getTagsStart(), n = this.binary.subarray(e + 8, e + 16), a = byteArrayToLong(n);
    return e + 16 + a;
  }
  get rawData() {
    const e = this.getTagsStart(), n = this.binary.subarray(e + 8, e + 16), a = byteArrayToLong(n), c = e + 16 + a;
    return this.binary.subarray(c, this.binary.length);
  }
  get data() {
    return base64url.encode(this.rawData);
  }
  /**
   * UNSAFE!!
   * DO NOT MUTATE THE BINARY ARRAY. THIS WILL CAUSE UNDEFINED BEHAVIOUR.
   */
  getRaw() {
    return this.binary;
  }
  async sign(e) {
    return this._id = await sign$2(this, e), this.rawId;
  }
  async setSignature(e) {
    this.binary.set(e, 2), this._id = Buffer$1$1.from(await getCryptoDriver().hash(e));
  }
  isSigned() {
    return (this._id?.length ?? 0) > 0;
  }
  /**
   * Returns a JSON representation of a DataItem
   */
  // eslint-disable-next-line @typescript-eslint/naming-convention
  toJSON() {
    return {
      signature: this.signature,
      owner: this.owner,
      target: this.target,
      tags: this.tags.map((e) => ({
        name: base64url.encode(e.name),
        value: base64url.encode(e.value)
      })),
      data: this.data
    };
  }
  /**
   * Verifies a `Buffer` and checks it fits the format of a DataItem
   *
   * A binary is valid iff:
   * - the tags are encoded correctly
   */
  static async verify(e) {
    if (e.byteLength < MIN_BINARY_SIZE)
      return !1;
    const n = new DataItem(e), a = n.signatureType, c = n.getTagsStart(), o = byteArrayToLong(e.subarray(c, c + 8)), d = e.subarray(c + 8, c + 16), m = byteArrayToLong(d);
    if (m > MAX_TAG_BYTES)
      return !1;
    if (o > 0)
      try {
        if (deserializeTags(Buffer$1$1.from(e.subarray(c + 16, c + 16 + m))).length !== o)
          return !1;
      } catch {
        return !1;
      }
    const w = indexToType[a], S = await getSignatureData(n);
    return await w.verify(n.rawOwner, S, n.rawSignature);
  }
  async getSignatureData() {
    return getSignatureData(this);
  }
  /**
   * Returns the start byte of the tags section (number of tags)
   *
   * @private
   */
  getTagsStart() {
    const e = this.getTargetStart(), n = this.binary[e] == 1;
    let a = e + (n ? 33 : 1);
    const c = this.binary[a] == 1;
    return a += c ? 33 : 1, a;
  }
  /**
   * Returns the start byte of the tags section (number of tags)
   *
   * @private
   */
  getTargetStart() {
    return 2 + this.signatureLength + this.ownerLength;
  }
  /**
   * Returns the start byte of the tags section (number of tags)
   *
   * @private
   */
  getAnchorStart() {
    let e = this.getTargetStart() + 1;
    const n = this.binary[this.getTargetStart()] == 1;
    return e += n ? 32 : 0, e;
  }
}
const HEADER_START = 32;
class Bundle {
  length;
  items;
  binary;
  constructor(e) {
    this.binary = e, this.length = this.getDataItemCount(), this.items = this.getItems();
  }
  getRaw() {
    return this.binary;
  }
  /**
   * Get a DataItem by index (`number`) or by txId (`string`)
   * @param index
   */
  get(e) {
    if (typeof e == "number") {
      if (e >= this.length)
        throw new RangeError("Index out of range");
      return this.getByIndex(e);
    } else
      return this.getById(e);
  }
  getSizes() {
    const e = [];
    for (let n = HEADER_START; n < HEADER_START + 64 * this.length; n += 64)
      e.push(byteArrayToLong(this.binary.subarray(n, n + 32)));
    return e;
  }
  getIds() {
    const e = [];
    for (let n = HEADER_START; n < HEADER_START + 64 * this.length; n += 64) {
      const a = this.binary.subarray(n + 32, n + 64);
      if (a.length === 0)
        throw new Error("Invalid bundle, id specified in headers doesn't exist");
      e.push(base64url.encode(a));
    }
    return e;
  }
  getIdBy(e) {
    if (e > this.length - 1)
      throw new RangeError("Index of bundle out of range");
    const n = 64 + 64 * e;
    return base64url.encode(this.binary.subarray(n, n + 32));
  }
  async toTransaction(e, n, a) {
    const c = await n.createTransaction({ data: this.binary, ...e }, a);
    return c.addTag("Bundle-Format", "binary"), c.addTag("Bundle-Version", "2.0.0"), c;
  }
  async verify() {
    for (const e of this.items) {
      const n = await e.isValid(), a = base64url(cryptoBrowserifyExports.createHash("sha256").update(e.rawSignature).digest());
      if (!(n && e.id === a))
        return !1;
    }
    return !0;
  }
  getOffset(e) {
    let n = 0;
    for (let a = HEADER_START; a < HEADER_START + 64 * this.length; a += 64) {
      const c = byteArrayToLong(this.binary.subarray(a, a + 32));
      n += c;
      const o = this.binary.subarray(a + 32, a + 64);
      if (Buffer$F.compare(o, e) === 0)
        return { startOffset: n, size: c };
    }
    return { startOffset: -1, size: -1 };
  }
  // TODO: Test this
  /**
   * UNSAFE! Assumes index < length
   * @param index
   * @private
   */
  getByIndex(e) {
    let n = 0;
    const a = this.getBundleStart();
    let c = 0, o, d;
    for (let A = HEADER_START; A < HEADER_START + 64 * this.length; A += 64) {
      if (o = byteArrayToLong(this.binary.subarray(A, A + 32)), c++ === e) {
        d = this.binary.subarray(A + 32, A + 64);
        break;
      }
      n += o;
    }
    const m = a + n, w = this.binary.subarray(m, m + o), S = new DataItem(w);
    return S.rawId = d, S;
  }
  getById(e) {
    const n = base64url.toBuffer(e), a = this.getOffset(n);
    if (a.startOffset === -1)
      throw new Error("Transaction not found");
    const o = this.getBundleStart() + a.startOffset;
    return new DataItem(this.binary.subarray(o, o + a.size));
  }
  getDataItemCount() {
    return byteArrayToLong(this.binary.subarray(0, 32));
  }
  getBundleStart() {
    return 32 + 64 * this.length;
  }
  getItems() {
    const e = new Array(this.length);
    let n = 0;
    const a = this.getBundleStart();
    let c = 0;
    for (let o = HEADER_START; o < HEADER_START + 64 * this.length; o += 64) {
      const d = byteArrayToLong(this.binary.subarray(o, o + 32)), m = this.binary.subarray(o + 32, o + 64);
      if (m.length === 0)
        throw new Error("Invalid bundle, id specified in headers doesn't exist");
      const w = a + n, S = this.binary.subarray(w, w + d);
      n += d;
      const A = new DataItem(S);
      A.rawId = m, e[c] = A, c++;
    }
    return e;
  }
}
function unbundleData(t) {
  return new Bundle(t);
}
async function bundleAndSignData(t, e) {
  const n = new Uint8Array(64 * t.length), a = await Promise.all(t.map(async (o, d) => {
    const m = o.isSigned() ? o.rawId : await sign$2(o, e), w = new Uint8Array(64);
    return w.set(longTo32ByteArray(o.getRaw().byteLength), 0), w.set(m, 32), n.set(w, 64 * d), o.getRaw();
  })).then((o) => Buffer$F.concat(o)), c = Buffer$F.concat([Buffer$F.from(longTo32ByteArray(t.length)), Buffer$F.from(n), a]);
  return new Bundle(c);
}
async function getSignatureAndId(t, e) {
  const n = await getSignatureData(t), a = await e.sign(n), c = await getCryptoDriver().hash(a);
  return { signature: Buffer$F.from(a), id: Buffer$F.from(c) };
}
async function sign$2(t, e) {
  const { signature: n, id: a } = await getSignatureAndId(t, e);
  return t.getRaw().set(n, 2), a;
}
function createData(t, e, n) {
  const a = e.publicKey, c = n?.target ? base64url.toBuffer(n.target) : null, o = 1 + (c?.byteLength ?? 0), d = n?.anchor ? Buffer$F.from(n.anchor) : null, m = 1 + (d?.byteLength ?? 0), w = (n?.tags?.length ?? 0) > 0 ? serializeTags(n?.tags) : null, S = 16 + (w ? w.byteLength : 0), A = Buffer$F.from(t), B = A.byteLength, P = 2 + e.signatureLength + e.ownerLength + o + m + S + B, I = Buffer$F.alloc(P);
  if (I.set(shortTo2ByteArray(e.signatureType), 0), I.set(new Uint8Array(e.signatureLength).fill(0), 2), a.byteLength !== e.ownerLength)
    throw new Error(`Owner must be ${e.ownerLength} bytes, but was incorrectly ${a.byteLength}`);
  I.set(a, 2 + e.signatureLength);
  const O = 2 + e.signatureLength + e.ownerLength;
  if (I[O] = c ? 1 : 0, c) {
    if (c.byteLength !== 32)
      throw new Error(`Target must be 32 bytes but was incorrectly ${c.byteLength}`);
    I.set(c, O + 1);
  }
  const L = O + o;
  let C = L + 1;
  if (I[L] = d ? 1 : 0, d) {
    if (C += d.byteLength, d.byteLength !== 32)
      throw new Error("Anchor must be 32 bytes");
    I.set(d, L + 1);
  }
  I.set(longTo8ByteArray(n?.tags?.length ?? 0), C);
  const z = longTo8ByteArray(w?.byteLength ?? 0);
  I.set(z, C + 8), w && I.set(w, C + 16);
  const q = C + S;
  return I.set(A, q), new DataItem(I);
}
class BundleItem {
  signatureType;
  rawSignature;
  signature;
  signatureLength;
  rawOwner;
  owner;
  ownerLength;
  rawTarget;
  target;
  rawAnchor;
  anchor;
  rawTags;
  tags;
  rawData;
  data;
  static async verify(...e) {
    throw new Error("You must implement `verify`");
  }
}
const arbundlesSrc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  AVSCTap,
  AlgorandSigner,
  AptosSigner,
  ArconnectSigner: InjectedArweaveSigner,
  Arweave,
  ArweaveSigner,
  Bundle,
  BundleItem,
  CryptoDriver,
  Curve25519,
  DataItem,
  EthereumSigner,
  HexInjectedSolanaSigner: HexSolanaSigner$1,
  HexSolanaSigner,
  InjectedAptosSigner,
  InjectedEthereumSigner,
  InjectedSolanaSigner,
  InjectedTypedEthereumSigner,
  MAX_TAG_BYTES,
  MIN_BINARY_SIZE,
  MultiSignatureAptosSigner,
  NearSigner,
  PolygonSigner,
  Rsa4096: Rsa4096Pss,
  SIG_CONFIG,
  get SignatureConfig() {
    return SignatureConfig;
  },
  Signer: Signer$1,
  SolanaSigner,
  TypedEthereumSigner,
  bundleAndSignData,
  byteArrayToLong,
  concatBuffers,
  createData,
  deepHash,
  deserializeTags,
  exportForTesting,
  getCryptoDriver,
  getSignatureAndId,
  indexToType,
  keccak256,
  longTo16ByteArray,
  longTo32ByteArray,
  longTo8ByteArray,
  longToNByteArray,
  secp256k1: Secp256k1,
  serializeTags,
  shortTo2ByteArray,
  sign: sign$2,
  stringToBuffer,
  unbundleData
}, Symbol.toStringTag, { value: "Module" }));
async function processStream(t) {
  const e = getReader(t);
  let n = (await e.next()).value;
  n = await readBytes(e, n, 32);
  const a = byteArrayToLong(n.subarray(0, 32));
  n = n.subarray(32);
  const c = 64 * a;
  n = await readBytes(e, n, c);
  const o = new Array(a);
  for (let w = 0; w < c; w += 64)
    o[w / 64] = [byteArrayToLong(n.subarray(w, w + 32)), base64url(Buffer$F.from(n.subarray(w + 32, w + 64)))];
  n = n.subarray(c);
  let d = 32 + c;
  const m = [];
  for (const [w, S] of o) {
    n = await readBytes(e, n, MIN_BINARY_SIZE), n = await readBytes(e, n, 2);
    const A = byteArrayToLong(n.subarray(0, 2));
    n = n.subarray(2);
    const { sigLength: B, pubLength: P, sigName: I } = SIG_CONFIG[A];
    n = await readBytes(e, n, B);
    const O = n.subarray(0, B);
    n = n.subarray(B), n = await readBytes(e, n, P);
    const L = n.subarray(0, P);
    n = n.subarray(P), n = await readBytes(e, n, 1);
    const C = n[0] === 1;
    C && (n = await readBytes(e, n, 33));
    const z = C ? n.subarray(1, 33) : Buffer$F.allocUnsafe(0);
    n = n.subarray(C ? 33 : 1), n = await readBytes(e, n, 1);
    const q = n[0] === 1;
    q && (n = await readBytes(e, n, 33));
    const Z = q ? n.subarray(1, 33) : Buffer$F.allocUnsafe(0);
    n = n.subarray(q ? 33 : 1), n = await readBytes(e, n, 8);
    const X = byteArrayToLong(n.subarray(0, 8));
    n = n.subarray(8), n = await readBytes(e, n, 8);
    const ie = byteArrayToLong(n.subarray(0, 8));
    n = n.subarray(8), n = await readBytes(e, n, ie);
    const fe = n.subarray(0, ie), ye = X !== 0 && ie !== 0 ? deserializeTags(Buffer$F.from(fe)) : [];
    if (ye.length !== X)
      throw new Error("Tags lengths don't match");
    n = n.subarray(ie);
    const j = new streamBrowserify.Transform();
    j._transform = function(h, p, y) {
      this.push(h), y();
    };
    const V = deepHash([
      stringToBuffer("dataitem"),
      stringToBuffer("1"),
      stringToBuffer(A.toString()),
      L,
      z,
      Z,
      fe,
      j
    ]), ae = 2 + B + P + (C ? 33 : 1) + (q ? 33 : 1) + 16 + ie, _ = w - ae;
    if (n.byteLength > _)
      j.write(n.subarray(0, _)), n = n.subarray(_);
    else {
      let h = n.byteLength;
      for (j.write(n); _ > h; ) {
        if (n = (await e.next()).value, !n)
          throw new Error(`Not enough data bytes  expected: ${_} received: ${h}`);
        h += n.byteLength, h > _ ? j.write(n.subarray(0, n.byteLength - (h - _))) : j.write(n);
      }
      n = n.subarray(n.byteLength - (h - _));
    }
    if (j.end(), S !== base64url(cryptoBrowserifyExports.createHash("sha256").update(O).digest()))
      throw new Error("ID doesn't match signature");
    if (!await indexToType[A].verify(L, await V, O))
      throw new Error("Invalid signature");
    m.push({
      id: S,
      sigName: I,
      signature: base64url(Buffer$F.from(O)),
      target: base64url(Buffer$F.from(z)),
      anchor: base64url(Buffer$F.from(Z)),
      owner: base64url(Buffer$F.from(L)),
      tags: ye,
      dataOffset: d + ae,
      dataSize: _
    }), d += ae + _;
  }
  return m;
}
async function streamSigner(t, e, n, a) {
  const c = createData("", n, a), o = new streamBrowserify.PassThrough(), d = [
    stringToBuffer("dataitem"),
    stringToBuffer("1"),
    stringToBuffer(c.signatureType.toString()),
    c.rawOwner,
    c.rawTarget,
    c.rawAnchor,
    c.rawTags,
    t
  ], m = await deepHash(d), w = Buffer$F.from(await n.sign(m));
  return c.setSignature(w), o.write(c.getRaw()), e.pipe(o);
}
async function readBytes(t, e, n) {
  if (e.byteLength >= n)
    return e;
  const { done: a, value: c } = await t.next();
  if (a && !c)
    throw new Error("Invalid buffer");
  return readBytes(t, Buffer$F.concat([Buffer$F.from(e), Buffer$F.from(c)]), n);
}
async function* getReader(t) {
  for await (const e of t)
    yield e;
}
const streamExportForTesting = {
  readBytes,
  getReader
}, stream = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: processStream,
  processStream,
  streamExportForTesting,
  streamSigner
}, Symbol.toStringTag, { value: "Module" })), expObj = { ...arbundlesSrc, stream };
globalThis.arbundles ??= expObj;
const arbundles = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Arweave,
  DataItem,
  bundleAndSignData,
  createData,
  deepHash,
  getCryptoDriver,
  stringToBuffer
}, Symbol.toStringTag, { value: "Module" }));
var dist = {}, promisePool = {}, promisePoolExecutor = {}, promisePoolError = {};
Object.defineProperty(promisePoolError, "__esModule", { value: !0 });
promisePoolError.PromisePoolError = void 0;
class PromisePoolError extends Error {
  /**
   * Create a new instance for the given `message` and `item`.
   *
   * @param error  The original error
   * @param item   The item causing the error
   */
  constructor(e, n) {
    super(), this.raw = e, this.item = n, this.name = this.constructor.name, this.message = this.messageFrom(e), Error.captureStackTrace && typeof Error.captureStackTrace == "function" && Error.captureStackTrace(this, this.constructor);
  }
  /**
   * Returns a new promise pool error instance wrapping the `error` and `item`.
   *
   * @param {*} error
   * @param {*} item
   *
   * @returns {PromisePoolError}
   */
  static createFrom(e, n) {
    return new this(e, n);
  }
  /**
   * Returns the error message from the given `error`.
   *
   * @param {*} error
   *
   * @returns {String}
   */
  messageFrom(e) {
    return e instanceof Error || typeof e == "object" ? e.message : typeof e == "string" || typeof e == "number" ? e.toString() : "";
  }
}
promisePoolError.PromisePoolError = PromisePoolError;
var stopThePromisePoolError = {};
Object.defineProperty(stopThePromisePoolError, "__esModule", { value: !0 });
stopThePromisePoolError.StopThePromisePoolError = void 0;
class StopThePromisePoolError extends Error {
}
stopThePromisePoolError.StopThePromisePoolError = StopThePromisePoolError;
var validationError = {};
Object.defineProperty(validationError, "__esModule", { value: !0 });
validationError.ValidationError = void 0;
class ValidationError extends Error {
  /**
   * Create a new instance for the given `message`.
   *
   * @param message  The error message
   */
  constructor(e) {
    super(e), Error.captureStackTrace && typeof Error.captureStackTrace == "function" && Error.captureStackTrace(this, this.constructor);
  }
  /**
   * Returns a validation error with the given `message`.
   */
  static createFrom(e) {
    return new this(e);
  }
}
validationError.ValidationError = ValidationError;
var hasRequiredPromisePoolExecutor;
function requirePromisePoolExecutor() {
  if (hasRequiredPromisePoolExecutor)
    return promisePoolExecutor;
  hasRequiredPromisePoolExecutor = 1, Object.defineProperty(promisePoolExecutor, "__esModule", { value: !0 }), promisePoolExecutor.PromisePoolExecutor = void 0;
  const t = requirePromisePool(), e = promisePoolError, n = stopThePromisePoolError, a = validationError;
  class c {
    /**
     * Creates a new promise pool executer instance with a default concurrency of 10.
     */
    constructor() {
      this.meta = {
        tasks: [],
        items: [],
        errors: [],
        results: [],
        stopped: !1,
        concurrency: 10,
        shouldResultsCorrespond: !1,
        processedItems: [],
        taskTimeout: 0
      }, this.handler = () => {
      }, this.errorHandler = void 0, this.onTaskStartedHandlers = [], this.onTaskFinishedHandlers = [];
    }
    /**
     * Set the number of tasks to process concurrently the promise pool.
     *
     * @param {Integer} concurrency
     *
     * @returns {PromisePoolExecutor}
     */
    useConcurrency(d) {
      if (!this.isValidConcurrency(d))
        throw a.ValidationError.createFrom(`"concurrency" must be a number, 1 or up. Received "${d}" (${typeof d})`);
      return this.meta.concurrency = d, this;
    }
    /**
     * Determine whether the given `concurrency` value is valid.
     *
     * @param {Number} concurrency
     *
     * @returns {Boolean}
     */
    isValidConcurrency(d) {
      return typeof d == "number" && d >= 1;
    }
    /**
     * Set the timeout in ms for the pool handler
     *
     * @param {Number} timeout
     *
     * @returns {PromisePool}
     */
    withTaskTimeout(d) {
      return this.meta.taskTimeout = d, this;
    }
    /**
     * Returns the number of concurrently processed tasks.
     *
     * @returns {Number}
     */
    concurrency() {
      return this.meta.concurrency;
    }
    /**
     * Assign whether to keep corresponding results between source items and resulting tasks.
     */
    useCorrespondingResults(d) {
      return this.meta.shouldResultsCorrespond = d, this;
    }
    /**
     * Determine whether to keep corresponding results between source items and resulting tasks.
     */
    shouldUseCorrespondingResults() {
      return this.meta.shouldResultsCorrespond;
    }
    /**
     * Returns the task timeout in milliseconds.
     */
    taskTimeout() {
      return this.meta.taskTimeout;
    }
    /**
     * Set the items to be processed in the promise pool.
     *
     * @param {Array} items
     *
     * @returns {PromisePoolExecutor}
     */
    for(d) {
      return this.meta.items = d, this;
    }
    /**
     * Returns the list of items to process.
     *
     * @returns {T[] | Iterable<T> | AsyncIterable<T>}
     */
    items() {
      return this.meta.items;
    }
    /**
     * Returns the number of items to process, or `NaN` if items are not an array.
     *
     * @returns {Number}
     */
    itemsCount() {
      const d = this.items();
      return Array.isArray(d) ? d.length : NaN;
    }
    /**
     * Returns the list of active tasks.
     *
     * @returns {Array}
     */
    tasks() {
      return this.meta.tasks;
    }
    /**
     * Returns the number of currently active tasks.
     *
     * @returns {Number}
     *
     * @deprecated use the `activeTasksCount()` method (plural naming) instead
     */
    activeTaskCount() {
      return this.activeTasksCount();
    }
    /**
     * Returns the number of currently active tasks.
     *
     * @returns {Number}
     */
    activeTasksCount() {
      return this.tasks().length;
    }
    /**
     * Returns the list of processed items.
     *
     * @returns {T[]}
     */
    processedItems() {
      return this.meta.processedItems;
    }
    /**
     * Returns the number of processed items.
     *
     * @returns {Number}
     */
    processedCount() {
      return this.processedItems().length;
    }
    /**
     * Returns the percentage progress of items that have been processed, or `NaN` if items is not an array.
     */
    processedPercentage() {
      return this.processedCount() / this.itemsCount() * 100;
    }
    /**
     * Returns the list of results.
     *
     * @returns {R[]}
     */
    results() {
      return this.meta.results;
    }
    /**
     * Returns the list of errors.
     *
     * @returns {Array<PromisePoolError<T>>}
     */
    errors() {
      return this.meta.errors;
    }
    /**
     * Set the handler that is applied to each item.
     *
     * @param {Function} action
     *
     * @returns {PromisePoolExecutor}
     */
    withHandler(d) {
      return this.handler = d, this;
    }
    /**
     * Determine whether a custom error handle is available.
     *
     * @returns {Boolean}
     */
    hasErrorHandler() {
      return !!this.errorHandler;
    }
    /**
     * Set the error handler function to execute when an error occurs.
     *
     * @param {Function} errorHandler
     *
     * @returns {PromisePoolExecutor}
     */
    handleError(d) {
      return this.errorHandler = d, this;
    }
    /**
     * Set the handler function to execute when started a task.
     *
     * @param {Function} handler
     *
     * @returns {this}
     */
    onTaskStarted(d) {
      return this.onTaskStartedHandlers = d, this;
    }
    /**
      * Assign the given callback `handler` function to run when a task finished.
     *
     * @param {OnProgressCallback<T>} handlers
     *
     * @returns {this}
     */
    onTaskFinished(d) {
      return this.onTaskFinishedHandlers = d, this;
    }
    /**
     * Determines whether the number of active tasks is greater or equal to the concurrency limit.
     *
     * @returns {Boolean}
     */
    hasReachedConcurrencyLimit() {
      return this.activeTasksCount() >= this.concurrency();
    }
    /**
     * Stop a promise pool processing.
     */
    stop() {
      throw this.markAsStopped(), new n.StopThePromisePoolError();
    }
    /**
     * Mark the promise pool as stopped.
     *
     * @returns {PromisePoolExecutor}
     */
    markAsStopped() {
      return this.meta.stopped = !0, this;
    }
    /**
     * Determine whether the pool is stopped.
     *
     * @returns {Boolean}
     */
    isStopped() {
      return this.meta.stopped;
    }
    /**
     * Start processing the promise pool.
     *
     * @returns {ReturnValue}
     */
    async start() {
      return await this.validateInputs().prepareResultsArray().process();
    }
    /**
     * Determine whether the pool should stop.
     *
     * @returns {PromisePoolExecutor}
     *
     * @throws
     */
    validateInputs() {
      if (typeof this.handler != "function")
        throw a.ValidationError.createFrom("The first parameter for the .process(fn) method must be a function");
      const d = this.taskTimeout();
      if (!(d == null || typeof d == "number" && d >= 0))
        throw a.ValidationError.createFrom(`"timeout" must be undefined or a number. A number must be 0 or up. Received "${String(d)}" (${typeof d})`);
      if (!this.areItemsValid())
        throw a.ValidationError.createFrom(`"items" must be an array, an iterable or an async iterable. Received "${typeof this.items()}"`);
      if (this.errorHandler && typeof this.errorHandler != "function")
        throw a.ValidationError.createFrom(`The error handler must be a function. Received "${typeof this.errorHandler}"`);
      return this.onTaskStartedHandlers.forEach((m) => {
        if (m && typeof m != "function")
          throw a.ValidationError.createFrom(`The onTaskStarted handler must be a function. Received "${typeof m}"`);
      }), this.onTaskFinishedHandlers.forEach((m) => {
        if (m && typeof m != "function")
          throw a.ValidationError.createFrom(`The error handler must be a function. Received "${typeof m}"`);
      }), this;
    }
    areItemsValid() {
      const d = this.items();
      return !!(Array.isArray(d) || typeof d[Symbol.iterator] == "function" || typeof d[Symbol.asyncIterator] == "function");
    }
    /**
     * Prefill the results array with `notRun` symbol values if results should correspond.
     */
    prepareResultsArray() {
      const d = this.items();
      return Array.isArray(d) ? this.shouldUseCorrespondingResults() ? (this.meta.results = Array(d.length).fill(t.PromisePool.notRun), this) : this : this;
    }
    /**
     * Starts processing the promise pool by iterating over the items
     * and running each item through the async `callback` function.
     *
     * @param {Function} callback
     *
     * @returns {Promise}
     */
    async process() {
      let d = 0;
      for await (const m of this.items()) {
        if (this.isStopped())
          break;
        this.shouldUseCorrespondingResults() && (this.results()[d] = t.PromisePool.notRun), this.startProcessing(m, d), d += 1, await this.waitForProcessingSlot();
      }
      return await this.drained();
    }
    /**
     * Wait for one of the active tasks to finish processing.
     */
    async waitForProcessingSlot() {
      for (; this.hasReachedConcurrencyLimit(); )
        await this.waitForActiveTaskToFinish();
    }
    /**
     * Wait for the next, currently active task to finish processing.
     */
    async waitForActiveTaskToFinish() {
      await Promise.race(this.tasks());
    }
    /**
     * Create a processing function for the given `item`.
     *
     * @param {T} item
     * @param {number} index
     */
    startProcessing(d, m) {
      const w = this.createTaskFor(d, m).then((S) => {
        this.save(S, m).removeActive(w);
      }).catch(async (S) => {
        await this.handleErrorFor(S, d, m), this.removeActive(w);
      }).finally(() => {
        this.processedItems().push(d), this.runOnTaskFinishedHandlers(d);
      });
      this.tasks().push(w), this.runOnTaskStartedHandlers(d);
    }
    /**
     * Ensures a returned promise for the processing of the given `item`.
     *
     * @param {T} item
     * @param {number} index
     *
     * @returns {*}
     */
    async createTaskFor(d, m) {
      if (this.taskTimeout() === void 0)
        return this.handler(d, m, this);
      const [w, S] = this.createTaskTimeout(d);
      return Promise.race([
        this.handler(d, m, this),
        w()
      ]).finally(S);
    }
    /**
     * Returns a tuple of a timer function and a canceller function that
     * times-out after the configured task timeout.
     */
    createTaskTimeout(d) {
      let m;
      return [async () => new Promise((A, B) => {
        m = setTimeout(() => {
          B(new e.PromisePoolError(`Task in promise pool timed out after ${this.taskTimeout()}ms`, d));
        }, this.taskTimeout());
      }), () => clearTimeout(m)];
    }
    /**
     * Save the given calculation `result`, possibly at the provided `position`.
     *
     * @param {*} result
     * @param {number} position
     *
     * @returns {PromisePoolExecutor}
     */
    save(d, m) {
      return this.shouldUseCorrespondingResults() ? this.results()[m] = d : this.results().push(d), this;
    }
    /**
     * Remove the given `task` from the list of active tasks.
     *
     * @param {Promise} task
     */
    removeActive(d) {
      return this.tasks().splice(this.tasks().indexOf(d), 1), this;
    }
    /**
     * Create and save an error for the the given `item`.
     *
     * @param {Error} error
     * @param {T} item
     * @param {number} index
     */
    async handleErrorFor(d, m, w) {
      if (this.shouldUseCorrespondingResults() && (this.results()[w] = t.PromisePool.failed), !this.isStoppingThePoolError(d)) {
        if (this.isValidationError(d))
          throw this.markAsStopped(), d;
        this.hasErrorHandler() ? await this.runErrorHandlerFor(d, m) : this.saveErrorFor(d, m);
      }
    }
    /**
     * Determine whether the given `error` is a `StopThePromisePoolError` instance.
     *
     * @param {Error} error
     *
     * @returns {Boolean}
     */
    isStoppingThePoolError(d) {
      return d instanceof n.StopThePromisePoolError;
    }
    /**
     * Determine whether the given `error` is a `ValidationError` instance.
     *
     * @param {Error} error
     *
     * @returns {Boolean}
     */
    isValidationError(d) {
      return d instanceof a.ValidationError;
    }
    /**
     * Run the user’s error handler, if available.
     *
     * @param {Error} processingError
     * @param {T} item
     */
    async runErrorHandlerFor(d, m) {
      try {
        await this.errorHandler?.(d, m, this);
      } catch (w) {
        this.rethrowIfNotStoppingThePool(w);
      }
    }
    /**
     * Run the onTaskStarted handlers.
     */
    runOnTaskStartedHandlers(d) {
      this.onTaskStartedHandlers.forEach((m) => {
        m(d, this);
      });
    }
    /**
     * Run the onTaskFinished handlers.
     */
    runOnTaskFinishedHandlers(d) {
      this.onTaskFinishedHandlers.forEach((m) => {
        m(d, this);
      });
    }
    /**
     * Rethrow the given `error` if it’s not an instance of `StopThePromisePoolError`.
     *
     * @param {Error} error
     */
    rethrowIfNotStoppingThePool(d) {
      if (!this.isStoppingThePoolError(d))
        throw d;
    }
    /**
     * Create and save an error for the the given `item`.
     *
     * @param {T} item
     */
    saveErrorFor(d, m) {
      this.errors().push(e.PromisePoolError.createFrom(d, m));
    }
    /**
     * Wait for all active tasks to finish. Once all the tasks finished
     * processing, returns an object containing the results and errors.
     *
     * @returns {Object}
     */
    async drained() {
      return await this.drainActiveTasks(), {
        errors: this.errors(),
        results: this.results()
      };
    }
    /**
     * Wait for all of the active tasks to finish processing.
     */
    async drainActiveTasks() {
      await Promise.all(this.tasks());
    }
  }
  return promisePoolExecutor.PromisePoolExecutor = c, promisePoolExecutor;
}
var hasRequiredPromisePool;
function requirePromisePool() {
  if (hasRequiredPromisePool)
    return promisePool;
  hasRequiredPromisePool = 1, Object.defineProperty(promisePool, "__esModule", { value: !0 }), promisePool.PromisePool = void 0;
  const t = requirePromisePoolExecutor();
  class e {
    /**
     * Instantiates a new promise pool with a default `concurrency: 10` and `items: []`.
     *
     * @param {Object} options
     */
    constructor(a) {
      this.timeout = void 0, this.concurrency = 10, this.items = a ?? [], this.errorHandler = void 0, this.onTaskStartedHandlers = [], this.onTaskFinishedHandlers = [], this.shouldResultsCorrespond = !1;
    }
    /**
     * Set the number of tasks to process concurrently in the promise pool.
     *
     * @param {Integer} concurrency
     *
     * @returns {PromisePool}
     */
    withConcurrency(a) {
      return this.concurrency = a, this;
    }
    /**
     * Set the number of tasks to process concurrently in the promise pool.
     *
     * @param {Number} concurrency
     *
     * @returns {PromisePool}
     */
    static withConcurrency(a) {
      return new this().withConcurrency(a);
    }
    /**
     * Set the timeout in milliseconds for the pool handler.
     *
     * @param {Number} timeout
     *
     * @returns {PromisePool}
     */
    withTaskTimeout(a) {
      return this.timeout = a, this;
    }
    /**
     * Set the timeout in milliseconds for the pool handler.
     *
     * @param {Number} timeout
     *
     * @returns {PromisePool}
     */
    static withTaskTimeout(a) {
      return new this().withTaskTimeout(a);
    }
    /**
     * Set the items to be processed in the promise pool.
     *
     * @param {SomeIterable<ItemType>} items
     *
     * @returns {PromisePool}
     */
    for(a) {
      const c = new e(a).withConcurrency(this.concurrency);
      return typeof this.errorHandler == "function" && c.handleError(this.errorHandler), typeof this.timeout == "number" ? c.withTaskTimeout(this.timeout) : c;
    }
    /**
     * Set the items to be processed in the promise pool.
     *
     * @param {T[] | Iterable<T> | AsyncIterable<T>} items
     *
     * @returns {PromisePool}
     */
    static for(a) {
      return new this().for(a);
    }
    /**
     * Set the error handler function to execute when an error occurs.
     *
     * @param {ErrorHandler<T>} handler
     *
     * @returns {PromisePool}
     */
    handleError(a) {
      return this.errorHandler = a, this;
    }
    /**
     * Assign the given callback `handler` function to run when a task starts.
     *
     * @param {OnProgressCallback<T>} handler
     *
     * @returns {PromisePool}
     */
    onTaskStarted(a) {
      return this.onTaskStartedHandlers.push(a), this;
    }
    /**
     * Assign the given callback `handler` function to run when a task finished.
     *
     * @param {OnProgressCallback<T>} handler
     *
     * @returns {PromisePool}
     */
    onTaskFinished(a) {
      return this.onTaskFinishedHandlers.push(a), this;
    }
    /**
     * Assign whether to keep corresponding results between source items and resulting tasks.
     */
    useCorrespondingResults() {
      return this.shouldResultsCorrespond = !0, this;
    }
    /**
     * Starts processing the promise pool by iterating over the items
     * and running each item through the async `callback` function.
     *
     * @param {ProcessHandler} The async processing function receiving each item from the `items` array.
     *
     * @returns Promise<{ results, errors }>
     */
    async process(a) {
      return new t.PromisePoolExecutor().useConcurrency(this.concurrency).useCorrespondingResults(this.shouldResultsCorrespond).withTaskTimeout(this.timeout).withHandler(a).handleError(this.errorHandler).onTaskStarted(this.onTaskStartedHandlers).onTaskFinished(this.onTaskFinishedHandlers).for(this.items).start();
    }
  }
  return promisePool.PromisePool = e, e.notRun = Symbol("notRun"), e.failed = Symbol("failed"), promisePool;
}
var contracts = {};
Object.defineProperty(contracts, "__esModule", { value: !0 });
var returnValue = {};
Object.defineProperty(returnValue, "__esModule", { value: !0 });
(function(t) {
  var e = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(c, o, d, m) {
    m === void 0 && (m = d);
    var w = Object.getOwnPropertyDescriptor(o, d);
    (!w || ("get" in w ? !o.__esModule : w.writable || w.configurable)) && (w = { enumerable: !0, get: function() {
      return o[d];
    } }), Object.defineProperty(c, m, w);
  } : function(c, o, d, m) {
    m === void 0 && (m = d), c[m] = o[d];
  }), n = commonjsGlobal && commonjsGlobal.__exportStar || function(c, o) {
    for (var d in c)
      d !== "default" && !Object.prototype.hasOwnProperty.call(o, d) && e(o, c, d);
  };
  Object.defineProperty(t, "__esModule", { value: !0 });
  const a = requirePromisePool();
  t.default = a.PromisePool, n(contracts, t), n(requirePromisePool(), t), n(promisePoolError, t), n(returnValue, t), n(stopThePromisePoolError, t), n(validationError, t);
})(dist);
const NOT_READABLE = Symbol("not readable"), READABLE = Symbol("readable"), ENDED = Symbol("ended"), ERRORED = Symbol("errored"), STATES = {
  notReadable: NOT_READABLE,
  readable: READABLE,
  ended: ENDED,
  errored: ERRORED
};
class StreamToAsyncIterator {
  /** The underlying readable stream */
  _stream;
  /** Contains stream's error when stream has error'ed out */
  _error;
  /** The current state of the iterator (not readable, readable, ended, errored) */
  _state = STATES.notReadable;
  _size;
  /** The rejections of promises to call when stream errors out */
  _rejections = /* @__PURE__ */ new Set();
  get closed() {
    return this._state === STATES.ended;
  }
  constructor(e, { size: n } = {}) {
    this._stream = e, this._size = n;
    const a = ["_handleStreamEnd", "_handleStreamError"];
    for (const c of a)
      Object.defineProperty(this, c, {
        configurable: !0,
        writable: !0,
        value: this[c].bind(this)
      });
    e.once("error", this._handleStreamError), e.once("end", this._handleStreamEnd), e.on("readable", () => {
      this._state = STATES.readable;
    });
  }
  [Symbol.asyncIterator]() {
    return this;
  }
  /**
   * Returns the next iteration of data. Rejects if the stream errored out.
   */
  async next() {
    switch (this._state) {
      case STATES.notReadable: {
        let e, n;
        try {
          e = this._untilReadable(), n = this._untilEnd(), await Promise.race([e.promise, n.promise]);
        } finally {
          e?.close(), n?.close();
        }
        return this.next();
      }
      case STATES.ended:
        return this.close(), { done: !0, value: void 0 };
      case STATES.errored:
        throw this.close(), this._error;
      case STATES.readable: {
        const e = this._size ? this._stream.read(this._size) : this._stream.read();
        return e !== null ? { done: !1, value: e } : (this._state = STATES.notReadable, await new Promise((n) => setTimeout((a) => a(!0), 0, n)), this.next());
      }
    }
  }
  /**
   * Waits until the stream is readable. Rejects if the stream errored out.
   * @returns Promise when stream is readable
   */
  _untilReadable() {
    let e;
    const n = new Promise((c, o) => {
      e = () => {
        this._state = STATES.readable, this._rejections.delete(o), c();
      }, this._state, STATES.readable, this._stream.once("readable", e), this._rejections.add(o);
    });
    return { close: () => {
      e != null && this._stream.removeListener("readable", e);
    }, promise: n };
  }
  /**
   * Waits until the stream is ended. Rejects if the stream errored out.
   * @returns Promise when stream is finished
   */
  _untilEnd() {
    let e;
    const n = new Promise((c, o) => {
      e = () => {
        this._state = STATES.ended, this._rejections.delete(o), c();
      }, this._stream.once("end", e), this._rejections.add(o);
    });
    return { close: () => {
      e != null && this._stream.removeListener("end", e);
    }, promise: n };
  }
  return() {
    return this._state = STATES.ended, this.next();
  }
  throw(e) {
    return this._error = e, this._state = STATES.errored, this.next();
  }
  /**
   * Destroy the stream
   * @param err An optional error to pass to the stream for an error event
   */
  close(e) {
    this._stream.removeListener("end", this._handleStreamEnd), this._stream.removeListener("error", this._handleStreamError), this._state = STATES.ended, this._stream.destroy(e);
  }
  _handleStreamError(e) {
    this._error = e, this._state = STATES.errored;
    for (const n of this._rejections)
      n(e);
  }
  _handleStreamEnd() {
    this._state = STATES.ended;
  }
  get state() {
    return this._state;
  }
}
class ChunkingUploader extends eventsExports.EventEmitter {
  tokenConfig;
  api;
  uploadID;
  token;
  chunkSize;
  batchSize;
  paused = !1;
  isResume = !1;
  uploadOptions;
  arbundles;
  constructor(e, n) {
    super({ captureRejections: !0 }), this.tokenConfig = e, this.arbundles = this.tokenConfig.irys.arbundles, this.api = n, this.token = this.tokenConfig.name, this.chunkSize = 25e6, this.batchSize = 5, this.uploadID = "";
  }
  setResumeData(e) {
    return e && (this.uploadID = e, this.isResume = !0), this;
  }
  /**
   * Note: Will return undefined unless an upload has been started.
   * @returns
   */
  getResumeData() {
    return this.uploadID;
  }
  setChunkSize(e) {
    if (e < 1)
      throw new Error("Invalid chunk size (must be >=1)");
    return this.chunkSize = e, this;
  }
  setBatchSize(e) {
    if (e < 1)
      throw new Error("Invalid batch size (must be >=1)");
    return this.batchSize = e, this;
  }
  pause() {
    this.emit("pause"), this.paused = !0;
  }
  resume() {
    this.paused = !1, this.emit("resume");
  }
  async uploadTransaction(e, n) {
    return this.uploadOptions = n, this.arbundles.DataItem.isDataItem(e) ? this.runUpload(e.getRaw()) : this.runUpload(e);
  }
  async uploadData(e, n) {
    return this.uploadOptions = n?.upload, this.runUpload(e, { ...n });
  }
  async runUpload(e, n) {
    let a = this.uploadID;
    const c = n === void 0, o = { "x-chunking-version": "2" };
    let d;
    if (!a)
      d = await this.api.get(`/chunks/${this.token}/-1/-1`, { headers: o }), Utils.checkAndThrow(d, "Getting upload token"), this.uploadID = a = d.data.id;
    else {
      if (d = await this.api.get(`/chunks/${this.token}/${a}/-1`, { headers: o }), d.status === 404)
        throw new Error("Upload ID not found - your upload has probably expired.");
      if (Utils.checkAndThrow(d, "Getting upload info"), this.chunkSize != +d.data.size)
        throw new Error(`Chunk size not equal to that of a previous upload (${+d.data.size}).`);
    }
    const { max: m, min: w } = d.data;
    if (this.chunkSize < +w || this.chunkSize > +m)
      throw new Error(`Chunk size out of allowed range: ${w} - ${m}`);
    let S = 0;
    const A = (_, u, h) => new Promise((p) => {
      retry$1(async (y) => {
        await this.api.post(`/chunks/${this.token}/${a}/${u}`, _, {
          headers: { "Content-Type": "application/octet-stream", ...o },
          maxBodyLength: 1 / 0,
          maxContentLength: 1 / 0
        }).then((v) => {
          if (v?.status >= 300) {
            const $ = { res: v, id: h, offset: u, size: _.length };
            throw this.emit("chunkError", $), v?.status === 402 && y(new Error("Not enough funds to send data")), $;
          }
          this.emit("chunkUpload", { id: h, offset: u, size: _.length, totalUploaded: S += _.length }), p({ o: u, d: v });
        });
      });
    }), B = d.data.chunks ?? [], P = new streamBrowserify.PassThrough();
    let I = Buffer$F.alloc(0), O = !1, L = !0;
    P.on("end", () => O = !0), P.on("error", (_) => {
      throw new Error(`Error processing readable: ${_}`);
    });
    const C = async (_) => {
      for (; !O; ) {
        if (I.length >= _)
          return u = Buffer$F.from(I.slice(0, _)), I = I.slice(_), u;
        var u = P.read(_);
        if (u === null) {
          await new Promise((h) => setTimeout((p) => p(!0), 0, h));
          continue;
        }
        if (u.length === _)
          return u;
        I = Buffer$F.concat([I, u]);
      }
      for (; I.length >= _; )
        return u = Buffer$F.from(I.slice(0, _)), I = I.slice(_), u;
      return L = !1, I;
    };
    let z, q;
    if (!c) {
      z = this.arbundles.createData("", this.tokenConfig.getSigner(), {
        ...n,
        anchor: n?.anchor ?? crypto$4.randomBytes(32).toString("base64").slice(0, 32)
      });
      const _ = z.getRaw();
      q = _.length, P.write(_), S -= _.length;
    }
    if (Buffer$F.isBuffer(e))
      P.write(e), P.end();
    else if ("pipe" in e)
      e.pipe(P);
    else
      throw new Error("Input data is not a buffer or a compatible stream (no .pipe method)");
    let Z = 0;
    const X = /* @__PURE__ */ new Set();
    let ie = 0, fe, ye, j;
    if (!c) {
      ye = new streamBrowserify.PassThrough();
      const _ = z.getRaw().length;
      if (this.chunkSize < q)
        throw new Error(`Configured chunk size is too small for transaction header! (${this.chunkSize} < ${q})`);
      fe = await C(this.chunkSize), ie++, Z += fe.length, ye.write(fe.slice(_));
      const u = [
        this.arbundles.stringToBuffer("dataitem"),
        this.arbundles.stringToBuffer("1"),
        this.arbundles.stringToBuffer(z.signatureType.toString()),
        z.rawOwner,
        z.rawTarget,
        z.rawAnchor,
        z.rawTags,
        new StreamToAsyncIterator(ye)
      ];
      j = this.arbundles.deepHash(u);
    }
    let V = B.pop();
    for (; L; ) {
      if (this.paused && await new Promise((h) => this.on("resume", () => h(void 0))), V && +V[0] - Z <= this.chunkSize) {
        const p = V[1], y = await C(p);
        c || ye.write(y), Z += p, V = B.pop(), ie++, S += p;
        continue;
      }
      const _ = await C(this.chunkSize);
      for (c || ye.write(_); X.size >= this.batchSize; ) {
        const [h] = await Promise.race(X);
        X.delete(h);
      }
      const u = (async () => await A(_, Z, ++ie))().then((h) => [u, h]);
      X.add(u), Z += _.length;
    }
    if (ye && ye.end(), await Promise.all(X), !c) {
      const _ = await j, u = Buffer$F.from(await this.tokenConfig.getSigner().sign(_));
      fe.set(u, 2), await A(fe, 0, 0);
    }
    const ae = await this.api.post(`/chunks/${this.token}/${a}/-1`, null, {
      headers: { "Content-Type": "application/octet-stream", ...o },
      timeout: this.api.config?.timeout ?? 4e4 * 10
      // server side reconstruction can take a while
    });
    if (ae.status === 402) {
      const _ = ae?.headers?.["retry-after"], u = ae.data + (_ ? ` - retry after ${_}s` : "");
      throw new Error(u);
    }
    if (Utils.checkAndThrow(ae, "Finalising upload", [201]), ae.status === 201)
      throw new Error(ae.data);
    return ae.data.verify = Utils.verifyReceipt.bind({}, this.arbundles, ae.data.data), this.emit("done", ae), ae;
  }
  get completionPromise() {
    return new Promise((e) => this.on("done", e));
  }
}
const CHUNKING_THRESHOLD = 5e7;
class Uploader {
  api;
  token;
  tokenConfig;
  utils;
  contentTypeOverride;
  forceUseChunking;
  arbundles;
  irysTransaction;
  constructor(e, n, a, c, o) {
    this.api = e, this.token = a, this.tokenConfig = c, this.arbundles = this.tokenConfig.irys.arbundles, this.utils = n, this.irysTransaction = o;
  }
  async uploadTransaction(e, n) {
    let a;
    const c = this.arbundles.DataItem.isDataItem(e);
    if (this.forceUseChunking || c && e.getRaw().length >= CHUNKING_THRESHOLD || !c)
      a = await this.chunkedUploader.uploadTransaction(c ? e.getRaw() : e, n);
    else {
      const { url: o, timeout: d, headers: m } = this.api.getConfig(), w = { "Content-Type": "application/octet-stream", ...m };
      if (a = await this.api.post(new URL(`/tx/${this.token}`, o).toString(), e.getRaw(), {
        headers: w,
        timeout: d,
        maxBodyLength: 1 / 0
      }), a.status === 201)
        throw new Error(a.data);
    }
    switch (a.status) {
      case 402:
        const o = a?.headers?.["retry-after"], d = a.data + (o ? ` - retry after ${o}s` : "");
        throw new Error(d);
      default:
        if (a.status >= 400)
          throw new Error(`whilst uploading Irys transaction: ${a.status} ${a.statusText}`);
    }
    return a.data.verify = async () => this.utils.verifyReceipt(a.data), a;
  }
  async uploadData(e, n) {
    if (typeof e == "string" && (e = Buffer$F.from(e)), Buffer$F.isBuffer(e) && e.length <= CHUNKING_THRESHOLD) {
      const a = this.arbundles.createData(e, this.tokenConfig.getSigner(), {
        ...n,
        anchor: n?.anchor ?? cryptoBrowserifyExports.randomBytes(32).toString("base64").slice(0, 32)
      });
      return await a.sign(this.tokenConfig.getSigner()), (await this.uploadTransaction(a, { ...n?.upload })).data;
    }
    return (await this.chunkedUploader.uploadData(e, n)).data;
  }
  // concurrently uploads transactions
  async concurrentUploader(e, n) {
    const a = [], c = n?.logFunction ? n?.logFunction : async (m) => {
    }, o = n?.concurrency ?? 5, d = await dist.PromisePool.for(e).withConcurrency(o >= 1 ? o : 5).handleError(async (m, w) => {
      if (a.push(m), m.message === "Not enough funds to send data")
        throw m;
    }).process(async (m, w, S) => {
      await retry$1(async (A) => {
        try {
          const B = await this.processItem(m, n?.itemOptions);
          return w % o == 0 && await c(`Processed ${w} Items`), n?.resultProcessor ? await n.resultProcessor({ item: m, res: B, i: w }) : { item: m, res: B, i: w };
        } catch (B) {
          throw B?.message === "Not enough funds to send data" && A(B), B;
        }
      }, { retries: 3, minTimeout: 1e3, maxTimeout: 1e4 });
    });
    return { errors: a, results: d.results };
  }
  async processItem(e, n) {
    return this.arbundles.DataItem.isDataItem(e) ? this.uploadTransaction(e, { ...n?.upload }) : this.uploadData(e, n);
  }
  /**
   * geneates a manifest JSON object
   * @param config.items mapping of logical paths to item IDs
   * @param config.indexFile optional logical path of the index file for the manifest
   * @returns
   */
  async generateManifest(e) {
    const { items: n, indexFile: a } = e, c = {
      manifest: "arweave/paths",
      version: "0.1.0",
      paths: {}
    };
    if (a) {
      if (!n.has(a))
        throw new Error(`Unable to access item: ${a}`);
      c.index = { path: a };
    }
    for (const [o, d] of n.entries())
      c.paths[o] = { id: d };
    return c;
  }
  get chunkedUploader() {
    return new ChunkingUploader(this.tokenConfig, this.api);
  }
  set useChunking(e) {
    typeof e == "boolean" && (this.forceUseChunking = e);
  }
  set contentType(e) {
    this.contentTypeOverride = e;
  }
  async uploadBundle(e, n) {
    const a = n?.throwawayKey ?? await this.arbundles.getCryptoDriver().generateJWK(), c = new ArweaveSigner(a), o = e.map((A) => this.arbundles.DataItem.isDataItem(A) ? A : this.arbundles.createData(A, c)), d = await this.arbundles.bundleAndSignData(o, c), m = this.arbundles.createData(d.getRaw(), this.tokenConfig.getSigner(), {
      tags: [
        { name: "Bundle-Format", value: "binary" },
        { name: "Bundle-Version", value: "2.0.0" }
      ]
    });
    await m.sign(this.tokenConfig.getSigner());
    const w = await this.uploadTransaction(m, n), S = base64url(Buffer$F.from(await this.arbundles.getCryptoDriver().hash(base64url.toBuffer(base64url(c.publicKey)))));
    return { ...w, txs: o, throwawayKey: a, throwawayKeyAddress: S };
  }
}
class WebUploader extends Uploader {
  irys;
  constructor(e) {
    super(e.api, e.utils, e.token, e.tokenConfig, e.IrysTransaction), this.irys = e;
  }
  /**
   * Uploads a tagged file object, automatically adding the content-type tag if it's not present
   * @param file - File object to upload
   * @param opts - optional options for the upload / data item creation
   * @returns
   */
  async uploadFile(e, n) {
    const c = (n?.tags ? n.tags.some(({ name: o }) => o.toLowerCase() === "content-type") : !1) ? n?.tags : [...n?.tags ?? [], { name: "Content-Type", value: e.type }];
    return this.uploadData(Buffer$F.from(await e.arrayBuffer()), { tags: c, ...n });
  }
  /**
   * Uploads a list of `File` objects & a generated folder manifest as a nested bundle using a temporary signing key.
   *
   * @param files list of `File` objects to upload - note: this code determines the paths via the File's `webkitRelativePath` property - if it's undefined, it falls back to file.name
   * @param {string} [opts.indexFileRelPath] Relative path for the index file, i.e `folder/index.html`
   * @param {Tag[]} [opts.manifestTags] List of tags to add onto the manifest transaction
   * @param {JWKInterface} [opts.throwawayKey] Provide your own throwaway JWK to use for signing the items in the bundle
   * @param {boolean} [opts.seperateManifestTx=false] Whether upload the manifest as a seperate tx (not in the nested bundle) - note: transactions in a nested bundle are not indexed by bundlr GQL - if you have tags you want to use to find the manifest, set this option to true
   *
   * @returns Standard upload response from the bundler node, plus the throwaway key & address, manifest, manifest TxId and the list of generated transactions
   */
  async uploadFolder(e, n) {
    const a = [], c = /* @__PURE__ */ new Map(), o = n?.throwawayKey ?? await this.irys.arbundles.getCryptoDriver().generateJWK(), d = new ArweaveSigner(o);
    for (const A of e) {
      const B = A.webkitRelativePath ? A.webkitRelativePath : A.name, I = (A.tags ? A.tags.some(({ name: L }) => L.toLowerCase() === "content-type") : !1) ? A.tags : [...A.tags ?? [], { name: "Content-Type", value: A.type }], O = this.irys.arbundles.createData(Buffer$F.from(await A.arrayBuffer()), d, {
        tags: I
      });
      await O.sign(d), a.push(O), c.set(B, O.id);
    }
    const m = await this.generateManifest({ items: c, indexFile: n?.indexFileRelPath }), w = this.irys.arbundles.createData(JSON.stringify(m), n?.seperateManifestTx ? this.irys.tokenConfig.getSigner() : d, {
      tags: [
        { name: "Type", value: "manifest" },
        { name: "Content-Type", value: "application/x.arweave-manifest+json" },
        ...n?.manifestTags ?? []
      ]
    });
    n?.seperateManifestTx === !0 ? (await w.sign(this.irys.tokenConfig.getSigner()), await this.uploadTransaction(w, { ...n })) : (await w.sign(d), a.push(w));
    const S = await this.uploadBundle(a, { ...n });
    return {
      ...S.data,
      manifestId: w.id,
      manifest: m,
      throwawayKey: S.throwawayKey,
      throwawayKeyAddress: S.throwawayKeyAddress,
      txs: S.txs
    };
  }
}
class BaseWebIrys extends Irys {
  tokenConfig;
  uploader;
  uploadFolder;
  uploadFile;
  constructor({ url: e, wallet: n, config: a, getTokenConfig: c }) {
    switch (e) {
      case void 0:
      case "node1":
        e = "https://node1.irys.xyz";
        break;
      case "node2":
        e = "https://node2.irys.xyz";
        break;
      case "devnet":
        e = "https://devnet.irys.xyz";
        break;
    }
    const o = new URL(e);
    if (super({ url: o, arbundles }), this.api = new Api$1({
      url: o,
      timeout: a?.timeout ?? 1e5,
      headers: a?.headers
    }), this.tokenConfig = c(this), this.token = this.tokenConfig.name, o.host === "devnet.irys.network" && !(a?.providerUrl ?? (n?.rpcUrl || this.tokenConfig.inheritsRPC)))
      throw new Error(`Using ${o.host} requires a dev/testnet RPC to be configured! see https://docs.irys.network/sdk/using-devnet`);
    this.utils = new Utils(this.api, this.token, this.tokenConfig), this.uploader = new WebUploader(this), this.funder = new Fund(this.utils), this.uploader = new WebUploader(this), this.provenance = new Provenance(this), this.transactions = new Transaction$3(this), this.address = "Please run `await Irys.ready()`", this.uploadFolder = this.uploader.uploadFolder.bind(this.uploader), this.uploadFile = this.uploader.uploadFile.bind(this.uploader);
  }
}
class BaseWebToken {
  base;
  wallet;
  _address;
  providerUrl;
  providerInstance;
  ticker;
  name;
  irys;
  minConfirm = 5;
  isSlow = !1;
  needsFee = !0;
  inheritsRPC = !1;
  constructor(e) {
    Object.assign(this, e);
  }
  // common methods
  get address() {
    return this._address;
  }
  async ready() {
    this._address = this.wallet ? this.ownerToAddress(await this.getPublicKey()) : void 0;
  }
  async getId(e) {
    return base64url.encode(Buffer$F.from(await getCryptoDriver().hash(await e.rawSignature())));
  }
  async price() {
    return getRedstonePrice(this.ticker);
  }
}
async function getRedstonePrice(t) {
  const e = await axios$3.get(`https://api.redstone.finance/prices?symbol=${t}&provider=redstone&limit=1`);
  return await Utils.checkAndThrow(e, "Getting price data"), e.data[0].value;
}
const ethereumSigner = InjectedTypedEthereumSigner;
class EthereumConfig extends BaseWebToken {
  signer;
  w3signer;
  inheritsRPC = !0;
  constructor(e) {
    super(e), this.base = ["wei", 1e18];
  }
  async getTx(e) {
    const a = await this.providerInstance.getTransaction(e);
    if (!a)
      throw new Error("Tx doesn't exist");
    if (!a.to)
      throw new Error(`Unable to resolve transactions ${e} receiver`);
    return {
      from: a.from,
      to: a.to,
      blockHeight: a.blockNumber ? new BigNumber$1(a.blockNumber) : void 0,
      amount: new BigNumber$1(a.value.toHexString(), 16),
      pending: !a.blockNumber,
      confirmed: a.confirmations >= this.minConfirm
    };
  }
  ownerToAddress(e) {
    return e.toString().toLowerCase();
  }
  async sign(e) {
    return (await this.getSigner()).sign(e);
  }
  getSigner() {
    return this.signer || (this.signer = new InjectedTypedEthereumSigner(this.wallet)), this.signer;
  }
  async verify(e, n, a) {
    return ethereumSigner.verify(e, n, a);
  }
  async getCurrentHeight() {
    const n = await this.providerInstance.send("eth_blockNumber", []);
    return new BigNumber$1(n, 16);
  }
  async getFee(e, n) {
    const a = this.providerInstance, c = {
      to: n,
      from: this.address,
      value: "0x" + new BigNumber$1(e).toString(16)
    }, o = await a.estimateGas(c), d = await a.getGasPrice();
    return new BigNumber$1(o.mul(d).toString());
  }
  async sendTx(e) {
    const a = await this.w3signer.sendTransaction(e);
    return a ? a.hash : void 0;
  }
  async createTx(e, n, a) {
    const c = BigNumber.from(new BigNumber$1(e).toFixed()), o = this.w3signer, d = await o.estimateGas({ to: n, from: this.address, value: c.toHexString() });
    let m = await o.getGasPrice();
    return this.name === "matic" && (m = BigNumber.from(new BigNumber$1(m.toString()).multipliedBy(10).decimalPlaces(0).toString())), { txId: void 0, tx: await o.populateTransaction({ to: n, from: this.address, value: c.toHexString(), gasPrice: m, gasLimit: d }) };
  }
  async getPublicKey() {
    return this.address;
  }
  async ready() {
    this.w3signer = await this.wallet.getSigner(), this._address = (await this.w3signer.getAddress()).toString().toLowerCase(), await this.getSigner().ready(), this.providerInstance = this.wallet, await this.providerInstance?._ready?.();
  }
}
var lib$8 = {}, constants$1 = {};
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.KeyType = void 0, function(e) {
    e[e.ED25519 = 0] = "ED25519";
  }(t.KeyType || (t.KeyType = {}));
})(constants$1);
var key_pair$1 = {}, key_pair_base$1 = {};
Object.defineProperty(key_pair_base$1, "__esModule", { value: !0 });
key_pair_base$1.KeyPairBase = void 0;
let KeyPairBase$1 = class {
};
key_pair_base$1.KeyPairBase = KeyPairBase$1;
var key_pair_ed25519$1 = {}, lib$7 = {}, _Buffer$1 = safeBufferExports.Buffer;
function base$2(t) {
  if (t.length >= 255)
    throw new TypeError("Alphabet too long");
  for (var e = new Uint8Array(256), n = 0; n < e.length; n++)
    e[n] = 255;
  for (var a = 0; a < t.length; a++) {
    var c = t.charAt(a), o = c.charCodeAt(0);
    if (e[o] !== 255)
      throw new TypeError(c + " is ambiguous");
    e[o] = a;
  }
  var d = t.length, m = t.charAt(0), w = Math.log(d) / Math.log(256), S = Math.log(256) / Math.log(d);
  function A(I) {
    if ((Array.isArray(I) || I instanceof Uint8Array) && (I = _Buffer$1.from(I)), !_Buffer$1.isBuffer(I))
      throw new TypeError("Expected Buffer");
    if (I.length === 0)
      return "";
    for (var O = 0, L = 0, C = 0, z = I.length; C !== z && I[C] === 0; )
      C++, O++;
    for (var q = (z - C) * S + 1 >>> 0, Z = new Uint8Array(q); C !== z; ) {
      for (var X = I[C], ie = 0, fe = q - 1; (X !== 0 || ie < L) && fe !== -1; fe--, ie++)
        X += 256 * Z[fe] >>> 0, Z[fe] = X % d >>> 0, X = X / d >>> 0;
      if (X !== 0)
        throw new Error("Non-zero carry");
      L = ie, C++;
    }
    for (var ye = q - L; ye !== q && Z[ye] === 0; )
      ye++;
    for (var j = m.repeat(O); ye < q; ++ye)
      j += t.charAt(Z[ye]);
    return j;
  }
  function B(I) {
    if (typeof I != "string")
      throw new TypeError("Expected String");
    if (I.length === 0)
      return _Buffer$1.alloc(0);
    for (var O = 0, L = 0, C = 0; I[O] === m; )
      L++, O++;
    for (var z = (I.length - O) * w + 1 >>> 0, q = new Uint8Array(z); I[O]; ) {
      var Z = e[I.charCodeAt(O)];
      if (Z === 255)
        return;
      for (var X = 0, ie = z - 1; (Z !== 0 || X < C) && ie !== -1; ie--, X++)
        Z += d * q[ie] >>> 0, q[ie] = Z % 256 >>> 0, Z = Z / 256 >>> 0;
      if (Z !== 0)
        throw new Error("Non-zero carry");
      C = X, O++;
    }
    for (var fe = z - C; fe !== z && q[fe] === 0; )
      fe++;
    var ye = _Buffer$1.allocUnsafe(L + (z - fe));
    ye.fill(0, 0, L);
    for (var j = L; fe !== z; )
      ye[j++] = q[fe++];
    return ye;
  }
  function P(I) {
    var O = B(I);
    if (O)
      return O;
    throw new Error("Non-base" + d + " character");
  }
  return {
    encode: A,
    decodeUnsafe: B,
    decode: P
  };
}
var src$2 = base$2, basex$2 = src$2, ALPHABET$2 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz", bs58$4 = basex$2(ALPHABET$2);
function inRange(t, e, n) {
  return e <= t && t <= n;
}
function ToDictionary(t) {
  if (t === void 0)
    return {};
  if (t === Object(t))
    return t;
  throw TypeError("Could not convert argument to dictionary");
}
function stringToCodePoints(t) {
  for (var e = String(t), n = e.length, a = 0, c = []; a < n; ) {
    var o = e.charCodeAt(a);
    if (o < 55296 || o > 57343)
      c.push(o);
    else if (56320 <= o && o <= 57343)
      c.push(65533);
    else if (55296 <= o && o <= 56319)
      if (a === n - 1)
        c.push(65533);
      else {
        var d = t.charCodeAt(a + 1);
        if (56320 <= d && d <= 57343) {
          var m = o & 1023, w = d & 1023;
          c.push(65536 + (m << 10) + w), a += 1;
        } else
          c.push(65533);
      }
    a += 1;
  }
  return c;
}
function codePointsToString(t) {
  for (var e = "", n = 0; n < t.length; ++n) {
    var a = t[n];
    a <= 65535 ? e += String.fromCharCode(a) : (a -= 65536, e += String.fromCharCode(
      (a >> 10) + 55296,
      (a & 1023) + 56320
    ));
  }
  return e;
}
var end_of_stream = -1;
function Stream(t) {
  this.tokens = [].slice.call(t);
}
Stream.prototype = {
  /**
   * @return {boolean} True if end-of-stream has been hit.
   */
  endOfStream: function() {
    return !this.tokens.length;
  },
  /**
   * When a token is read from a stream, the first token in the
   * stream must be returned and subsequently removed, and
   * end-of-stream must be returned otherwise.
   *
   * @return {number} Get the next token from the stream, or
   * end_of_stream.
   */
  read: function() {
    return this.tokens.length ? this.tokens.shift() : end_of_stream;
  },
  /**
   * When one or more tokens are prepended to a stream, those tokens
   * must be inserted, in given order, before the first token in the
   * stream.
   *
   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.
   */
  prepend: function(t) {
    if (Array.isArray(t))
      for (var e = (
        /**@type {!Array.<number>}*/
        t
      ); e.length; )
        this.tokens.unshift(e.pop());
    else
      this.tokens.unshift(t);
  },
  /**
   * When one or more tokens are pushed to a stream, those tokens
   * must be inserted, in given order, after the last token in the
   * stream.
   *
   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.
   */
  push: function(t) {
    if (Array.isArray(t))
      for (var e = (
        /**@type {!Array.<number>}*/
        t
      ); e.length; )
        this.tokens.push(e.shift());
    else
      this.tokens.push(t);
  }
};
var finished = -1;
function decoderError(t, e) {
  if (t)
    throw TypeError("Decoder error");
  return e || 65533;
}
var DEFAULT_ENCODING = "utf-8";
function TextDecoder$1(t, e) {
  if (!(this instanceof TextDecoder$1))
    return new TextDecoder$1(t, e);
  if (t = t !== void 0 ? String(t).toLowerCase() : DEFAULT_ENCODING, t !== DEFAULT_ENCODING)
    throw new Error("Encoding not supported. Only utf-8 is supported");
  e = ToDictionary(e), this._streaming = !1, this._BOMseen = !1, this._decoder = null, this._fatal = !!e.fatal, this._ignoreBOM = !!e.ignoreBOM, Object.defineProperty(this, "encoding", { value: "utf-8" }), Object.defineProperty(this, "fatal", { value: this._fatal }), Object.defineProperty(this, "ignoreBOM", { value: this._ignoreBOM });
}
TextDecoder$1.prototype = {
  /**
   * @param {ArrayBufferView=} input The buffer of bytes to decode.
   * @param {Object=} options
   * @return {string} The decoded string.
   */
  decode: function(e, n) {
    var a;
    typeof e == "object" && e instanceof ArrayBuffer ? a = new Uint8Array(e) : typeof e == "object" && "buffer" in e && e.buffer instanceof ArrayBuffer ? a = new Uint8Array(
      e.buffer,
      e.byteOffset,
      e.byteLength
    ) : a = new Uint8Array(0), n = ToDictionary(n), this._streaming || (this._decoder = new UTF8Decoder({ fatal: this._fatal }), this._BOMseen = !1), this._streaming = !!n.stream;
    for (var c = new Stream(a), o = [], d; !c.endOfStream() && (d = this._decoder.handler(c, c.read()), d !== finished); )
      d !== null && (Array.isArray(d) ? o.push.apply(
        o,
        /**@type {!Array.<number>}*/
        d
      ) : o.push(d));
    if (!this._streaming) {
      do {
        if (d = this._decoder.handler(c, c.read()), d === finished)
          break;
        d !== null && (Array.isArray(d) ? o.push.apply(
          o,
          /**@type {!Array.<number>}*/
          d
        ) : o.push(d));
      } while (!c.endOfStream());
      this._decoder = null;
    }
    return o.length && ["utf-8"].indexOf(this.encoding) !== -1 && !this._ignoreBOM && !this._BOMseen && (o[0] === 65279 ? (this._BOMseen = !0, o.shift()) : this._BOMseen = !0), codePointsToString(o);
  }
};
function TextEncoder$1(t, e) {
  if (!(this instanceof TextEncoder$1))
    return new TextEncoder$1(t, e);
  if (t = t !== void 0 ? String(t).toLowerCase() : DEFAULT_ENCODING, t !== DEFAULT_ENCODING)
    throw new Error("Encoding not supported. Only utf-8 is supported");
  e = ToDictionary(e), this._streaming = !1, this._encoder = null, this._options = { fatal: !!e.fatal }, Object.defineProperty(this, "encoding", { value: "utf-8" });
}
TextEncoder$1.prototype = {
  /**
   * @param {string=} opt_string The string to encode.
   * @param {Object=} options
   * @return {Uint8Array} Encoded bytes, as a Uint8Array.
   */
  encode: function(e, n) {
    e = e ? String(e) : "", n = ToDictionary(n), this._streaming || (this._encoder = new UTF8Encoder(this._options)), this._streaming = !!n.stream;
    for (var a = [], c = new Stream(stringToCodePoints(e)), o; !c.endOfStream() && (o = this._encoder.handler(c, c.read()), o !== finished); )
      Array.isArray(o) ? a.push.apply(
        a,
        /**@type {!Array.<number>}*/
        o
      ) : a.push(o);
    if (!this._streaming) {
      for (; o = this._encoder.handler(c, c.read()), o !== finished; )
        Array.isArray(o) ? a.push.apply(
          a,
          /**@type {!Array.<number>}*/
          o
        ) : a.push(o);
      this._encoder = null;
    }
    return new Uint8Array(a);
  }
};
function UTF8Decoder(t) {
  var e = t.fatal, n = 0, a = 0, c = 0, o = 128, d = 191;
  this.handler = function(m, w) {
    if (w === end_of_stream && c !== 0)
      return c = 0, decoderError(e);
    if (w === end_of_stream)
      return finished;
    if (c === 0) {
      if (inRange(w, 0, 127))
        return w;
      if (inRange(w, 194, 223))
        c = 1, n = w - 192;
      else if (inRange(w, 224, 239))
        w === 224 && (o = 160), w === 237 && (d = 159), c = 2, n = w - 224;
      else if (inRange(w, 240, 244))
        w === 240 && (o = 144), w === 244 && (d = 143), c = 3, n = w - 240;
      else
        return decoderError(e);
      return n = n << 6 * c, null;
    }
    if (!inRange(w, o, d))
      return n = c = a = 0, o = 128, d = 191, m.prepend(w), decoderError(e);
    if (o = 128, d = 191, a += 1, n += w - 128 << 6 * (c - a), a !== c)
      return null;
    var S = n;
    return n = c = a = 0, S;
  };
}
function UTF8Encoder(t) {
  t.fatal, this.handler = function(e, n) {
    if (n === end_of_stream)
      return finished;
    if (inRange(n, 0, 127))
      return n;
    var a, c;
    inRange(n, 128, 2047) ? (a = 1, c = 192) : inRange(n, 2048, 65535) ? (a = 2, c = 224) : inRange(n, 65536, 1114111) && (a = 3, c = 240);
    for (var o = [(n >> 6 * a) + c]; a > 0; ) {
      var d = n >> 6 * (a - 1);
      o.push(128 | d & 63), a -= 1;
    }
    return o;
  };
}
const encoding$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  TextDecoder: TextDecoder$1,
  TextEncoder: TextEncoder$1
}, Symbol.toStringTag, { value: "Module" })), require$$2 = /* @__PURE__ */ getAugmentedNamespace(encoding$1);
var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(t, e, n, a) {
  a === void 0 && (a = n), Object.defineProperty(t, a, { enumerable: !0, get: function() {
    return e[n];
  } });
} : function(t, e, n, a) {
  a === void 0 && (a = n), t[a] = e[n];
}), __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(t, e) {
  Object.defineProperty(t, "default", { enumerable: !0, value: e });
} : function(t, e) {
  t.default = e;
}), __decorate = commonjsGlobal && commonjsGlobal.__decorate || function(t, e, n, a) {
  var c = arguments.length, o = c < 3 ? e : a === null ? a = Object.getOwnPropertyDescriptor(e, n) : a, d;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    o = Reflect.decorate(t, e, n, a);
  else
    for (var m = t.length - 1; m >= 0; m--)
      (d = t[m]) && (o = (c < 3 ? d(o) : c > 3 ? d(e, n, o) : d(e, n)) || o);
  return c > 3 && o && Object.defineProperty(e, n, o), o;
}, __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(t) {
  if (t && t.__esModule)
    return t;
  var e = {};
  if (t != null)
    for (var n in t)
      n !== "default" && Object.hasOwnProperty.call(t, n) && __createBinding(e, t, n);
  return __setModuleDefault(e, t), e;
}, __importDefault$5 = commonjsGlobal && commonjsGlobal.__importDefault || function(t) {
  return t && t.__esModule ? t : { default: t };
};
Object.defineProperty(lib$7, "__esModule", { value: !0 });
var deserializeUnchecked_1 = lib$7.deserializeUnchecked = deserialize_1 = lib$7.deserialize = serialize_1 = lib$7.serialize = lib$7.BinaryReader = lib$7.BinaryWriter = lib$7.BorshError = lib$7.baseDecode = lib$7.baseEncode = void 0;
const bn_js_1 = __importDefault$5(bnExports$4), bs58_1 = __importDefault$5(bs58$4), encoding = __importStar(require$$2), ResolvedTextDecoder = typeof TextDecoder != "function" ? encoding.TextDecoder : TextDecoder, textDecoder = new ResolvedTextDecoder("utf-8", { fatal: !0 });
function baseEncode(t) {
  return typeof t == "string" && (t = Buffer$F.from(t, "utf8")), bs58_1.default.encode(Buffer$F.from(t));
}
lib$7.baseEncode = baseEncode;
function baseDecode(t) {
  return Buffer$F.from(bs58_1.default.decode(t));
}
lib$7.baseDecode = baseDecode;
const INITIAL_LENGTH = 1024;
class BorshError extends Error {
  constructor(e) {
    super(e), this.fieldPath = [], this.originalMessage = e;
  }
  addToFieldPath(e) {
    this.fieldPath.splice(0, 0, e), this.message = this.originalMessage + ": " + this.fieldPath.join(".");
  }
}
lib$7.BorshError = BorshError;
class BinaryWriter {
  constructor() {
    this.buf = Buffer$F.alloc(INITIAL_LENGTH), this.length = 0;
  }
  maybeResize() {
    this.buf.length < 16 + this.length && (this.buf = Buffer$F.concat([this.buf, Buffer$F.alloc(INITIAL_LENGTH)]));
  }
  writeU8(e) {
    this.maybeResize(), this.buf.writeUInt8(e, this.length), this.length += 1;
  }
  writeU16(e) {
    this.maybeResize(), this.buf.writeUInt16LE(e, this.length), this.length += 2;
  }
  writeU32(e) {
    this.maybeResize(), this.buf.writeUInt32LE(e, this.length), this.length += 4;
  }
  writeU64(e) {
    this.maybeResize(), this.writeBuffer(Buffer$F.from(new bn_js_1.default(e).toArray("le", 8)));
  }
  writeU128(e) {
    this.maybeResize(), this.writeBuffer(Buffer$F.from(new bn_js_1.default(e).toArray("le", 16)));
  }
  writeU256(e) {
    this.maybeResize(), this.writeBuffer(Buffer$F.from(new bn_js_1.default(e).toArray("le", 32)));
  }
  writeU512(e) {
    this.maybeResize(), this.writeBuffer(Buffer$F.from(new bn_js_1.default(e).toArray("le", 64)));
  }
  writeBuffer(e) {
    this.buf = Buffer$F.concat([
      Buffer$F.from(this.buf.subarray(0, this.length)),
      e,
      Buffer$F.alloc(INITIAL_LENGTH)
    ]), this.length += e.length;
  }
  writeString(e) {
    this.maybeResize();
    const n = Buffer$F.from(e, "utf8");
    this.writeU32(n.length), this.writeBuffer(n);
  }
  writeFixedArray(e) {
    this.writeBuffer(Buffer$F.from(e));
  }
  writeArray(e, n) {
    this.maybeResize(), this.writeU32(e.length);
    for (const a of e)
      this.maybeResize(), n(a);
  }
  toArray() {
    return this.buf.subarray(0, this.length);
  }
}
lib$7.BinaryWriter = BinaryWriter;
function handlingRangeError(t, e, n) {
  const a = n.value;
  n.value = function(...c) {
    try {
      return a.apply(this, c);
    } catch (o) {
      if (o instanceof RangeError) {
        const d = o.code;
        if (["ERR_BUFFER_OUT_OF_BOUNDS", "ERR_OUT_OF_RANGE"].indexOf(d) >= 0)
          throw new BorshError("Reached the end of buffer when deserializing");
      }
      throw o;
    }
  };
}
class BinaryReader {
  constructor(e) {
    this.buf = e, this.offset = 0;
  }
  readU8() {
    const e = this.buf.readUInt8(this.offset);
    return this.offset += 1, e;
  }
  readU16() {
    const e = this.buf.readUInt16LE(this.offset);
    return this.offset += 2, e;
  }
  readU32() {
    const e = this.buf.readUInt32LE(this.offset);
    return this.offset += 4, e;
  }
  readU64() {
    const e = this.readBuffer(8);
    return new bn_js_1.default(e, "le");
  }
  readU128() {
    const e = this.readBuffer(16);
    return new bn_js_1.default(e, "le");
  }
  readU256() {
    const e = this.readBuffer(32);
    return new bn_js_1.default(e, "le");
  }
  readU512() {
    const e = this.readBuffer(64);
    return new bn_js_1.default(e, "le");
  }
  readBuffer(e) {
    if (this.offset + e > this.buf.length)
      throw new BorshError(`Expected buffer length ${e} isn't within bounds`);
    const n = this.buf.slice(this.offset, this.offset + e);
    return this.offset += e, n;
  }
  readString() {
    const e = this.readU32(), n = this.readBuffer(e);
    try {
      return textDecoder.decode(n);
    } catch (a) {
      throw new BorshError(`Error decoding UTF-8 string: ${a}`);
    }
  }
  readFixedArray(e) {
    return new Uint8Array(this.readBuffer(e));
  }
  readArray(e) {
    const n = this.readU32(), a = Array();
    for (let c = 0; c < n; ++c)
      a.push(e());
    return a;
  }
}
__decorate([
  handlingRangeError
], BinaryReader.prototype, "readU8", null);
__decorate([
  handlingRangeError
], BinaryReader.prototype, "readU16", null);
__decorate([
  handlingRangeError
], BinaryReader.prototype, "readU32", null);
__decorate([
  handlingRangeError
], BinaryReader.prototype, "readU64", null);
__decorate([
  handlingRangeError
], BinaryReader.prototype, "readU128", null);
__decorate([
  handlingRangeError
], BinaryReader.prototype, "readU256", null);
__decorate([
  handlingRangeError
], BinaryReader.prototype, "readU512", null);
__decorate([
  handlingRangeError
], BinaryReader.prototype, "readString", null);
__decorate([
  handlingRangeError
], BinaryReader.prototype, "readFixedArray", null);
__decorate([
  handlingRangeError
], BinaryReader.prototype, "readArray", null);
lib$7.BinaryReader = BinaryReader;
function capitalizeFirstLetter(t) {
  return t.charAt(0).toUpperCase() + t.slice(1);
}
function serializeField(t, e, n, a, c) {
  try {
    if (typeof a == "string")
      c[`write${capitalizeFirstLetter(a)}`](n);
    else if (a instanceof Array)
      if (typeof a[0] == "number") {
        if (n.length !== a[0])
          throw new BorshError(`Expecting byte array of length ${a[0]}, but got ${n.length} bytes`);
        c.writeFixedArray(n);
      } else if (a.length === 2 && typeof a[1] == "number") {
        if (n.length !== a[1])
          throw new BorshError(`Expecting byte array of length ${a[1]}, but got ${n.length} bytes`);
        for (let o = 0; o < a[1]; o++)
          serializeField(t, null, n[o], a[0], c);
      } else
        c.writeArray(n, (o) => {
          serializeField(t, e, o, a[0], c);
        });
    else if (a.kind !== void 0)
      switch (a.kind) {
        case "option": {
          n == null ? c.writeU8(0) : (c.writeU8(1), serializeField(t, e, n, a.type, c));
          break;
        }
        case "map": {
          c.writeU32(n.size), n.forEach((o, d) => {
            serializeField(t, e, d, a.key, c), serializeField(t, e, o, a.value, c);
          });
          break;
        }
        default:
          throw new BorshError(`FieldType ${a} unrecognized`);
      }
    else
      serializeStruct(t, n, c);
  } catch (o) {
    throw o instanceof BorshError && o.addToFieldPath(e), o;
  }
}
function serializeStruct(t, e, n) {
  if (typeof e.borshSerialize == "function") {
    e.borshSerialize(n);
    return;
  }
  const a = t.get(e.constructor);
  if (!a)
    throw new BorshError(`Class ${e.constructor.name} is missing in schema`);
  if (a.kind === "struct")
    a.fields.map(([c, o]) => {
      serializeField(t, c, e[c], o, n);
    });
  else if (a.kind === "enum") {
    const c = e[a.field];
    for (let o = 0; o < a.values.length; ++o) {
      const [d, m] = a.values[o];
      if (d === c) {
        n.writeU8(o), serializeField(t, d, e[d], m, n);
        break;
      }
    }
  } else
    throw new BorshError(`Unexpected schema kind: ${a.kind} for ${e.constructor.name}`);
}
function serialize(t, e, n = BinaryWriter) {
  const a = new n();
  return serializeStruct(t, e, a), a.toArray();
}
var serialize_1 = lib$7.serialize = serialize;
function deserializeField(t, e, n, a) {
  try {
    if (typeof n == "string")
      return a[`read${capitalizeFirstLetter(n)}`]();
    if (n instanceof Array) {
      if (typeof n[0] == "number")
        return a.readFixedArray(n[0]);
      if (typeof n[1] == "number") {
        const c = [];
        for (let o = 0; o < n[1]; o++)
          c.push(deserializeField(t, null, n[0], a));
        return c;
      } else
        return a.readArray(() => deserializeField(t, e, n[0], a));
    }
    if (n.kind === "option")
      return a.readU8() ? deserializeField(t, e, n.type, a) : void 0;
    if (n.kind === "map") {
      let c = /* @__PURE__ */ new Map();
      const o = a.readU32();
      for (let d = 0; d < o; d++) {
        const m = deserializeField(t, e, n.key, a), w = deserializeField(t, e, n.value, a);
        c.set(m, w);
      }
      return c;
    }
    return deserializeStruct(t, n, a);
  } catch (c) {
    throw c instanceof BorshError && c.addToFieldPath(e), c;
  }
}
function deserializeStruct(t, e, n) {
  if (typeof e.borshDeserialize == "function")
    return e.borshDeserialize(n);
  const a = t.get(e);
  if (!a)
    throw new BorshError(`Class ${e.name} is missing in schema`);
  if (a.kind === "struct") {
    const c = {};
    for (const [o, d] of t.get(e).fields)
      c[o] = deserializeField(t, o, d, n);
    return new e(c);
  }
  if (a.kind === "enum") {
    const c = n.readU8();
    if (c >= a.values.length)
      throw new BorshError(`Enum index: ${c} is out of range`);
    const [o, d] = a.values[c], m = deserializeField(t, o, d, n);
    return new e({ [o]: m });
  }
  throw new BorshError(`Unexpected schema kind: ${a.kind} for ${e.constructor.name}`);
}
function deserialize(t, e, n, a = BinaryReader) {
  const c = new a(n), o = deserializeStruct(t, e, c);
  if (c.offset < n.length)
    throw new BorshError(`Unexpected ${n.length - c.offset} bytes after deserialized data`);
  return o;
}
var deserialize_1 = lib$7.deserialize = deserialize;
function deserializeUnchecked(t, e, n, a = BinaryReader) {
  const c = new a(n);
  return deserializeStruct(t, e, c);
}
deserializeUnchecked_1 = lib$7.deserializeUnchecked = deserializeUnchecked;
function commonjsRequire(t) {
  throw new Error('Could not dynamically require "' + t + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var naclFast = { exports: {} };
(function(t) {
  (function(e) {
    var n = function(Q) {
      var te, ne = new Float64Array(16);
      if (Q)
        for (te = 0; te < Q.length; te++)
          ne[te] = Q[te];
      return ne;
    }, a = function() {
      throw new Error("no PRNG");
    }, c = new Uint8Array(16), o = new Uint8Array(32);
    o[0] = 9;
    var d = n(), m = n([1]), w = n([56129, 1]), S = n([30883, 4953, 19914, 30187, 55467, 16705, 2637, 112, 59544, 30585, 16505, 36039, 65139, 11119, 27886, 20995]), A = n([61785, 9906, 39828, 60374, 45398, 33411, 5274, 224, 53552, 61171, 33010, 6542, 64743, 22239, 55772, 9222]), B = n([54554, 36645, 11616, 51542, 42930, 38181, 51040, 26924, 56412, 64982, 57905, 49316, 21502, 52590, 14035, 8553]), P = n([26200, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214]), I = n([41136, 18958, 6951, 50414, 58488, 44335, 6150, 12099, 55207, 15867, 153, 11085, 57099, 20417, 9344, 11139]);
    function O(Q, te, ne, D) {
      Q[te] = ne >> 24 & 255, Q[te + 1] = ne >> 16 & 255, Q[te + 2] = ne >> 8 & 255, Q[te + 3] = ne & 255, Q[te + 4] = D >> 24 & 255, Q[te + 5] = D >> 16 & 255, Q[te + 6] = D >> 8 & 255, Q[te + 7] = D & 255;
    }
    function L(Q, te, ne, D, se) {
      var pe, $e = 0;
      for (pe = 0; pe < se; pe++)
        $e |= Q[te + pe] ^ ne[D + pe];
      return (1 & $e - 1 >>> 8) - 1;
    }
    function C(Q, te, ne, D) {
      return L(Q, te, ne, D, 16);
    }
    function z(Q, te, ne, D) {
      return L(Q, te, ne, D, 32);
    }
    function q(Q, te, ne, D) {
      for (var se = D[0] & 255 | (D[1] & 255) << 8 | (D[2] & 255) << 16 | (D[3] & 255) << 24, pe = ne[0] & 255 | (ne[1] & 255) << 8 | (ne[2] & 255) << 16 | (ne[3] & 255) << 24, $e = ne[4] & 255 | (ne[5] & 255) << 8 | (ne[6] & 255) << 16 | (ne[7] & 255) << 24, be = ne[8] & 255 | (ne[9] & 255) << 8 | (ne[10] & 255) << 16 | (ne[11] & 255) << 24, _e = ne[12] & 255 | (ne[13] & 255) << 8 | (ne[14] & 255) << 16 | (ne[15] & 255) << 24, Je = D[4] & 255 | (D[5] & 255) << 8 | (D[6] & 255) << 16 | (D[7] & 255) << 24, We = te[0] & 255 | (te[1] & 255) << 8 | (te[2] & 255) << 16 | (te[3] & 255) << 24, bt = te[4] & 255 | (te[5] & 255) << 8 | (te[6] & 255) << 16 | (te[7] & 255) << 24, Ye = te[8] & 255 | (te[9] & 255) << 8 | (te[10] & 255) << 16 | (te[11] & 255) << 24, ot = te[12] & 255 | (te[13] & 255) << 8 | (te[14] & 255) << 16 | (te[15] & 255) << 24, ct = D[8] & 255 | (D[9] & 255) << 8 | (D[10] & 255) << 16 | (D[11] & 255) << 24, lt = ne[16] & 255 | (ne[17] & 255) << 8 | (ne[18] & 255) << 16 | (ne[19] & 255) << 24, mt = ne[20] & 255 | (ne[21] & 255) << 8 | (ne[22] & 255) << 16 | (ne[23] & 255) << 24, dt = ne[24] & 255 | (ne[25] & 255) << 8 | (ne[26] & 255) << 16 | (ne[27] & 255) << 24, yt = ne[28] & 255 | (ne[29] & 255) << 8 | (ne[30] & 255) << 16 | (ne[31] & 255) << 24, pt = D[12] & 255 | (D[13] & 255) << 8 | (D[14] & 255) << 16 | (D[15] & 255) << 24, tt = se, st = pe, Qe = $e, rt = be, it = _e, et = Je, Ie = We, Ce = bt, Xe = Ye, Ve = ot, Ze = ct, nt = lt, St = mt, Mt = dt, Tt = yt, Bt = pt, we, kt = 0; kt < 20; kt += 2)
        we = tt + St | 0, it ^= we << 7 | we >>> 25, we = it + tt | 0, Xe ^= we << 9 | we >>> 23, we = Xe + it | 0, St ^= we << 13 | we >>> 19, we = St + Xe | 0, tt ^= we << 18 | we >>> 14, we = et + st | 0, Ve ^= we << 7 | we >>> 25, we = Ve + et | 0, Mt ^= we << 9 | we >>> 23, we = Mt + Ve | 0, st ^= we << 13 | we >>> 19, we = st + Mt | 0, et ^= we << 18 | we >>> 14, we = Ze + Ie | 0, Tt ^= we << 7 | we >>> 25, we = Tt + Ze | 0, Qe ^= we << 9 | we >>> 23, we = Qe + Tt | 0, Ie ^= we << 13 | we >>> 19, we = Ie + Qe | 0, Ze ^= we << 18 | we >>> 14, we = Bt + nt | 0, rt ^= we << 7 | we >>> 25, we = rt + Bt | 0, Ce ^= we << 9 | we >>> 23, we = Ce + rt | 0, nt ^= we << 13 | we >>> 19, we = nt + Ce | 0, Bt ^= we << 18 | we >>> 14, we = tt + rt | 0, st ^= we << 7 | we >>> 25, we = st + tt | 0, Qe ^= we << 9 | we >>> 23, we = Qe + st | 0, rt ^= we << 13 | we >>> 19, we = rt + Qe | 0, tt ^= we << 18 | we >>> 14, we = et + it | 0, Ie ^= we << 7 | we >>> 25, we = Ie + et | 0, Ce ^= we << 9 | we >>> 23, we = Ce + Ie | 0, it ^= we << 13 | we >>> 19, we = it + Ce | 0, et ^= we << 18 | we >>> 14, we = Ze + Ve | 0, nt ^= we << 7 | we >>> 25, we = nt + Ze | 0, Xe ^= we << 9 | we >>> 23, we = Xe + nt | 0, Ve ^= we << 13 | we >>> 19, we = Ve + Xe | 0, Ze ^= we << 18 | we >>> 14, we = Bt + Tt | 0, St ^= we << 7 | we >>> 25, we = St + Bt | 0, Mt ^= we << 9 | we >>> 23, we = Mt + St | 0, Tt ^= we << 13 | we >>> 19, we = Tt + Mt | 0, Bt ^= we << 18 | we >>> 14;
      tt = tt + se | 0, st = st + pe | 0, Qe = Qe + $e | 0, rt = rt + be | 0, it = it + _e | 0, et = et + Je | 0, Ie = Ie + We | 0, Ce = Ce + bt | 0, Xe = Xe + Ye | 0, Ve = Ve + ot | 0, Ze = Ze + ct | 0, nt = nt + lt | 0, St = St + mt | 0, Mt = Mt + dt | 0, Tt = Tt + yt | 0, Bt = Bt + pt | 0, Q[0] = tt >>> 0 & 255, Q[1] = tt >>> 8 & 255, Q[2] = tt >>> 16 & 255, Q[3] = tt >>> 24 & 255, Q[4] = st >>> 0 & 255, Q[5] = st >>> 8 & 255, Q[6] = st >>> 16 & 255, Q[7] = st >>> 24 & 255, Q[8] = Qe >>> 0 & 255, Q[9] = Qe >>> 8 & 255, Q[10] = Qe >>> 16 & 255, Q[11] = Qe >>> 24 & 255, Q[12] = rt >>> 0 & 255, Q[13] = rt >>> 8 & 255, Q[14] = rt >>> 16 & 255, Q[15] = rt >>> 24 & 255, Q[16] = it >>> 0 & 255, Q[17] = it >>> 8 & 255, Q[18] = it >>> 16 & 255, Q[19] = it >>> 24 & 255, Q[20] = et >>> 0 & 255, Q[21] = et >>> 8 & 255, Q[22] = et >>> 16 & 255, Q[23] = et >>> 24 & 255, Q[24] = Ie >>> 0 & 255, Q[25] = Ie >>> 8 & 255, Q[26] = Ie >>> 16 & 255, Q[27] = Ie >>> 24 & 255, Q[28] = Ce >>> 0 & 255, Q[29] = Ce >>> 8 & 255, Q[30] = Ce >>> 16 & 255, Q[31] = Ce >>> 24 & 255, Q[32] = Xe >>> 0 & 255, Q[33] = Xe >>> 8 & 255, Q[34] = Xe >>> 16 & 255, Q[35] = Xe >>> 24 & 255, Q[36] = Ve >>> 0 & 255, Q[37] = Ve >>> 8 & 255, Q[38] = Ve >>> 16 & 255, Q[39] = Ve >>> 24 & 255, Q[40] = Ze >>> 0 & 255, Q[41] = Ze >>> 8 & 255, Q[42] = Ze >>> 16 & 255, Q[43] = Ze >>> 24 & 255, Q[44] = nt >>> 0 & 255, Q[45] = nt >>> 8 & 255, Q[46] = nt >>> 16 & 255, Q[47] = nt >>> 24 & 255, Q[48] = St >>> 0 & 255, Q[49] = St >>> 8 & 255, Q[50] = St >>> 16 & 255, Q[51] = St >>> 24 & 255, Q[52] = Mt >>> 0 & 255, Q[53] = Mt >>> 8 & 255, Q[54] = Mt >>> 16 & 255, Q[55] = Mt >>> 24 & 255, Q[56] = Tt >>> 0 & 255, Q[57] = Tt >>> 8 & 255, Q[58] = Tt >>> 16 & 255, Q[59] = Tt >>> 24 & 255, Q[60] = Bt >>> 0 & 255, Q[61] = Bt >>> 8 & 255, Q[62] = Bt >>> 16 & 255, Q[63] = Bt >>> 24 & 255;
    }
    function Z(Q, te, ne, D) {
      for (var se = D[0] & 255 | (D[1] & 255) << 8 | (D[2] & 255) << 16 | (D[3] & 255) << 24, pe = ne[0] & 255 | (ne[1] & 255) << 8 | (ne[2] & 255) << 16 | (ne[3] & 255) << 24, $e = ne[4] & 255 | (ne[5] & 255) << 8 | (ne[6] & 255) << 16 | (ne[7] & 255) << 24, be = ne[8] & 255 | (ne[9] & 255) << 8 | (ne[10] & 255) << 16 | (ne[11] & 255) << 24, _e = ne[12] & 255 | (ne[13] & 255) << 8 | (ne[14] & 255) << 16 | (ne[15] & 255) << 24, Je = D[4] & 255 | (D[5] & 255) << 8 | (D[6] & 255) << 16 | (D[7] & 255) << 24, We = te[0] & 255 | (te[1] & 255) << 8 | (te[2] & 255) << 16 | (te[3] & 255) << 24, bt = te[4] & 255 | (te[5] & 255) << 8 | (te[6] & 255) << 16 | (te[7] & 255) << 24, Ye = te[8] & 255 | (te[9] & 255) << 8 | (te[10] & 255) << 16 | (te[11] & 255) << 24, ot = te[12] & 255 | (te[13] & 255) << 8 | (te[14] & 255) << 16 | (te[15] & 255) << 24, ct = D[8] & 255 | (D[9] & 255) << 8 | (D[10] & 255) << 16 | (D[11] & 255) << 24, lt = ne[16] & 255 | (ne[17] & 255) << 8 | (ne[18] & 255) << 16 | (ne[19] & 255) << 24, mt = ne[20] & 255 | (ne[21] & 255) << 8 | (ne[22] & 255) << 16 | (ne[23] & 255) << 24, dt = ne[24] & 255 | (ne[25] & 255) << 8 | (ne[26] & 255) << 16 | (ne[27] & 255) << 24, yt = ne[28] & 255 | (ne[29] & 255) << 8 | (ne[30] & 255) << 16 | (ne[31] & 255) << 24, pt = D[12] & 255 | (D[13] & 255) << 8 | (D[14] & 255) << 16 | (D[15] & 255) << 24, tt = se, st = pe, Qe = $e, rt = be, it = _e, et = Je, Ie = We, Ce = bt, Xe = Ye, Ve = ot, Ze = ct, nt = lt, St = mt, Mt = dt, Tt = yt, Bt = pt, we, kt = 0; kt < 20; kt += 2)
        we = tt + St | 0, it ^= we << 7 | we >>> 25, we = it + tt | 0, Xe ^= we << 9 | we >>> 23, we = Xe + it | 0, St ^= we << 13 | we >>> 19, we = St + Xe | 0, tt ^= we << 18 | we >>> 14, we = et + st | 0, Ve ^= we << 7 | we >>> 25, we = Ve + et | 0, Mt ^= we << 9 | we >>> 23, we = Mt + Ve | 0, st ^= we << 13 | we >>> 19, we = st + Mt | 0, et ^= we << 18 | we >>> 14, we = Ze + Ie | 0, Tt ^= we << 7 | we >>> 25, we = Tt + Ze | 0, Qe ^= we << 9 | we >>> 23, we = Qe + Tt | 0, Ie ^= we << 13 | we >>> 19, we = Ie + Qe | 0, Ze ^= we << 18 | we >>> 14, we = Bt + nt | 0, rt ^= we << 7 | we >>> 25, we = rt + Bt | 0, Ce ^= we << 9 | we >>> 23, we = Ce + rt | 0, nt ^= we << 13 | we >>> 19, we = nt + Ce | 0, Bt ^= we << 18 | we >>> 14, we = tt + rt | 0, st ^= we << 7 | we >>> 25, we = st + tt | 0, Qe ^= we << 9 | we >>> 23, we = Qe + st | 0, rt ^= we << 13 | we >>> 19, we = rt + Qe | 0, tt ^= we << 18 | we >>> 14, we = et + it | 0, Ie ^= we << 7 | we >>> 25, we = Ie + et | 0, Ce ^= we << 9 | we >>> 23, we = Ce + Ie | 0, it ^= we << 13 | we >>> 19, we = it + Ce | 0, et ^= we << 18 | we >>> 14, we = Ze + Ve | 0, nt ^= we << 7 | we >>> 25, we = nt + Ze | 0, Xe ^= we << 9 | we >>> 23, we = Xe + nt | 0, Ve ^= we << 13 | we >>> 19, we = Ve + Xe | 0, Ze ^= we << 18 | we >>> 14, we = Bt + Tt | 0, St ^= we << 7 | we >>> 25, we = St + Bt | 0, Mt ^= we << 9 | we >>> 23, we = Mt + St | 0, Tt ^= we << 13 | we >>> 19, we = Tt + Mt | 0, Bt ^= we << 18 | we >>> 14;
      Q[0] = tt >>> 0 & 255, Q[1] = tt >>> 8 & 255, Q[2] = tt >>> 16 & 255, Q[3] = tt >>> 24 & 255, Q[4] = et >>> 0 & 255, Q[5] = et >>> 8 & 255, Q[6] = et >>> 16 & 255, Q[7] = et >>> 24 & 255, Q[8] = Ze >>> 0 & 255, Q[9] = Ze >>> 8 & 255, Q[10] = Ze >>> 16 & 255, Q[11] = Ze >>> 24 & 255, Q[12] = Bt >>> 0 & 255, Q[13] = Bt >>> 8 & 255, Q[14] = Bt >>> 16 & 255, Q[15] = Bt >>> 24 & 255, Q[16] = Ie >>> 0 & 255, Q[17] = Ie >>> 8 & 255, Q[18] = Ie >>> 16 & 255, Q[19] = Ie >>> 24 & 255, Q[20] = Ce >>> 0 & 255, Q[21] = Ce >>> 8 & 255, Q[22] = Ce >>> 16 & 255, Q[23] = Ce >>> 24 & 255, Q[24] = Xe >>> 0 & 255, Q[25] = Xe >>> 8 & 255, Q[26] = Xe >>> 16 & 255, Q[27] = Xe >>> 24 & 255, Q[28] = Ve >>> 0 & 255, Q[29] = Ve >>> 8 & 255, Q[30] = Ve >>> 16 & 255, Q[31] = Ve >>> 24 & 255;
    }
    function X(Q, te, ne, D) {
      q(Q, te, ne, D);
    }
    function ie(Q, te, ne, D) {
      Z(Q, te, ne, D);
    }
    var fe = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
    function ye(Q, te, ne, D, se, pe, $e) {
      var be = new Uint8Array(16), _e = new Uint8Array(64), Je, We;
      for (We = 0; We < 16; We++)
        be[We] = 0;
      for (We = 0; We < 8; We++)
        be[We] = pe[We];
      for (; se >= 64; ) {
        for (X(_e, be, $e, fe), We = 0; We < 64; We++)
          Q[te + We] = ne[D + We] ^ _e[We];
        for (Je = 1, We = 8; We < 16; We++)
          Je = Je + (be[We] & 255) | 0, be[We] = Je & 255, Je >>>= 8;
        se -= 64, te += 64, D += 64;
      }
      if (se > 0)
        for (X(_e, be, $e, fe), We = 0; We < se; We++)
          Q[te + We] = ne[D + We] ^ _e[We];
      return 0;
    }
    function j(Q, te, ne, D, se) {
      var pe = new Uint8Array(16), $e = new Uint8Array(64), be, _e;
      for (_e = 0; _e < 16; _e++)
        pe[_e] = 0;
      for (_e = 0; _e < 8; _e++)
        pe[_e] = D[_e];
      for (; ne >= 64; ) {
        for (X($e, pe, se, fe), _e = 0; _e < 64; _e++)
          Q[te + _e] = $e[_e];
        for (be = 1, _e = 8; _e < 16; _e++)
          be = be + (pe[_e] & 255) | 0, pe[_e] = be & 255, be >>>= 8;
        ne -= 64, te += 64;
      }
      if (ne > 0)
        for (X($e, pe, se, fe), _e = 0; _e < ne; _e++)
          Q[te + _e] = $e[_e];
      return 0;
    }
    function V(Q, te, ne, D, se) {
      var pe = new Uint8Array(32);
      ie(pe, D, se, fe);
      for (var $e = new Uint8Array(8), be = 0; be < 8; be++)
        $e[be] = D[be + 16];
      return j(Q, te, ne, $e, pe);
    }
    function ae(Q, te, ne, D, se, pe, $e) {
      var be = new Uint8Array(32);
      ie(be, pe, $e, fe);
      for (var _e = new Uint8Array(8), Je = 0; Je < 8; Je++)
        _e[Je] = pe[Je + 16];
      return ye(Q, te, ne, D, se, _e, be);
    }
    var _ = function(Q) {
      this.buffer = new Uint8Array(16), this.r = new Uint16Array(10), this.h = new Uint16Array(10), this.pad = new Uint16Array(8), this.leftover = 0, this.fin = 0;
      var te, ne, D, se, pe, $e, be, _e;
      te = Q[0] & 255 | (Q[1] & 255) << 8, this.r[0] = te & 8191, ne = Q[2] & 255 | (Q[3] & 255) << 8, this.r[1] = (te >>> 13 | ne << 3) & 8191, D = Q[4] & 255 | (Q[5] & 255) << 8, this.r[2] = (ne >>> 10 | D << 6) & 7939, se = Q[6] & 255 | (Q[7] & 255) << 8, this.r[3] = (D >>> 7 | se << 9) & 8191, pe = Q[8] & 255 | (Q[9] & 255) << 8, this.r[4] = (se >>> 4 | pe << 12) & 255, this.r[5] = pe >>> 1 & 8190, $e = Q[10] & 255 | (Q[11] & 255) << 8, this.r[6] = (pe >>> 14 | $e << 2) & 8191, be = Q[12] & 255 | (Q[13] & 255) << 8, this.r[7] = ($e >>> 11 | be << 5) & 8065, _e = Q[14] & 255 | (Q[15] & 255) << 8, this.r[8] = (be >>> 8 | _e << 8) & 8191, this.r[9] = _e >>> 5 & 127, this.pad[0] = Q[16] & 255 | (Q[17] & 255) << 8, this.pad[1] = Q[18] & 255 | (Q[19] & 255) << 8, this.pad[2] = Q[20] & 255 | (Q[21] & 255) << 8, this.pad[3] = Q[22] & 255 | (Q[23] & 255) << 8, this.pad[4] = Q[24] & 255 | (Q[25] & 255) << 8, this.pad[5] = Q[26] & 255 | (Q[27] & 255) << 8, this.pad[6] = Q[28] & 255 | (Q[29] & 255) << 8, this.pad[7] = Q[30] & 255 | (Q[31] & 255) << 8;
    };
    _.prototype.blocks = function(Q, te, ne) {
      for (var D = this.fin ? 0 : 2048, se, pe, $e, be, _e, Je, We, bt, Ye, ot, ct, lt, mt, dt, yt, pt, tt, st, Qe, rt = this.h[0], it = this.h[1], et = this.h[2], Ie = this.h[3], Ce = this.h[4], Xe = this.h[5], Ve = this.h[6], Ze = this.h[7], nt = this.h[8], St = this.h[9], Mt = this.r[0], Tt = this.r[1], Bt = this.r[2], we = this.r[3], kt = this.r[4], Ct = this.r[5], Nt = this.r[6], Rt = this.r[7], Pt = this.r[8], It = this.r[9]; ne >= 16; )
        se = Q[te + 0] & 255 | (Q[te + 1] & 255) << 8, rt += se & 8191, pe = Q[te + 2] & 255 | (Q[te + 3] & 255) << 8, it += (se >>> 13 | pe << 3) & 8191, $e = Q[te + 4] & 255 | (Q[te + 5] & 255) << 8, et += (pe >>> 10 | $e << 6) & 8191, be = Q[te + 6] & 255 | (Q[te + 7] & 255) << 8, Ie += ($e >>> 7 | be << 9) & 8191, _e = Q[te + 8] & 255 | (Q[te + 9] & 255) << 8, Ce += (be >>> 4 | _e << 12) & 8191, Xe += _e >>> 1 & 8191, Je = Q[te + 10] & 255 | (Q[te + 11] & 255) << 8, Ve += (_e >>> 14 | Je << 2) & 8191, We = Q[te + 12] & 255 | (Q[te + 13] & 255) << 8, Ze += (Je >>> 11 | We << 5) & 8191, bt = Q[te + 14] & 255 | (Q[te + 15] & 255) << 8, nt += (We >>> 8 | bt << 8) & 8191, St += bt >>> 5 | D, Ye = 0, ot = Ye, ot += rt * Mt, ot += it * (5 * It), ot += et * (5 * Pt), ot += Ie * (5 * Rt), ot += Ce * (5 * Nt), Ye = ot >>> 13, ot &= 8191, ot += Xe * (5 * Ct), ot += Ve * (5 * kt), ot += Ze * (5 * we), ot += nt * (5 * Bt), ot += St * (5 * Tt), Ye += ot >>> 13, ot &= 8191, ct = Ye, ct += rt * Tt, ct += it * Mt, ct += et * (5 * It), ct += Ie * (5 * Pt), ct += Ce * (5 * Rt), Ye = ct >>> 13, ct &= 8191, ct += Xe * (5 * Nt), ct += Ve * (5 * Ct), ct += Ze * (5 * kt), ct += nt * (5 * we), ct += St * (5 * Bt), Ye += ct >>> 13, ct &= 8191, lt = Ye, lt += rt * Bt, lt += it * Tt, lt += et * Mt, lt += Ie * (5 * It), lt += Ce * (5 * Pt), Ye = lt >>> 13, lt &= 8191, lt += Xe * (5 * Rt), lt += Ve * (5 * Nt), lt += Ze * (5 * Ct), lt += nt * (5 * kt), lt += St * (5 * we), Ye += lt >>> 13, lt &= 8191, mt = Ye, mt += rt * we, mt += it * Bt, mt += et * Tt, mt += Ie * Mt, mt += Ce * (5 * It), Ye = mt >>> 13, mt &= 8191, mt += Xe * (5 * Pt), mt += Ve * (5 * Rt), mt += Ze * (5 * Nt), mt += nt * (5 * Ct), mt += St * (5 * kt), Ye += mt >>> 13, mt &= 8191, dt = Ye, dt += rt * kt, dt += it * we, dt += et * Bt, dt += Ie * Tt, dt += Ce * Mt, Ye = dt >>> 13, dt &= 8191, dt += Xe * (5 * It), dt += Ve * (5 * Pt), dt += Ze * (5 * Rt), dt += nt * (5 * Nt), dt += St * (5 * Ct), Ye += dt >>> 13, dt &= 8191, yt = Ye, yt += rt * Ct, yt += it * kt, yt += et * we, yt += Ie * Bt, yt += Ce * Tt, Ye = yt >>> 13, yt &= 8191, yt += Xe * Mt, yt += Ve * (5 * It), yt += Ze * (5 * Pt), yt += nt * (5 * Rt), yt += St * (5 * Nt), Ye += yt >>> 13, yt &= 8191, pt = Ye, pt += rt * Nt, pt += it * Ct, pt += et * kt, pt += Ie * we, pt += Ce * Bt, Ye = pt >>> 13, pt &= 8191, pt += Xe * Tt, pt += Ve * Mt, pt += Ze * (5 * It), pt += nt * (5 * Pt), pt += St * (5 * Rt), Ye += pt >>> 13, pt &= 8191, tt = Ye, tt += rt * Rt, tt += it * Nt, tt += et * Ct, tt += Ie * kt, tt += Ce * we, Ye = tt >>> 13, tt &= 8191, tt += Xe * Bt, tt += Ve * Tt, tt += Ze * Mt, tt += nt * (5 * It), tt += St * (5 * Pt), Ye += tt >>> 13, tt &= 8191, st = Ye, st += rt * Pt, st += it * Rt, st += et * Nt, st += Ie * Ct, st += Ce * kt, Ye = st >>> 13, st &= 8191, st += Xe * we, st += Ve * Bt, st += Ze * Tt, st += nt * Mt, st += St * (5 * It), Ye += st >>> 13, st &= 8191, Qe = Ye, Qe += rt * It, Qe += it * Pt, Qe += et * Rt, Qe += Ie * Nt, Qe += Ce * Ct, Ye = Qe >>> 13, Qe &= 8191, Qe += Xe * kt, Qe += Ve * we, Qe += Ze * Bt, Qe += nt * Tt, Qe += St * Mt, Ye += Qe >>> 13, Qe &= 8191, Ye = (Ye << 2) + Ye | 0, Ye = Ye + ot | 0, ot = Ye & 8191, Ye = Ye >>> 13, ct += Ye, rt = ot, it = ct, et = lt, Ie = mt, Ce = dt, Xe = yt, Ve = pt, Ze = tt, nt = st, St = Qe, te += 16, ne -= 16;
      this.h[0] = rt, this.h[1] = it, this.h[2] = et, this.h[3] = Ie, this.h[4] = Ce, this.h[5] = Xe, this.h[6] = Ve, this.h[7] = Ze, this.h[8] = nt, this.h[9] = St;
    }, _.prototype.finish = function(Q, te) {
      var ne = new Uint16Array(10), D, se, pe, $e;
      if (this.leftover) {
        for ($e = this.leftover, this.buffer[$e++] = 1; $e < 16; $e++)
          this.buffer[$e] = 0;
        this.fin = 1, this.blocks(this.buffer, 0, 16);
      }
      for (D = this.h[1] >>> 13, this.h[1] &= 8191, $e = 2; $e < 10; $e++)
        this.h[$e] += D, D = this.h[$e] >>> 13, this.h[$e] &= 8191;
      for (this.h[0] += D * 5, D = this.h[0] >>> 13, this.h[0] &= 8191, this.h[1] += D, D = this.h[1] >>> 13, this.h[1] &= 8191, this.h[2] += D, ne[0] = this.h[0] + 5, D = ne[0] >>> 13, ne[0] &= 8191, $e = 1; $e < 10; $e++)
        ne[$e] = this.h[$e] + D, D = ne[$e] >>> 13, ne[$e] &= 8191;
      for (ne[9] -= 8192, se = (D ^ 1) - 1, $e = 0; $e < 10; $e++)
        ne[$e] &= se;
      for (se = ~se, $e = 0; $e < 10; $e++)
        this.h[$e] = this.h[$e] & se | ne[$e];
      for (this.h[0] = (this.h[0] | this.h[1] << 13) & 65535, this.h[1] = (this.h[1] >>> 3 | this.h[2] << 10) & 65535, this.h[2] = (this.h[2] >>> 6 | this.h[3] << 7) & 65535, this.h[3] = (this.h[3] >>> 9 | this.h[4] << 4) & 65535, this.h[4] = (this.h[4] >>> 12 | this.h[5] << 1 | this.h[6] << 14) & 65535, this.h[5] = (this.h[6] >>> 2 | this.h[7] << 11) & 65535, this.h[6] = (this.h[7] >>> 5 | this.h[8] << 8) & 65535, this.h[7] = (this.h[8] >>> 8 | this.h[9] << 5) & 65535, pe = this.h[0] + this.pad[0], this.h[0] = pe & 65535, $e = 1; $e < 8; $e++)
        pe = (this.h[$e] + this.pad[$e] | 0) + (pe >>> 16) | 0, this.h[$e] = pe & 65535;
      Q[te + 0] = this.h[0] >>> 0 & 255, Q[te + 1] = this.h[0] >>> 8 & 255, Q[te + 2] = this.h[1] >>> 0 & 255, Q[te + 3] = this.h[1] >>> 8 & 255, Q[te + 4] = this.h[2] >>> 0 & 255, Q[te + 5] = this.h[2] >>> 8 & 255, Q[te + 6] = this.h[3] >>> 0 & 255, Q[te + 7] = this.h[3] >>> 8 & 255, Q[te + 8] = this.h[4] >>> 0 & 255, Q[te + 9] = this.h[4] >>> 8 & 255, Q[te + 10] = this.h[5] >>> 0 & 255, Q[te + 11] = this.h[5] >>> 8 & 255, Q[te + 12] = this.h[6] >>> 0 & 255, Q[te + 13] = this.h[6] >>> 8 & 255, Q[te + 14] = this.h[7] >>> 0 & 255, Q[te + 15] = this.h[7] >>> 8 & 255;
    }, _.prototype.update = function(Q, te, ne) {
      var D, se;
      if (this.leftover) {
        for (se = 16 - this.leftover, se > ne && (se = ne), D = 0; D < se; D++)
          this.buffer[this.leftover + D] = Q[te + D];
        if (ne -= se, te += se, this.leftover += se, this.leftover < 16)
          return;
        this.blocks(this.buffer, 0, 16), this.leftover = 0;
      }
      if (ne >= 16 && (se = ne - ne % 16, this.blocks(Q, te, se), te += se, ne -= se), ne) {
        for (D = 0; D < ne; D++)
          this.buffer[this.leftover + D] = Q[te + D];
        this.leftover += ne;
      }
    };
    function u(Q, te, ne, D, se, pe) {
      var $e = new _(pe);
      return $e.update(ne, D, se), $e.finish(Q, te), 0;
    }
    function h(Q, te, ne, D, se, pe) {
      var $e = new Uint8Array(16);
      return u($e, 0, ne, D, se, pe), C(Q, te, $e, 0);
    }
    function p(Q, te, ne, D, se) {
      var pe;
      if (ne < 32)
        return -1;
      for (ae(Q, 0, te, 0, ne, D, se), u(Q, 16, Q, 32, ne - 32, Q), pe = 0; pe < 16; pe++)
        Q[pe] = 0;
      return 0;
    }
    function y(Q, te, ne, D, se) {
      var pe, $e = new Uint8Array(32);
      if (ne < 32 || (V($e, 0, 32, D, se), h(te, 16, te, 32, ne - 32, $e) !== 0))
        return -1;
      for (ae(Q, 0, te, 0, ne, D, se), pe = 0; pe < 32; pe++)
        Q[pe] = 0;
      return 0;
    }
    function v(Q, te) {
      var ne;
      for (ne = 0; ne < 16; ne++)
        Q[ne] = te[ne] | 0;
    }
    function $(Q) {
      var te, ne, D = 1;
      for (te = 0; te < 16; te++)
        ne = Q[te] + D + 65535, D = Math.floor(ne / 65536), Q[te] = ne - D * 65536;
      Q[0] += D - 1 + 37 * (D - 1);
    }
    function E(Q, te, ne) {
      for (var D, se = ~(ne - 1), pe = 0; pe < 16; pe++)
        D = se & (Q[pe] ^ te[pe]), Q[pe] ^= D, te[pe] ^= D;
    }
    function x(Q, te) {
      var ne, D, se, pe = n(), $e = n();
      for (ne = 0; ne < 16; ne++)
        $e[ne] = te[ne];
      for ($($e), $($e), $($e), D = 0; D < 2; D++) {
        for (pe[0] = $e[0] - 65517, ne = 1; ne < 15; ne++)
          pe[ne] = $e[ne] - 65535 - (pe[ne - 1] >> 16 & 1), pe[ne - 1] &= 65535;
        pe[15] = $e[15] - 32767 - (pe[14] >> 16 & 1), se = pe[15] >> 16 & 1, pe[14] &= 65535, E($e, pe, 1 - se);
      }
      for (ne = 0; ne < 16; ne++)
        Q[2 * ne] = $e[ne] & 255, Q[2 * ne + 1] = $e[ne] >> 8;
    }
    function l(Q, te) {
      var ne = new Uint8Array(32), D = new Uint8Array(32);
      return x(ne, Q), x(D, te), z(ne, 0, D, 0);
    }
    function b(Q) {
      var te = new Uint8Array(32);
      return x(te, Q), te[0] & 1;
    }
    function M(Q, te) {
      var ne;
      for (ne = 0; ne < 16; ne++)
        Q[ne] = te[2 * ne] + (te[2 * ne + 1] << 8);
      Q[15] &= 32767;
    }
    function k(Q, te, ne) {
      for (var D = 0; D < 16; D++)
        Q[D] = te[D] + ne[D];
    }
    function U(Q, te, ne) {
      for (var D = 0; D < 16; D++)
        Q[D] = te[D] - ne[D];
    }
    function T(Q, te, ne) {
      var D, se, pe = 0, $e = 0, be = 0, _e = 0, Je = 0, We = 0, bt = 0, Ye = 0, ot = 0, ct = 0, lt = 0, mt = 0, dt = 0, yt = 0, pt = 0, tt = 0, st = 0, Qe = 0, rt = 0, it = 0, et = 0, Ie = 0, Ce = 0, Xe = 0, Ve = 0, Ze = 0, nt = 0, St = 0, Mt = 0, Tt = 0, Bt = 0, we = ne[0], kt = ne[1], Ct = ne[2], Nt = ne[3], Rt = ne[4], Pt = ne[5], It = ne[6], Dt = ne[7], Ot = ne[8], Lt = ne[9], Ut = ne[10], Ft = ne[11], Ht = ne[12], qt = ne[13], Kt = ne[14], zt = ne[15];
      D = te[0], pe += D * we, $e += D * kt, be += D * Ct, _e += D * Nt, Je += D * Rt, We += D * Pt, bt += D * It, Ye += D * Dt, ot += D * Ot, ct += D * Lt, lt += D * Ut, mt += D * Ft, dt += D * Ht, yt += D * qt, pt += D * Kt, tt += D * zt, D = te[1], $e += D * we, be += D * kt, _e += D * Ct, Je += D * Nt, We += D * Rt, bt += D * Pt, Ye += D * It, ot += D * Dt, ct += D * Ot, lt += D * Lt, mt += D * Ut, dt += D * Ft, yt += D * Ht, pt += D * qt, tt += D * Kt, st += D * zt, D = te[2], be += D * we, _e += D * kt, Je += D * Ct, We += D * Nt, bt += D * Rt, Ye += D * Pt, ot += D * It, ct += D * Dt, lt += D * Ot, mt += D * Lt, dt += D * Ut, yt += D * Ft, pt += D * Ht, tt += D * qt, st += D * Kt, Qe += D * zt, D = te[3], _e += D * we, Je += D * kt, We += D * Ct, bt += D * Nt, Ye += D * Rt, ot += D * Pt, ct += D * It, lt += D * Dt, mt += D * Ot, dt += D * Lt, yt += D * Ut, pt += D * Ft, tt += D * Ht, st += D * qt, Qe += D * Kt, rt += D * zt, D = te[4], Je += D * we, We += D * kt, bt += D * Ct, Ye += D * Nt, ot += D * Rt, ct += D * Pt, lt += D * It, mt += D * Dt, dt += D * Ot, yt += D * Lt, pt += D * Ut, tt += D * Ft, st += D * Ht, Qe += D * qt, rt += D * Kt, it += D * zt, D = te[5], We += D * we, bt += D * kt, Ye += D * Ct, ot += D * Nt, ct += D * Rt, lt += D * Pt, mt += D * It, dt += D * Dt, yt += D * Ot, pt += D * Lt, tt += D * Ut, st += D * Ft, Qe += D * Ht, rt += D * qt, it += D * Kt, et += D * zt, D = te[6], bt += D * we, Ye += D * kt, ot += D * Ct, ct += D * Nt, lt += D * Rt, mt += D * Pt, dt += D * It, yt += D * Dt, pt += D * Ot, tt += D * Lt, st += D * Ut, Qe += D * Ft, rt += D * Ht, it += D * qt, et += D * Kt, Ie += D * zt, D = te[7], Ye += D * we, ot += D * kt, ct += D * Ct, lt += D * Nt, mt += D * Rt, dt += D * Pt, yt += D * It, pt += D * Dt, tt += D * Ot, st += D * Lt, Qe += D * Ut, rt += D * Ft, it += D * Ht, et += D * qt, Ie += D * Kt, Ce += D * zt, D = te[8], ot += D * we, ct += D * kt, lt += D * Ct, mt += D * Nt, dt += D * Rt, yt += D * Pt, pt += D * It, tt += D * Dt, st += D * Ot, Qe += D * Lt, rt += D * Ut, it += D * Ft, et += D * Ht, Ie += D * qt, Ce += D * Kt, Xe += D * zt, D = te[9], ct += D * we, lt += D * kt, mt += D * Ct, dt += D * Nt, yt += D * Rt, pt += D * Pt, tt += D * It, st += D * Dt, Qe += D * Ot, rt += D * Lt, it += D * Ut, et += D * Ft, Ie += D * Ht, Ce += D * qt, Xe += D * Kt, Ve += D * zt, D = te[10], lt += D * we, mt += D * kt, dt += D * Ct, yt += D * Nt, pt += D * Rt, tt += D * Pt, st += D * It, Qe += D * Dt, rt += D * Ot, it += D * Lt, et += D * Ut, Ie += D * Ft, Ce += D * Ht, Xe += D * qt, Ve += D * Kt, Ze += D * zt, D = te[11], mt += D * we, dt += D * kt, yt += D * Ct, pt += D * Nt, tt += D * Rt, st += D * Pt, Qe += D * It, rt += D * Dt, it += D * Ot, et += D * Lt, Ie += D * Ut, Ce += D * Ft, Xe += D * Ht, Ve += D * qt, Ze += D * Kt, nt += D * zt, D = te[12], dt += D * we, yt += D * kt, pt += D * Ct, tt += D * Nt, st += D * Rt, Qe += D * Pt, rt += D * It, it += D * Dt, et += D * Ot, Ie += D * Lt, Ce += D * Ut, Xe += D * Ft, Ve += D * Ht, Ze += D * qt, nt += D * Kt, St += D * zt, D = te[13], yt += D * we, pt += D * kt, tt += D * Ct, st += D * Nt, Qe += D * Rt, rt += D * Pt, it += D * It, et += D * Dt, Ie += D * Ot, Ce += D * Lt, Xe += D * Ut, Ve += D * Ft, Ze += D * Ht, nt += D * qt, St += D * Kt, Mt += D * zt, D = te[14], pt += D * we, tt += D * kt, st += D * Ct, Qe += D * Nt, rt += D * Rt, it += D * Pt, et += D * It, Ie += D * Dt, Ce += D * Ot, Xe += D * Lt, Ve += D * Ut, Ze += D * Ft, nt += D * Ht, St += D * qt, Mt += D * Kt, Tt += D * zt, D = te[15], tt += D * we, st += D * kt, Qe += D * Ct, rt += D * Nt, it += D * Rt, et += D * Pt, Ie += D * It, Ce += D * Dt, Xe += D * Ot, Ve += D * Lt, Ze += D * Ut, nt += D * Ft, St += D * Ht, Mt += D * qt, Tt += D * Kt, Bt += D * zt, pe += 38 * st, $e += 38 * Qe, be += 38 * rt, _e += 38 * it, Je += 38 * et, We += 38 * Ie, bt += 38 * Ce, Ye += 38 * Xe, ot += 38 * Ve, ct += 38 * Ze, lt += 38 * nt, mt += 38 * St, dt += 38 * Mt, yt += 38 * Tt, pt += 38 * Bt, se = 1, D = pe + se + 65535, se = Math.floor(D / 65536), pe = D - se * 65536, D = $e + se + 65535, se = Math.floor(D / 65536), $e = D - se * 65536, D = be + se + 65535, se = Math.floor(D / 65536), be = D - se * 65536, D = _e + se + 65535, se = Math.floor(D / 65536), _e = D - se * 65536, D = Je + se + 65535, se = Math.floor(D / 65536), Je = D - se * 65536, D = We + se + 65535, se = Math.floor(D / 65536), We = D - se * 65536, D = bt + se + 65535, se = Math.floor(D / 65536), bt = D - se * 65536, D = Ye + se + 65535, se = Math.floor(D / 65536), Ye = D - se * 65536, D = ot + se + 65535, se = Math.floor(D / 65536), ot = D - se * 65536, D = ct + se + 65535, se = Math.floor(D / 65536), ct = D - se * 65536, D = lt + se + 65535, se = Math.floor(D / 65536), lt = D - se * 65536, D = mt + se + 65535, se = Math.floor(D / 65536), mt = D - se * 65536, D = dt + se + 65535, se = Math.floor(D / 65536), dt = D - se * 65536, D = yt + se + 65535, se = Math.floor(D / 65536), yt = D - se * 65536, D = pt + se + 65535, se = Math.floor(D / 65536), pt = D - se * 65536, D = tt + se + 65535, se = Math.floor(D / 65536), tt = D - se * 65536, pe += se - 1 + 37 * (se - 1), se = 1, D = pe + se + 65535, se = Math.floor(D / 65536), pe = D - se * 65536, D = $e + se + 65535, se = Math.floor(D / 65536), $e = D - se * 65536, D = be + se + 65535, se = Math.floor(D / 65536), be = D - se * 65536, D = _e + se + 65535, se = Math.floor(D / 65536), _e = D - se * 65536, D = Je + se + 65535, se = Math.floor(D / 65536), Je = D - se * 65536, D = We + se + 65535, se = Math.floor(D / 65536), We = D - se * 65536, D = bt + se + 65535, se = Math.floor(D / 65536), bt = D - se * 65536, D = Ye + se + 65535, se = Math.floor(D / 65536), Ye = D - se * 65536, D = ot + se + 65535, se = Math.floor(D / 65536), ot = D - se * 65536, D = ct + se + 65535, se = Math.floor(D / 65536), ct = D - se * 65536, D = lt + se + 65535, se = Math.floor(D / 65536), lt = D - se * 65536, D = mt + se + 65535, se = Math.floor(D / 65536), mt = D - se * 65536, D = dt + se + 65535, se = Math.floor(D / 65536), dt = D - se * 65536, D = yt + se + 65535, se = Math.floor(D / 65536), yt = D - se * 65536, D = pt + se + 65535, se = Math.floor(D / 65536), pt = D - se * 65536, D = tt + se + 65535, se = Math.floor(D / 65536), tt = D - se * 65536, pe += se - 1 + 37 * (se - 1), Q[0] = pe, Q[1] = $e, Q[2] = be, Q[3] = _e, Q[4] = Je, Q[5] = We, Q[6] = bt, Q[7] = Ye, Q[8] = ot, Q[9] = ct, Q[10] = lt, Q[11] = mt, Q[12] = dt, Q[13] = yt, Q[14] = pt, Q[15] = tt;
    }
    function H(Q, te) {
      T(Q, te, te);
    }
    function Y(Q, te) {
      var ne = n(), D;
      for (D = 0; D < 16; D++)
        ne[D] = te[D];
      for (D = 253; D >= 0; D--)
        H(ne, ne), D !== 2 && D !== 4 && T(ne, ne, te);
      for (D = 0; D < 16; D++)
        Q[D] = ne[D];
    }
    function le(Q, te) {
      var ne = n(), D;
      for (D = 0; D < 16; D++)
        ne[D] = te[D];
      for (D = 250; D >= 0; D--)
        H(ne, ne), D !== 1 && T(ne, ne, te);
      for (D = 0; D < 16; D++)
        Q[D] = ne[D];
    }
    function ce(Q, te, ne) {
      var D = new Uint8Array(32), se = new Float64Array(80), pe, $e, be = n(), _e = n(), Je = n(), We = n(), bt = n(), Ye = n();
      for ($e = 0; $e < 31; $e++)
        D[$e] = te[$e];
      for (D[31] = te[31] & 127 | 64, D[0] &= 248, M(se, ne), $e = 0; $e < 16; $e++)
        _e[$e] = se[$e], We[$e] = be[$e] = Je[$e] = 0;
      for (be[0] = We[0] = 1, $e = 254; $e >= 0; --$e)
        pe = D[$e >>> 3] >>> ($e & 7) & 1, E(be, _e, pe), E(Je, We, pe), k(bt, be, Je), U(be, be, Je), k(Je, _e, We), U(_e, _e, We), H(We, bt), H(Ye, be), T(be, Je, be), T(Je, _e, bt), k(bt, be, Je), U(be, be, Je), H(_e, be), U(Je, We, Ye), T(be, Je, w), k(be, be, We), T(Je, Je, be), T(be, We, Ye), T(We, _e, se), H(_e, bt), E(be, _e, pe), E(Je, We, pe);
      for ($e = 0; $e < 16; $e++)
        se[$e + 16] = be[$e], se[$e + 32] = Je[$e], se[$e + 48] = _e[$e], se[$e + 64] = We[$e];
      var ot = se.subarray(32), ct = se.subarray(16);
      return Y(ot, ot), T(ct, ct, ot), x(Q, ct), 0;
    }
    function de(Q, te) {
      return ce(Q, te, o);
    }
    function ue(Q, te) {
      return a(te, 32), de(Q, te);
    }
    function re(Q, te, ne) {
      var D = new Uint8Array(32);
      return ce(D, ne, te), ie(Q, c, D, fe);
    }
    var ge = p, Ae = y;
    function xe(Q, te, ne, D, se, pe) {
      var $e = new Uint8Array(32);
      return re($e, se, pe), ge(Q, te, ne, D, $e);
    }
    function Ee(Q, te, ne, D, se, pe) {
      var $e = new Uint8Array(32);
      return re($e, se, pe), Ae(Q, te, ne, D, $e);
    }
    var at = [
      1116352408,
      3609767458,
      1899447441,
      602891725,
      3049323471,
      3964484399,
      3921009573,
      2173295548,
      961987163,
      4081628472,
      1508970993,
      3053834265,
      2453635748,
      2937671579,
      2870763221,
      3664609560,
      3624381080,
      2734883394,
      310598401,
      1164996542,
      607225278,
      1323610764,
      1426881987,
      3590304994,
      1925078388,
      4068182383,
      2162078206,
      991336113,
      2614888103,
      633803317,
      3248222580,
      3479774868,
      3835390401,
      2666613458,
      4022224774,
      944711139,
      264347078,
      2341262773,
      604807628,
      2007800933,
      770255983,
      1495990901,
      1249150122,
      1856431235,
      1555081692,
      3175218132,
      1996064986,
      2198950837,
      2554220882,
      3999719339,
      2821834349,
      766784016,
      2952996808,
      2566594879,
      3210313671,
      3203337956,
      3336571891,
      1034457026,
      3584528711,
      2466948901,
      113926993,
      3758326383,
      338241895,
      168717936,
      666307205,
      1188179964,
      773529912,
      1546045734,
      1294757372,
      1522805485,
      1396182291,
      2643833823,
      1695183700,
      2343527390,
      1986661051,
      1014477480,
      2177026350,
      1206759142,
      2456956037,
      344077627,
      2730485921,
      1290863460,
      2820302411,
      3158454273,
      3259730800,
      3505952657,
      3345764771,
      106217008,
      3516065817,
      3606008344,
      3600352804,
      1432725776,
      4094571909,
      1467031594,
      275423344,
      851169720,
      430227734,
      3100823752,
      506948616,
      1363258195,
      659060556,
      3750685593,
      883997877,
      3785050280,
      958139571,
      3318307427,
      1322822218,
      3812723403,
      1537002063,
      2003034995,
      1747873779,
      3602036899,
      1955562222,
      1575990012,
      2024104815,
      1125592928,
      2227730452,
      2716904306,
      2361852424,
      442776044,
      2428436474,
      593698344,
      2756734187,
      3733110249,
      3204031479,
      2999351573,
      3329325298,
      3815920427,
      3391569614,
      3928383900,
      3515267271,
      566280711,
      3940187606,
      3454069534,
      4118630271,
      4000239992,
      116418474,
      1914138554,
      174292421,
      2731055270,
      289380356,
      3203993006,
      460393269,
      320620315,
      685471733,
      587496836,
      852142971,
      1086792851,
      1017036298,
      365543100,
      1126000580,
      2618297676,
      1288033470,
      3409855158,
      1501505948,
      4234509866,
      1607167915,
      987167468,
      1816402316,
      1246189591
    ];
    function Re(Q, te, ne, D) {
      for (var se = new Int32Array(16), pe = new Int32Array(16), $e, be, _e, Je, We, bt, Ye, ot, ct, lt, mt, dt, yt, pt, tt, st, Qe, rt, it, et, Ie, Ce, Xe, Ve, Ze, nt, St = Q[0], Mt = Q[1], Tt = Q[2], Bt = Q[3], we = Q[4], kt = Q[5], Ct = Q[6], Nt = Q[7], Rt = te[0], Pt = te[1], It = te[2], Dt = te[3], Ot = te[4], Lt = te[5], Ut = te[6], Ft = te[7], Ht = 0; D >= 128; ) {
        for (it = 0; it < 16; it++)
          et = 8 * it + Ht, se[it] = ne[et + 0] << 24 | ne[et + 1] << 16 | ne[et + 2] << 8 | ne[et + 3], pe[it] = ne[et + 4] << 24 | ne[et + 5] << 16 | ne[et + 6] << 8 | ne[et + 7];
        for (it = 0; it < 80; it++)
          if ($e = St, be = Mt, _e = Tt, Je = Bt, We = we, bt = kt, Ye = Ct, ot = Nt, ct = Rt, lt = Pt, mt = It, dt = Dt, yt = Ot, pt = Lt, tt = Ut, st = Ft, Ie = Nt, Ce = Ft, Xe = Ce & 65535, Ve = Ce >>> 16, Ze = Ie & 65535, nt = Ie >>> 16, Ie = (we >>> 14 | Ot << 18) ^ (we >>> 18 | Ot << 14) ^ (Ot >>> 9 | we << 23), Ce = (Ot >>> 14 | we << 18) ^ (Ot >>> 18 | we << 14) ^ (we >>> 9 | Ot << 23), Xe += Ce & 65535, Ve += Ce >>> 16, Ze += Ie & 65535, nt += Ie >>> 16, Ie = we & kt ^ ~we & Ct, Ce = Ot & Lt ^ ~Ot & Ut, Xe += Ce & 65535, Ve += Ce >>> 16, Ze += Ie & 65535, nt += Ie >>> 16, Ie = at[it * 2], Ce = at[it * 2 + 1], Xe += Ce & 65535, Ve += Ce >>> 16, Ze += Ie & 65535, nt += Ie >>> 16, Ie = se[it % 16], Ce = pe[it % 16], Xe += Ce & 65535, Ve += Ce >>> 16, Ze += Ie & 65535, nt += Ie >>> 16, Ve += Xe >>> 16, Ze += Ve >>> 16, nt += Ze >>> 16, Qe = Ze & 65535 | nt << 16, rt = Xe & 65535 | Ve << 16, Ie = Qe, Ce = rt, Xe = Ce & 65535, Ve = Ce >>> 16, Ze = Ie & 65535, nt = Ie >>> 16, Ie = (St >>> 28 | Rt << 4) ^ (Rt >>> 2 | St << 30) ^ (Rt >>> 7 | St << 25), Ce = (Rt >>> 28 | St << 4) ^ (St >>> 2 | Rt << 30) ^ (St >>> 7 | Rt << 25), Xe += Ce & 65535, Ve += Ce >>> 16, Ze += Ie & 65535, nt += Ie >>> 16, Ie = St & Mt ^ St & Tt ^ Mt & Tt, Ce = Rt & Pt ^ Rt & It ^ Pt & It, Xe += Ce & 65535, Ve += Ce >>> 16, Ze += Ie & 65535, nt += Ie >>> 16, Ve += Xe >>> 16, Ze += Ve >>> 16, nt += Ze >>> 16, ot = Ze & 65535 | nt << 16, st = Xe & 65535 | Ve << 16, Ie = Je, Ce = dt, Xe = Ce & 65535, Ve = Ce >>> 16, Ze = Ie & 65535, nt = Ie >>> 16, Ie = Qe, Ce = rt, Xe += Ce & 65535, Ve += Ce >>> 16, Ze += Ie & 65535, nt += Ie >>> 16, Ve += Xe >>> 16, Ze += Ve >>> 16, nt += Ze >>> 16, Je = Ze & 65535 | nt << 16, dt = Xe & 65535 | Ve << 16, Mt = $e, Tt = be, Bt = _e, we = Je, kt = We, Ct = bt, Nt = Ye, St = ot, Pt = ct, It = lt, Dt = mt, Ot = dt, Lt = yt, Ut = pt, Ft = tt, Rt = st, it % 16 === 15)
            for (et = 0; et < 16; et++)
              Ie = se[et], Ce = pe[et], Xe = Ce & 65535, Ve = Ce >>> 16, Ze = Ie & 65535, nt = Ie >>> 16, Ie = se[(et + 9) % 16], Ce = pe[(et + 9) % 16], Xe += Ce & 65535, Ve += Ce >>> 16, Ze += Ie & 65535, nt += Ie >>> 16, Qe = se[(et + 1) % 16], rt = pe[(et + 1) % 16], Ie = (Qe >>> 1 | rt << 31) ^ (Qe >>> 8 | rt << 24) ^ Qe >>> 7, Ce = (rt >>> 1 | Qe << 31) ^ (rt >>> 8 | Qe << 24) ^ (rt >>> 7 | Qe << 25), Xe += Ce & 65535, Ve += Ce >>> 16, Ze += Ie & 65535, nt += Ie >>> 16, Qe = se[(et + 14) % 16], rt = pe[(et + 14) % 16], Ie = (Qe >>> 19 | rt << 13) ^ (rt >>> 29 | Qe << 3) ^ Qe >>> 6, Ce = (rt >>> 19 | Qe << 13) ^ (Qe >>> 29 | rt << 3) ^ (rt >>> 6 | Qe << 26), Xe += Ce & 65535, Ve += Ce >>> 16, Ze += Ie & 65535, nt += Ie >>> 16, Ve += Xe >>> 16, Ze += Ve >>> 16, nt += Ze >>> 16, se[et] = Ze & 65535 | nt << 16, pe[et] = Xe & 65535 | Ve << 16;
        Ie = St, Ce = Rt, Xe = Ce & 65535, Ve = Ce >>> 16, Ze = Ie & 65535, nt = Ie >>> 16, Ie = Q[0], Ce = te[0], Xe += Ce & 65535, Ve += Ce >>> 16, Ze += Ie & 65535, nt += Ie >>> 16, Ve += Xe >>> 16, Ze += Ve >>> 16, nt += Ze >>> 16, Q[0] = St = Ze & 65535 | nt << 16, te[0] = Rt = Xe & 65535 | Ve << 16, Ie = Mt, Ce = Pt, Xe = Ce & 65535, Ve = Ce >>> 16, Ze = Ie & 65535, nt = Ie >>> 16, Ie = Q[1], Ce = te[1], Xe += Ce & 65535, Ve += Ce >>> 16, Ze += Ie & 65535, nt += Ie >>> 16, Ve += Xe >>> 16, Ze += Ve >>> 16, nt += Ze >>> 16, Q[1] = Mt = Ze & 65535 | nt << 16, te[1] = Pt = Xe & 65535 | Ve << 16, Ie = Tt, Ce = It, Xe = Ce & 65535, Ve = Ce >>> 16, Ze = Ie & 65535, nt = Ie >>> 16, Ie = Q[2], Ce = te[2], Xe += Ce & 65535, Ve += Ce >>> 16, Ze += Ie & 65535, nt += Ie >>> 16, Ve += Xe >>> 16, Ze += Ve >>> 16, nt += Ze >>> 16, Q[2] = Tt = Ze & 65535 | nt << 16, te[2] = It = Xe & 65535 | Ve << 16, Ie = Bt, Ce = Dt, Xe = Ce & 65535, Ve = Ce >>> 16, Ze = Ie & 65535, nt = Ie >>> 16, Ie = Q[3], Ce = te[3], Xe += Ce & 65535, Ve += Ce >>> 16, Ze += Ie & 65535, nt += Ie >>> 16, Ve += Xe >>> 16, Ze += Ve >>> 16, nt += Ze >>> 16, Q[3] = Bt = Ze & 65535 | nt << 16, te[3] = Dt = Xe & 65535 | Ve << 16, Ie = we, Ce = Ot, Xe = Ce & 65535, Ve = Ce >>> 16, Ze = Ie & 65535, nt = Ie >>> 16, Ie = Q[4], Ce = te[4], Xe += Ce & 65535, Ve += Ce >>> 16, Ze += Ie & 65535, nt += Ie >>> 16, Ve += Xe >>> 16, Ze += Ve >>> 16, nt += Ze >>> 16, Q[4] = we = Ze & 65535 | nt << 16, te[4] = Ot = Xe & 65535 | Ve << 16, Ie = kt, Ce = Lt, Xe = Ce & 65535, Ve = Ce >>> 16, Ze = Ie & 65535, nt = Ie >>> 16, Ie = Q[5], Ce = te[5], Xe += Ce & 65535, Ve += Ce >>> 16, Ze += Ie & 65535, nt += Ie >>> 16, Ve += Xe >>> 16, Ze += Ve >>> 16, nt += Ze >>> 16, Q[5] = kt = Ze & 65535 | nt << 16, te[5] = Lt = Xe & 65535 | Ve << 16, Ie = Ct, Ce = Ut, Xe = Ce & 65535, Ve = Ce >>> 16, Ze = Ie & 65535, nt = Ie >>> 16, Ie = Q[6], Ce = te[6], Xe += Ce & 65535, Ve += Ce >>> 16, Ze += Ie & 65535, nt += Ie >>> 16, Ve += Xe >>> 16, Ze += Ve >>> 16, nt += Ze >>> 16, Q[6] = Ct = Ze & 65535 | nt << 16, te[6] = Ut = Xe & 65535 | Ve << 16, Ie = Nt, Ce = Ft, Xe = Ce & 65535, Ve = Ce >>> 16, Ze = Ie & 65535, nt = Ie >>> 16, Ie = Q[7], Ce = te[7], Xe += Ce & 65535, Ve += Ce >>> 16, Ze += Ie & 65535, nt += Ie >>> 16, Ve += Xe >>> 16, Ze += Ve >>> 16, nt += Ze >>> 16, Q[7] = Nt = Ze & 65535 | nt << 16, te[7] = Ft = Xe & 65535 | Ve << 16, Ht += 128, D -= 128;
      }
      return D;
    }
    function ve(Q, te, ne) {
      var D = new Int32Array(8), se = new Int32Array(8), pe = new Uint8Array(256), $e, be = ne;
      for (D[0] = 1779033703, D[1] = 3144134277, D[2] = 1013904242, D[3] = 2773480762, D[4] = 1359893119, D[5] = 2600822924, D[6] = 528734635, D[7] = 1541459225, se[0] = 4089235720, se[1] = 2227873595, se[2] = 4271175723, se[3] = 1595750129, se[4] = 2917565137, se[5] = 725511199, se[6] = 4215389547, se[7] = 327033209, Re(D, se, te, ne), ne %= 128, $e = 0; $e < ne; $e++)
        pe[$e] = te[be - ne + $e];
      for (pe[ne] = 128, ne = 256 - 128 * (ne < 112 ? 1 : 0), pe[ne - 9] = 0, O(pe, ne - 8, be / 536870912 | 0, be << 3), Re(D, se, pe, ne), $e = 0; $e < 8; $e++)
        O(Q, 8 * $e, D[$e], se[$e]);
      return 0;
    }
    function xt(Q, te) {
      var ne = n(), D = n(), se = n(), pe = n(), $e = n(), be = n(), _e = n(), Je = n(), We = n();
      U(ne, Q[1], Q[0]), U(We, te[1], te[0]), T(ne, ne, We), k(D, Q[0], Q[1]), k(We, te[0], te[1]), T(D, D, We), T(se, Q[3], te[3]), T(se, se, A), T(pe, Q[2], te[2]), k(pe, pe, pe), U($e, D, ne), U(be, pe, se), k(_e, pe, se), k(Je, D, ne), T(Q[0], $e, be), T(Q[1], Je, _e), T(Q[2], _e, be), T(Q[3], $e, Je);
    }
    function Ne(Q, te, ne) {
      var D;
      for (D = 0; D < 4; D++)
        E(Q[D], te[D], ne);
    }
    function qe(Q, te) {
      var ne = n(), D = n(), se = n();
      Y(se, te[2]), T(ne, te[0], se), T(D, te[1], se), x(Q, D), Q[31] ^= b(ne) << 7;
    }
    function wt(Q, te, ne) {
      var D, se;
      for (v(Q[0], d), v(Q[1], m), v(Q[2], m), v(Q[3], d), se = 255; se >= 0; --se)
        D = ne[se / 8 | 0] >> (se & 7) & 1, Ne(Q, te, D), xt(te, Q), xt(Q, Q), Ne(Q, te, D);
    }
    function Te(Q, te) {
      var ne = [n(), n(), n(), n()];
      v(ne[0], B), v(ne[1], P), v(ne[2], m), T(ne[3], B, P), wt(Q, ne, te);
    }
    function De(Q, te, ne) {
      var D = new Uint8Array(64), se = [n(), n(), n(), n()], pe;
      for (ne || a(te, 32), ve(D, te, 32), D[0] &= 248, D[31] &= 127, D[31] |= 64, Te(se, D), qe(Q, se), pe = 0; pe < 32; pe++)
        te[pe + 32] = Q[pe];
      return 0;
    }
    var vt = new Float64Array([237, 211, 245, 92, 26, 99, 18, 88, 214, 156, 247, 162, 222, 249, 222, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16]);
    function ke(Q, te) {
      var ne, D, se, pe;
      for (D = 63; D >= 32; --D) {
        for (ne = 0, se = D - 32, pe = D - 12; se < pe; ++se)
          te[se] += ne - 16 * te[D] * vt[se - (D - 32)], ne = Math.floor((te[se] + 128) / 256), te[se] -= ne * 256;
        te[se] += ne, te[D] = 0;
      }
      for (ne = 0, se = 0; se < 32; se++)
        te[se] += ne - (te[31] >> 4) * vt[se], ne = te[se] >> 8, te[se] &= 255;
      for (se = 0; se < 32; se++)
        te[se] -= ne * vt[se];
      for (D = 0; D < 32; D++)
        te[D + 1] += te[D] >> 8, Q[D] = te[D] & 255;
    }
    function Ue(Q) {
      var te = new Float64Array(64), ne;
      for (ne = 0; ne < 64; ne++)
        te[ne] = Q[ne];
      for (ne = 0; ne < 64; ne++)
        Q[ne] = 0;
      ke(Q, te);
    }
    function $t(Q, te, ne, D) {
      var se = new Uint8Array(64), pe = new Uint8Array(64), $e = new Uint8Array(64), be, _e, Je = new Float64Array(64), We = [n(), n(), n(), n()];
      ve(se, D, 32), se[0] &= 248, se[31] &= 127, se[31] |= 64;
      var bt = ne + 64;
      for (be = 0; be < ne; be++)
        Q[64 + be] = te[be];
      for (be = 0; be < 32; be++)
        Q[32 + be] = se[32 + be];
      for (ve($e, Q.subarray(32), ne + 32), Ue($e), Te(We, $e), qe(Q, We), be = 32; be < 64; be++)
        Q[be] = D[be];
      for (ve(pe, Q, ne + 64), Ue(pe), be = 0; be < 64; be++)
        Je[be] = 0;
      for (be = 0; be < 32; be++)
        Je[be] = $e[be];
      for (be = 0; be < 32; be++)
        for (_e = 0; _e < 32; _e++)
          Je[be + _e] += pe[be] * se[_e];
      return ke(Q.subarray(32), Je), bt;
    }
    function ee(Q, te) {
      var ne = n(), D = n(), se = n(), pe = n(), $e = n(), be = n(), _e = n();
      return v(Q[2], m), M(Q[1], te), H(se, Q[1]), T(pe, se, S), U(se, se, Q[2]), k(pe, Q[2], pe), H($e, pe), H(be, $e), T(_e, be, $e), T(ne, _e, se), T(ne, ne, pe), le(ne, ne), T(ne, ne, se), T(ne, ne, pe), T(ne, ne, pe), T(Q[0], ne, pe), H(D, Q[0]), T(D, D, pe), l(D, se) && T(Q[0], Q[0], I), H(D, Q[0]), T(D, D, pe), l(D, se) ? -1 : (b(Q[0]) === te[31] >> 7 && U(Q[0], d, Q[0]), T(Q[3], Q[0], Q[1]), 0);
    }
    function F(Q, te, ne, D) {
      var se, pe = new Uint8Array(32), $e = new Uint8Array(64), be = [n(), n(), n(), n()], _e = [n(), n(), n(), n()];
      if (ne < 64 || ee(_e, D))
        return -1;
      for (se = 0; se < ne; se++)
        Q[se] = te[se];
      for (se = 0; se < 32; se++)
        Q[se + 32] = D[se];
      if (ve($e, Q, ne), Ue($e), wt(be, _e, $e), Te(_e, te.subarray(32)), xt(be, _e), qe(pe, be), ne -= 64, z(te, 0, pe, 0)) {
        for (se = 0; se < ne; se++)
          Q[se] = 0;
        return -1;
      }
      for (se = 0; se < ne; se++)
        Q[se] = te[se + 64];
      return ne;
    }
    var J = 32, oe = 24, he = 32, Se = 16, me = 32, Be = 32, gt = 32, Me = 32, Oe = 32, ht = oe, He = he, Ge = Se, _t = 64, Le = 32, Ke = 64, Et = 32, Fe = 64;
    e.lowlevel = {
      crypto_core_hsalsa20: ie,
      crypto_stream_xor: ae,
      crypto_stream: V,
      crypto_stream_salsa20_xor: ye,
      crypto_stream_salsa20: j,
      crypto_onetimeauth: u,
      crypto_onetimeauth_verify: h,
      crypto_verify_16: C,
      crypto_verify_32: z,
      crypto_secretbox: p,
      crypto_secretbox_open: y,
      crypto_scalarmult: ce,
      crypto_scalarmult_base: de,
      crypto_box_beforenm: re,
      crypto_box_afternm: ge,
      crypto_box: xe,
      crypto_box_open: Ee,
      crypto_box_keypair: ue,
      crypto_hash: ve,
      crypto_sign: $t,
      crypto_sign_keypair: De,
      crypto_sign_open: F,
      crypto_secretbox_KEYBYTES: J,
      crypto_secretbox_NONCEBYTES: oe,
      crypto_secretbox_ZEROBYTES: he,
      crypto_secretbox_BOXZEROBYTES: Se,
      crypto_scalarmult_BYTES: me,
      crypto_scalarmult_SCALARBYTES: Be,
      crypto_box_PUBLICKEYBYTES: gt,
      crypto_box_SECRETKEYBYTES: Me,
      crypto_box_BEFORENMBYTES: Oe,
      crypto_box_NONCEBYTES: ht,
      crypto_box_ZEROBYTES: He,
      crypto_box_BOXZEROBYTES: Ge,
      crypto_sign_BYTES: _t,
      crypto_sign_PUBLICKEYBYTES: Le,
      crypto_sign_SECRETKEYBYTES: Ke,
      crypto_sign_SEEDBYTES: Et,
      crypto_hash_BYTES: Fe,
      gf: n,
      D: S,
      L: vt,
      pack25519: x,
      unpack25519: M,
      M: T,
      A: k,
      S: H,
      Z: U,
      pow2523: le,
      add: xt,
      set25519: v,
      modL: ke,
      scalarmult: wt,
      scalarbase: Te
    };
    function ze(Q, te) {
      if (Q.length !== J)
        throw new Error("bad key size");
      if (te.length !== oe)
        throw new Error("bad nonce size");
    }
    function At(Q, te) {
      if (Q.length !== gt)
        throw new Error("bad public key size");
      if (te.length !== Me)
        throw new Error("bad secret key size");
    }
    function Pe() {
      for (var Q = 0; Q < arguments.length; Q++)
        if (!(arguments[Q] instanceof Uint8Array))
          throw new TypeError("unexpected type, use Uint8Array");
    }
    function je(Q) {
      for (var te = 0; te < Q.length; te++)
        Q[te] = 0;
    }
    e.randomBytes = function(Q) {
      var te = new Uint8Array(Q);
      return a(te, Q), te;
    }, e.secretbox = function(Q, te, ne) {
      Pe(Q, te, ne), ze(ne, te);
      for (var D = new Uint8Array(he + Q.length), se = new Uint8Array(D.length), pe = 0; pe < Q.length; pe++)
        D[pe + he] = Q[pe];
      return p(se, D, D.length, te, ne), se.subarray(Se);
    }, e.secretbox.open = function(Q, te, ne) {
      Pe(Q, te, ne), ze(ne, te);
      for (var D = new Uint8Array(Se + Q.length), se = new Uint8Array(D.length), pe = 0; pe < Q.length; pe++)
        D[pe + Se] = Q[pe];
      return D.length < 32 || y(se, D, D.length, te, ne) !== 0 ? null : se.subarray(he);
    }, e.secretbox.keyLength = J, e.secretbox.nonceLength = oe, e.secretbox.overheadLength = Se, e.scalarMult = function(Q, te) {
      if (Pe(Q, te), Q.length !== Be)
        throw new Error("bad n size");
      if (te.length !== me)
        throw new Error("bad p size");
      var ne = new Uint8Array(me);
      return ce(ne, Q, te), ne;
    }, e.scalarMult.base = function(Q) {
      if (Pe(Q), Q.length !== Be)
        throw new Error("bad n size");
      var te = new Uint8Array(me);
      return de(te, Q), te;
    }, e.scalarMult.scalarLength = Be, e.scalarMult.groupElementLength = me, e.box = function(Q, te, ne, D) {
      var se = e.box.before(ne, D);
      return e.secretbox(Q, te, se);
    }, e.box.before = function(Q, te) {
      Pe(Q, te), At(Q, te);
      var ne = new Uint8Array(Oe);
      return re(ne, Q, te), ne;
    }, e.box.after = e.secretbox, e.box.open = function(Q, te, ne, D) {
      var se = e.box.before(ne, D);
      return e.secretbox.open(Q, te, se);
    }, e.box.open.after = e.secretbox.open, e.box.keyPair = function() {
      var Q = new Uint8Array(gt), te = new Uint8Array(Me);
      return ue(Q, te), { publicKey: Q, secretKey: te };
    }, e.box.keyPair.fromSecretKey = function(Q) {
      if (Pe(Q), Q.length !== Me)
        throw new Error("bad secret key size");
      var te = new Uint8Array(gt);
      return de(te, Q), { publicKey: te, secretKey: new Uint8Array(Q) };
    }, e.box.publicKeyLength = gt, e.box.secretKeyLength = Me, e.box.sharedKeyLength = Oe, e.box.nonceLength = ht, e.box.overheadLength = e.secretbox.overheadLength, e.sign = function(Q, te) {
      if (Pe(Q, te), te.length !== Ke)
        throw new Error("bad secret key size");
      var ne = new Uint8Array(_t + Q.length);
      return $t(ne, Q, Q.length, te), ne;
    }, e.sign.open = function(Q, te) {
      if (Pe(Q, te), te.length !== Le)
        throw new Error("bad public key size");
      var ne = new Uint8Array(Q.length), D = F(ne, Q, Q.length, te);
      if (D < 0)
        return null;
      for (var se = new Uint8Array(D), pe = 0; pe < se.length; pe++)
        se[pe] = ne[pe];
      return se;
    }, e.sign.detached = function(Q, te) {
      for (var ne = e.sign(Q, te), D = new Uint8Array(_t), se = 0; se < D.length; se++)
        D[se] = ne[se];
      return D;
    }, e.sign.detached.verify = function(Q, te, ne) {
      if (Pe(Q, te, ne), te.length !== _t)
        throw new Error("bad signature size");
      if (ne.length !== Le)
        throw new Error("bad public key size");
      var D = new Uint8Array(_t + Q.length), se = new Uint8Array(_t + Q.length), pe;
      for (pe = 0; pe < _t; pe++)
        D[pe] = te[pe];
      for (pe = 0; pe < Q.length; pe++)
        D[pe + _t] = Q[pe];
      return F(se, D, D.length, ne) >= 0;
    }, e.sign.keyPair = function() {
      var Q = new Uint8Array(Le), te = new Uint8Array(Ke);
      return De(Q, te), { publicKey: Q, secretKey: te };
    }, e.sign.keyPair.fromSecretKey = function(Q) {
      if (Pe(Q), Q.length !== Ke)
        throw new Error("bad secret key size");
      for (var te = new Uint8Array(Le), ne = 0; ne < te.length; ne++)
        te[ne] = Q[32 + ne];
      return { publicKey: te, secretKey: new Uint8Array(Q) };
    }, e.sign.keyPair.fromSeed = function(Q) {
      if (Pe(Q), Q.length !== Et)
        throw new Error("bad seed size");
      for (var te = new Uint8Array(Le), ne = new Uint8Array(Ke), D = 0; D < 32; D++)
        ne[D] = Q[D];
      return De(te, ne, !0), { publicKey: te, secretKey: ne };
    }, e.sign.publicKeyLength = Le, e.sign.secretKeyLength = Ke, e.sign.seedLength = Et, e.sign.signatureLength = _t, e.hash = function(Q) {
      Pe(Q);
      var te = new Uint8Array(Fe);
      return ve(te, Q, Q.length), te;
    }, e.hash.hashLength = Fe, e.verify = function(Q, te) {
      return Pe(Q, te), Q.length === 0 || te.length === 0 || Q.length !== te.length ? !1 : L(Q, 0, te, 0, Q.length) === 0;
    }, e.setPRNG = function(Q) {
      a = Q;
    }, function() {
      var Q = typeof self < "u" ? self.crypto || self.msCrypto : null;
      if (Q && Q.getRandomValues) {
        var te = 65536;
        e.setPRNG(function(ne, D) {
          var se, pe = new Uint8Array(D);
          for (se = 0; se < D; se += te)
            Q.getRandomValues(pe.subarray(se, se + Math.min(D - se, te)));
          for (se = 0; se < D; se++)
            ne[se] = pe[se];
          je(pe);
        });
      } else
        typeof commonjsRequire < "u" && (Q = requireCryptoBrowserify(), Q && Q.randomBytes && e.setPRNG(function(ne, D) {
          var se, pe = Q.randomBytes(D);
          for (se = 0; se < D; se++)
            ne[se] = pe[se];
          je(pe);
        }));
    }();
  })(t.exports ? t.exports : self.nacl = self.nacl || {});
})(naclFast);
var naclFastExports = naclFast.exports;
const nacl2 = /* @__PURE__ */ getDefaultExportFromCjs$2(naclFastExports);
var public_key$1 = {}, lib$6 = {}, assignable$1 = {};
Object.defineProperty(assignable$1, "__esModule", { value: !0 });
assignable$1.Assignable = void 0;
let Assignable$1 = class {
  constructor(e) {
    Object.keys(e).map((n) => {
      this[n] = e[n];
    });
  }
};
assignable$1.Assignable = Assignable$1;
var errors$1 = {};
Object.defineProperty(errors$1, "__esModule", { value: !0 });
errors$1.ErrorContext = errors$1.TypedError = errors$1.ArgumentTypeError = errors$1.PositionalArgsError = void 0;
let PositionalArgsError$1 = class extends Error {
  constructor() {
    super("Contract method calls expect named arguments wrapped in object, e.g. { argName1: argValue1, argName2: argValue2 }");
  }
};
errors$1.PositionalArgsError = PositionalArgsError$1;
let ArgumentTypeError$1 = class extends Error {
  constructor(e, n, a) {
    super(`Expected ${n} for '${e}' argument, but got '${JSON.stringify(a)}'`);
  }
};
errors$1.ArgumentTypeError = ArgumentTypeError$1;
let TypedError$1 = class extends Error {
  constructor(e, n, a) {
    super(e), this.type = n || "UntypedError", this.context = a;
  }
};
errors$1.TypedError = TypedError$1;
let ErrorContext$1 = class {
  constructor(e) {
    this.transactionHash = e;
  }
};
errors$1.ErrorContext = ErrorContext$1;
var provider$1 = {}, light_client$1 = {};
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.IdType = void 0, function(e) {
    e.Transaction = "transaction", e.Receipt = "receipt";
  }(t.IdType || (t.IdType = {}));
})(light_client$1);
var response$1 = {};
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.FinalExecutionStatusBasic = t.ExecutionStatusBasic = void 0, function(e) {
    e.Unknown = "Unknown", e.Pending = "Pending", e.Failure = "Failure";
  }(t.ExecutionStatusBasic || (t.ExecutionStatusBasic = {})), function(e) {
    e.NotStarted = "NotStarted", e.Started = "Started", e.Failure = "Failure";
  }(t.FinalExecutionStatusBasic || (t.FinalExecutionStatusBasic = {}));
})(response$1);
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.FinalExecutionStatusBasic = t.ExecutionStatusBasic = t.IdType = void 0;
  var e = light_client$1;
  Object.defineProperty(t, "IdType", { enumerable: !0, get: function() {
    return e.IdType;
  } });
  var n = response$1;
  Object.defineProperty(t, "ExecutionStatusBasic", { enumerable: !0, get: function() {
    return n.ExecutionStatusBasic;
  } }), Object.defineProperty(t, "FinalExecutionStatusBasic", { enumerable: !0, get: function() {
    return n.FinalExecutionStatusBasic;
  } });
})(provider$1);
(function(t) {
  var e = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(a, c, o, d) {
    d === void 0 && (d = o);
    var m = Object.getOwnPropertyDescriptor(c, o);
    (!m || ("get" in m ? !c.__esModule : m.writable || m.configurable)) && (m = { enumerable: !0, get: function() {
      return c[o];
    } }), Object.defineProperty(a, d, m);
  } : function(a, c, o, d) {
    d === void 0 && (d = o), a[d] = c[o];
  }), n = commonjsGlobal && commonjsGlobal.__exportStar || function(a, c) {
    for (var o in a)
      o !== "default" && !Object.prototype.hasOwnProperty.call(c, o) && e(c, a, o);
  };
  Object.defineProperty(t, "__esModule", { value: !0 }), n(assignable$1, t), n(errors$1, t), n(provider$1, t);
})(lib$6);
var __importDefault$4 = commonjsGlobal && commonjsGlobal.__importDefault || function(t) {
  return t && t.__esModule ? t : { default: t };
};
Object.defineProperty(public_key$1, "__esModule", { value: !0 });
public_key$1.PublicKey = void 0;
const types_1$5 = lib$6, borsh_1$3 = lib$7, tweetnacl_1$3 = __importDefault$4(naclFastExports), constants_1$3 = constants$1;
function key_type_to_str$1(t) {
  switch (t) {
    case constants_1$3.KeyType.ED25519:
      return "ed25519";
    default:
      throw new Error(`Unknown key type ${t}`);
  }
}
function str_to_key_type$1(t) {
  switch (t.toLowerCase()) {
    case "ed25519":
      return constants_1$3.KeyType.ED25519;
    default:
      throw new Error(`Unknown key type ${t}`);
  }
}
let PublicKey$2 = class Gt extends types_1$5.Assignable {
  static from(e) {
    return typeof e == "string" ? Gt.fromString(e) : e;
  }
  static fromString(e) {
    const n = e.split(":");
    if (n.length === 1)
      return new Gt({ keyType: constants_1$3.KeyType.ED25519, data: (0, borsh_1$3.baseDecode)(n[0]) });
    if (n.length === 2)
      return new Gt({ keyType: str_to_key_type$1(n[0]), data: (0, borsh_1$3.baseDecode)(n[1]) });
    throw new Error("Invalid encoded key format, must be <curve>:<encoded key>");
  }
  toString() {
    return `${key_type_to_str$1(this.keyType)}:${(0, borsh_1$3.baseEncode)(this.data)}`;
  }
  verify(e, n) {
    switch (this.keyType) {
      case constants_1$3.KeyType.ED25519:
        return tweetnacl_1$3.default.sign.detached.verify(e, n, this.data);
      default:
        throw new Error(`Unknown key type ${this.keyType}`);
    }
  }
};
public_key$1.PublicKey = PublicKey$2;
var __importDefault$3 = commonjsGlobal && commonjsGlobal.__importDefault || function(t) {
  return t && t.__esModule ? t : { default: t };
};
Object.defineProperty(key_pair_ed25519$1, "__esModule", { value: !0 });
key_pair_ed25519$1.KeyPairEd25519 = void 0;
const borsh_1$2 = lib$7, tweetnacl_1$2 = __importDefault$3(naclFastExports), constants_1$2 = constants$1, key_pair_base_1$3 = key_pair_base$1, public_key_1$1 = public_key$1;
let KeyPairEd25519$1 = class tr extends key_pair_base_1$3.KeyPairBase {
  /**
   * Construct an instance of key pair given a secret key.
   * It's generally assumed that these are encoded in base58.
   * @param {string} secretKey
   */
  constructor(e) {
    super();
    const n = tweetnacl_1$2.default.sign.keyPair.fromSecretKey((0, borsh_1$2.baseDecode)(e));
    this.publicKey = new public_key_1$1.PublicKey({ keyType: constants_1$2.KeyType.ED25519, data: n.publicKey }), this.secretKey = e;
  }
  /**
   * Generate a new random keypair.
   * @example
   * const keyRandom = KeyPair.fromRandom();
   * keyRandom.publicKey
   * // returns [PUBLIC_KEY]
   *
   * keyRandom.secretKey
   * // returns [SECRET_KEY]
   */
  static fromRandom() {
    const e = tweetnacl_1$2.default.sign.keyPair();
    return new tr((0, borsh_1$2.baseEncode)(e.secretKey));
  }
  sign(e) {
    return { signature: tweetnacl_1$2.default.sign.detached(e, (0, borsh_1$2.baseDecode)(this.secretKey)), publicKey: this.publicKey };
  }
  verify(e, n) {
    return this.publicKey.verify(e, n);
  }
  toString() {
    return `ed25519:${this.secretKey}`;
  }
  getPublicKey() {
    return this.publicKey;
  }
};
key_pair_ed25519$1.KeyPairEd25519 = KeyPairEd25519$1;
Object.defineProperty(key_pair$1, "__esModule", { value: !0 });
key_pair$1.KeyPair = void 0;
const key_pair_base_1$2 = key_pair_base$1, key_pair_ed25519_1$1 = key_pair_ed25519$1;
let KeyPair$1 = class extends key_pair_base_1$2.KeyPairBase {
  /**
   * @param curve Name of elliptical curve, case-insensitive
   * @returns Random KeyPair based on the curve
   */
  static fromRandom(e) {
    switch (e.toUpperCase()) {
      case "ED25519":
        return key_pair_ed25519_1$1.KeyPairEd25519.fromRandom();
      default:
        throw new Error(`Unknown curve ${e}`);
    }
  }
  static fromString(e) {
    const n = e.split(":");
    if (n.length === 1)
      return new key_pair_ed25519_1$1.KeyPairEd25519(n[0]);
    if (n.length === 2)
      switch (n[0].toUpperCase()) {
        case "ED25519":
          return new key_pair_ed25519_1$1.KeyPairEd25519(n[1]);
        default:
          throw new Error(`Unknown curve: ${n[0]}`);
      }
    else
      throw new Error("Invalid encoded key format, must be <curve>:<encoded key>");
  }
};
key_pair$1.KeyPair = KeyPair$1;
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.PublicKey = t.KeyPairEd25519 = t.KeyPair = t.KeyType = void 0;
  var e = constants$1;
  Object.defineProperty(t, "KeyType", { enumerable: !0, get: function() {
    return e.KeyType;
  } });
  var n = key_pair$1;
  Object.defineProperty(t, "KeyPair", { enumerable: !0, get: function() {
    return n.KeyPair;
  } });
  var a = key_pair_ed25519$1;
  Object.defineProperty(t, "KeyPairEd25519", { enumerable: !0, get: function() {
    return a.KeyPairEd25519;
  } });
  var c = public_key$1;
  Object.defineProperty(t, "PublicKey", { enumerable: !0, get: function() {
    return c.PublicKey;
  } });
})(lib$8);
var lib$5 = {}, browser_local_storage_key_store = {}, lib$4 = {}, in_memory_key_store = {}, keystore = {};
Object.defineProperty(keystore, "__esModule", { value: !0 });
keystore.KeyStore = void 0;
class KeyStore {
}
keystore.KeyStore = KeyStore;
var __awaiter$8 = commonjsGlobal && commonjsGlobal.__awaiter || function(t, e, n, a) {
  function c(o) {
    return o instanceof n ? o : new n(function(d) {
      d(o);
    });
  }
  return new (n || (n = Promise))(function(o, d) {
    function m(A) {
      try {
        S(a.next(A));
      } catch (B) {
        d(B);
      }
    }
    function w(A) {
      try {
        S(a.throw(A));
      } catch (B) {
        d(B);
      }
    }
    function S(A) {
      A.done ? o(A.value) : c(A.value).then(m, w);
    }
    S((a = a.apply(t, e || [])).next());
  });
};
Object.defineProperty(in_memory_key_store, "__esModule", { value: !0 });
in_memory_key_store.InMemoryKeyStore = void 0;
const crypto_1$1 = lib$8, keystore_1$1 = keystore;
class InMemoryKeyStore extends keystore_1$1.KeyStore {
  constructor() {
    super(), this.keys = {};
  }
  /**
   * Stores a {@link utils/key_pair!KeyPair} in in-memory storage item
   * @param networkId The targeted network. (ex. default, betanet, etc…)
   * @param accountId The NEAR account tied to the key pair
   * @param keyPair The key pair to store in local storage
   */
  setKey(e, n, a) {
    return __awaiter$8(this, void 0, void 0, function* () {
      this.keys[`${n}:${e}`] = a.toString();
    });
  }
  /**
   * Gets a {@link utils/key_pair!KeyPair} from in-memory storage
   * @param networkId The targeted network. (ex. default, betanet, etc…)
   * @param accountId The NEAR account tied to the key pair
   * @returns {Promise<KeyPair>}
   */
  getKey(e, n) {
    return __awaiter$8(this, void 0, void 0, function* () {
      const a = this.keys[`${n}:${e}`];
      return a ? crypto_1$1.KeyPair.fromString(a) : null;
    });
  }
  /**
   * Removes a {@link utils/key_pair!KeyPair} from in-memory storage
   * @param networkId The targeted network. (ex. default, betanet, etc…)
   * @param accountId The NEAR account tied to the key pair
   */
  removeKey(e, n) {
    return __awaiter$8(this, void 0, void 0, function* () {
      delete this.keys[`${n}:${e}`];
    });
  }
  /**
   * Removes all {@link utils/key_pair!KeyPair} from in-memory storage
   */
  clear() {
    return __awaiter$8(this, void 0, void 0, function* () {
      this.keys = {};
    });
  }
  /**
   * Get the network(s) from in-memory storage
   * @returns {Promise<string[]>}
   */
  getNetworks() {
    return __awaiter$8(this, void 0, void 0, function* () {
      const e = /* @__PURE__ */ new Set();
      return Object.keys(this.keys).forEach((n) => {
        const a = n.split(":");
        e.add(a[1]);
      }), Array.from(e.values());
    });
  }
  /**
   * Gets the account(s) from in-memory storage
   * @param networkId The targeted network. (ex. default, betanet, etc…)
   */
  getAccounts(e) {
    return __awaiter$8(this, void 0, void 0, function* () {
      const n = new Array();
      return Object.keys(this.keys).forEach((a) => {
        const c = a.split(":");
        c[c.length - 1] === e && n.push(c.slice(0, c.length - 1).join(":"));
      }), n;
    });
  }
  /** @hidden */
  toString() {
    return "InMemoryKeyStore";
  }
}
in_memory_key_store.InMemoryKeyStore = InMemoryKeyStore;
var merge_key_store = {}, __awaiter$7 = commonjsGlobal && commonjsGlobal.__awaiter || function(t, e, n, a) {
  function c(o) {
    return o instanceof n ? o : new n(function(d) {
      d(o);
    });
  }
  return new (n || (n = Promise))(function(o, d) {
    function m(A) {
      try {
        S(a.next(A));
      } catch (B) {
        d(B);
      }
    }
    function w(A) {
      try {
        S(a.throw(A));
      } catch (B) {
        d(B);
      }
    }
    function S(A) {
      A.done ? o(A.value) : c(A.value).then(m, w);
    }
    S((a = a.apply(t, e || [])).next());
  });
};
Object.defineProperty(merge_key_store, "__esModule", { value: !0 });
merge_key_store.MergeKeyStore = void 0;
const keystore_1 = keystore;
class MergeKeyStore extends keystore_1.KeyStore {
  /**
   * @param keyStores read calls are attempted from start to end of array
   * @param options.writeKeyStoreIndex the keystore index that will receive all write calls
   */
  constructor(e, n = { writeKeyStoreIndex: 0 }) {
    super(), this.options = n, this.keyStores = e;
  }
  /**
   * Store a {@link utils/key_pair!KeyPair} to the first index of a key store array
   * @param networkId The targeted network. (ex. default, betanet, etc…)
   * @param accountId The NEAR account tied to the key pair
   * @param keyPair The key pair to store in local storage
   */
  setKey(e, n, a) {
    return __awaiter$7(this, void 0, void 0, function* () {
      yield this.keyStores[this.options.writeKeyStoreIndex].setKey(e, n, a);
    });
  }
  /**
   * Gets a {@link utils/key_pair!KeyPair} from the array of key stores
   * @param networkId The targeted network. (ex. default, betanet, etc…)
   * @param accountId The NEAR account tied to the key pair
   * @returns {Promise<KeyPair>}
   */
  getKey(e, n) {
    return __awaiter$7(this, void 0, void 0, function* () {
      for (const a of this.keyStores) {
        const c = yield a.getKey(e, n);
        if (c)
          return c;
      }
      return null;
    });
  }
  /**
   * Removes a {@link utils/key_pair!KeyPair} from the array of key stores
   * @param networkId The targeted network. (ex. default, betanet, etc…)
   * @param accountId The NEAR account tied to the key pair
   */
  removeKey(e, n) {
    return __awaiter$7(this, void 0, void 0, function* () {
      for (const a of this.keyStores)
        yield a.removeKey(e, n);
    });
  }
  /**
   * Removes all items from each key store
   */
  clear() {
    return __awaiter$7(this, void 0, void 0, function* () {
      for (const e of this.keyStores)
        yield e.clear();
    });
  }
  /**
   * Get the network(s) from the array of key stores
   * @returns {Promise<string[]>}
   */
  getNetworks() {
    return __awaiter$7(this, void 0, void 0, function* () {
      const e = /* @__PURE__ */ new Set();
      for (const n of this.keyStores)
        for (const a of yield n.getNetworks())
          e.add(a);
      return Array.from(e);
    });
  }
  /**
   * Gets the account(s) from the array of key stores
   * @param networkId The targeted network. (ex. default, betanet, etc…)
   */
  getAccounts(e) {
    return __awaiter$7(this, void 0, void 0, function* () {
      const n = /* @__PURE__ */ new Set();
      for (const a of this.keyStores)
        for (const c of yield a.getAccounts(e))
          n.add(c);
      return Array.from(n);
    });
  }
  /** @hidden */
  toString() {
    return `MergeKeyStore(${this.keyStores.join(", ")})`;
  }
}
merge_key_store.MergeKeyStore = MergeKeyStore;
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.MergeKeyStore = t.KeyStore = t.InMemoryKeyStore = void 0;
  var e = in_memory_key_store;
  Object.defineProperty(t, "InMemoryKeyStore", { enumerable: !0, get: function() {
    return e.InMemoryKeyStore;
  } });
  var n = keystore;
  Object.defineProperty(t, "KeyStore", { enumerable: !0, get: function() {
    return n.KeyStore;
  } });
  var a = merge_key_store;
  Object.defineProperty(t, "MergeKeyStore", { enumerable: !0, get: function() {
    return a.MergeKeyStore;
  } });
})(lib$4);
var __awaiter$6 = commonjsGlobal && commonjsGlobal.__awaiter || function(t, e, n, a) {
  function c(o) {
    return o instanceof n ? o : new n(function(d) {
      d(o);
    });
  }
  return new (n || (n = Promise))(function(o, d) {
    function m(A) {
      try {
        S(a.next(A));
      } catch (B) {
        d(B);
      }
    }
    function w(A) {
      try {
        S(a.throw(A));
      } catch (B) {
        d(B);
      }
    }
    function S(A) {
      A.done ? o(A.value) : c(A.value).then(m, w);
    }
    S((a = a.apply(t, e || [])).next());
  });
};
Object.defineProperty(browser_local_storage_key_store, "__esModule", { value: !0 });
browser_local_storage_key_store.BrowserLocalStorageKeyStore = void 0;
const crypto_1 = lib$8, keystores_1 = lib$4, LOCAL_STORAGE_KEY_PREFIX = "near-api-js:keystore:";
class BrowserLocalStorageKeyStore extends keystores_1.KeyStore {
  /**
   * @param localStorage defaults to window.localStorage
   * @param prefix defaults to `near-api-js:keystore:`
   */
  constructor(e = window.localStorage, n = LOCAL_STORAGE_KEY_PREFIX) {
    super(), this.localStorage = e, this.prefix = n;
  }
  /**
   * Stores a {@link utils/key_pair!KeyPair} in local storage.
   * @param networkId The targeted network. (ex. default, betanet, etc…)
   * @param accountId The NEAR account tied to the key pair
   * @param keyPair The key pair to store in local storage
   */
  setKey(e, n, a) {
    return __awaiter$6(this, void 0, void 0, function* () {
      this.localStorage.setItem(this.storageKeyForSecretKey(e, n), a.toString());
    });
  }
  /**
   * Gets a {@link utils/key_pair!KeyPair} from local storage
   * @param networkId The targeted network. (ex. default, betanet, etc…)
   * @param accountId The NEAR account tied to the key pair
   * @returns {Promise<KeyPair>}
   */
  getKey(e, n) {
    return __awaiter$6(this, void 0, void 0, function* () {
      const a = this.localStorage.getItem(this.storageKeyForSecretKey(e, n));
      return a ? crypto_1.KeyPair.fromString(a) : null;
    });
  }
  /**
   * Removes a {@link utils/key_pair!KeyPair} from local storage
   * @param networkId The targeted network. (ex. default, betanet, etc…)
   * @param accountId The NEAR account tied to the key pair
   */
  removeKey(e, n) {
    return __awaiter$6(this, void 0, void 0, function* () {
      this.localStorage.removeItem(this.storageKeyForSecretKey(e, n));
    });
  }
  /**
   * Removes all items that start with `prefix` from local storage
   */
  clear() {
    return __awaiter$6(this, void 0, void 0, function* () {
      for (const e of this.storageKeys())
        e.startsWith(this.prefix) && this.localStorage.removeItem(e);
    });
  }
  /**
   * Get the network(s) from local storage
   * @returns {Promise<string[]>}
   */
  getNetworks() {
    return __awaiter$6(this, void 0, void 0, function* () {
      const e = /* @__PURE__ */ new Set();
      for (const n of this.storageKeys())
        if (n.startsWith(this.prefix)) {
          const a = n.substring(this.prefix.length).split(":");
          e.add(a[1]);
        }
      return Array.from(e.values());
    });
  }
  /**
   * Gets the account(s) from local storage
   * @param networkId The targeted network. (ex. default, betanet, etc…)
   */
  getAccounts(e) {
    return __awaiter$6(this, void 0, void 0, function* () {
      const n = new Array();
      for (const a of this.storageKeys())
        if (a.startsWith(this.prefix)) {
          const c = a.substring(this.prefix.length).split(":");
          c[1] === e && n.push(c[0]);
        }
      return n;
    });
  }
  /**
   * @hidden
   * Helper function to retrieve a local storage key
   * @param networkId The targeted network. (ex. default, betanet, etc…)
   * @param accountId The NEAR account tied to the storage keythat's sought
   * @returns {string} An example might be: `near-api-js:keystore:near-friend:default`
   */
  storageKeyForSecretKey(e, n) {
    return `${this.prefix}${n}:${e}`;
  }
  /** @hidden */
  *storageKeys() {
    for (let e = 0; e < this.localStorage.length; e++)
      yield this.localStorage.key(e);
  }
}
browser_local_storage_key_store.BrowserLocalStorageKeyStore = BrowserLocalStorageKeyStore;
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.BrowserLocalStorageKeyStore = void 0;
  var e = browser_local_storage_key_store;
  Object.defineProperty(t, "BrowserLocalStorageKeyStore", { enumerable: !0, get: function() {
    return e.BrowserLocalStorageKeyStore;
  } });
})(lib$5);
var lib$3 = {}, action_creators = {}, actions = {}, lib$2 = {}, assignable = {};
Object.defineProperty(assignable, "__esModule", { value: !0 });
assignable.Assignable = void 0;
class Assignable {
  constructor(e) {
    Object.keys(e).map((n) => {
      this[n] = e[n];
    });
  }
}
assignable.Assignable = Assignable;
var errors = {};
Object.defineProperty(errors, "__esModule", { value: !0 });
errors.ErrorContext = errors.TypedError = errors.ArgumentTypeError = errors.PositionalArgsError = void 0;
class PositionalArgsError extends Error {
  constructor() {
    super("Contract method calls expect named arguments wrapped in object, e.g. { argName1: argValue1, argName2: argValue2 }");
  }
}
errors.PositionalArgsError = PositionalArgsError;
class ArgumentTypeError extends Error {
  constructor(e, n, a) {
    super(`Expected ${n} for '${e}' argument, but got '${JSON.stringify(a)}'`);
  }
}
errors.ArgumentTypeError = ArgumentTypeError;
class TypedError extends Error {
  constructor(e, n, a) {
    super(e), this.type = n || "UntypedError", this.context = a;
  }
}
errors.TypedError = TypedError;
class ErrorContext {
  constructor(e) {
    this.transactionHash = e;
  }
}
errors.ErrorContext = ErrorContext;
var provider = {}, light_client = {};
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.IdType = void 0, function(e) {
    e.Transaction = "transaction", e.Receipt = "receipt";
  }(t.IdType || (t.IdType = {}));
})(light_client);
var response = {};
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.FinalExecutionStatusBasic = t.ExecutionStatusBasic = void 0, function(e) {
    e.Unknown = "Unknown", e.Pending = "Pending", e.Failure = "Failure";
  }(t.ExecutionStatusBasic || (t.ExecutionStatusBasic = {})), function(e) {
    e.NotStarted = "NotStarted", e.Started = "Started", e.Failure = "Failure";
  }(t.FinalExecutionStatusBasic || (t.FinalExecutionStatusBasic = {}));
})(response);
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.FinalExecutionStatusBasic = t.ExecutionStatusBasic = t.IdType = void 0;
  var e = light_client;
  Object.defineProperty(t, "IdType", { enumerable: !0, get: function() {
    return e.IdType;
  } });
  var n = response;
  Object.defineProperty(t, "ExecutionStatusBasic", { enumerable: !0, get: function() {
    return n.ExecutionStatusBasic;
  } }), Object.defineProperty(t, "FinalExecutionStatusBasic", { enumerable: !0, get: function() {
    return n.FinalExecutionStatusBasic;
  } });
})(provider);
(function(t) {
  var e = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(a, c, o, d) {
    d === void 0 && (d = o);
    var m = Object.getOwnPropertyDescriptor(c, o);
    (!m || ("get" in m ? !c.__esModule : m.writable || m.configurable)) && (m = { enumerable: !0, get: function() {
      return c[o];
    } }), Object.defineProperty(a, d, m);
  } : function(a, c, o, d) {
    d === void 0 && (d = o), a[d] = c[o];
  }), n = commonjsGlobal && commonjsGlobal.__exportStar || function(a, c) {
    for (var o in a)
      o !== "default" && !Object.prototype.hasOwnProperty.call(c, o) && e(c, a, o);
  };
  Object.defineProperty(t, "__esModule", { value: !0 }), n(assignable, t), n(errors, t), n(provider, t);
})(lib$2);
Object.defineProperty(actions, "__esModule", { value: !0 });
actions.Action = actions.SignedDelegate = actions.DeleteAccount = actions.DeleteKey = actions.AddKey = actions.Stake = actions.Transfer = actions.FunctionCall = actions.DeployContract = actions.CreateAccount = actions.IAction = actions.AccessKey = actions.AccessKeyPermission = actions.FullAccessPermission = actions.FunctionCallPermission = void 0;
const types_1$4 = lib$2;
class Enum {
  constructor(e) {
    if (Object.keys(e).length !== 1)
      throw new Error("Enum can only take single value");
    Object.keys(e).map((n) => {
      this[n] = e[n], this.enum = n;
    });
  }
}
class FunctionCallPermission extends types_1$4.Assignable {
}
actions.FunctionCallPermission = FunctionCallPermission;
class FullAccessPermission extends types_1$4.Assignable {
}
actions.FullAccessPermission = FullAccessPermission;
class AccessKeyPermission extends Enum {
}
actions.AccessKeyPermission = AccessKeyPermission;
class AccessKey extends types_1$4.Assignable {
}
actions.AccessKey = AccessKey;
class IAction extends types_1$4.Assignable {
}
actions.IAction = IAction;
class CreateAccount extends IAction {
}
actions.CreateAccount = CreateAccount;
class DeployContract extends IAction {
}
actions.DeployContract = DeployContract;
class FunctionCall extends IAction {
}
actions.FunctionCall = FunctionCall;
class Transfer extends IAction {
}
actions.Transfer = Transfer;
class Stake extends IAction {
}
actions.Stake = Stake;
class AddKey extends IAction {
}
actions.AddKey = AddKey;
class DeleteKey extends IAction {
}
actions.DeleteKey = DeleteKey;
class DeleteAccount extends IAction {
}
actions.DeleteAccount = DeleteAccount;
class SignedDelegate extends IAction {
}
actions.SignedDelegate = SignedDelegate;
class Action extends Enum {
}
actions.Action = Action;
Object.defineProperty(action_creators, "__esModule", { value: !0 });
action_creators.actionCreators = action_creators.stringifyJsonOrBytes = void 0;
const actions_1$1 = actions;
function fullAccessKey() {
  return new actions_1$1.AccessKey({
    permission: new actions_1$1.AccessKeyPermission({
      fullAccess: new actions_1$1.FullAccessPermission({})
    })
  });
}
function functionCallAccessKey(t, e, n) {
  return new actions_1$1.AccessKey({
    permission: new actions_1$1.AccessKeyPermission({
      functionCall: new actions_1$1.FunctionCallPermission({ receiverId: t, allowance: n, methodNames: e })
    })
  });
}
function createAccount() {
  return new actions_1$1.Action({ createAccount: new actions_1$1.CreateAccount({}) });
}
function deployContract(t) {
  return new actions_1$1.Action({ deployContract: new actions_1$1.DeployContract({ code: t }) });
}
function stringifyJsonOrBytes(t) {
  return t.byteLength !== void 0 && t.byteLength === t.length ? t : Buffer$F.from(JSON.stringify(t));
}
action_creators.stringifyJsonOrBytes = stringifyJsonOrBytes;
function functionCall(t, e, n, a, c = stringifyJsonOrBytes, o = !1) {
  return o ? new actions_1$1.Action({ functionCall: new actions_1$1.FunctionCall({ methodName: t, args: e, gas: n, deposit: a }) }) : new actions_1$1.Action({
    functionCall: new actions_1$1.FunctionCall({
      methodName: t,
      args: c(e),
      gas: n,
      deposit: a
    })
  });
}
function transfer(t) {
  return new actions_1$1.Action({ transfer: new actions_1$1.Transfer({ deposit: t }) });
}
function stake(t, e) {
  return new actions_1$1.Action({ stake: new actions_1$1.Stake({ stake: t, publicKey: e }) });
}
function addKey(t, e) {
  return new actions_1$1.Action({ addKey: new actions_1$1.AddKey({ publicKey: t, accessKey: e }) });
}
function deleteKey(t) {
  return new actions_1$1.Action({ deleteKey: new actions_1$1.DeleteKey({ publicKey: t }) });
}
function deleteAccount(t) {
  return new actions_1$1.Action({ deleteAccount: new actions_1$1.DeleteAccount({ beneficiaryId: t }) });
}
function signedDelegate({ delegateAction: t, signature: e }) {
  return new actions_1$1.Action({ signedDelegate: new actions_1$1.SignedDelegate({ delegateAction: t, signature: e }) });
}
action_creators.actionCreators = {
  addKey,
  createAccount,
  deleteAccount,
  deleteKey,
  deployContract,
  fullAccessKey,
  functionCall,
  functionCallAccessKey,
  signedDelegate,
  stake,
  transfer
};
var create_transaction = {}, schema = {}, lib$1 = {}, constants = {};
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.KeyType = void 0, function(e) {
    e[e.ED25519 = 0] = "ED25519";
  }(t.KeyType || (t.KeyType = {}));
})(constants);
var key_pair = {}, key_pair_base = {};
Object.defineProperty(key_pair_base, "__esModule", { value: !0 });
key_pair_base.KeyPairBase = void 0;
class KeyPairBase {
}
key_pair_base.KeyPairBase = KeyPairBase;
var key_pair_ed25519 = {}, public_key = {}, __importDefault$2 = commonjsGlobal && commonjsGlobal.__importDefault || function(t) {
  return t && t.__esModule ? t : { default: t };
};
Object.defineProperty(public_key, "__esModule", { value: !0 });
public_key.PublicKey = void 0;
const types_1$3 = lib$2, borsh_1$1 = lib$7, tweetnacl_1$1 = __importDefault$2(naclFastExports), constants_1$1 = constants;
function key_type_to_str(t) {
  switch (t) {
    case constants_1$1.KeyType.ED25519:
      return "ed25519";
    default:
      throw new Error(`Unknown key type ${t}`);
  }
}
function str_to_key_type(t) {
  switch (t.toLowerCase()) {
    case "ed25519":
      return constants_1$1.KeyType.ED25519;
    default:
      throw new Error(`Unknown key type ${t}`);
  }
}
let PublicKey$1 = class Wt extends types_1$3.Assignable {
  static from(e) {
    return typeof e == "string" ? Wt.fromString(e) : e;
  }
  static fromString(e) {
    const n = e.split(":");
    if (n.length === 1)
      return new Wt({ keyType: constants_1$1.KeyType.ED25519, data: (0, borsh_1$1.baseDecode)(n[0]) });
    if (n.length === 2)
      return new Wt({ keyType: str_to_key_type(n[0]), data: (0, borsh_1$1.baseDecode)(n[1]) });
    throw new Error("Invalid encoded key format, must be <curve>:<encoded key>");
  }
  toString() {
    return `${key_type_to_str(this.keyType)}:${(0, borsh_1$1.baseEncode)(this.data)}`;
  }
  verify(e, n) {
    switch (this.keyType) {
      case constants_1$1.KeyType.ED25519:
        return tweetnacl_1$1.default.sign.detached.verify(e, n, this.data);
      default:
        throw new Error(`Unknown key type ${this.keyType}`);
    }
  }
};
public_key.PublicKey = PublicKey$1;
var __importDefault$1 = commonjsGlobal && commonjsGlobal.__importDefault || function(t) {
  return t && t.__esModule ? t : { default: t };
};
Object.defineProperty(key_pair_ed25519, "__esModule", { value: !0 });
key_pair_ed25519.KeyPairEd25519 = void 0;
const borsh_1 = lib$7, tweetnacl_1 = __importDefault$1(naclFastExports), constants_1 = constants, key_pair_base_1$1 = key_pair_base, public_key_1 = public_key;
class KeyPairEd25519 extends key_pair_base_1$1.KeyPairBase {
  /**
   * Construct an instance of key pair given a secret key.
   * It's generally assumed that these are encoded in base58.
   * @param {string} secretKey
   */
  constructor(e) {
    super();
    const n = tweetnacl_1.default.sign.keyPair.fromSecretKey((0, borsh_1.baseDecode)(e));
    this.publicKey = new public_key_1.PublicKey({ keyType: constants_1.KeyType.ED25519, data: n.publicKey }), this.secretKey = e;
  }
  /**
   * Generate a new random keypair.
   * @example
   * const keyRandom = KeyPair.fromRandom();
   * keyRandom.publicKey
   * // returns [PUBLIC_KEY]
   *
   * keyRandom.secretKey
   * // returns [SECRET_KEY]
   */
  static fromRandom() {
    const e = tweetnacl_1.default.sign.keyPair();
    return new KeyPairEd25519((0, borsh_1.baseEncode)(e.secretKey));
  }
  sign(e) {
    return { signature: tweetnacl_1.default.sign.detached(e, (0, borsh_1.baseDecode)(this.secretKey)), publicKey: this.publicKey };
  }
  verify(e, n) {
    return this.publicKey.verify(e, n);
  }
  toString() {
    return `ed25519:${this.secretKey}`;
  }
  getPublicKey() {
    return this.publicKey;
  }
}
key_pair_ed25519.KeyPairEd25519 = KeyPairEd25519;
Object.defineProperty(key_pair, "__esModule", { value: !0 });
key_pair.KeyPair = void 0;
const key_pair_base_1 = key_pair_base, key_pair_ed25519_1 = key_pair_ed25519;
class KeyPair extends key_pair_base_1.KeyPairBase {
  /**
   * @param curve Name of elliptical curve, case-insensitive
   * @returns Random KeyPair based on the curve
   */
  static fromRandom(e) {
    switch (e.toUpperCase()) {
      case "ED25519":
        return key_pair_ed25519_1.KeyPairEd25519.fromRandom();
      default:
        throw new Error(`Unknown curve ${e}`);
    }
  }
  static fromString(e) {
    const n = e.split(":");
    if (n.length === 1)
      return new key_pair_ed25519_1.KeyPairEd25519(n[0]);
    if (n.length === 2)
      switch (n[0].toUpperCase()) {
        case "ED25519":
          return new key_pair_ed25519_1.KeyPairEd25519(n[1]);
        default:
          throw new Error(`Unknown curve: ${n[0]}`);
      }
    else
      throw new Error("Invalid encoded key format, must be <curve>:<encoded key>");
  }
}
key_pair.KeyPair = KeyPair;
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.PublicKey = t.KeyPairEd25519 = t.KeyPair = t.KeyType = void 0;
  var e = constants;
  Object.defineProperty(t, "KeyType", { enumerable: !0, get: function() {
    return e.KeyType;
  } });
  var n = key_pair;
  Object.defineProperty(t, "KeyPair", { enumerable: !0, get: function() {
    return n.KeyPair;
  } });
  var a = key_pair_ed25519;
  Object.defineProperty(t, "KeyPairEd25519", { enumerable: !0, get: function() {
    return a.KeyPairEd25519;
  } });
  var c = public_key;
  Object.defineProperty(t, "PublicKey", { enumerable: !0, get: function() {
    return c.PublicKey;
  } });
})(lib$1);
var delegate = {};
Object.defineProperty(delegate, "__esModule", { value: !0 });
delegate.buildDelegateAction = delegate.DelegateAction = void 0;
const types_1$2 = lib$2;
class DelegateAction extends types_1$2.Assignable {
}
delegate.DelegateAction = DelegateAction;
function buildDelegateAction({ actions: t, maxBlockHeight: e, nonce: n, publicKey: a, receiverId: c, senderId: o }) {
  return new DelegateAction({
    senderId: o,
    receiverId: c,
    actions: t,
    nonce: n,
    maxBlockHeight: e,
    publicKey: a
  });
}
delegate.buildDelegateAction = buildDelegateAction;
var prefix = {};
Object.defineProperty(prefix, "__esModule", { value: !0 });
prefix.DelegateActionPrefix = void 0;
const types_1$1 = lib$2, ACTIONABLE_MESSAGE_BASE = Math.pow(2, 30), NEP = {
  MetaTransactions: 366
};
class NEPPrefix extends types_1$1.Assignable {
}
class ActionableMessagePrefix extends NEPPrefix {
  /** Given the NEP number, set the prefix using 2^30 as the offset **/
  constructor(e) {
    super({ prefix: ACTIONABLE_MESSAGE_BASE + e });
  }
}
class DelegateActionPrefix extends ActionableMessagePrefix {
  constructor() {
    super(NEP.MetaTransactions);
  }
}
prefix.DelegateActionPrefix = DelegateActionPrefix;
var signature$1 = {};
Object.defineProperty(signature$1, "__esModule", { value: !0 });
signature$1.Signature = void 0;
const types_1 = lib$2;
class Signature extends types_1.Assignable {
}
signature$1.Signature = Signature;
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.SCHEMA = t.SignedTransaction = t.Transaction = t.decodeSignedTransaction = t.decodeTransaction = t.encodeTransaction = t.encodeSignedDelegate = t.encodeDelegateAction = void 0;
  const e = lib$1, n = lib$2, a = lib$7, c = actions, o = delegate, d = prefix, m = signature$1;
  function w(L) {
    return new Uint8Array([
      ...(0, a.serialize)(t.SCHEMA, new d.DelegateActionPrefix()),
      ...(0, a.serialize)(t.SCHEMA, L)
    ]);
  }
  t.encodeDelegateAction = w;
  function S(L) {
    return (0, a.serialize)(t.SCHEMA, L);
  }
  t.encodeSignedDelegate = S;
  function A(L) {
    return (0, a.serialize)(t.SCHEMA, L);
  }
  t.encodeTransaction = A;
  function B(L) {
    return (0, a.deserialize)(t.SCHEMA, I, L);
  }
  t.decodeTransaction = B;
  function P(L) {
    return (0, a.deserialize)(t.SCHEMA, O, L);
  }
  t.decodeSignedTransaction = P;
  class I extends n.Assignable {
    encode() {
      return A(this);
    }
    static decode(C) {
      return B(C);
    }
  }
  t.Transaction = I;
  class O extends n.Assignable {
    encode() {
      return A(this);
    }
    static decode(C) {
      return P(C);
    }
  }
  t.SignedTransaction = O, t.SCHEMA = /* @__PURE__ */ new Map([
    [m.Signature, { kind: "struct", fields: [
      ["keyType", "u8"],
      ["data", [64]]
    ] }],
    [O, { kind: "struct", fields: [
      ["transaction", I],
      ["signature", m.Signature]
    ] }],
    [I, { kind: "struct", fields: [
      ["signerId", "string"],
      ["publicKey", e.PublicKey],
      ["nonce", "u64"],
      ["receiverId", "string"],
      ["blockHash", [32]],
      ["actions", [c.Action]]
    ] }],
    [e.PublicKey, { kind: "struct", fields: [
      ["keyType", "u8"],
      ["data", [32]]
    ] }],
    [c.AccessKey, { kind: "struct", fields: [
      ["nonce", "u64"],
      ["permission", c.AccessKeyPermission]
    ] }],
    [c.AccessKeyPermission, { kind: "enum", field: "enum", values: [
      ["functionCall", c.FunctionCallPermission],
      ["fullAccess", c.FullAccessPermission]
    ] }],
    [c.FunctionCallPermission, { kind: "struct", fields: [
      ["allowance", { kind: "option", type: "u128" }],
      ["receiverId", "string"],
      ["methodNames", ["string"]]
    ] }],
    [c.FullAccessPermission, { kind: "struct", fields: [] }],
    [c.Action, { kind: "enum", field: "enum", values: [
      ["createAccount", c.CreateAccount],
      ["deployContract", c.DeployContract],
      ["functionCall", c.FunctionCall],
      ["transfer", c.Transfer],
      ["stake", c.Stake],
      ["addKey", c.AddKey],
      ["deleteKey", c.DeleteKey],
      ["deleteAccount", c.DeleteAccount],
      ["signedDelegate", c.SignedDelegate]
    ] }],
    [c.CreateAccount, { kind: "struct", fields: [] }],
    [c.DeployContract, { kind: "struct", fields: [
      ["code", ["u8"]]
    ] }],
    [c.FunctionCall, { kind: "struct", fields: [
      ["methodName", "string"],
      ["args", ["u8"]],
      ["gas", "u64"],
      ["deposit", "u128"]
    ] }],
    [c.Transfer, { kind: "struct", fields: [
      ["deposit", "u128"]
    ] }],
    [c.Stake, { kind: "struct", fields: [
      ["stake", "u128"],
      ["publicKey", e.PublicKey]
    ] }],
    [c.AddKey, { kind: "struct", fields: [
      ["publicKey", e.PublicKey],
      ["accessKey", c.AccessKey]
    ] }],
    [c.DeleteKey, { kind: "struct", fields: [
      ["publicKey", e.PublicKey]
    ] }],
    [c.DeleteAccount, { kind: "struct", fields: [
      ["beneficiaryId", "string"]
    ] }],
    [o.DelegateAction, { kind: "struct", fields: [
      ["senderId", "string"],
      ["receiverId", "string"],
      ["actions", [c.Action]],
      ["nonce", "u64"],
      ["maxBlockHeight", "u64"],
      ["publicKey", e.PublicKey]
    ] }],
    [d.DelegateActionPrefix, { kind: "struct", fields: [
      ["prefix", "u32"]
    ] }],
    [c.SignedDelegate, { kind: "struct", fields: [
      ["delegateAction", o.DelegateAction],
      ["signature", m.Signature]
    ] }]
  ]);
})(schema);
Object.defineProperty(create_transaction, "__esModule", { value: !0 });
create_transaction.createTransaction = void 0;
const schema_1$1 = schema;
function createTransaction(t, e, n, a, c, o) {
  return new schema_1$1.Transaction({ signerId: t, publicKey: e, nonce: a, receiverId: n, actions: c, blockHash: o });
}
create_transaction.createTransaction = createTransaction;
var sign$1 = {}, sha256$2 = { exports: {} };
(function(module) {
  (function() {
    var ERROR = "input is invalid type", WINDOW = typeof window == "object", root = WINDOW ? window : {};
    root.JS_SHA256_NO_WINDOW && (WINDOW = !1);
    var WEB_WORKER = !WINDOW && typeof self == "object", NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process$1 == "object" && process$1.versions && process$1.versions.node;
    NODE_JS ? root = commonjsGlobal : WEB_WORKER && (root = self);
    var COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && !0 && module.exports, ARRAY_BUFFER = !root.JS_SHA256_NO_ARRAY_BUFFER && typeof ArrayBuffer < "u", HEX_CHARS = "0123456789abcdef".split(""), EXTRA = [-2147483648, 8388608, 32768, 128], SHIFT = [24, 16, 8, 0], K = [
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ], OUTPUT_TYPES = ["hex", "array", "digest", "arrayBuffer"], blocks = [];
    (root.JS_SHA256_NO_NODE_JS || !Array.isArray) && (Array.isArray = function(t) {
      return Object.prototype.toString.call(t) === "[object Array]";
    }), ARRAY_BUFFER && (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView) && (ArrayBuffer.isView = function(t) {
      return typeof t == "object" && t.buffer && t.buffer.constructor === ArrayBuffer;
    });
    var createOutputMethod = function(t, e) {
      return function(n) {
        return new Sha256(e, !0).update(n)[t]();
      };
    }, createMethod = function(t) {
      var e = createOutputMethod("hex", t);
      NODE_JS && (e = nodeWrap(e, t)), e.create = function() {
        return new Sha256(t);
      }, e.update = function(c) {
        return e.create().update(c);
      };
      for (var n = 0; n < OUTPUT_TYPES.length; ++n) {
        var a = OUTPUT_TYPES[n];
        e[a] = createOutputMethod(a, t);
      }
      return e;
    }, nodeWrap = function(method, is224) {
      var crypto = eval("require('crypto')"), Buffer = eval("require('buffer').Buffer"), algorithm = is224 ? "sha224" : "sha256", nodeMethod = function(t) {
        if (typeof t == "string")
          return crypto.createHash(algorithm).update(t, "utf8").digest("hex");
        if (t == null)
          throw new Error(ERROR);
        return t.constructor === ArrayBuffer && (t = new Uint8Array(t)), Array.isArray(t) || ArrayBuffer.isView(t) || t.constructor === Buffer ? crypto.createHash(algorithm).update(new Buffer(t)).digest("hex") : method(t);
      };
      return nodeMethod;
    }, createHmacOutputMethod = function(t, e) {
      return function(n, a) {
        return new HmacSha256(n, e, !0).update(a)[t]();
      };
    }, createHmacMethod = function(t) {
      var e = createHmacOutputMethod("hex", t);
      e.create = function(c) {
        return new HmacSha256(c, t);
      }, e.update = function(c, o) {
        return e.create(c).update(o);
      };
      for (var n = 0; n < OUTPUT_TYPES.length; ++n) {
        var a = OUTPUT_TYPES[n];
        e[a] = createHmacOutputMethod(a, t);
      }
      return e;
    };
    function Sha256(t, e) {
      e ? (blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0, this.blocks = blocks) : this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], t ? (this.h0 = 3238371032, this.h1 = 914150663, this.h2 = 812702999, this.h3 = 4144912697, this.h4 = 4290775857, this.h5 = 1750603025, this.h6 = 1694076839, this.h7 = 3204075428) : (this.h0 = 1779033703, this.h1 = 3144134277, this.h2 = 1013904242, this.h3 = 2773480762, this.h4 = 1359893119, this.h5 = 2600822924, this.h6 = 528734635, this.h7 = 1541459225), this.block = this.start = this.bytes = this.hBytes = 0, this.finalized = this.hashed = !1, this.first = !0, this.is224 = t;
    }
    Sha256.prototype.update = function(t) {
      if (!this.finalized) {
        var e, n = typeof t;
        if (n !== "string") {
          if (n === "object") {
            if (t === null)
              throw new Error(ERROR);
            if (ARRAY_BUFFER && t.constructor === ArrayBuffer)
              t = new Uint8Array(t);
            else if (!Array.isArray(t) && (!ARRAY_BUFFER || !ArrayBuffer.isView(t)))
              throw new Error(ERROR);
          } else
            throw new Error(ERROR);
          e = !0;
        }
        for (var a, c = 0, o, d = t.length, m = this.blocks; c < d; ) {
          if (this.hashed && (this.hashed = !1, m[0] = this.block, m[16] = m[1] = m[2] = m[3] = m[4] = m[5] = m[6] = m[7] = m[8] = m[9] = m[10] = m[11] = m[12] = m[13] = m[14] = m[15] = 0), e)
            for (o = this.start; c < d && o < 64; ++c)
              m[o >> 2] |= t[c] << SHIFT[o++ & 3];
          else
            for (o = this.start; c < d && o < 64; ++c)
              a = t.charCodeAt(c), a < 128 ? m[o >> 2] |= a << SHIFT[o++ & 3] : a < 2048 ? (m[o >> 2] |= (192 | a >> 6) << SHIFT[o++ & 3], m[o >> 2] |= (128 | a & 63) << SHIFT[o++ & 3]) : a < 55296 || a >= 57344 ? (m[o >> 2] |= (224 | a >> 12) << SHIFT[o++ & 3], m[o >> 2] |= (128 | a >> 6 & 63) << SHIFT[o++ & 3], m[o >> 2] |= (128 | a & 63) << SHIFT[o++ & 3]) : (a = 65536 + ((a & 1023) << 10 | t.charCodeAt(++c) & 1023), m[o >> 2] |= (240 | a >> 18) << SHIFT[o++ & 3], m[o >> 2] |= (128 | a >> 12 & 63) << SHIFT[o++ & 3], m[o >> 2] |= (128 | a >> 6 & 63) << SHIFT[o++ & 3], m[o >> 2] |= (128 | a & 63) << SHIFT[o++ & 3]);
          this.lastByteIndex = o, this.bytes += o - this.start, o >= 64 ? (this.block = m[16], this.start = o - 64, this.hash(), this.hashed = !0) : this.start = o;
        }
        return this.bytes > 4294967295 && (this.hBytes += this.bytes / 4294967296 << 0, this.bytes = this.bytes % 4294967296), this;
      }
    }, Sha256.prototype.finalize = function() {
      if (!this.finalized) {
        this.finalized = !0;
        var t = this.blocks, e = this.lastByteIndex;
        t[16] = this.block, t[e >> 2] |= EXTRA[e & 3], this.block = t[16], e >= 56 && (this.hashed || this.hash(), t[0] = this.block, t[16] = t[1] = t[2] = t[3] = t[4] = t[5] = t[6] = t[7] = t[8] = t[9] = t[10] = t[11] = t[12] = t[13] = t[14] = t[15] = 0), t[14] = this.hBytes << 3 | this.bytes >>> 29, t[15] = this.bytes << 3, this.hash();
      }
    }, Sha256.prototype.hash = function() {
      var t = this.h0, e = this.h1, n = this.h2, a = this.h3, c = this.h4, o = this.h5, d = this.h6, m = this.h7, w = this.blocks, S, A, B, P, I, O, L, C, z, q, Z;
      for (S = 16; S < 64; ++S)
        I = w[S - 15], A = (I >>> 7 | I << 25) ^ (I >>> 18 | I << 14) ^ I >>> 3, I = w[S - 2], B = (I >>> 17 | I << 15) ^ (I >>> 19 | I << 13) ^ I >>> 10, w[S] = w[S - 16] + A + w[S - 7] + B << 0;
      for (Z = e & n, S = 0; S < 64; S += 4)
        this.first ? (this.is224 ? (C = 300032, I = w[0] - 1413257819, m = I - 150054599 << 0, a = I + 24177077 << 0) : (C = 704751109, I = w[0] - 210244248, m = I - 1521486534 << 0, a = I + 143694565 << 0), this.first = !1) : (A = (t >>> 2 | t << 30) ^ (t >>> 13 | t << 19) ^ (t >>> 22 | t << 10), B = (c >>> 6 | c << 26) ^ (c >>> 11 | c << 21) ^ (c >>> 25 | c << 7), C = t & e, P = C ^ t & n ^ Z, L = c & o ^ ~c & d, I = m + B + L + K[S] + w[S], O = A + P, m = a + I << 0, a = I + O << 0), A = (a >>> 2 | a << 30) ^ (a >>> 13 | a << 19) ^ (a >>> 22 | a << 10), B = (m >>> 6 | m << 26) ^ (m >>> 11 | m << 21) ^ (m >>> 25 | m << 7), z = a & t, P = z ^ a & e ^ C, L = m & c ^ ~m & o, I = d + B + L + K[S + 1] + w[S + 1], O = A + P, d = n + I << 0, n = I + O << 0, A = (n >>> 2 | n << 30) ^ (n >>> 13 | n << 19) ^ (n >>> 22 | n << 10), B = (d >>> 6 | d << 26) ^ (d >>> 11 | d << 21) ^ (d >>> 25 | d << 7), q = n & a, P = q ^ n & t ^ z, L = d & m ^ ~d & c, I = o + B + L + K[S + 2] + w[S + 2], O = A + P, o = e + I << 0, e = I + O << 0, A = (e >>> 2 | e << 30) ^ (e >>> 13 | e << 19) ^ (e >>> 22 | e << 10), B = (o >>> 6 | o << 26) ^ (o >>> 11 | o << 21) ^ (o >>> 25 | o << 7), Z = e & n, P = Z ^ e & a ^ q, L = o & d ^ ~o & m, I = c + B + L + K[S + 3] + w[S + 3], O = A + P, c = t + I << 0, t = I + O << 0;
      this.h0 = this.h0 + t << 0, this.h1 = this.h1 + e << 0, this.h2 = this.h2 + n << 0, this.h3 = this.h3 + a << 0, this.h4 = this.h4 + c << 0, this.h5 = this.h5 + o << 0, this.h6 = this.h6 + d << 0, this.h7 = this.h7 + m << 0;
    }, Sha256.prototype.hex = function() {
      this.finalize();
      var t = this.h0, e = this.h1, n = this.h2, a = this.h3, c = this.h4, o = this.h5, d = this.h6, m = this.h7, w = HEX_CHARS[t >> 28 & 15] + HEX_CHARS[t >> 24 & 15] + HEX_CHARS[t >> 20 & 15] + HEX_CHARS[t >> 16 & 15] + HEX_CHARS[t >> 12 & 15] + HEX_CHARS[t >> 8 & 15] + HEX_CHARS[t >> 4 & 15] + HEX_CHARS[t & 15] + HEX_CHARS[e >> 28 & 15] + HEX_CHARS[e >> 24 & 15] + HEX_CHARS[e >> 20 & 15] + HEX_CHARS[e >> 16 & 15] + HEX_CHARS[e >> 12 & 15] + HEX_CHARS[e >> 8 & 15] + HEX_CHARS[e >> 4 & 15] + HEX_CHARS[e & 15] + HEX_CHARS[n >> 28 & 15] + HEX_CHARS[n >> 24 & 15] + HEX_CHARS[n >> 20 & 15] + HEX_CHARS[n >> 16 & 15] + HEX_CHARS[n >> 12 & 15] + HEX_CHARS[n >> 8 & 15] + HEX_CHARS[n >> 4 & 15] + HEX_CHARS[n & 15] + HEX_CHARS[a >> 28 & 15] + HEX_CHARS[a >> 24 & 15] + HEX_CHARS[a >> 20 & 15] + HEX_CHARS[a >> 16 & 15] + HEX_CHARS[a >> 12 & 15] + HEX_CHARS[a >> 8 & 15] + HEX_CHARS[a >> 4 & 15] + HEX_CHARS[a & 15] + HEX_CHARS[c >> 28 & 15] + HEX_CHARS[c >> 24 & 15] + HEX_CHARS[c >> 20 & 15] + HEX_CHARS[c >> 16 & 15] + HEX_CHARS[c >> 12 & 15] + HEX_CHARS[c >> 8 & 15] + HEX_CHARS[c >> 4 & 15] + HEX_CHARS[c & 15] + HEX_CHARS[o >> 28 & 15] + HEX_CHARS[o >> 24 & 15] + HEX_CHARS[o >> 20 & 15] + HEX_CHARS[o >> 16 & 15] + HEX_CHARS[o >> 12 & 15] + HEX_CHARS[o >> 8 & 15] + HEX_CHARS[o >> 4 & 15] + HEX_CHARS[o & 15] + HEX_CHARS[d >> 28 & 15] + HEX_CHARS[d >> 24 & 15] + HEX_CHARS[d >> 20 & 15] + HEX_CHARS[d >> 16 & 15] + HEX_CHARS[d >> 12 & 15] + HEX_CHARS[d >> 8 & 15] + HEX_CHARS[d >> 4 & 15] + HEX_CHARS[d & 15];
      return this.is224 || (w += HEX_CHARS[m >> 28 & 15] + HEX_CHARS[m >> 24 & 15] + HEX_CHARS[m >> 20 & 15] + HEX_CHARS[m >> 16 & 15] + HEX_CHARS[m >> 12 & 15] + HEX_CHARS[m >> 8 & 15] + HEX_CHARS[m >> 4 & 15] + HEX_CHARS[m & 15]), w;
    }, Sha256.prototype.toString = Sha256.prototype.hex, Sha256.prototype.digest = function() {
      this.finalize();
      var t = this.h0, e = this.h1, n = this.h2, a = this.h3, c = this.h4, o = this.h5, d = this.h6, m = this.h7, w = [
        t >> 24 & 255,
        t >> 16 & 255,
        t >> 8 & 255,
        t & 255,
        e >> 24 & 255,
        e >> 16 & 255,
        e >> 8 & 255,
        e & 255,
        n >> 24 & 255,
        n >> 16 & 255,
        n >> 8 & 255,
        n & 255,
        a >> 24 & 255,
        a >> 16 & 255,
        a >> 8 & 255,
        a & 255,
        c >> 24 & 255,
        c >> 16 & 255,
        c >> 8 & 255,
        c & 255,
        o >> 24 & 255,
        o >> 16 & 255,
        o >> 8 & 255,
        o & 255,
        d >> 24 & 255,
        d >> 16 & 255,
        d >> 8 & 255,
        d & 255
      ];
      return this.is224 || w.push(m >> 24 & 255, m >> 16 & 255, m >> 8 & 255, m & 255), w;
    }, Sha256.prototype.array = Sha256.prototype.digest, Sha256.prototype.arrayBuffer = function() {
      this.finalize();
      var t = new ArrayBuffer(this.is224 ? 28 : 32), e = new DataView(t);
      return e.setUint32(0, this.h0), e.setUint32(4, this.h1), e.setUint32(8, this.h2), e.setUint32(12, this.h3), e.setUint32(16, this.h4), e.setUint32(20, this.h5), e.setUint32(24, this.h6), this.is224 || e.setUint32(28, this.h7), t;
    };
    function HmacSha256(t, e, n) {
      var a, c = typeof t;
      if (c === "string") {
        var o = [], d = t.length, m = 0, w;
        for (a = 0; a < d; ++a)
          w = t.charCodeAt(a), w < 128 ? o[m++] = w : w < 2048 ? (o[m++] = 192 | w >> 6, o[m++] = 128 | w & 63) : w < 55296 || w >= 57344 ? (o[m++] = 224 | w >> 12, o[m++] = 128 | w >> 6 & 63, o[m++] = 128 | w & 63) : (w = 65536 + ((w & 1023) << 10 | t.charCodeAt(++a) & 1023), o[m++] = 240 | w >> 18, o[m++] = 128 | w >> 12 & 63, o[m++] = 128 | w >> 6 & 63, o[m++] = 128 | w & 63);
        t = o;
      } else if (c === "object") {
        if (t === null)
          throw new Error(ERROR);
        if (ARRAY_BUFFER && t.constructor === ArrayBuffer)
          t = new Uint8Array(t);
        else if (!Array.isArray(t) && (!ARRAY_BUFFER || !ArrayBuffer.isView(t)))
          throw new Error(ERROR);
      } else
        throw new Error(ERROR);
      t.length > 64 && (t = new Sha256(e, !0).update(t).array());
      var S = [], A = [];
      for (a = 0; a < 64; ++a) {
        var B = t[a] || 0;
        S[a] = 92 ^ B, A[a] = 54 ^ B;
      }
      Sha256.call(this, e, n), this.update(A), this.oKeyPad = S, this.inner = !0, this.sharedMemory = n;
    }
    HmacSha256.prototype = new Sha256(), HmacSha256.prototype.finalize = function() {
      if (Sha256.prototype.finalize.call(this), this.inner) {
        this.inner = !1;
        var t = this.array();
        Sha256.call(this, this.is224, this.sharedMemory), this.update(this.oKeyPad), this.update(t), Sha256.prototype.finalize.call(this);
      }
    };
    var exports = createMethod();
    exports.sha256 = exports, exports.sha224 = createMethod(!0), exports.sha256.hmac = createHmacMethod(), exports.sha224.hmac = createHmacMethod(!0), COMMON_JS ? module.exports = exports : (root.sha256 = exports.sha256, root.sha224 = exports.sha224);
  })();
})(sha256$2);
var sha256Exports = sha256$2.exports, __awaiter$5 = commonjsGlobal && commonjsGlobal.__awaiter || function(t, e, n, a) {
  function c(o) {
    return o instanceof n ? o : new n(function(d) {
      d(o);
    });
  }
  return new (n || (n = Promise))(function(o, d) {
    function m(A) {
      try {
        S(a.next(A));
      } catch (B) {
        d(B);
      }
    }
    function w(A) {
      try {
        S(a.throw(A));
      } catch (B) {
        d(B);
      }
    }
    function S(A) {
      A.done ? o(A.value) : c(A.value).then(m, w);
    }
    S((a = a.apply(t, e || [])).next());
  });
}, __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(t) {
  return t && t.__esModule ? t : { default: t };
};
Object.defineProperty(sign$1, "__esModule", { value: !0 });
sign$1.signDelegateAction = sign$1.signTransaction = void 0;
const js_sha256_1 = __importDefault(sha256Exports), actions_1 = actions, create_transaction_1 = create_transaction, schema_1 = schema, signature_1 = signature$1;
function signTransactionObject(t, e, n, a) {
  return __awaiter$5(this, void 0, void 0, function* () {
    const c = (0, schema_1.encodeTransaction)(t), o = new Uint8Array(js_sha256_1.default.sha256.array(c)), d = yield e.signMessage(c, n, a), m = new schema_1.SignedTransaction({
      transaction: t,
      signature: new signature_1.Signature({ keyType: t.publicKey.keyType, data: d.signature })
    });
    return [o, m];
  });
}
function signTransaction(...t) {
  return __awaiter$5(this, void 0, void 0, function* () {
    if (t[0].constructor === schema_1.Transaction) {
      const [e, n, a, c] = t;
      return signTransactionObject(e, n, a, c);
    } else {
      const [e, n, a, c, o, d, m] = t, w = yield o.getPublicKey(d, m), S = (0, create_transaction_1.createTransaction)(d, w, e, n, a, c);
      return signTransactionObject(S, o, d, m);
    }
  });
}
sign$1.signTransaction = signTransaction;
function signDelegateAction({ delegateAction: t, signer: e }) {
  return __awaiter$5(this, void 0, void 0, function* () {
    const n = (0, schema_1.encodeDelegateAction)(t), a = yield e.sign(n), c = new actions_1.SignedDelegate({
      delegateAction: t,
      signature: new signature_1.Signature({
        keyType: t.publicKey.keyType,
        data: a
      })
    });
    return {
      hash: new Uint8Array(js_sha256_1.default.sha256.array(n)),
      signedDelegateAction: c
    };
  });
}
sign$1.signDelegateAction = signDelegateAction;
(function(t) {
  var e = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(a, c, o, d) {
    d === void 0 && (d = o);
    var m = Object.getOwnPropertyDescriptor(c, o);
    (!m || ("get" in m ? !c.__esModule : m.writable || m.configurable)) && (m = { enumerable: !0, get: function() {
      return c[o];
    } }), Object.defineProperty(a, d, m);
  } : function(a, c, o, d) {
    d === void 0 && (d = o), a[d] = c[o];
  }), n = commonjsGlobal && commonjsGlobal.__exportStar || function(a, c) {
    for (var o in a)
      o !== "default" && !Object.prototype.hasOwnProperty.call(c, o) && e(c, a, o);
  };
  Object.defineProperty(t, "__esModule", { value: !0 }), n(action_creators, t), n(actions, t), n(create_transaction, t), n(delegate, t), n(schema, t), n(sign$1, t), n(signature$1, t);
})(lib$3);
function base$1(t) {
  if (t.length >= 255)
    throw new TypeError("Alphabet too long");
  for (var e = new Uint8Array(256), n = 0; n < e.length; n++)
    e[n] = 255;
  for (var a = 0; a < t.length; a++) {
    var c = t.charAt(a), o = c.charCodeAt(0);
    if (e[o] !== 255)
      throw new TypeError(c + " is ambiguous");
    e[o] = a;
  }
  var d = t.length, m = t.charAt(0), w = Math.log(d) / Math.log(256), S = Math.log(256) / Math.log(d);
  function A(I) {
    if (I instanceof Uint8Array || (ArrayBuffer.isView(I) ? I = new Uint8Array(I.buffer, I.byteOffset, I.byteLength) : Array.isArray(I) && (I = Uint8Array.from(I))), !(I instanceof Uint8Array))
      throw new TypeError("Expected Uint8Array");
    if (I.length === 0)
      return "";
    for (var O = 0, L = 0, C = 0, z = I.length; C !== z && I[C] === 0; )
      C++, O++;
    for (var q = (z - C) * S + 1 >>> 0, Z = new Uint8Array(q); C !== z; ) {
      for (var X = I[C], ie = 0, fe = q - 1; (X !== 0 || ie < L) && fe !== -1; fe--, ie++)
        X += 256 * Z[fe] >>> 0, Z[fe] = X % d >>> 0, X = X / d >>> 0;
      if (X !== 0)
        throw new Error("Non-zero carry");
      L = ie, C++;
    }
    for (var ye = q - L; ye !== q && Z[ye] === 0; )
      ye++;
    for (var j = m.repeat(O); ye < q; ++ye)
      j += t.charAt(Z[ye]);
    return j;
  }
  function B(I) {
    if (typeof I != "string")
      throw new TypeError("Expected String");
    if (I.length === 0)
      return new Uint8Array();
    for (var O = 0, L = 0, C = 0; I[O] === m; )
      L++, O++;
    for (var z = (I.length - O) * w + 1 >>> 0, q = new Uint8Array(z); I[O]; ) {
      var Z = e[I.charCodeAt(O)];
      if (Z === 255)
        return;
      for (var X = 0, ie = z - 1; (Z !== 0 || X < C) && ie !== -1; ie--, X++)
        Z += d * q[ie] >>> 0, q[ie] = Z % 256 >>> 0, Z = Z / 256 >>> 0;
      if (Z !== 0)
        throw new Error("Non-zero carry");
      C = X, O++;
    }
    for (var fe = z - C; fe !== z && q[fe] === 0; )
      fe++;
    for (var ye = new Uint8Array(L + (z - fe)), j = L; fe !== z; )
      ye[j++] = q[fe++];
    return ye;
  }
  function P(I) {
    var O = B(I);
    if (O)
      return O;
    throw new Error("Non-base" + d + " character");
  }
  return {
    encode: A,
    decodeUnsafe: B,
    decode: P
  };
}
var src$1 = base$1;
const basex$1 = src$1, ALPHABET$1 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
var bs58$2 = basex$1(ALPHABET$1);
const bs58$3 = /* @__PURE__ */ getDefaultExportFromCjs$2(bs58$2);
class NearConfig extends BaseWebToken {
  // protected keyStore: KeyPair
  keyPair;
  near;
  constructor(e) {
    super(e), this.near = this.wallet._near, this.base = ["yoctoNEAR", 1e25];
  }
  async ready() {
    if (!this.wallet.isSignedIn())
      throw new Error("Wallet has not been signed in!");
    const e = new lib$5.BrowserLocalStorageKeyStore(), n = this.wallet.account();
    if (this.keyPair = await e.getKey(this.wallet._networkId, n.accountId), !this.keyPair) {
      this.keyPair = lib$8.KeyPair.fromRandom("ed25519");
      const a = this.keyPair.getPublicKey().toString();
      await e.setKey(this.wallet._networkId, n.accountId, this.keyPair), await n.addKey(a);
    }
    this._address = await this.wallet.getAccountId(), this.providerInstance = this.wallet._near.connection.provider;
  }
  /**
   * NEAR wants both the sender ID and tx Hash, so we have to concatenate to keep with the interface.
   * @param txId assumes format senderID:txHash
   */
  async getTx(e) {
    const n = await this.providerInstance, [a, c] = e.split(":"), o = await n.txStatusReceipts(bs58$3.decode(c), a), d = await n.block(o.transaction_outcome.block_hash), m = (await n.block({ finality: "final" })).header.height;
    if (o.receipts_outcome[0].outcome.status.SuccessValue !== "")
      throw new Error("Transaction failed!");
    const w = o.receipts[0].receipt.Action.actions[0].Transfer.deposit ?? 0;
    return {
      from: a,
      to: o.transaction.receiver_id,
      amount: new BigNumber$1(w),
      blockHeight: new BigNumber$1(d.header.height),
      pending: !1,
      confirmed: m - d.header.height >= this.minConfirm
    };
  }
  /**
   * address = accountID
   * @param owner // assumed to be the "ed25519:" header + b58 encoded key
   */
  ownerToAddress(e) {
    const n = typeof e == "string" ? e : bs58$3.encode(e);
    return Buffer$F.from(bs58$3.decode(n.replace("ed25519:", ""))).toString("hex");
  }
  async sign(e) {
    return this.getSigner().sign(e);
  }
  getSigner() {
    return new NearSigner(this.keyPair.secretKey);
  }
  async verify(e, n, a) {
    return NearSigner.verify(e, n, a);
  }
  async getCurrentHeight() {
    const e = await this.providerInstance.status();
    return new BigNumber$1(e.sync_info.latest_block_height);
  }
  async getFee(e, n) {
    const a = (await this.providerInstance.block({ finality: "final" })).header.height, c = await this.providerInstance.gasPrice(a);
    return new BigNumber$1(c.gas_price).multipliedBy(45e10);
  }
  async sendTx(e) {
    const n = await this.providerInstance.sendTransaction(e);
    return `${this.address}:${n.transaction.hash}`;
  }
  async createTx(e, n, a) {
    if (!this.address)
      throw new Error("Address is undefined - you might be missing a wallet, or have not run Irys.ready()");
    const c = await this.providerInstance.query({
      request_type: "view_access_key",
      finality: "final",
      account_id: this.address,
      public_key: this.keyPair.getPublicKey().toString()
    }), o = ++c.nonce, d = Buffer$F.from(bs58$3.decode(c.block_hash)), m = [lib$3.actionCreators.transfer(new BN$d(new BigNumber$1(e).toString()))], w = lib$3.createTransaction(this.address, this.keyPair.getPublicKey(), n, o, m, d), S = serialize_1(lib$3.SCHEMA, w), A = new Uint8Array(sha256Exports.sha256.array(S)), B = this.keyPair.sign(A);
    return { tx: new lib$3.SignedTransaction({
      transaction: w,
      signature: new lib$3.Signature({
        keyType: w.publicKey.keyType,
        data: B.signature
      })
    }), txId: void 0 };
  }
  async getPublicKey() {
    return Buffer$F.from(this.keyPair.getPublicKey().data);
  }
}
function number$3(t) {
  if (!Number.isSafeInteger(t) || t < 0)
    throw new Error(`Wrong positive integer: ${t}`);
}
function isBytes$2(t) {
  return t instanceof Uint8Array || t != null && typeof t == "object" && t.constructor.name === "Uint8Array";
}
function bytes$2(t, ...e) {
  if (!isBytes$2(t))
    throw new Error("Expected Uint8Array");
  if (e.length > 0 && !e.includes(t.length))
    throw new Error(`Expected Uint8Array of length ${e}, not of length=${t.length}`);
}
function hash$2(t) {
  if (typeof t != "function" || typeof t.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  number$3(t.outputLen), number$3(t.blockLen);
}
function exists$2(t, e = !0) {
  if (t.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e && t.finished)
    throw new Error("Hash#digest() has already been called");
}
function output$2(t, e) {
  bytes$2(t);
  const n = e.outputLen;
  if (t.length < n)
    throw new Error(`digestInto() expects output buffer of length at least ${n}`);
}
const crypto$1 = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function isBytes$1(t) {
  return t instanceof Uint8Array || t != null && typeof t == "object" && t.constructor.name === "Uint8Array";
}
const createView$1 = (t) => new DataView(t.buffer, t.byteOffset, t.byteLength), rotr = (t, e) => t << 32 - e | t >>> e, isLE$1 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!isLE$1)
  throw new Error("Non little-endian hardware is not supported");
function utf8ToBytes$2(t) {
  if (typeof t != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof t}`);
  return new Uint8Array(new TextEncoder().encode(t));
}
function toBytes$1(t) {
  if (typeof t == "string" && (t = utf8ToBytes$2(t)), !isBytes$1(t))
    throw new Error(`expected Uint8Array, got ${typeof t}`);
  return t;
}
function concatBytes$1(...t) {
  let e = 0;
  for (let a = 0; a < t.length; a++) {
    const c = t[a];
    if (!isBytes$1(c))
      throw new Error("Uint8Array expected");
    e += c.length;
  }
  const n = new Uint8Array(e);
  for (let a = 0, c = 0; a < t.length; a++) {
    const o = t[a];
    n.set(o, c), c += o.length;
  }
  return n;
}
let Hash$1 = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
function wrapConstructor$1(t) {
  const e = (a) => t().update(toBytes$1(a)).digest(), n = t();
  return e.outputLen = n.outputLen, e.blockLen = n.blockLen, e.create = () => t(), e;
}
function randomBytes(t = 32) {
  if (crypto$1 && typeof crypto$1.getRandomValues == "function")
    return crypto$1.getRandomValues(new Uint8Array(t));
  throw new Error("crypto.getRandomValues must be defined");
}
function setBigUint64$2(t, e, n, a) {
  if (typeof t.setBigUint64 == "function")
    return t.setBigUint64(e, n, a);
  const c = BigInt(32), o = BigInt(4294967295), d = Number(n >> c & o), m = Number(n & o), w = a ? 4 : 0, S = a ? 0 : 4;
  t.setUint32(e + w, d, a), t.setUint32(e + S, m, a);
}
let SHA2$2 = class extends Hash$1 {
  constructor(e, n, a, c) {
    super(), this.blockLen = e, this.outputLen = n, this.padOffset = a, this.isLE = c, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(e), this.view = createView$1(this.buffer);
  }
  update(e) {
    exists$2(this);
    const { view: n, buffer: a, blockLen: c } = this;
    e = toBytes$1(e);
    const o = e.length;
    for (let d = 0; d < o; ) {
      const m = Math.min(c - this.pos, o - d);
      if (m === c) {
        const w = createView$1(e);
        for (; c <= o - d; d += c)
          this.process(w, d);
        continue;
      }
      a.set(e.subarray(d, d + m), this.pos), this.pos += m, d += m, this.pos === c && (this.process(n, 0), this.pos = 0);
    }
    return this.length += e.length, this.roundClean(), this;
  }
  digestInto(e) {
    exists$2(this), output$2(e, this), this.finished = !0;
    const { buffer: n, view: a, blockLen: c, isLE: o } = this;
    let { pos: d } = this;
    n[d++] = 128, this.buffer.subarray(d).fill(0), this.padOffset > c - d && (this.process(a, 0), d = 0);
    for (let B = d; B < c; B++)
      n[B] = 0;
    setBigUint64$2(a, c - 8, BigInt(this.length * 8), o), this.process(a, 0);
    const m = createView$1(e), w = this.outputLen;
    if (w % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const S = w / 4, A = this.get();
    if (S > A.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let B = 0; B < S; B++)
      m.setUint32(4 * B, A[B], o);
  }
  digest() {
    const { buffer: e, outputLen: n } = this;
    this.digestInto(e);
    const a = e.slice(0, n);
    return this.destroy(), a;
  }
  _cloneInto(e) {
    e || (e = new this.constructor()), e.set(...this.get());
    const { blockLen: n, buffer: a, length: c, finished: o, destroyed: d, pos: m } = this;
    return e.length = c, e.pos = m, e.finished = o, e.destroyed = d, c % n && e.buffer.set(a), e;
  }
};
const U32_MASK64$1 = /* @__PURE__ */ BigInt(2 ** 32 - 1), _32n$1 = /* @__PURE__ */ BigInt(32);
function fromBig$1(t, e = !1) {
  return e ? { h: Number(t & U32_MASK64$1), l: Number(t >> _32n$1 & U32_MASK64$1) } : { h: Number(t >> _32n$1 & U32_MASK64$1) | 0, l: Number(t & U32_MASK64$1) | 0 };
}
function split$1(t, e = !1) {
  let n = new Uint32Array(t.length), a = new Uint32Array(t.length);
  for (let c = 0; c < t.length; c++) {
    const { h: o, l: d } = fromBig$1(t[c], e);
    [n[c], a[c]] = [o, d];
  }
  return [n, a];
}
const toBig$1 = (t, e) => BigInt(t >>> 0) << _32n$1 | BigInt(e >>> 0), shrSH$1 = (t, e, n) => t >>> n, shrSL$1 = (t, e, n) => t << 32 - n | e >>> n, rotrSH$1 = (t, e, n) => t >>> n | e << 32 - n, rotrSL$1 = (t, e, n) => t << 32 - n | e >>> n, rotrBH$1 = (t, e, n) => t << 64 - n | e >>> n - 32, rotrBL$1 = (t, e, n) => t >>> n - 32 | e << 64 - n, rotr32H$1 = (t, e) => e, rotr32L$1 = (t, e) => t, rotlSH$1 = (t, e, n) => t << n | e >>> 32 - n, rotlSL$1 = (t, e, n) => e << n | t >>> 32 - n, rotlBH$1 = (t, e, n) => e << n - 32 | t >>> 64 - n, rotlBL$1 = (t, e, n) => t << n - 32 | e >>> 64 - n;
function add$1(t, e, n, a) {
  const c = (e >>> 0) + (a >>> 0);
  return { h: t + n + (c / 2 ** 32 | 0) | 0, l: c | 0 };
}
const add3L$1 = (t, e, n) => (t >>> 0) + (e >>> 0) + (n >>> 0), add3H$1 = (t, e, n, a) => e + n + a + (t / 2 ** 32 | 0) | 0, add4L$1 = (t, e, n, a) => (t >>> 0) + (e >>> 0) + (n >>> 0) + (a >>> 0), add4H$1 = (t, e, n, a, c) => e + n + a + c + (t / 2 ** 32 | 0) | 0, add5L$1 = (t, e, n, a, c) => (t >>> 0) + (e >>> 0) + (n >>> 0) + (a >>> 0) + (c >>> 0), add5H$1 = (t, e, n, a, c, o) => e + n + a + c + o + (t / 2 ** 32 | 0) | 0, u64$2 = {
  fromBig: fromBig$1,
  split: split$1,
  toBig: toBig$1,
  shrSH: shrSH$1,
  shrSL: shrSL$1,
  rotrSH: rotrSH$1,
  rotrSL: rotrSL$1,
  rotrBH: rotrBH$1,
  rotrBL: rotrBL$1,
  rotr32H: rotr32H$1,
  rotr32L: rotr32L$1,
  rotlSH: rotlSH$1,
  rotlSL: rotlSL$1,
  rotlBH: rotlBH$1,
  rotlBL: rotlBL$1,
  add: add$1,
  add3L: add3L$1,
  add3H: add3H$1,
  add4L: add4L$1,
  add4H: add4H$1,
  add5H: add5H$1,
  add5L: add5L$1
}, [SHA512_Kh$2, SHA512_Kl$2] = u64$2.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((t) => BigInt(t))), SHA512_W_H$2 = /* @__PURE__ */ new Uint32Array(80), SHA512_W_L$2 = /* @__PURE__ */ new Uint32Array(80);
let SHA512$2 = class extends SHA2$2 {
  constructor() {
    super(128, 64, 16, !1), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  // prettier-ignore
  get() {
    const { Ah: e, Al: n, Bh: a, Bl: c, Ch: o, Cl: d, Dh: m, Dl: w, Eh: S, El: A, Fh: B, Fl: P, Gh: I, Gl: O, Hh: L, Hl: C } = this;
    return [e, n, a, c, o, d, m, w, S, A, B, P, I, O, L, C];
  }
  // prettier-ignore
  set(e, n, a, c, o, d, m, w, S, A, B, P, I, O, L, C) {
    this.Ah = e | 0, this.Al = n | 0, this.Bh = a | 0, this.Bl = c | 0, this.Ch = o | 0, this.Cl = d | 0, this.Dh = m | 0, this.Dl = w | 0, this.Eh = S | 0, this.El = A | 0, this.Fh = B | 0, this.Fl = P | 0, this.Gh = I | 0, this.Gl = O | 0, this.Hh = L | 0, this.Hl = C | 0;
  }
  process(e, n) {
    for (let Z = 0; Z < 16; Z++, n += 4)
      SHA512_W_H$2[Z] = e.getUint32(n), SHA512_W_L$2[Z] = e.getUint32(n += 4);
    for (let Z = 16; Z < 80; Z++) {
      const X = SHA512_W_H$2[Z - 15] | 0, ie = SHA512_W_L$2[Z - 15] | 0, fe = u64$2.rotrSH(X, ie, 1) ^ u64$2.rotrSH(X, ie, 8) ^ u64$2.shrSH(X, ie, 7), ye = u64$2.rotrSL(X, ie, 1) ^ u64$2.rotrSL(X, ie, 8) ^ u64$2.shrSL(X, ie, 7), j = SHA512_W_H$2[Z - 2] | 0, V = SHA512_W_L$2[Z - 2] | 0, ae = u64$2.rotrSH(j, V, 19) ^ u64$2.rotrBH(j, V, 61) ^ u64$2.shrSH(j, V, 6), _ = u64$2.rotrSL(j, V, 19) ^ u64$2.rotrBL(j, V, 61) ^ u64$2.shrSL(j, V, 6), u = u64$2.add4L(ye, _, SHA512_W_L$2[Z - 7], SHA512_W_L$2[Z - 16]), h = u64$2.add4H(u, fe, ae, SHA512_W_H$2[Z - 7], SHA512_W_H$2[Z - 16]);
      SHA512_W_H$2[Z] = h | 0, SHA512_W_L$2[Z] = u | 0;
    }
    let { Ah: a, Al: c, Bh: o, Bl: d, Ch: m, Cl: w, Dh: S, Dl: A, Eh: B, El: P, Fh: I, Fl: O, Gh: L, Gl: C, Hh: z, Hl: q } = this;
    for (let Z = 0; Z < 80; Z++) {
      const X = u64$2.rotrSH(B, P, 14) ^ u64$2.rotrSH(B, P, 18) ^ u64$2.rotrBH(B, P, 41), ie = u64$2.rotrSL(B, P, 14) ^ u64$2.rotrSL(B, P, 18) ^ u64$2.rotrBL(B, P, 41), fe = B & I ^ ~B & L, ye = P & O ^ ~P & C, j = u64$2.add5L(q, ie, ye, SHA512_Kl$2[Z], SHA512_W_L$2[Z]), V = u64$2.add5H(j, z, X, fe, SHA512_Kh$2[Z], SHA512_W_H$2[Z]), ae = j | 0, _ = u64$2.rotrSH(a, c, 28) ^ u64$2.rotrBH(a, c, 34) ^ u64$2.rotrBH(a, c, 39), u = u64$2.rotrSL(a, c, 28) ^ u64$2.rotrBL(a, c, 34) ^ u64$2.rotrBL(a, c, 39), h = a & o ^ a & m ^ o & m, p = c & d ^ c & w ^ d & w;
      z = L | 0, q = C | 0, L = I | 0, C = O | 0, I = B | 0, O = P | 0, { h: B, l: P } = u64$2.add(S | 0, A | 0, V | 0, ae | 0), S = m | 0, A = w | 0, m = o | 0, w = d | 0, o = a | 0, d = c | 0;
      const y = u64$2.add3L(ae, u, p);
      a = u64$2.add3H(y, V, _, h), c = y | 0;
    }
    ({ h: a, l: c } = u64$2.add(this.Ah | 0, this.Al | 0, a | 0, c | 0)), { h: o, l: d } = u64$2.add(this.Bh | 0, this.Bl | 0, o | 0, d | 0), { h: m, l: w } = u64$2.add(this.Ch | 0, this.Cl | 0, m | 0, w | 0), { h: S, l: A } = u64$2.add(this.Dh | 0, this.Dl | 0, S | 0, A | 0), { h: B, l: P } = u64$2.add(this.Eh | 0, this.El | 0, B | 0, P | 0), { h: I, l: O } = u64$2.add(this.Fh | 0, this.Fl | 0, I | 0, O | 0), { h: L, l: C } = u64$2.add(this.Gh | 0, this.Gl | 0, L | 0, C | 0), { h: z, l: q } = u64$2.add(this.Hh | 0, this.Hl | 0, z | 0, q | 0), this.set(a, c, o, d, m, w, S, A, B, P, I, O, L, C, z, q);
  }
  roundClean() {
    SHA512_W_H$2.fill(0), SHA512_W_L$2.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
const sha512$2 = /* @__PURE__ */ wrapConstructor$1(() => new SHA512$2());
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const _0n$5 = BigInt(0), _1n$7 = BigInt(1), _2n$5 = BigInt(2);
function isBytes(t) {
  return t instanceof Uint8Array || t != null && typeof t == "object" && t.constructor.name === "Uint8Array";
}
const hexes$1 = /* @__PURE__ */ Array.from({ length: 256 }, (t, e) => e.toString(16).padStart(2, "0"));
function bytesToHex$1(t) {
  if (!isBytes(t))
    throw new Error("Uint8Array expected");
  let e = "";
  for (let n = 0; n < t.length; n++)
    e += hexes$1[t[n]];
  return e;
}
function numberToHexUnpadded(t) {
  const e = t.toString(16);
  return e.length & 1 ? `0${e}` : e;
}
function hexToNumber(t) {
  if (typeof t != "string")
    throw new Error("hex string expected, got " + typeof t);
  return BigInt(t === "" ? "0" : `0x${t}`);
}
const asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
function asciiToBase16(t) {
  if (t >= asciis._0 && t <= asciis._9)
    return t - asciis._0;
  if (t >= asciis._A && t <= asciis._F)
    return t - (asciis._A - 10);
  if (t >= asciis._a && t <= asciis._f)
    return t - (asciis._a - 10);
}
function hexToBytes$1(t) {
  if (typeof t != "string")
    throw new Error("hex string expected, got " + typeof t);
  const e = t.length, n = e / 2;
  if (e % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + e);
  const a = new Uint8Array(n);
  for (let c = 0, o = 0; c < n; c++, o += 2) {
    const d = asciiToBase16(t.charCodeAt(o)), m = asciiToBase16(t.charCodeAt(o + 1));
    if (d === void 0 || m === void 0) {
      const w = t[o] + t[o + 1];
      throw new Error('hex string expected, got non-hex character "' + w + '" at index ' + o);
    }
    a[c] = d * 16 + m;
  }
  return a;
}
function bytesToNumberBE(t) {
  return hexToNumber(bytesToHex$1(t));
}
function bytesToNumberLE(t) {
  if (!isBytes(t))
    throw new Error("Uint8Array expected");
  return hexToNumber(bytesToHex$1(Uint8Array.from(t).reverse()));
}
function numberToBytesBE(t, e) {
  return hexToBytes$1(t.toString(16).padStart(e * 2, "0"));
}
function numberToBytesLE(t, e) {
  return numberToBytesBE(t, e).reverse();
}
function numberToVarBytesBE(t) {
  return hexToBytes$1(numberToHexUnpadded(t));
}
function ensureBytes(t, e, n) {
  let a;
  if (typeof e == "string")
    try {
      a = hexToBytes$1(e);
    } catch (o) {
      throw new Error(`${t} must be valid hex string, got "${e}". Cause: ${o}`);
    }
  else if (isBytes(e))
    a = Uint8Array.from(e);
  else
    throw new Error(`${t} must be hex string or Uint8Array`);
  const c = a.length;
  if (typeof n == "number" && c !== n)
    throw new Error(`${t} expected ${n} bytes, got ${c}`);
  return a;
}
function concatBytes(...t) {
  let e = 0;
  for (let c = 0; c < t.length; c++) {
    const o = t[c];
    if (!isBytes(o))
      throw new Error("Uint8Array expected");
    e += o.length;
  }
  let n = new Uint8Array(e), a = 0;
  for (let c = 0; c < t.length; c++) {
    const o = t[c];
    n.set(o, a), a += o.length;
  }
  return n;
}
function equalBytes(t, e) {
  if (t.length !== e.length)
    return !1;
  let n = 0;
  for (let a = 0; a < t.length; a++)
    n |= t[a] ^ e[a];
  return n === 0;
}
function utf8ToBytes$1(t) {
  if (typeof t != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof t}`);
  return new Uint8Array(new TextEncoder().encode(t));
}
function bitLen(t) {
  let e;
  for (e = 0; t > _0n$5; t >>= _1n$7, e += 1)
    ;
  return e;
}
function bitGet(t, e) {
  return t >> BigInt(e) & _1n$7;
}
const bitSet = (t, e, n) => t | (n ? _1n$7 : _0n$5) << BigInt(e), bitMask = (t) => (_2n$5 << BigInt(t - 1)) - _1n$7, u8n = (t) => new Uint8Array(t), u8fr = (t) => Uint8Array.from(t);
function createHmacDrbg(t, e, n) {
  if (typeof t != "number" || t < 2)
    throw new Error("hashLen must be a number");
  if (typeof e != "number" || e < 2)
    throw new Error("qByteLen must be a number");
  if (typeof n != "function")
    throw new Error("hmacFn must be a function");
  let a = u8n(t), c = u8n(t), o = 0;
  const d = () => {
    a.fill(1), c.fill(0), o = 0;
  }, m = (...B) => n(c, a, ...B), w = (B = u8n()) => {
    c = m(u8fr([0]), B), a = m(), B.length !== 0 && (c = m(u8fr([1]), B), a = m());
  }, S = () => {
    if (o++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let B = 0;
    const P = [];
    for (; B < e; ) {
      a = m();
      const I = a.slice();
      P.push(I), B += a.length;
    }
    return concatBytes(...P);
  };
  return (B, P) => {
    d(), w(B);
    let I;
    for (; !(I = P(S())); )
      w();
    return d(), I;
  };
}
const validatorFns = {
  bigint: (t) => typeof t == "bigint",
  function: (t) => typeof t == "function",
  boolean: (t) => typeof t == "boolean",
  string: (t) => typeof t == "string",
  stringOrUint8Array: (t) => typeof t == "string" || isBytes(t),
  isSafeInteger: (t) => Number.isSafeInteger(t),
  array: (t) => Array.isArray(t),
  field: (t, e) => e.Fp.isValid(t),
  hash: (t) => typeof t == "function" && Number.isSafeInteger(t.outputLen)
};
function validateObject(t, e, n = {}) {
  const a = (c, o, d) => {
    const m = validatorFns[o];
    if (typeof m != "function")
      throw new Error(`Invalid validator "${o}", expected function`);
    const w = t[c];
    if (!(d && w === void 0) && !m(w, t))
      throw new Error(`Invalid param ${String(c)}=${w} (${typeof w}), expected ${o}`);
  };
  for (const [c, o] of Object.entries(e))
    a(c, o, !1);
  for (const [c, o] of Object.entries(n))
    a(c, o, !0);
  return t;
}
const ut = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  bitGet,
  bitLen,
  bitMask,
  bitSet,
  bytesToHex: bytesToHex$1,
  bytesToNumberBE,
  bytesToNumberLE,
  concatBytes,
  createHmacDrbg,
  ensureBytes,
  equalBytes,
  hexToBytes: hexToBytes$1,
  hexToNumber,
  isBytes,
  numberToBytesBE,
  numberToBytesLE,
  numberToHexUnpadded,
  numberToVarBytesBE,
  utf8ToBytes: utf8ToBytes$1,
  validateObject
}, Symbol.toStringTag, { value: "Module" }));
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const _0n$4 = BigInt(0), _1n$6 = BigInt(1), _2n$4 = BigInt(2), _3n$1 = BigInt(3), _4n = BigInt(4), _5n$1 = BigInt(5), _8n$1 = BigInt(8);
BigInt(9);
BigInt(16);
function mod(t, e) {
  const n = t % e;
  return n >= _0n$4 ? n : e + n;
}
function pow(t, e, n) {
  if (n <= _0n$4 || e < _0n$4)
    throw new Error("Expected power/modulo > 0");
  if (n === _1n$6)
    return _0n$4;
  let a = _1n$6;
  for (; e > _0n$4; )
    e & _1n$6 && (a = a * t % n), t = t * t % n, e >>= _1n$6;
  return a;
}
function pow2(t, e, n) {
  let a = t;
  for (; e-- > _0n$4; )
    a *= a, a %= n;
  return a;
}
function invert(t, e) {
  if (t === _0n$4 || e <= _0n$4)
    throw new Error(`invert: expected positive integers, got n=${t} mod=${e}`);
  let n = mod(t, e), a = e, c = _0n$4, o = _1n$6;
  for (; n !== _0n$4; ) {
    const m = a / n, w = a % n, S = c - o * m;
    a = n, n = w, c = o, o = S;
  }
  if (a !== _1n$6)
    throw new Error("invert: does not exist");
  return mod(c, e);
}
function tonelliShanks(t) {
  const e = (t - _1n$6) / _2n$4;
  let n, a, c;
  for (n = t - _1n$6, a = 0; n % _2n$4 === _0n$4; n /= _2n$4, a++)
    ;
  for (c = _2n$4; c < t && pow(c, e, t) !== t - _1n$6; c++)
    ;
  if (a === 1) {
    const d = (t + _1n$6) / _4n;
    return function(w, S) {
      const A = w.pow(S, d);
      if (!w.eql(w.sqr(A), S))
        throw new Error("Cannot find square root");
      return A;
    };
  }
  const o = (n + _1n$6) / _2n$4;
  return function(m, w) {
    if (m.pow(w, e) === m.neg(m.ONE))
      throw new Error("Cannot find square root");
    let S = a, A = m.pow(m.mul(m.ONE, c), n), B = m.pow(w, o), P = m.pow(w, n);
    for (; !m.eql(P, m.ONE); ) {
      if (m.eql(P, m.ZERO))
        return m.ZERO;
      let I = 1;
      for (let L = m.sqr(P); I < S && !m.eql(L, m.ONE); I++)
        L = m.sqr(L);
      const O = m.pow(A, _1n$6 << BigInt(S - I - 1));
      A = m.sqr(O), B = m.mul(B, O), P = m.mul(P, A), S = I;
    }
    return B;
  };
}
function FpSqrt(t) {
  if (t % _4n === _3n$1) {
    const e = (t + _1n$6) / _4n;
    return function(a, c) {
      const o = a.pow(c, e);
      if (!a.eql(a.sqr(o), c))
        throw new Error("Cannot find square root");
      return o;
    };
  }
  if (t % _8n$1 === _5n$1) {
    const e = (t - _5n$1) / _8n$1;
    return function(a, c) {
      const o = a.mul(c, _2n$4), d = a.pow(o, e), m = a.mul(c, d), w = a.mul(a.mul(m, _2n$4), d), S = a.mul(m, a.sub(w, a.ONE));
      if (!a.eql(a.sqr(S), c))
        throw new Error("Cannot find square root");
      return S;
    };
  }
  return tonelliShanks(t);
}
const isNegativeLE = (t, e) => (mod(t, e) & _1n$6) === _1n$6, FIELD_FIELDS = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function validateField(t) {
  const e = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  }, n = FIELD_FIELDS.reduce((a, c) => (a[c] = "function", a), e);
  return validateObject(t, n);
}
function FpPow(t, e, n) {
  if (n < _0n$4)
    throw new Error("Expected power > 0");
  if (n === _0n$4)
    return t.ONE;
  if (n === _1n$6)
    return e;
  let a = t.ONE, c = e;
  for (; n > _0n$4; )
    n & _1n$6 && (a = t.mul(a, c)), c = t.sqr(c), n >>= _1n$6;
  return a;
}
function FpInvertBatch(t, e) {
  const n = new Array(e.length), a = e.reduce((o, d, m) => t.is0(d) ? o : (n[m] = o, t.mul(o, d)), t.ONE), c = t.inv(a);
  return e.reduceRight((o, d, m) => t.is0(d) ? o : (n[m] = t.mul(o, n[m]), t.mul(o, d)), c), n;
}
function nLength(t, e) {
  const n = e !== void 0 ? e : t.toString(2).length, a = Math.ceil(n / 8);
  return { nBitLength: n, nByteLength: a };
}
function Field(t, e, n = !1, a = {}) {
  if (t <= _0n$4)
    throw new Error(`Expected Field ORDER > 0, got ${t}`);
  const { nBitLength: c, nByteLength: o } = nLength(t, e);
  if (o > 2048)
    throw new Error("Field lengths over 2048 bytes are not supported");
  const d = FpSqrt(t), m = Object.freeze({
    ORDER: t,
    BITS: c,
    BYTES: o,
    MASK: bitMask(c),
    ZERO: _0n$4,
    ONE: _1n$6,
    create: (w) => mod(w, t),
    isValid: (w) => {
      if (typeof w != "bigint")
        throw new Error(`Invalid field element: expected bigint, got ${typeof w}`);
      return _0n$4 <= w && w < t;
    },
    is0: (w) => w === _0n$4,
    isOdd: (w) => (w & _1n$6) === _1n$6,
    neg: (w) => mod(-w, t),
    eql: (w, S) => w === S,
    sqr: (w) => mod(w * w, t),
    add: (w, S) => mod(w + S, t),
    sub: (w, S) => mod(w - S, t),
    mul: (w, S) => mod(w * S, t),
    pow: (w, S) => FpPow(m, w, S),
    div: (w, S) => mod(w * invert(S, t), t),
    // Same as above, but doesn't normalize
    sqrN: (w) => w * w,
    addN: (w, S) => w + S,
    subN: (w, S) => w - S,
    mulN: (w, S) => w * S,
    inv: (w) => invert(w, t),
    sqrt: a.sqrt || ((w) => d(m, w)),
    invertBatch: (w) => FpInvertBatch(m, w),
    // TODO: do we really need constant cmov?
    // We don't have const-time bigints anyway, so probably will be not very useful
    cmov: (w, S, A) => A ? S : w,
    toBytes: (w) => n ? numberToBytesLE(w, o) : numberToBytesBE(w, o),
    fromBytes: (w) => {
      if (w.length !== o)
        throw new Error(`Fp.fromBytes: expected ${o}, got ${w.length}`);
      return n ? bytesToNumberLE(w) : bytesToNumberBE(w);
    }
  });
  return Object.freeze(m);
}
function FpSqrtEven(t, e) {
  if (!t.isOdd)
    throw new Error("Field doesn't have isOdd");
  const n = t.sqrt(e);
  return t.isOdd(n) ? t.neg(n) : n;
}
function getFieldBytesLength(t) {
  if (typeof t != "bigint")
    throw new Error("field order must be bigint");
  const e = t.toString(2).length;
  return Math.ceil(e / 8);
}
function getMinHashLength(t) {
  const e = getFieldBytesLength(t);
  return e + Math.ceil(e / 2);
}
function mapHashToField(t, e, n = !1) {
  const a = t.length, c = getFieldBytesLength(e), o = getMinHashLength(e);
  if (a < 16 || a < o || a > 1024)
    throw new Error(`expected ${o}-1024 bytes of input, got ${a}`);
  const d = n ? bytesToNumberBE(t) : bytesToNumberLE(t), m = mod(d, e - _1n$6) + _1n$6;
  return n ? numberToBytesLE(m, c) : numberToBytesBE(m, c);
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const _0n$3 = BigInt(0), _1n$5 = BigInt(1);
function wNAF(t, e) {
  const n = (c, o) => {
    const d = o.negate();
    return c ? d : o;
  }, a = (c) => {
    const o = Math.ceil(e / c) + 1, d = 2 ** (c - 1);
    return { windows: o, windowSize: d };
  };
  return {
    constTimeNegate: n,
    // non-const time multiplication ladder
    unsafeLadder(c, o) {
      let d = t.ZERO, m = c;
      for (; o > _0n$3; )
        o & _1n$5 && (d = d.add(m)), m = m.double(), o >>= _1n$5;
      return d;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(c, o) {
      const { windows: d, windowSize: m } = a(o), w = [];
      let S = c, A = S;
      for (let B = 0; B < d; B++) {
        A = S, w.push(A);
        for (let P = 1; P < m; P++)
          A = A.add(S), w.push(A);
        S = A.double();
      }
      return w;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(c, o, d) {
      const { windows: m, windowSize: w } = a(c);
      let S = t.ZERO, A = t.BASE;
      const B = BigInt(2 ** c - 1), P = 2 ** c, I = BigInt(c);
      for (let O = 0; O < m; O++) {
        const L = O * w;
        let C = Number(d & B);
        d >>= I, C > w && (C -= P, d += _1n$5);
        const z = L, q = L + Math.abs(C) - 1, Z = O % 2 !== 0, X = C < 0;
        C === 0 ? A = A.add(n(Z, o[z])) : S = S.add(n(X, o[q]));
      }
      return { p: S, f: A };
    },
    wNAFCached(c, o, d, m) {
      const w = c._WINDOW_SIZE || 1;
      let S = o.get(c);
      return S || (S = this.precomputeWindow(c, w), w !== 1 && o.set(c, m(S))), this.wNAF(w, S, d);
    }
  };
}
function validateBasic(t) {
  return validateField(t.Fp), validateObject(t, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  }), Object.freeze({
    ...nLength(t.n, t.nBitLength),
    ...t,
    p: t.Fp.ORDER
  });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const _0n$2 = BigInt(0), _1n$4 = BigInt(1), _2n$3 = BigInt(2), _8n = BigInt(8), VERIFY_DEFAULT = { zip215: !0 };
function validateOpts$1(t) {
  const e = validateBasic(t);
  return validateObject(t, {
    hash: "function",
    a: "bigint",
    d: "bigint",
    randomBytes: "function"
  }, {
    adjustScalarBytes: "function",
    domain: "function",
    uvRatio: "function",
    mapToCurve: "function"
  }), Object.freeze({ ...e });
}
function twistedEdwards(t) {
  const e = validateOpts$1(t), { Fp: n, n: a, prehash: c, hash: o, randomBytes: d, nByteLength: m, h: w } = e, S = _2n$3 << BigInt(m * 8) - _1n$4, A = n.create, B = e.uvRatio || ((E, x) => {
    try {
      return { isValid: !0, value: n.sqrt(E * n.inv(x)) };
    } catch {
      return { isValid: !1, value: _0n$2 };
    }
  }), P = e.adjustScalarBytes || ((E) => E), I = e.domain || ((E, x, l) => {
    if (x.length || l)
      throw new Error("Contexts/pre-hash are not supported");
    return E;
  }), O = (E) => typeof E == "bigint" && _0n$2 < E, L = (E, x) => O(E) && O(x) && E < x, C = (E) => E === _0n$2 || L(E, S);
  function z(E, x) {
    if (L(E, x))
      return E;
    throw new Error(`Expected valid scalar < ${x}, got ${typeof E} ${E}`);
  }
  function q(E) {
    return E === _0n$2 ? E : z(E, a);
  }
  const Z = /* @__PURE__ */ new Map();
  function X(E) {
    if (!(E instanceof ie))
      throw new Error("ExtendedPoint expected");
  }
  class ie {
    constructor(x, l, b, M) {
      if (this.ex = x, this.ey = l, this.ez = b, this.et = M, !C(x))
        throw new Error("x required");
      if (!C(l))
        throw new Error("y required");
      if (!C(b))
        throw new Error("z required");
      if (!C(M))
        throw new Error("t required");
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static fromAffine(x) {
      if (x instanceof ie)
        throw new Error("extended point not allowed");
      const { x: l, y: b } = x || {};
      if (!C(l) || !C(b))
        throw new Error("invalid affine point");
      return new ie(l, b, _1n$4, A(l * b));
    }
    static normalizeZ(x) {
      const l = n.invertBatch(x.map((b) => b.ez));
      return x.map((b, M) => b.toAffine(l[M])).map(ie.fromAffine);
    }
    // "Private method", don't use it directly
    _setWindowSize(x) {
      this._WINDOW_SIZE = x, Z.delete(this);
    }
    // Not required for fromHex(), which always creates valid points.
    // Could be useful for fromAffine().
    assertValidity() {
      const { a: x, d: l } = e;
      if (this.is0())
        throw new Error("bad point: ZERO");
      const { ex: b, ey: M, ez: k, et: U } = this, T = A(b * b), H = A(M * M), Y = A(k * k), le = A(Y * Y), ce = A(T * x), de = A(Y * A(ce + H)), ue = A(le + A(l * A(T * H)));
      if (de !== ue)
        throw new Error("bad point: equation left != right (1)");
      const re = A(b * M), ge = A(k * U);
      if (re !== ge)
        throw new Error("bad point: equation left != right (2)");
    }
    // Compare one point to another.
    equals(x) {
      X(x);
      const { ex: l, ey: b, ez: M } = this, { ex: k, ey: U, ez: T } = x, H = A(l * T), Y = A(k * M), le = A(b * T), ce = A(U * M);
      return H === Y && le === ce;
    }
    is0() {
      return this.equals(ie.ZERO);
    }
    negate() {
      return new ie(A(-this.ex), this.ey, this.ez, A(-this.et));
    }
    // Fast algo for doubling Extended Point.
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd
    // Cost: 4M + 4S + 1*a + 6add + 1*2.
    double() {
      const { a: x } = e, { ex: l, ey: b, ez: M } = this, k = A(l * l), U = A(b * b), T = A(_2n$3 * A(M * M)), H = A(x * k), Y = l + b, le = A(A(Y * Y) - k - U), ce = H + U, de = ce - T, ue = H - U, re = A(le * de), ge = A(ce * ue), Ae = A(le * ue), xe = A(de * ce);
      return new ie(re, ge, xe, Ae);
    }
    // Fast algo for adding 2 Extended Points.
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd
    // Cost: 9M + 1*a + 1*d + 7add.
    add(x) {
      X(x);
      const { a: l, d: b } = e, { ex: M, ey: k, ez: U, et: T } = this, { ex: H, ey: Y, ez: le, et: ce } = x;
      if (l === BigInt(-1)) {
        const qe = A((k - M) * (Y + H)), wt = A((k + M) * (Y - H)), Te = A(wt - qe);
        if (Te === _0n$2)
          return this.double();
        const De = A(U * _2n$3 * ce), vt = A(T * _2n$3 * le), ke = vt + De, Ue = wt + qe, $t = vt - De, ee = A(ke * Te), F = A(Ue * $t), J = A(ke * $t), oe = A(Te * Ue);
        return new ie(ee, F, oe, J);
      }
      const de = A(M * H), ue = A(k * Y), re = A(T * b * ce), ge = A(U * le), Ae = A((M + k) * (H + Y) - de - ue), xe = ge - re, Ee = ge + re, at = A(ue - l * de), Re = A(Ae * xe), ve = A(Ee * at), xt = A(Ae * at), Ne = A(xe * Ee);
      return new ie(Re, ve, Ne, xt);
    }
    subtract(x) {
      return this.add(x.negate());
    }
    wNAF(x) {
      return j.wNAFCached(this, Z, x, ie.normalizeZ);
    }
    // Constant-time multiplication.
    multiply(x) {
      const { p: l, f: b } = this.wNAF(z(x, a));
      return ie.normalizeZ([l, b])[0];
    }
    // Non-constant-time multiplication. Uses double-and-add algorithm.
    // It's faster, but should only be used when you don't care about
    // an exposed private key e.g. sig verification.
    // Does NOT allow scalars higher than CURVE.n.
    multiplyUnsafe(x) {
      let l = q(x);
      return l === _0n$2 ? ye : this.equals(ye) || l === _1n$4 ? this : this.equals(fe) ? this.wNAF(l).p : j.unsafeLadder(this, l);
    }
    // Checks if point is of small order.
    // If you add something to small order point, you will have "dirty"
    // point with torsion component.
    // Multiplies point by cofactor and checks if the result is 0.
    isSmallOrder() {
      return this.multiplyUnsafe(w).is0();
    }
    // Multiplies point by curve order and checks if the result is 0.
    // Returns `false` is the point is dirty.
    isTorsionFree() {
      return j.unsafeLadder(this, a).is0();
    }
    // Converts Extended point to default (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    toAffine(x) {
      const { ex: l, ey: b, ez: M } = this, k = this.is0();
      x == null && (x = k ? _8n : n.inv(M));
      const U = A(l * x), T = A(b * x), H = A(M * x);
      if (k)
        return { x: _0n$2, y: _1n$4 };
      if (H !== _1n$4)
        throw new Error("invZ was invalid");
      return { x: U, y: T };
    }
    clearCofactor() {
      const { h: x } = e;
      return x === _1n$4 ? this : this.multiplyUnsafe(x);
    }
    // Converts hash string or Uint8Array to Point.
    // Uses algo from RFC8032 5.1.3.
    static fromHex(x, l = !1) {
      const { d: b, a: M } = e, k = n.BYTES;
      x = ensureBytes("pointHex", x, k);
      const U = x.slice(), T = x[k - 1];
      U[k - 1] = T & -129;
      const H = bytesToNumberLE(U);
      H === _0n$2 || (l ? z(H, S) : z(H, n.ORDER));
      const Y = A(H * H), le = A(Y - _1n$4), ce = A(b * Y - M);
      let { isValid: de, value: ue } = B(le, ce);
      if (!de)
        throw new Error("Point.fromHex: invalid y coordinate");
      const re = (ue & _1n$4) === _1n$4, ge = (T & 128) !== 0;
      if (!l && ue === _0n$2 && ge)
        throw new Error("Point.fromHex: x=0 and x_0=1");
      return ge !== re && (ue = A(-ue)), ie.fromAffine({ x: ue, y: H });
    }
    static fromPrivateKey(x) {
      return _(x).point;
    }
    toRawBytes() {
      const { x, y: l } = this.toAffine(), b = numberToBytesLE(l, n.BYTES);
      return b[b.length - 1] |= x & _1n$4 ? 128 : 0, b;
    }
    toHex() {
      return bytesToHex$1(this.toRawBytes());
    }
  }
  ie.BASE = new ie(e.Gx, e.Gy, _1n$4, A(e.Gx * e.Gy)), ie.ZERO = new ie(_0n$2, _1n$4, _1n$4, _0n$2);
  const { BASE: fe, ZERO: ye } = ie, j = wNAF(ie, m * 8);
  function V(E) {
    return mod(E, a);
  }
  function ae(E) {
    return V(bytesToNumberLE(E));
  }
  function _(E) {
    const x = m;
    E = ensureBytes("private key", E, x);
    const l = ensureBytes("hashed private key", o(E), 2 * x), b = P(l.slice(0, x)), M = l.slice(x, 2 * x), k = ae(b), U = fe.multiply(k), T = U.toRawBytes();
    return { head: b, prefix: M, scalar: k, point: U, pointBytes: T };
  }
  function u(E) {
    return _(E).pointBytes;
  }
  function h(E = new Uint8Array(), ...x) {
    const l = concatBytes(...x);
    return ae(o(I(l, ensureBytes("context", E), !!c)));
  }
  function p(E, x, l = {}) {
    E = ensureBytes("message", E), c && (E = c(E));
    const { prefix: b, scalar: M, pointBytes: k } = _(x), U = h(l.context, b, E), T = fe.multiply(U).toRawBytes(), H = h(l.context, T, k, E), Y = V(U + H * M);
    q(Y);
    const le = concatBytes(T, numberToBytesLE(Y, n.BYTES));
    return ensureBytes("result", le, m * 2);
  }
  const y = VERIFY_DEFAULT;
  function v(E, x, l, b = y) {
    const { context: M, zip215: k } = b, U = n.BYTES;
    E = ensureBytes("signature", E, 2 * U), x = ensureBytes("message", x), c && (x = c(x));
    const T = bytesToNumberLE(E.slice(U, 2 * U));
    let H, Y, le;
    try {
      H = ie.fromHex(l, k), Y = ie.fromHex(E.slice(0, U), k), le = fe.multiplyUnsafe(T);
    } catch {
      return !1;
    }
    if (!k && H.isSmallOrder())
      return !1;
    const ce = h(M, Y.toRawBytes(), H.toRawBytes(), x);
    return Y.add(H.multiplyUnsafe(ce)).subtract(le).clearCofactor().equals(ie.ZERO);
  }
  return fe._setWindowSize(8), {
    CURVE: e,
    getPublicKey: u,
    sign: p,
    verify: v,
    ExtendedPoint: ie,
    utils: {
      getExtendedPublicKey: _,
      // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.
      randomPrivateKey: () => d(n.BYTES),
      /**
       * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT
       * values. This slows down first getPublicKey() by milliseconds (see Speed section),
       * but allows to speed-up subsequent getPublicKey() calls up to 20x.
       * @param windowSize 2, 4, 8, 16
       */
      precompute(E = 8, x = ie.BASE) {
        return x._setWindowSize(E), x.multiply(BigInt(3)), x;
      }
    }
  };
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const ED25519_P = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949"), ED25519_SQRT_M1 = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
BigInt(0);
const _1n$3 = BigInt(1), _2n$2 = BigInt(2), _5n = BigInt(5), _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);
function ed25519_pow_2_252_3(t) {
  const e = ED25519_P, a = t * t % e * t % e, c = pow2(a, _2n$2, e) * a % e, o = pow2(c, _1n$3, e) * t % e, d = pow2(o, _5n, e) * o % e, m = pow2(d, _10n, e) * d % e, w = pow2(m, _20n, e) * m % e, S = pow2(w, _40n, e) * w % e, A = pow2(S, _80n, e) * S % e, B = pow2(A, _80n, e) * S % e, P = pow2(B, _10n, e) * d % e;
  return { pow_p_5_8: pow2(P, _2n$2, e) * t % e, b2: a };
}
function adjustScalarBytes(t) {
  return t[0] &= 248, t[31] &= 127, t[31] |= 64, t;
}
function uvRatio(t, e) {
  const n = ED25519_P, a = mod(e * e * e, n), c = mod(a * a * e, n), o = ed25519_pow_2_252_3(t * c).pow_p_5_8;
  let d = mod(t * a * o, n);
  const m = mod(e * d * d, n), w = d, S = mod(d * ED25519_SQRT_M1, n), A = m === t, B = m === mod(-t, n), P = m === mod(-t * ED25519_SQRT_M1, n);
  return A && (d = w), (B || P) && (d = S), isNegativeLE(d, n) && (d = mod(-d, n)), { isValid: A || B, value: d };
}
const Fp$1 = Field(ED25519_P, void 0, !0), ed25519Defaults = {
  // Param: a
  a: BigInt(-1),
  // Fp.create(-1) is proper; our way still works and is faster
  // d is equal to -121665/121666 over finite field.
  // Negative number is P - number, and division is invert(number, P)
  d: BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"),
  // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n
  Fp: Fp$1,
  // Subgroup order: how many points curve has
  // 2n**252n + 27742317777372353535851937790883648493n;
  n: BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"),
  // Cofactor
  h: BigInt(8),
  // Base point (x, y) aka generator point
  Gx: BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"),
  Gy: BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"),
  hash: sha512$2,
  randomBytes,
  adjustScalarBytes,
  // dom2
  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.
  // Constant-time, u/√v
  uvRatio
}, ed25519 = /* @__PURE__ */ twistedEdwards(ed25519Defaults);
function ed25519_domain(t, e, n) {
  if (e.length > 255)
    throw new Error("Context is too big");
  return concatBytes$1(utf8ToBytes$2("SigEd25519 no Ed25519 collisions"), new Uint8Array([n ? 1 : 0, e.length]), e, t);
}
({
  ...ed25519Defaults
});
({
  ...ed25519Defaults
});
const ELL2_C1 = (Fp$1.ORDER + BigInt(3)) / BigInt(8);
Fp$1.pow(_2n$2, ELL2_C1);
Fp$1.sqrt(Fp$1.neg(Fp$1.ONE));
(Fp$1.ORDER - BigInt(5)) / BigInt(8);
BigInt(486662);
FpSqrtEven(Fp$1, Fp$1.neg(BigInt(486664)));
BigInt("25063068953384623474111414158702152701244531502492656460079210482610430750235");
BigInt("54469307008909316920995813868745141605393597292927456921205312896311721017578");
BigInt("1159843021668779879193775521855586647937357759715417654439879720876111806838");
BigInt("40440834346308536858101042469323190826248399146238708352240133220865137265952");
BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var _Buffer = safeBufferExports.Buffer;
function base(t) {
  if (t.length >= 255)
    throw new TypeError("Alphabet too long");
  for (var e = new Uint8Array(256), n = 0; n < e.length; n++)
    e[n] = 255;
  for (var a = 0; a < t.length; a++) {
    var c = t.charAt(a), o = c.charCodeAt(0);
    if (e[o] !== 255)
      throw new TypeError(c + " is ambiguous");
    e[o] = a;
  }
  var d = t.length, m = t.charAt(0), w = Math.log(d) / Math.log(256), S = Math.log(256) / Math.log(d);
  function A(I) {
    if ((Array.isArray(I) || I instanceof Uint8Array) && (I = _Buffer.from(I)), !_Buffer.isBuffer(I))
      throw new TypeError("Expected Buffer");
    if (I.length === 0)
      return "";
    for (var O = 0, L = 0, C = 0, z = I.length; C !== z && I[C] === 0; )
      C++, O++;
    for (var q = (z - C) * S + 1 >>> 0, Z = new Uint8Array(q); C !== z; ) {
      for (var X = I[C], ie = 0, fe = q - 1; (X !== 0 || ie < L) && fe !== -1; fe--, ie++)
        X += 256 * Z[fe] >>> 0, Z[fe] = X % d >>> 0, X = X / d >>> 0;
      if (X !== 0)
        throw new Error("Non-zero carry");
      L = ie, C++;
    }
    for (var ye = q - L; ye !== q && Z[ye] === 0; )
      ye++;
    for (var j = m.repeat(O); ye < q; ++ye)
      j += t.charAt(Z[ye]);
    return j;
  }
  function B(I) {
    if (typeof I != "string")
      throw new TypeError("Expected String");
    if (I.length === 0)
      return _Buffer.alloc(0);
    for (var O = 0, L = 0, C = 0; I[O] === m; )
      L++, O++;
    for (var z = (I.length - O) * w + 1 >>> 0, q = new Uint8Array(z); I[O]; ) {
      var Z = e[I.charCodeAt(O)];
      if (Z === 255)
        return;
      for (var X = 0, ie = z - 1; (Z !== 0 || X < C) && ie !== -1; ie--, X++)
        Z += d * q[ie] >>> 0, q[ie] = Z % 256 >>> 0, Z = Z / 256 >>> 0;
      if (Z !== 0)
        throw new Error("Non-zero carry");
      C = X, O++;
    }
    for (var fe = z - C; fe !== z && q[fe] === 0; )
      fe++;
    var ye = _Buffer.allocUnsafe(L + (z - fe));
    ye.fill(0, 0, L);
    for (var j = L; fe !== z; )
      ye[j++] = q[fe++];
    return ye;
  }
  function P(I) {
    var O = B(I);
    if (O)
      return O;
    throw new Error("Non-base" + d + " character");
  }
  return {
    encode: A,
    decodeUnsafe: B,
    decode: P
  };
}
var src = base, basex = src, ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz", bs58 = basex(ALPHABET);
const bs58$1 = /* @__PURE__ */ getDefaultExportFromCjs$2(bs58), Chi$1 = (t, e, n) => t & e ^ ~t & n, Maj$1 = (t, e, n) => t & e ^ t & n ^ e & n, SHA256_K$1 = /* @__PURE__ */ new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), IV$1 = /* @__PURE__ */ new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), SHA256_W$1 = /* @__PURE__ */ new Uint32Array(64);
let SHA256$1 = class extends SHA2$2 {
  constructor() {
    super(64, 32, 8, !1), this.A = IV$1[0] | 0, this.B = IV$1[1] | 0, this.C = IV$1[2] | 0, this.D = IV$1[3] | 0, this.E = IV$1[4] | 0, this.F = IV$1[5] | 0, this.G = IV$1[6] | 0, this.H = IV$1[7] | 0;
  }
  get() {
    const { A: e, B: n, C: a, D: c, E: o, F: d, G: m, H: w } = this;
    return [e, n, a, c, o, d, m, w];
  }
  // prettier-ignore
  set(e, n, a, c, o, d, m, w) {
    this.A = e | 0, this.B = n | 0, this.C = a | 0, this.D = c | 0, this.E = o | 0, this.F = d | 0, this.G = m | 0, this.H = w | 0;
  }
  process(e, n) {
    for (let B = 0; B < 16; B++, n += 4)
      SHA256_W$1[B] = e.getUint32(n, !1);
    for (let B = 16; B < 64; B++) {
      const P = SHA256_W$1[B - 15], I = SHA256_W$1[B - 2], O = rotr(P, 7) ^ rotr(P, 18) ^ P >>> 3, L = rotr(I, 17) ^ rotr(I, 19) ^ I >>> 10;
      SHA256_W$1[B] = L + SHA256_W$1[B - 7] + O + SHA256_W$1[B - 16] | 0;
    }
    let { A: a, B: c, C: o, D: d, E: m, F: w, G: S, H: A } = this;
    for (let B = 0; B < 64; B++) {
      const P = rotr(m, 6) ^ rotr(m, 11) ^ rotr(m, 25), I = A + P + Chi$1(m, w, S) + SHA256_K$1[B] + SHA256_W$1[B] | 0, L = (rotr(a, 2) ^ rotr(a, 13) ^ rotr(a, 22)) + Maj$1(a, c, o) | 0;
      A = S, S = w, w = m, m = d + I | 0, d = o, o = c, c = a, a = I + L | 0;
    }
    a = a + this.A | 0, c = c + this.B | 0, o = o + this.C | 0, d = d + this.D | 0, m = m + this.E | 0, w = w + this.F | 0, S = S + this.G | 0, A = A + this.H | 0, this.set(a, c, o, d, m, w, S, A);
  }
  roundClean() {
    SHA256_W$1.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
};
const sha256$1 = /* @__PURE__ */ wrapConstructor$1(() => new SHA256$1());
var Layout$1 = {};
Object.defineProperty(Layout$1, "__esModule", { value: !0 });
Layout$1.s16 = Layout$1.s8 = Layout$1.nu64be = Layout$1.u48be = Layout$1.u40be = Layout$1.u32be = Layout$1.u24be = Layout$1.u16be = nu64 = Layout$1.nu64 = Layout$1.u48 = Layout$1.u40 = u32$1 = Layout$1.u32 = Layout$1.u24 = u16 = Layout$1.u16 = u8 = Layout$1.u8 = offset = Layout$1.offset = Layout$1.greedy = Layout$1.Constant = Layout$1.UTF8 = Layout$1.CString = Layout$1.Blob = Layout$1.Boolean = Layout$1.BitField = Layout$1.BitStructure = Layout$1.VariantLayout = Layout$1.Union = Layout$1.UnionLayoutDiscriminator = Layout$1.UnionDiscriminator = Layout$1.Structure = Layout$1.Sequence = Layout$1.DoubleBE = Layout$1.Double = Layout$1.FloatBE = Layout$1.Float = Layout$1.NearInt64BE = Layout$1.NearInt64 = Layout$1.NearUInt64BE = Layout$1.NearUInt64 = Layout$1.IntBE = Layout$1.Int = Layout$1.UIntBE = Layout$1.UInt = Layout$1.OffsetLayout = Layout$1.GreedyCount = Layout$1.ExternalLayout = Layout$1.bindConstructorLayout = Layout$1.nameWithProperty = Layout$1.Layout = Layout$1.uint8ArrayToBuffer = Layout$1.checkUint8Array = void 0;
Layout$1.constant = Layout$1.utf8 = Layout$1.cstr = blob = Layout$1.blob = Layout$1.unionLayoutDiscriminator = Layout$1.union = seq = Layout$1.seq = Layout$1.bits = struct = Layout$1.struct = Layout$1.f64be = Layout$1.f64 = Layout$1.f32be = Layout$1.f32 = Layout$1.ns64be = Layout$1.s48be = Layout$1.s40be = Layout$1.s32be = Layout$1.s24be = Layout$1.s16be = ns64 = Layout$1.ns64 = Layout$1.s48 = Layout$1.s40 = Layout$1.s32 = Layout$1.s24 = void 0;
const buffer_1 = require$$0$2;
function checkUint8Array(t) {
  if (!(t instanceof Uint8Array))
    throw new TypeError("b must be a Uint8Array");
}
Layout$1.checkUint8Array = checkUint8Array;
function uint8ArrayToBuffer(t) {
  return checkUint8Array(t), buffer_1.Buffer.from(t.buffer, t.byteOffset, t.length);
}
Layout$1.uint8ArrayToBuffer = uint8ArrayToBuffer;
class Layout {
  constructor(e, n) {
    if (!Number.isInteger(e))
      throw new TypeError("span must be an integer");
    this.span = e, this.property = n;
  }
  /** Function to create an Object into which decoded properties will
   * be written.
   *
   * Used only for layouts that {@link Layout#decode|decode} to Object
   * instances, which means:
   * * {@link Structure}
   * * {@link Union}
   * * {@link VariantLayout}
   * * {@link BitStructure}
   *
   * If left undefined the JavaScript representation of these layouts
   * will be Object instances.
   *
   * See {@link bindConstructorLayout}.
   */
  makeDestinationObject() {
    return {};
  }
  /**
   * Calculate the span of a specific instance of a layout.
   *
   * @param {Uint8Array} b - the buffer that contains an encoded instance.
   *
   * @param {Number} [offset] - the offset at which the encoded instance
   * starts.  If absent a zero offset is inferred.
   *
   * @return {Number} - the number of bytes covered by the layout
   * instance.  If this method is not overridden in a subclass the
   * definition-time constant {@link Layout#span|span} will be
   * returned.
   *
   * @throws {RangeError} - if the length of the value cannot be
   * determined.
   */
  getSpan(e, n) {
    if (0 > this.span)
      throw new RangeError("indeterminate span");
    return this.span;
  }
  /**
   * Replicate the layout using a new property.
   *
   * This function must be used to get a structurally-equivalent layout
   * with a different name since all {@link Layout} instances are
   * immutable.
   *
   * **NOTE** This is a shallow copy.  All fields except {@link
   * Layout#property|property} are strictly equal to the origin layout.
   *
   * @param {String} property - the value for {@link
   * Layout#property|property} in the replica.
   *
   * @returns {Layout} - the copy with {@link Layout#property|property}
   * set to `property`.
   */
  replicate(e) {
    const n = Object.create(this.constructor.prototype);
    return Object.assign(n, this), n.property = e, n;
  }
  /**
   * Create an object from layout properties and an array of values.
   *
   * **NOTE** This function returns `undefined` if invoked on a layout
   * that does not return its value as an Object.  Objects are
   * returned for things that are a {@link Structure}, which includes
   * {@link VariantLayout|variant layouts} if they are structures, and
   * excludes {@link Union}s.  If you want this feature for a union
   * you must use {@link Union.getVariant|getVariant} to select the
   * desired layout.
   *
   * @param {Array} values - an array of values that correspond to the
   * default order for properties.  As with {@link Layout#decode|decode}
   * layout elements that have no property name are skipped when
   * iterating over the array values.  Only the top-level properties are
   * assigned; arguments are not assigned to properties of contained
   * layouts.  Any unused values are ignored.
   *
   * @return {(Object|undefined)}
   */
  fromArray(e) {
  }
}
Layout$1.Layout = Layout;
function nameWithProperty(t, e) {
  return e.property ? t + "[" + e.property + "]" : t;
}
Layout$1.nameWithProperty = nameWithProperty;
function bindConstructorLayout(t, e) {
  if (typeof t != "function")
    throw new TypeError("Class must be constructor");
  if (Object.prototype.hasOwnProperty.call(t, "layout_"))
    throw new Error("Class is already bound to a layout");
  if (!(e && e instanceof Layout))
    throw new TypeError("layout must be a Layout");
  if (Object.prototype.hasOwnProperty.call(e, "boundConstructor_"))
    throw new Error("layout is already bound to a constructor");
  t.layout_ = e, e.boundConstructor_ = t, e.makeDestinationObject = () => new t(), Object.defineProperty(t.prototype, "encode", {
    value(n, a) {
      return e.encode(this, n, a);
    },
    writable: !0
  }), Object.defineProperty(t, "decode", {
    value(n, a) {
      return e.decode(n, a);
    },
    writable: !0
  });
}
Layout$1.bindConstructorLayout = bindConstructorLayout;
class ExternalLayout extends Layout {
  /**
   * Return `true` iff the external layout decodes to an unsigned
   * integer layout.
   *
   * In that case it can be used as the source of {@link
   * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},
   * or as {@link UnionLayoutDiscriminator#layout|external union
   * discriminators}.
   *
   * @abstract
   */
  isCount() {
    throw new Error("ExternalLayout is abstract");
  }
}
Layout$1.ExternalLayout = ExternalLayout;
class GreedyCount extends ExternalLayout {
  constructor(e = 1, n) {
    if (!Number.isInteger(e) || 0 >= e)
      throw new TypeError("elementSpan must be a (positive) integer");
    super(-1, n), this.elementSpan = e;
  }
  /** @override */
  isCount() {
    return !0;
  }
  /** @override */
  decode(e, n = 0) {
    checkUint8Array(e);
    const a = e.length - n;
    return Math.floor(a / this.elementSpan);
  }
  /** @override */
  encode(e, n, a) {
    return 0;
  }
}
Layout$1.GreedyCount = GreedyCount;
class OffsetLayout extends ExternalLayout {
  constructor(e, n = 0, a) {
    if (!(e instanceof Layout))
      throw new TypeError("layout must be a Layout");
    if (!Number.isInteger(n))
      throw new TypeError("offset must be integer or undefined");
    super(e.span, a || e.property), this.layout = e, this.offset = n;
  }
  /** @override */
  isCount() {
    return this.layout instanceof UInt || this.layout instanceof UIntBE;
  }
  /** @override */
  decode(e, n = 0) {
    return this.layout.decode(e, n + this.offset);
  }
  /** @override */
  encode(e, n, a = 0) {
    return this.layout.encode(e, n, a + this.offset);
  }
}
Layout$1.OffsetLayout = OffsetLayout;
class UInt extends Layout {
  constructor(e, n) {
    if (super(e, n), 6 < this.span)
      throw new RangeError("span must not exceed 6 bytes");
  }
  /** @override */
  decode(e, n = 0) {
    return uint8ArrayToBuffer(e).readUIntLE(n, this.span);
  }
  /** @override */
  encode(e, n, a = 0) {
    return uint8ArrayToBuffer(n).writeUIntLE(e, a, this.span), this.span;
  }
}
Layout$1.UInt = UInt;
class UIntBE extends Layout {
  constructor(e, n) {
    if (super(e, n), 6 < this.span)
      throw new RangeError("span must not exceed 6 bytes");
  }
  /** @override */
  decode(e, n = 0) {
    return uint8ArrayToBuffer(e).readUIntBE(n, this.span);
  }
  /** @override */
  encode(e, n, a = 0) {
    return uint8ArrayToBuffer(n).writeUIntBE(e, a, this.span), this.span;
  }
}
Layout$1.UIntBE = UIntBE;
class Int extends Layout {
  constructor(e, n) {
    if (super(e, n), 6 < this.span)
      throw new RangeError("span must not exceed 6 bytes");
  }
  /** @override */
  decode(e, n = 0) {
    return uint8ArrayToBuffer(e).readIntLE(n, this.span);
  }
  /** @override */
  encode(e, n, a = 0) {
    return uint8ArrayToBuffer(n).writeIntLE(e, a, this.span), this.span;
  }
}
Layout$1.Int = Int;
class IntBE extends Layout {
  constructor(e, n) {
    if (super(e, n), 6 < this.span)
      throw new RangeError("span must not exceed 6 bytes");
  }
  /** @override */
  decode(e, n = 0) {
    return uint8ArrayToBuffer(e).readIntBE(n, this.span);
  }
  /** @override */
  encode(e, n, a = 0) {
    return uint8ArrayToBuffer(n).writeIntBE(e, a, this.span), this.span;
  }
}
Layout$1.IntBE = IntBE;
const V2E32 = Math.pow(2, 32);
function divmodInt64(t) {
  const e = Math.floor(t / V2E32), n = t - e * V2E32;
  return { hi32: e, lo32: n };
}
function roundedInt64(t, e) {
  return t * V2E32 + e;
}
class NearUInt64 extends Layout {
  constructor(e) {
    super(8, e);
  }
  /** @override */
  decode(e, n = 0) {
    const a = uint8ArrayToBuffer(e), c = a.readUInt32LE(n), o = a.readUInt32LE(n + 4);
    return roundedInt64(o, c);
  }
  /** @override */
  encode(e, n, a = 0) {
    const c = divmodInt64(e), o = uint8ArrayToBuffer(n);
    return o.writeUInt32LE(c.lo32, a), o.writeUInt32LE(c.hi32, a + 4), 8;
  }
}
Layout$1.NearUInt64 = NearUInt64;
class NearUInt64BE extends Layout {
  constructor(e) {
    super(8, e);
  }
  /** @override */
  decode(e, n = 0) {
    const a = uint8ArrayToBuffer(e), c = a.readUInt32BE(n), o = a.readUInt32BE(n + 4);
    return roundedInt64(c, o);
  }
  /** @override */
  encode(e, n, a = 0) {
    const c = divmodInt64(e), o = uint8ArrayToBuffer(n);
    return o.writeUInt32BE(c.hi32, a), o.writeUInt32BE(c.lo32, a + 4), 8;
  }
}
Layout$1.NearUInt64BE = NearUInt64BE;
class NearInt64 extends Layout {
  constructor(e) {
    super(8, e);
  }
  /** @override */
  decode(e, n = 0) {
    const a = uint8ArrayToBuffer(e), c = a.readUInt32LE(n), o = a.readInt32LE(n + 4);
    return roundedInt64(o, c);
  }
  /** @override */
  encode(e, n, a = 0) {
    const c = divmodInt64(e), o = uint8ArrayToBuffer(n);
    return o.writeUInt32LE(c.lo32, a), o.writeInt32LE(c.hi32, a + 4), 8;
  }
}
Layout$1.NearInt64 = NearInt64;
class NearInt64BE extends Layout {
  constructor(e) {
    super(8, e);
  }
  /** @override */
  decode(e, n = 0) {
    const a = uint8ArrayToBuffer(e), c = a.readInt32BE(n), o = a.readUInt32BE(n + 4);
    return roundedInt64(c, o);
  }
  /** @override */
  encode(e, n, a = 0) {
    const c = divmodInt64(e), o = uint8ArrayToBuffer(n);
    return o.writeInt32BE(c.hi32, a), o.writeUInt32BE(c.lo32, a + 4), 8;
  }
}
Layout$1.NearInt64BE = NearInt64BE;
class Float extends Layout {
  constructor(e) {
    super(4, e);
  }
  /** @override */
  decode(e, n = 0) {
    return uint8ArrayToBuffer(e).readFloatLE(n);
  }
  /** @override */
  encode(e, n, a = 0) {
    return uint8ArrayToBuffer(n).writeFloatLE(e, a), 4;
  }
}
Layout$1.Float = Float;
class FloatBE extends Layout {
  constructor(e) {
    super(4, e);
  }
  /** @override */
  decode(e, n = 0) {
    return uint8ArrayToBuffer(e).readFloatBE(n);
  }
  /** @override */
  encode(e, n, a = 0) {
    return uint8ArrayToBuffer(n).writeFloatBE(e, a), 4;
  }
}
Layout$1.FloatBE = FloatBE;
class Double extends Layout {
  constructor(e) {
    super(8, e);
  }
  /** @override */
  decode(e, n = 0) {
    return uint8ArrayToBuffer(e).readDoubleLE(n);
  }
  /** @override */
  encode(e, n, a = 0) {
    return uint8ArrayToBuffer(n).writeDoubleLE(e, a), 8;
  }
}
Layout$1.Double = Double;
class DoubleBE extends Layout {
  constructor(e) {
    super(8, e);
  }
  /** @override */
  decode(e, n = 0) {
    return uint8ArrayToBuffer(e).readDoubleBE(n);
  }
  /** @override */
  encode(e, n, a = 0) {
    return uint8ArrayToBuffer(n).writeDoubleBE(e, a), 8;
  }
}
Layout$1.DoubleBE = DoubleBE;
class Sequence extends Layout {
  constructor(e, n, a) {
    if (!(e instanceof Layout))
      throw new TypeError("elementLayout must be a Layout");
    if (!(n instanceof ExternalLayout && n.isCount() || Number.isInteger(n) && 0 <= n))
      throw new TypeError("count must be non-negative integer or an unsigned integer ExternalLayout");
    let c = -1;
    !(n instanceof ExternalLayout) && 0 < e.span && (c = n * e.span), super(c, a), this.elementLayout = e, this.count = n;
  }
  /** @override */
  getSpan(e, n = 0) {
    if (0 <= this.span)
      return this.span;
    let a = 0, c = this.count;
    if (c instanceof ExternalLayout && (c = c.decode(e, n)), 0 < this.elementLayout.span)
      a = c * this.elementLayout.span;
    else {
      let o = 0;
      for (; o < c; )
        a += this.elementLayout.getSpan(e, n + a), ++o;
    }
    return a;
  }
  /** @override */
  decode(e, n = 0) {
    const a = [];
    let c = 0, o = this.count;
    for (o instanceof ExternalLayout && (o = o.decode(e, n)); c < o; )
      a.push(this.elementLayout.decode(e, n)), n += this.elementLayout.getSpan(e, n), c += 1;
    return a;
  }
  /** Implement {@link Layout#encode|encode} for {@link Sequence}.
   *
   * **NOTE** If `src` is shorter than {@link Sequence#count|count} then
   * the unused space in the buffer is left unchanged.  If `src` is
   * longer than {@link Sequence#count|count} the unneeded elements are
   * ignored.
   *
   * **NOTE** If {@link Layout#count|count} is an instance of {@link
   * ExternalLayout} then the length of `src` will be encoded as the
   * count after `src` is encoded. */
  encode(e, n, a = 0) {
    const c = this.elementLayout, o = e.reduce((d, m) => d + c.encode(m, n, a + d), 0);
    return this.count instanceof ExternalLayout && this.count.encode(e.length, n, a), o;
  }
}
Layout$1.Sequence = Sequence;
class Structure extends Layout {
  constructor(e, n, a) {
    if (!(Array.isArray(e) && e.reduce((o, d) => o && d instanceof Layout, !0)))
      throw new TypeError("fields must be array of Layout instances");
    typeof n == "boolean" && a === void 0 && (a = n, n = void 0);
    for (const o of e)
      if (0 > o.span && o.property === void 0)
        throw new Error("fields cannot contain unnamed variable-length layout");
    let c = -1;
    try {
      c = e.reduce((o, d) => o + d.getSpan(), 0);
    } catch {
    }
    super(c, n), this.fields = e, this.decodePrefixes = !!a;
  }
  /** @override */
  getSpan(e, n = 0) {
    if (0 <= this.span)
      return this.span;
    let a = 0;
    try {
      a = this.fields.reduce((c, o) => {
        const d = o.getSpan(e, n);
        return n += d, c + d;
      }, 0);
    } catch {
      throw new RangeError("indeterminate span");
    }
    return a;
  }
  /** @override */
  decode(e, n = 0) {
    checkUint8Array(e);
    const a = this.makeDestinationObject();
    for (const c of this.fields)
      if (c.property !== void 0 && (a[c.property] = c.decode(e, n)), n += c.getSpan(e, n), this.decodePrefixes && e.length === n)
        break;
    return a;
  }
  /** Implement {@link Layout#encode|encode} for {@link Structure}.
   *
   * If `src` is missing a property for a member with a defined {@link
   * Layout#property|property} the corresponding region of the buffer is
   * left unmodified. */
  encode(e, n, a = 0) {
    const c = a;
    let o = 0, d = 0;
    for (const m of this.fields) {
      let w = m.span;
      if (d = 0 < w ? w : 0, m.property !== void 0) {
        const S = e[m.property];
        S !== void 0 && (d = m.encode(S, n, a), 0 > w && (w = m.getSpan(n, a)));
      }
      o = a, a += w;
    }
    return o + d - c;
  }
  /** @override */
  fromArray(e) {
    const n = this.makeDestinationObject();
    for (const a of this.fields)
      a.property !== void 0 && 0 < e.length && (n[a.property] = e.shift());
    return n;
  }
  /**
   * Get access to the layout of a given property.
   *
   * @param {String} property - the structure member of interest.
   *
   * @return {Layout} - the layout associated with `property`, or
   * undefined if there is no such property.
   */
  layoutFor(e) {
    if (typeof e != "string")
      throw new TypeError("property must be string");
    for (const n of this.fields)
      if (n.property === e)
        return n;
  }
  /**
   * Get the offset of a structure member.
   *
   * @param {String} property - the structure member of interest.
   *
   * @return {Number} - the offset in bytes to the start of `property`
   * within the structure, or undefined if `property` is not a field
   * within the structure.  If the property is a member but follows a
   * variable-length structure member a negative number will be
   * returned.
   */
  offsetOf(e) {
    if (typeof e != "string")
      throw new TypeError("property must be string");
    let n = 0;
    for (const a of this.fields) {
      if (a.property === e)
        return n;
      0 > a.span ? n = -1 : 0 <= n && (n += a.span);
    }
  }
}
Layout$1.Structure = Structure;
class UnionDiscriminator {
  constructor(e) {
    this.property = e;
  }
  /** Analog to {@link Layout#decode|Layout decode} for union discriminators.
   *
   * The implementation of this method need not reference the buffer if
   * variant information is available through other means. */
  decode(e, n) {
    throw new Error("UnionDiscriminator is abstract");
  }
  /** Analog to {@link Layout#decode|Layout encode} for union discriminators.
   *
   * The implementation of this method need not store the value if
   * variant information is maintained through other means. */
  encode(e, n, a) {
    throw new Error("UnionDiscriminator is abstract");
  }
}
Layout$1.UnionDiscriminator = UnionDiscriminator;
class UnionLayoutDiscriminator extends UnionDiscriminator {
  constructor(e, n) {
    if (!(e instanceof ExternalLayout && e.isCount()))
      throw new TypeError("layout must be an unsigned integer ExternalLayout");
    super(n || e.property || "variant"), this.layout = e;
  }
  /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */
  decode(e, n) {
    return this.layout.decode(e, n);
  }
  /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */
  encode(e, n, a) {
    return this.layout.encode(e, n, a);
  }
}
Layout$1.UnionLayoutDiscriminator = UnionLayoutDiscriminator;
class Union extends Layout {
  constructor(e, n, a) {
    let c;
    if (e instanceof UInt || e instanceof UIntBE)
      c = new UnionLayoutDiscriminator(new OffsetLayout(e));
    else if (e instanceof ExternalLayout && e.isCount())
      c = new UnionLayoutDiscriminator(e);
    else if (e instanceof UnionDiscriminator)
      c = e;
    else
      throw new TypeError("discr must be a UnionDiscriminator or an unsigned integer layout");
    if (n === void 0 && (n = null), !(n === null || n instanceof Layout))
      throw new TypeError("defaultLayout must be null or a Layout");
    if (n !== null) {
      if (0 > n.span)
        throw new Error("defaultLayout must have constant span");
      n.property === void 0 && (n = n.replicate("content"));
    }
    let o = -1;
    n && (o = n.span, 0 <= o && (e instanceof UInt || e instanceof UIntBE) && (o += c.layout.span)), super(o, a), this.discriminator = c, this.usesPrefixDiscriminator = e instanceof UInt || e instanceof UIntBE, this.defaultLayout = n, this.registry = {};
    let d = this.defaultGetSourceVariant.bind(this);
    this.getSourceVariant = function(m) {
      return d(m);
    }, this.configGetSourceVariant = function(m) {
      d = m.bind(this);
    };
  }
  /** @override */
  getSpan(e, n = 0) {
    if (0 <= this.span)
      return this.span;
    const a = this.getVariant(e, n);
    if (!a)
      throw new Error("unable to determine span for unrecognized variant");
    return a.getSpan(e, n);
  }
  /**
   * Method to infer a registered Union variant compatible with `src`.
   *
   * The first satisfied rule in the following sequence defines the
   * return value:
   * * If `src` has properties matching the Union discriminator and
   *   the default layout, `undefined` is returned regardless of the
   *   value of the discriminator property (this ensures the default
   *   layout will be used);
   * * If `src` has a property matching the Union discriminator, the
   *   value of the discriminator identifies a registered variant, and
   *   either (a) the variant has no layout, or (b) `src` has the
   *   variant's property, then the variant is returned (because the
   *   source satisfies the constraints of the variant it identifies);
   * * If `src` does not have a property matching the Union
   *   discriminator, but does have a property matching a registered
   *   variant, then the variant is returned (because the source
   *   matches a variant without an explicit conflict);
   * * An error is thrown (because we either can't identify a variant,
   *   or we were explicitly told the variant but can't satisfy it).
   *
   * @param {Object} src - an object presumed to be compatible with
   * the content of the Union.
   *
   * @return {(undefined|VariantLayout)} - as described above.
   *
   * @throws {Error} - if `src` cannot be associated with a default or
   * registered variant.
   */
  defaultGetSourceVariant(e) {
    if (Object.prototype.hasOwnProperty.call(e, this.discriminator.property)) {
      if (this.defaultLayout && this.defaultLayout.property && Object.prototype.hasOwnProperty.call(e, this.defaultLayout.property))
        return;
      const n = this.registry[e[this.discriminator.property]];
      if (n && (!n.layout || n.property && Object.prototype.hasOwnProperty.call(e, n.property)))
        return n;
    } else
      for (const n in this.registry) {
        const a = this.registry[n];
        if (a.property && Object.prototype.hasOwnProperty.call(e, a.property))
          return a;
      }
    throw new Error("unable to infer src variant");
  }
  /** Implement {@link Layout#decode|decode} for {@link Union}.
   *
   * If the variant is {@link Union#addVariant|registered} the return
   * value is an instance of that variant, with no explicit
   * discriminator.  Otherwise the {@link Union#defaultLayout|default
   * layout} is used to decode the content. */
  decode(e, n = 0) {
    let a;
    const c = this.discriminator, o = c.decode(e, n), d = this.registry[o];
    if (d === void 0) {
      const m = this.defaultLayout;
      let w = 0;
      this.usesPrefixDiscriminator && (w = c.layout.span), a = this.makeDestinationObject(), a[c.property] = o, a[m.property] = m.decode(e, n + w);
    } else
      a = d.decode(e, n);
    return a;
  }
  /** Implement {@link Layout#encode|encode} for {@link Union}.
   *
   * This API assumes the `src` object is consistent with the union's
   * {@link Union#defaultLayout|default layout}.  To encode variants
   * use the appropriate variant-specific {@link VariantLayout#encode}
   * method. */
  encode(e, n, a = 0) {
    const c = this.getSourceVariant(e);
    if (c === void 0) {
      const o = this.discriminator, d = this.defaultLayout;
      let m = 0;
      return this.usesPrefixDiscriminator && (m = o.layout.span), o.encode(e[o.property], n, a), m + d.encode(e[d.property], n, a + m);
    }
    return c.encode(e, n, a);
  }
  /** Register a new variant structure within a union.  The newly
   * created variant is returned.
   *
   * @param {Number} variant - initializer for {@link
   * VariantLayout#variant|variant}.
   *
   * @param {Layout} layout - initializer for {@link
   * VariantLayout#layout|layout}.
   *
   * @param {String} property - initializer for {@link
   * Layout#property|property}.
   *
   * @return {VariantLayout} */
  addVariant(e, n, a) {
    const c = new VariantLayout(this, e, n, a);
    return this.registry[e] = c, c;
  }
  /**
   * Get the layout associated with a registered variant.
   *
   * If `vb` does not produce a registered variant the function returns
   * `undefined`.
   *
   * @param {(Number|Uint8Array)} vb - either the variant number, or a
   * buffer from which the discriminator is to be read.
   *
   * @param {Number} offset - offset into `vb` for the start of the
   * union.  Used only when `vb` is an instance of {Uint8Array}.
   *
   * @return {({VariantLayout}|undefined)}
   */
  getVariant(e, n = 0) {
    let a;
    return e instanceof Uint8Array ? a = this.discriminator.decode(e, n) : a = e, this.registry[a];
  }
}
Layout$1.Union = Union;
class VariantLayout extends Layout {
  constructor(e, n, a, c) {
    if (!(e instanceof Union))
      throw new TypeError("union must be a Union");
    if (!Number.isInteger(n) || 0 > n)
      throw new TypeError("variant must be a (non-negative) integer");
    if (typeof a == "string" && c === void 0 && (c = a, a = null), a) {
      if (!(a instanceof Layout))
        throw new TypeError("layout must be a Layout");
      if (e.defaultLayout !== null && 0 <= a.span && a.span > e.defaultLayout.span)
        throw new Error("variant span exceeds span of containing union");
      if (typeof c != "string")
        throw new TypeError("variant must have a String property");
    }
    let o = e.span;
    0 > e.span && (o = a ? a.span : 0, 0 <= o && e.usesPrefixDiscriminator && (o += e.discriminator.layout.span)), super(o, c), this.union = e, this.variant = n, this.layout = a || null;
  }
  /** @override */
  getSpan(e, n = 0) {
    if (0 <= this.span)
      return this.span;
    let a = 0;
    this.union.usesPrefixDiscriminator && (a = this.union.discriminator.layout.span);
    let c = 0;
    return this.layout && (c = this.layout.getSpan(e, n + a)), a + c;
  }
  /** @override */
  decode(e, n = 0) {
    const a = this.makeDestinationObject();
    if (this !== this.union.getVariant(e, n))
      throw new Error("variant mismatch");
    let c = 0;
    return this.union.usesPrefixDiscriminator && (c = this.union.discriminator.layout.span), this.layout ? a[this.property] = this.layout.decode(e, n + c) : this.property ? a[this.property] = !0 : this.union.usesPrefixDiscriminator && (a[this.union.discriminator.property] = this.variant), a;
  }
  /** @override */
  encode(e, n, a = 0) {
    let c = 0;
    if (this.union.usesPrefixDiscriminator && (c = this.union.discriminator.layout.span), this.layout && !Object.prototype.hasOwnProperty.call(e, this.property))
      throw new TypeError("variant lacks property " + this.property);
    this.union.discriminator.encode(this.variant, n, a);
    let o = c;
    if (this.layout && (this.layout.encode(e[this.property], n, a + c), o += this.layout.getSpan(n, a + c), 0 <= this.union.span && o > this.union.span))
      throw new Error("encoded variant overruns containing union");
    return o;
  }
  /** Delegate {@link Layout#fromArray|fromArray} to {@link
   * VariantLayout#layout|layout}. */
  fromArray(e) {
    if (this.layout)
      return this.layout.fromArray(e);
  }
}
Layout$1.VariantLayout = VariantLayout;
function fixBitwiseResult(t) {
  return 0 > t && (t += 4294967296), t;
}
class BitStructure extends Layout {
  constructor(e, n, a) {
    if (!(e instanceof UInt || e instanceof UIntBE))
      throw new TypeError("word must be a UInt or UIntBE layout");
    if (typeof n == "string" && a === void 0 && (a = n, n = !1), 4 < e.span)
      throw new RangeError("word cannot exceed 32 bits");
    super(e.span, a), this.word = e, this.msb = !!n, this.fields = [];
    let c = 0;
    this._packedSetValue = function(o) {
      return c = fixBitwiseResult(o), this;
    }, this._packedGetValue = function() {
      return c;
    };
  }
  /** @override */
  decode(e, n = 0) {
    const a = this.makeDestinationObject(), c = this.word.decode(e, n);
    this._packedSetValue(c);
    for (const o of this.fields)
      o.property !== void 0 && (a[o.property] = o.decode(e));
    return a;
  }
  /** Implement {@link Layout#encode|encode} for {@link BitStructure}.
   *
   * If `src` is missing a property for a member with a defined {@link
   * Layout#property|property} the corresponding region of the packed
   * value is left unmodified.  Unused bits are also left unmodified. */
  encode(e, n, a = 0) {
    const c = this.word.decode(n, a);
    this._packedSetValue(c);
    for (const o of this.fields)
      if (o.property !== void 0) {
        const d = e[o.property];
        d !== void 0 && o.encode(d);
      }
    return this.word.encode(this._packedGetValue(), n, a);
  }
  /** Register a new bitfield with a containing bit structure.  The
   * resulting bitfield is returned.
   *
   * @param {Number} bits - initializer for {@link BitField#bits|bits}.
   *
   * @param {string} property - initializer for {@link
   * Layout#property|property}.
   *
   * @return {BitField} */
  addField(e, n) {
    const a = new BitField(this, e, n);
    return this.fields.push(a), a;
  }
  /** As with {@link BitStructure#addField|addField} for single-bit
   * fields with `boolean` value representation.
   *
   * @param {string} property - initializer for {@link
   * Layout#property|property}.
   *
   * @return {Boolean} */
  // `Boolean` conflicts with the native primitive type
  // eslint-disable-next-line @typescript-eslint/ban-types
  addBoolean(e) {
    const n = new Boolean$1(this, e);
    return this.fields.push(n), n;
  }
  /**
   * Get access to the bit field for a given property.
   *
   * @param {String} property - the bit field of interest.
   *
   * @return {BitField} - the field associated with `property`, or
   * undefined if there is no such property.
   */
  fieldFor(e) {
    if (typeof e != "string")
      throw new TypeError("property must be string");
    for (const n of this.fields)
      if (n.property === e)
        return n;
  }
}
Layout$1.BitStructure = BitStructure;
class BitField {
  constructor(e, n, a) {
    if (!(e instanceof BitStructure))
      throw new TypeError("container must be a BitStructure");
    if (!Number.isInteger(n) || 0 >= n)
      throw new TypeError("bits must be positive integer");
    const c = 8 * e.span, o = e.fields.reduce((d, m) => d + m.bits, 0);
    if (n + o > c)
      throw new Error("bits too long for span remainder (" + (c - o) + " of " + c + " remain)");
    this.container = e, this.bits = n, this.valueMask = (1 << n) - 1, n === 32 && (this.valueMask = 4294967295), this.start = o, this.container.msb && (this.start = c - o - n), this.wordMask = fixBitwiseResult(this.valueMask << this.start), this.property = a;
  }
  /** Store a value into the corresponding subsequence of the containing
   * bit field. */
  decode(e, n) {
    const a = this.container._packedGetValue();
    return fixBitwiseResult(a & this.wordMask) >>> this.start;
  }
  /** Store a value into the corresponding subsequence of the containing
   * bit field.
   *
   * **NOTE** This is not a specialization of {@link
   * Layout#encode|Layout.encode} and there is no return value. */
  encode(e) {
    if (typeof e != "number" || !Number.isInteger(e) || e !== fixBitwiseResult(e & this.valueMask))
      throw new TypeError(nameWithProperty("BitField.encode", this) + " value must be integer not exceeding " + this.valueMask);
    const n = this.container._packedGetValue(), a = fixBitwiseResult(e << this.start);
    this.container._packedSetValue(fixBitwiseResult(n & ~this.wordMask) | a);
  }
}
Layout$1.BitField = BitField;
let Boolean$1 = class extends BitField {
  constructor(e, n) {
    super(e, 1, n);
  }
  /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.
   *
   * @returns {boolean} */
  decode(e, n) {
    return !!super.decode(e, n);
  }
  /** @override */
  encode(e) {
    typeof e == "boolean" && (e = +e), super.encode(e);
  }
};
Layout$1.Boolean = Boolean$1;
let Blob$1 = class extends Layout {
  constructor(e, n) {
    if (!(e instanceof ExternalLayout && e.isCount() || Number.isInteger(e) && 0 <= e))
      throw new TypeError("length must be positive integer or an unsigned integer ExternalLayout");
    let a = -1;
    e instanceof ExternalLayout || (a = e), super(a, n), this.length = e;
  }
  /** @override */
  getSpan(e, n) {
    let a = this.span;
    return 0 > a && (a = this.length.decode(e, n)), a;
  }
  /** @override */
  decode(e, n = 0) {
    let a = this.span;
    return 0 > a && (a = this.length.decode(e, n)), uint8ArrayToBuffer(e).slice(n, n + a);
  }
  /** Implement {@link Layout#encode|encode} for {@link Blob}.
   *
   * **NOTE** If {@link Layout#count|count} is an instance of {@link
   * ExternalLayout} then the length of `src` will be encoded as the
   * count after `src` is encoded. */
  encode(e, n, a) {
    let c = this.length;
    if (this.length instanceof ExternalLayout && (c = e.length), !(e instanceof Uint8Array && c === e.length))
      throw new TypeError(nameWithProperty("Blob.encode", this) + " requires (length " + c + ") Uint8Array as src");
    if (a + c > n.length)
      throw new RangeError("encoding overruns Uint8Array");
    const o = uint8ArrayToBuffer(e);
    return uint8ArrayToBuffer(n).write(o.toString("hex"), a, c, "hex"), this.length instanceof ExternalLayout && this.length.encode(c, n, a), c;
  }
};
Layout$1.Blob = Blob$1;
class CString extends Layout {
  constructor(e) {
    super(-1, e);
  }
  /** @override */
  getSpan(e, n = 0) {
    checkUint8Array(e);
    let a = n;
    for (; a < e.length && e[a] !== 0; )
      a += 1;
    return 1 + a - n;
  }
  /** @override */
  decode(e, n = 0) {
    const a = this.getSpan(e, n);
    return uint8ArrayToBuffer(e).slice(n, n + a - 1).toString("utf-8");
  }
  /** @override */
  encode(e, n, a = 0) {
    typeof e != "string" && (e = String(e));
    const c = buffer_1.Buffer.from(e, "utf8"), o = c.length;
    if (a + o > n.length)
      throw new RangeError("encoding overruns Buffer");
    const d = uint8ArrayToBuffer(n);
    return c.copy(d, a), d[a + o] = 0, o + 1;
  }
}
Layout$1.CString = CString;
class UTF8 extends Layout {
  constructor(e, n) {
    if (typeof e == "string" && n === void 0 && (n = e, e = void 0), e === void 0)
      e = -1;
    else if (!Number.isInteger(e))
      throw new TypeError("maxSpan must be an integer");
    super(-1, n), this.maxSpan = e;
  }
  /** @override */
  getSpan(e, n = 0) {
    return checkUint8Array(e), e.length - n;
  }
  /** @override */
  decode(e, n = 0) {
    const a = this.getSpan(e, n);
    if (0 <= this.maxSpan && this.maxSpan < a)
      throw new RangeError("text length exceeds maxSpan");
    return uint8ArrayToBuffer(e).slice(n, n + a).toString("utf-8");
  }
  /** @override */
  encode(e, n, a = 0) {
    typeof e != "string" && (e = String(e));
    const c = buffer_1.Buffer.from(e, "utf8"), o = c.length;
    if (0 <= this.maxSpan && this.maxSpan < o)
      throw new RangeError("text length exceeds maxSpan");
    if (a + o > n.length)
      throw new RangeError("encoding overruns Buffer");
    return c.copy(uint8ArrayToBuffer(n), a), o;
  }
}
Layout$1.UTF8 = UTF8;
class Constant extends Layout {
  constructor(e, n) {
    super(0, n), this.value = e;
  }
  /** @override */
  decode(e, n) {
    return this.value;
  }
  /** @override */
  encode(e, n, a) {
    return 0;
  }
}
Layout$1.Constant = Constant;
Layout$1.greedy = (t, e) => new GreedyCount(t, e);
var offset = Layout$1.offset = (t, e, n) => new OffsetLayout(t, e, n), u8 = Layout$1.u8 = (t) => new UInt(1, t), u16 = Layout$1.u16 = (t) => new UInt(2, t);
Layout$1.u24 = (t) => new UInt(3, t);
var u32$1 = Layout$1.u32 = (t) => new UInt(4, t);
Layout$1.u40 = (t) => new UInt(5, t);
Layout$1.u48 = (t) => new UInt(6, t);
var nu64 = Layout$1.nu64 = (t) => new NearUInt64(t);
Layout$1.u16be = (t) => new UIntBE(2, t);
Layout$1.u24be = (t) => new UIntBE(3, t);
Layout$1.u32be = (t) => new UIntBE(4, t);
Layout$1.u40be = (t) => new UIntBE(5, t);
Layout$1.u48be = (t) => new UIntBE(6, t);
Layout$1.nu64be = (t) => new NearUInt64BE(t);
Layout$1.s8 = (t) => new Int(1, t);
Layout$1.s16 = (t) => new Int(2, t);
Layout$1.s24 = (t) => new Int(3, t);
Layout$1.s32 = (t) => new Int(4, t);
Layout$1.s40 = (t) => new Int(5, t);
Layout$1.s48 = (t) => new Int(6, t);
var ns64 = Layout$1.ns64 = (t) => new NearInt64(t);
Layout$1.s16be = (t) => new IntBE(2, t);
Layout$1.s24be = (t) => new IntBE(3, t);
Layout$1.s32be = (t) => new IntBE(4, t);
Layout$1.s40be = (t) => new IntBE(5, t);
Layout$1.s48be = (t) => new IntBE(6, t);
Layout$1.ns64be = (t) => new NearInt64BE(t);
Layout$1.f32 = (t) => new Float(t);
Layout$1.f32be = (t) => new FloatBE(t);
Layout$1.f64 = (t) => new Double(t);
Layout$1.f64be = (t) => new DoubleBE(t);
var struct = Layout$1.struct = (t, e, n) => new Structure(t, e, n);
Layout$1.bits = (t, e, n) => new BitStructure(t, e, n);
var seq = Layout$1.seq = (t, e, n) => new Sequence(t, e, n);
Layout$1.union = (t, e, n) => new Union(t, e, n);
Layout$1.unionLayoutDiscriminator = (t, e) => new UnionLayoutDiscriminator(t, e);
var blob = Layout$1.blob = (t, e) => new Blob$1(t, e);
Layout$1.cstr = (t) => new CString(t);
Layout$1.utf8 = (t, e) => new UTF8(t, e);
Layout$1.constant = (t, e) => new Constant(t, e);
var browser$2 = {};
Object.defineProperty(browser$2, "__esModule", { value: !0 });
function toBigIntLE(t) {
  {
    const e = Buffer$F.from(t);
    e.reverse();
    const n = e.toString("hex");
    return n.length === 0 ? BigInt(0) : BigInt(`0x${n}`);
  }
}
var toBigIntLE_1 = browser$2.toBigIntLE = toBigIntLE;
function toBigIntBE(t) {
  {
    const e = t.toString("hex");
    return e.length === 0 ? BigInt(0) : BigInt(`0x${e}`);
  }
}
browser$2.toBigIntBE = toBigIntBE;
function toBufferLE(t, e) {
  {
    const n = t.toString(16), a = Buffer$F.from(n.padStart(e * 2, "0").slice(0, e * 2), "hex");
    return a.reverse(), a;
  }
}
var toBufferLE_1 = browser$2.toBufferLE = toBufferLE;
function toBufferBE(t, e) {
  {
    const n = t.toString(16);
    return Buffer$F.from(n.padStart(e * 2, "0").slice(0, e * 2), "hex");
  }
}
browser$2.toBufferBE = toBufferBE;
class StructError extends TypeError {
  constructor(e, n) {
    let a;
    const {
      message: c,
      ...o
    } = e, {
      path: d
    } = e, m = d.length === 0 ? c : "At path: " + d.join(".") + " -- " + c;
    super(m), Object.assign(this, o), this.name = this.constructor.name, this.failures = () => {
      var w;
      return (w = a) != null ? w : a = [e, ...n()];
    };
  }
}
function isIterable(t) {
  return isObject$2(t) && typeof t[Symbol.iterator] == "function";
}
function isObject$2(t) {
  return typeof t == "object" && t != null;
}
function print(t) {
  return typeof t == "string" ? JSON.stringify(t) : "" + t;
}
function shiftIterator(t) {
  const {
    done: e,
    value: n
  } = t.next();
  return e ? void 0 : n;
}
function toFailure(t, e, n, a) {
  if (t === !0)
    return;
  t === !1 ? t = {} : typeof t == "string" && (t = {
    message: t
  });
  const {
    path: c,
    branch: o
  } = e, {
    type: d
  } = n, {
    refinement: m,
    message: w = "Expected a value of type `" + d + "`" + (m ? " with refinement `" + m + "`" : "") + ", but received: `" + print(a) + "`"
  } = t;
  return {
    value: a,
    type: d,
    refinement: m,
    key: c[c.length - 1],
    path: c,
    branch: o,
    ...t,
    message: w
  };
}
function* toFailures(t, e, n, a) {
  isIterable(t) || (t = [t]);
  for (const c of t) {
    const o = toFailure(c, e, n, a);
    o && (yield o);
  }
}
function* run(t, e, n = {}) {
  const {
    path: a = [],
    branch: c = [t],
    coerce: o = !1,
    mask: d = !1
  } = n, m = {
    path: a,
    branch: c
  };
  if (o && (t = e.coercer(t, m), d && e.type !== "type" && isObject$2(e.schema) && isObject$2(t) && !Array.isArray(t)))
    for (const S in t)
      e.schema[S] === void 0 && delete t[S];
  let w = !0;
  for (const S of e.validator(t, m))
    w = !1, yield [S, void 0];
  for (let [S, A, B] of e.entries(t, m)) {
    const P = run(A, B, {
      path: S === void 0 ? a : [...a, S],
      branch: S === void 0 ? c : [...c, A],
      coerce: o,
      mask: d
    });
    for (const I of P)
      I[0] ? (w = !1, yield [I[0], void 0]) : o && (A = I[1], S === void 0 ? t = A : t instanceof Map ? t.set(S, A) : t instanceof Set ? t.add(A) : isObject$2(t) && (t[S] = A));
  }
  if (w)
    for (const S of e.refiner(t, m))
      w = !1, yield [S, void 0];
  w && (yield [void 0, t]);
}
let Struct$1 = class {
  constructor(e) {
    const {
      type: n,
      schema: a,
      validator: c,
      refiner: o,
      coercer: d = (w) => w,
      entries: m = function* () {
      }
    } = e;
    this.type = n, this.schema = a, this.entries = m, this.coercer = d, c ? this.validator = (w, S) => {
      const A = c(w, S);
      return toFailures(A, S, this, w);
    } : this.validator = () => [], o ? this.refiner = (w, S) => {
      const A = o(w, S);
      return toFailures(A, S, this, w);
    } : this.refiner = () => [];
  }
  /**
   * Assert that a value passes the struct's validation, throwing if it doesn't.
   */
  assert(e) {
    return assert$3(e, this);
  }
  /**
   * Create a value with the struct's coercion logic, then validate it.
   */
  create(e) {
    return create(e, this);
  }
  /**
   * Check if a value passes the struct's validation.
   */
  is(e) {
    return is(e, this);
  }
  /**
   * Mask a value, coercing and validating it, but returning only the subset of
   * properties defined by the struct's schema.
   */
  mask(e) {
    return mask(e, this);
  }
  /**
   * Validate a value with the struct's validation logic, returning a tuple
   * representing the result.
   *
   * You may optionally pass `true` for the `withCoercion` argument to coerce
   * the value before attempting to validate it. If you do, the result will
   * contain the coerced result when successful.
   */
  validate(e, n = {}) {
    return validate$1(e, this, n);
  }
};
function assert$3(t, e) {
  const n = validate$1(t, e);
  if (n[0])
    throw n[0];
}
function create(t, e) {
  const n = validate$1(t, e, {
    coerce: !0
  });
  if (n[0])
    throw n[0];
  return n[1];
}
function mask(t, e) {
  const n = validate$1(t, e, {
    coerce: !0,
    mask: !0
  });
  if (n[0])
    throw n[0];
  return n[1];
}
function is(t, e) {
  return !validate$1(t, e)[0];
}
function validate$1(t, e, n = {}) {
  const a = run(t, e, n), c = shiftIterator(a);
  return c[0] ? [new StructError(c[0], function* () {
    for (const d of a)
      d[0] && (yield d[0]);
  }), void 0] : [void 0, c[1]];
}
function define(t, e) {
  return new Struct$1({
    type: t,
    schema: null,
    validator: e
  });
}
function any() {
  return define("any", () => !0);
}
function array(t) {
  return new Struct$1({
    type: "array",
    schema: t,
    *entries(e) {
      if (t && Array.isArray(e))
        for (const [n, a] of e.entries())
          yield [n, a, t];
    },
    coercer(e) {
      return Array.isArray(e) ? e.slice() : e;
    },
    validator(e) {
      return Array.isArray(e) || "Expected an array value, but received: " + print(e);
    }
  });
}
function boolean() {
  return define("boolean", (t) => typeof t == "boolean");
}
function instance(t) {
  return define("instance", (e) => e instanceof t || "Expected a `" + t.name + "` instance, but received: " + print(e));
}
function literal(t) {
  const e = print(t), n = typeof t;
  return new Struct$1({
    type: "literal",
    schema: n === "string" || n === "number" || n === "boolean" ? t : null,
    validator(a) {
      return a === t || "Expected the literal `" + e + "`, but received: " + print(a);
    }
  });
}
function never() {
  return define("never", () => !1);
}
function nullable(t) {
  return new Struct$1({
    ...t,
    validator: (e, n) => e === null || t.validator(e, n),
    refiner: (e, n) => e === null || t.refiner(e, n)
  });
}
function number$2() {
  return define("number", (t) => typeof t == "number" && !isNaN(t) || "Expected a number, but received: " + print(t));
}
function optional(t) {
  return new Struct$1({
    ...t,
    validator: (e, n) => e === void 0 || t.validator(e, n),
    refiner: (e, n) => e === void 0 || t.refiner(e, n)
  });
}
function record(t, e) {
  return new Struct$1({
    type: "record",
    schema: null,
    *entries(n) {
      if (isObject$2(n))
        for (const a in n) {
          const c = n[a];
          yield [a, a, t], yield [a, c, e];
        }
    },
    validator(n) {
      return isObject$2(n) || "Expected an object, but received: " + print(n);
    }
  });
}
function string() {
  return define("string", (t) => typeof t == "string" || "Expected a string, but received: " + print(t));
}
function tuple(t) {
  const e = never();
  return new Struct$1({
    type: "tuple",
    schema: null,
    *entries(n) {
      if (Array.isArray(n)) {
        const a = Math.max(t.length, n.length);
        for (let c = 0; c < a; c++)
          yield [c, n[c], t[c] || e];
      }
    },
    validator(n) {
      return Array.isArray(n) || "Expected an array, but received: " + print(n);
    }
  });
}
function type(t) {
  const e = Object.keys(t);
  return new Struct$1({
    type: "type",
    schema: t,
    *entries(n) {
      if (isObject$2(n))
        for (const a of e)
          yield [a, n[a], t[a]];
    },
    validator(n) {
      return isObject$2(n) || "Expected an object, but received: " + print(n);
    }
  });
}
function union(t) {
  const e = t.map((n) => n.type).join(" | ");
  return new Struct$1({
    type: "union",
    schema: null,
    validator(n, a) {
      const c = [];
      for (const o of t) {
        const [...d] = run(n, o, a), [m] = d;
        if (m[0])
          for (const [w] of d)
            w && c.push(w);
        else
          return [];
      }
      return ["Expected the value to satisfy a union of `" + e + "`, but received: " + print(n), ...c];
    }
  });
}
function unknown() {
  return define("unknown", () => !0);
}
function coerce(t, e, n) {
  return new Struct$1({
    ...t,
    coercer: (a, c) => is(a, e) ? t.coercer(n(a, c), c) : t.coercer(a, c)
  });
}
var getRandomValues$1, rnds8$1 = new Uint8Array(16);
function rng$1() {
  if (!getRandomValues$1 && (getRandomValues$1 = typeof crypto < "u" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto < "u" && typeof msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto), !getRandomValues$1))
    throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
  return getRandomValues$1(rnds8$1);
}
const REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
function validate(t) {
  return typeof t == "string" && REGEX.test(t);
}
var byteToHex$1 = [];
for (var i = 0; i < 256; ++i)
  byteToHex$1.push((i + 256).toString(16).substr(1));
function stringify$1(t) {
  var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, n = (byteToHex$1[t[e + 0]] + byteToHex$1[t[e + 1]] + byteToHex$1[t[e + 2]] + byteToHex$1[t[e + 3]] + "-" + byteToHex$1[t[e + 4]] + byteToHex$1[t[e + 5]] + "-" + byteToHex$1[t[e + 6]] + byteToHex$1[t[e + 7]] + "-" + byteToHex$1[t[e + 8]] + byteToHex$1[t[e + 9]] + "-" + byteToHex$1[t[e + 10]] + byteToHex$1[t[e + 11]] + byteToHex$1[t[e + 12]] + byteToHex$1[t[e + 13]] + byteToHex$1[t[e + 14]] + byteToHex$1[t[e + 15]]).toLowerCase();
  if (!validate(n))
    throw TypeError("Stringified UUID is invalid");
  return n;
}
var _nodeId, _clockseq, _lastMSecs = 0, _lastNSecs = 0;
function v1(t, e, n) {
  var a = e && n || 0, c = e || new Array(16);
  t = t || {};
  var o = t.node || _nodeId, d = t.clockseq !== void 0 ? t.clockseq : _clockseq;
  if (o == null || d == null) {
    var m = t.random || (t.rng || rng$1)();
    o == null && (o = _nodeId = [m[0] | 1, m[1], m[2], m[3], m[4], m[5]]), d == null && (d = _clockseq = (m[6] << 8 | m[7]) & 16383);
  }
  var w = t.msecs !== void 0 ? t.msecs : Date.now(), S = t.nsecs !== void 0 ? t.nsecs : _lastNSecs + 1, A = w - _lastMSecs + (S - _lastNSecs) / 1e4;
  if (A < 0 && t.clockseq === void 0 && (d = d + 1 & 16383), (A < 0 || w > _lastMSecs) && t.nsecs === void 0 && (S = 0), S >= 1e4)
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  _lastMSecs = w, _lastNSecs = S, _clockseq = d, w += 122192928e5;
  var B = ((w & 268435455) * 1e4 + S) % 4294967296;
  c[a++] = B >>> 24 & 255, c[a++] = B >>> 16 & 255, c[a++] = B >>> 8 & 255, c[a++] = B & 255;
  var P = w / 4294967296 * 1e4 & 268435455;
  c[a++] = P >>> 8 & 255, c[a++] = P & 255, c[a++] = P >>> 24 & 15 | 16, c[a++] = P >>> 16 & 255, c[a++] = d >>> 8 | 128, c[a++] = d & 255;
  for (var I = 0; I < 6; ++I)
    c[a + I] = o[I];
  return e || stringify$1(c);
}
function parse(t) {
  if (!validate(t))
    throw TypeError("Invalid UUID");
  var e, n = new Uint8Array(16);
  return n[0] = (e = parseInt(t.slice(0, 8), 16)) >>> 24, n[1] = e >>> 16 & 255, n[2] = e >>> 8 & 255, n[3] = e & 255, n[4] = (e = parseInt(t.slice(9, 13), 16)) >>> 8, n[5] = e & 255, n[6] = (e = parseInt(t.slice(14, 18), 16)) >>> 8, n[7] = e & 255, n[8] = (e = parseInt(t.slice(19, 23), 16)) >>> 8, n[9] = e & 255, n[10] = (e = parseInt(t.slice(24, 36), 16)) / 1099511627776 & 255, n[11] = e / 4294967296 & 255, n[12] = e >>> 24 & 255, n[13] = e >>> 16 & 255, n[14] = e >>> 8 & 255, n[15] = e & 255, n;
}
function stringToBytes(t) {
  t = unescape(encodeURIComponent(t));
  for (var e = [], n = 0; n < t.length; ++n)
    e.push(t.charCodeAt(n));
  return e;
}
var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8", URL$1 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35(t, e, n) {
  function a(c, o, d, m) {
    if (typeof c == "string" && (c = stringToBytes(c)), typeof o == "string" && (o = parse(o)), o.length !== 16)
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    var w = new Uint8Array(16 + c.length);
    if (w.set(o), w.set(c, o.length), w = n(w), w[6] = w[6] & 15 | e, w[8] = w[8] & 63 | 128, d) {
      m = m || 0;
      for (var S = 0; S < 16; ++S)
        d[m + S] = w[S];
      return d;
    }
    return stringify$1(w);
  }
  try {
    a.name = t;
  } catch {
  }
  return a.DNS = DNS, a.URL = URL$1, a;
}
function md5(t) {
  if (typeof t == "string") {
    var e = unescape(encodeURIComponent(t));
    t = new Uint8Array(e.length);
    for (var n = 0; n < e.length; ++n)
      t[n] = e.charCodeAt(n);
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(t), t.length * 8));
}
function md5ToHexEncodedArray(t) {
  for (var e = [], n = t.length * 32, a = "0123456789abcdef", c = 0; c < n; c += 8) {
    var o = t[c >> 5] >>> c % 32 & 255, d = parseInt(a.charAt(o >>> 4 & 15) + a.charAt(o & 15), 16);
    e.push(d);
  }
  return e;
}
function getOutputLength(t) {
  return (t + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(t, e) {
  t[e >> 5] |= 128 << e % 32, t[getOutputLength(e) - 1] = e;
  for (var n = 1732584193, a = -271733879, c = -1732584194, o = 271733878, d = 0; d < t.length; d += 16) {
    var m = n, w = a, S = c, A = o;
    n = md5ff(n, a, c, o, t[d], 7, -680876936), o = md5ff(o, n, a, c, t[d + 1], 12, -389564586), c = md5ff(c, o, n, a, t[d + 2], 17, 606105819), a = md5ff(a, c, o, n, t[d + 3], 22, -1044525330), n = md5ff(n, a, c, o, t[d + 4], 7, -176418897), o = md5ff(o, n, a, c, t[d + 5], 12, 1200080426), c = md5ff(c, o, n, a, t[d + 6], 17, -1473231341), a = md5ff(a, c, o, n, t[d + 7], 22, -45705983), n = md5ff(n, a, c, o, t[d + 8], 7, 1770035416), o = md5ff(o, n, a, c, t[d + 9], 12, -1958414417), c = md5ff(c, o, n, a, t[d + 10], 17, -42063), a = md5ff(a, c, o, n, t[d + 11], 22, -1990404162), n = md5ff(n, a, c, o, t[d + 12], 7, 1804603682), o = md5ff(o, n, a, c, t[d + 13], 12, -40341101), c = md5ff(c, o, n, a, t[d + 14], 17, -1502002290), a = md5ff(a, c, o, n, t[d + 15], 22, 1236535329), n = md5gg(n, a, c, o, t[d + 1], 5, -165796510), o = md5gg(o, n, a, c, t[d + 6], 9, -1069501632), c = md5gg(c, o, n, a, t[d + 11], 14, 643717713), a = md5gg(a, c, o, n, t[d], 20, -373897302), n = md5gg(n, a, c, o, t[d + 5], 5, -701558691), o = md5gg(o, n, a, c, t[d + 10], 9, 38016083), c = md5gg(c, o, n, a, t[d + 15], 14, -660478335), a = md5gg(a, c, o, n, t[d + 4], 20, -405537848), n = md5gg(n, a, c, o, t[d + 9], 5, 568446438), o = md5gg(o, n, a, c, t[d + 14], 9, -1019803690), c = md5gg(c, o, n, a, t[d + 3], 14, -187363961), a = md5gg(a, c, o, n, t[d + 8], 20, 1163531501), n = md5gg(n, a, c, o, t[d + 13], 5, -1444681467), o = md5gg(o, n, a, c, t[d + 2], 9, -51403784), c = md5gg(c, o, n, a, t[d + 7], 14, 1735328473), a = md5gg(a, c, o, n, t[d + 12], 20, -1926607734), n = md5hh(n, a, c, o, t[d + 5], 4, -378558), o = md5hh(o, n, a, c, t[d + 8], 11, -2022574463), c = md5hh(c, o, n, a, t[d + 11], 16, 1839030562), a = md5hh(a, c, o, n, t[d + 14], 23, -35309556), n = md5hh(n, a, c, o, t[d + 1], 4, -1530992060), o = md5hh(o, n, a, c, t[d + 4], 11, 1272893353), c = md5hh(c, o, n, a, t[d + 7], 16, -155497632), a = md5hh(a, c, o, n, t[d + 10], 23, -1094730640), n = md5hh(n, a, c, o, t[d + 13], 4, 681279174), o = md5hh(o, n, a, c, t[d], 11, -358537222), c = md5hh(c, o, n, a, t[d + 3], 16, -722521979), a = md5hh(a, c, o, n, t[d + 6], 23, 76029189), n = md5hh(n, a, c, o, t[d + 9], 4, -640364487), o = md5hh(o, n, a, c, t[d + 12], 11, -421815835), c = md5hh(c, o, n, a, t[d + 15], 16, 530742520), a = md5hh(a, c, o, n, t[d + 2], 23, -995338651), n = md5ii(n, a, c, o, t[d], 6, -198630844), o = md5ii(o, n, a, c, t[d + 7], 10, 1126891415), c = md5ii(c, o, n, a, t[d + 14], 15, -1416354905), a = md5ii(a, c, o, n, t[d + 5], 21, -57434055), n = md5ii(n, a, c, o, t[d + 12], 6, 1700485571), o = md5ii(o, n, a, c, t[d + 3], 10, -1894986606), c = md5ii(c, o, n, a, t[d + 10], 15, -1051523), a = md5ii(a, c, o, n, t[d + 1], 21, -2054922799), n = md5ii(n, a, c, o, t[d + 8], 6, 1873313359), o = md5ii(o, n, a, c, t[d + 15], 10, -30611744), c = md5ii(c, o, n, a, t[d + 6], 15, -1560198380), a = md5ii(a, c, o, n, t[d + 13], 21, 1309151649), n = md5ii(n, a, c, o, t[d + 4], 6, -145523070), o = md5ii(o, n, a, c, t[d + 11], 10, -1120210379), c = md5ii(c, o, n, a, t[d + 2], 15, 718787259), a = md5ii(a, c, o, n, t[d + 9], 21, -343485551), n = safeAdd(n, m), a = safeAdd(a, w), c = safeAdd(c, S), o = safeAdd(o, A);
  }
  return [n, a, c, o];
}
function bytesToWords(t) {
  if (t.length === 0)
    return [];
  for (var e = t.length * 8, n = new Uint32Array(getOutputLength(e)), a = 0; a < e; a += 8)
    n[a >> 5] |= (t[a / 8] & 255) << a % 32;
  return n;
}
function safeAdd(t, e) {
  var n = (t & 65535) + (e & 65535), a = (t >> 16) + (e >> 16) + (n >> 16);
  return a << 16 | n & 65535;
}
function bitRotateLeft(t, e) {
  return t << e | t >>> 32 - e;
}
function md5cmn(t, e, n, a, c, o) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(e, t), safeAdd(a, o)), c), n);
}
function md5ff(t, e, n, a, c, o, d) {
  return md5cmn(e & n | ~e & a, t, e, c, o, d);
}
function md5gg(t, e, n, a, c, o, d) {
  return md5cmn(e & a | n & ~a, t, e, c, o, d);
}
function md5hh(t, e, n, a, c, o, d) {
  return md5cmn(e ^ n ^ a, t, e, c, o, d);
}
function md5ii(t, e, n, a, c, o, d) {
  return md5cmn(n ^ (e | ~a), t, e, c, o, d);
}
var v3 = v35("v3", 48, md5);
const v3$1 = v3;
function v4$1(t, e, n) {
  t = t || {};
  var a = t.random || (t.rng || rng$1)();
  if (a[6] = a[6] & 15 | 64, a[8] = a[8] & 63 | 128, e) {
    n = n || 0;
    for (var c = 0; c < 16; ++c)
      e[n + c] = a[c];
    return e;
  }
  return stringify$1(a);
}
function f(t, e, n, a) {
  switch (t) {
    case 0:
      return e & n ^ ~e & a;
    case 1:
      return e ^ n ^ a;
    case 2:
      return e & n ^ e & a ^ n & a;
    case 3:
      return e ^ n ^ a;
  }
}
function ROTL(t, e) {
  return t << e | t >>> 32 - e;
}
function sha1(t) {
  var e = [1518500249, 1859775393, 2400959708, 3395469782], n = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof t == "string") {
    var a = unescape(encodeURIComponent(t));
    t = [];
    for (var c = 0; c < a.length; ++c)
      t.push(a.charCodeAt(c));
  } else
    Array.isArray(t) || (t = Array.prototype.slice.call(t));
  t.push(128);
  for (var o = t.length / 4 + 2, d = Math.ceil(o / 16), m = new Array(d), w = 0; w < d; ++w) {
    for (var S = new Uint32Array(16), A = 0; A < 16; ++A)
      S[A] = t[w * 64 + A * 4] << 24 | t[w * 64 + A * 4 + 1] << 16 | t[w * 64 + A * 4 + 2] << 8 | t[w * 64 + A * 4 + 3];
    m[w] = S;
  }
  m[d - 1][14] = (t.length - 1) * 8 / Math.pow(2, 32), m[d - 1][14] = Math.floor(m[d - 1][14]), m[d - 1][15] = (t.length - 1) * 8 & 4294967295;
  for (var B = 0; B < d; ++B) {
    for (var P = new Uint32Array(80), I = 0; I < 16; ++I)
      P[I] = m[B][I];
    for (var O = 16; O < 80; ++O)
      P[O] = ROTL(P[O - 3] ^ P[O - 8] ^ P[O - 14] ^ P[O - 16], 1);
    for (var L = n[0], C = n[1], z = n[2], q = n[3], Z = n[4], X = 0; X < 80; ++X) {
      var ie = Math.floor(X / 20), fe = ROTL(L, 5) + f(ie, C, z, q) + Z + e[ie] + P[X] >>> 0;
      Z = q, q = z, z = ROTL(C, 30) >>> 0, C = L, L = fe;
    }
    n[0] = n[0] + L >>> 0, n[1] = n[1] + C >>> 0, n[2] = n[2] + z >>> 0, n[3] = n[3] + q >>> 0, n[4] = n[4] + Z >>> 0;
  }
  return [n[0] >> 24 & 255, n[0] >> 16 & 255, n[0] >> 8 & 255, n[0] & 255, n[1] >> 24 & 255, n[1] >> 16 & 255, n[1] >> 8 & 255, n[1] & 255, n[2] >> 24 & 255, n[2] >> 16 & 255, n[2] >> 8 & 255, n[2] & 255, n[3] >> 24 & 255, n[3] >> 16 & 255, n[3] >> 8 & 255, n[3] & 255, n[4] >> 24 & 255, n[4] >> 16 & 255, n[4] >> 8 & 255, n[4] & 255];
}
var v5 = v35("v5", 80, sha1);
const v5$1 = v5, nil = "00000000-0000-0000-0000-000000000000";
function version$2(t) {
  if (!validate(t))
    throw TypeError("Invalid UUID");
  return parseInt(t.substr(14, 1), 16);
}
const esmBrowser = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  NIL: nil,
  parse,
  stringify: stringify$1,
  v1,
  v3: v3$1,
  v4: v4$1,
  v5: v5$1,
  validate,
  version: version$2
}, Symbol.toStringTag, { value: "Module" })), require$$0 = /* @__PURE__ */ getAugmentedNamespace(esmBrowser), uuid$1 = require$$0.v4, generateRequest$1 = function(t, e, n, a) {
  if (typeof t != "string")
    throw new TypeError(t + " must be a string");
  a = a || {};
  const c = typeof a.version == "number" ? a.version : 2;
  if (c !== 1 && c !== 2)
    throw new TypeError(c + " must be 1 or 2");
  const o = {
    method: t
  };
  if (c === 2 && (o.jsonrpc = "2.0"), e) {
    if (typeof e != "object" && !Array.isArray(e))
      throw new TypeError(e + " must be an object, array or omitted");
    o.params = e;
  }
  if (typeof n > "u") {
    const d = typeof a.generator == "function" ? a.generator : function() {
      return uuid$1();
    };
    o.id = d(o, a);
  } else
    c === 2 && n === null ? a.notificationIdNull && (o.id = null) : o.id = n;
  return o;
};
var generateRequest_1 = generateRequest$1;
const uuid = require$$0.v4, generateRequest = generateRequest_1, ClientBrowser = function(t, e) {
  if (!(this instanceof ClientBrowser))
    return new ClientBrowser(t, e);
  e || (e = {}), this.options = {
    reviver: typeof e.reviver < "u" ? e.reviver : null,
    replacer: typeof e.replacer < "u" ? e.replacer : null,
    generator: typeof e.generator < "u" ? e.generator : function() {
      return uuid();
    },
    version: typeof e.version < "u" ? e.version : 2,
    notificationIdNull: typeof e.notificationIdNull == "boolean" ? e.notificationIdNull : !1
  }, this.callServer = t;
};
var browser$1 = ClientBrowser;
ClientBrowser.prototype.request = function(t, e, n, a) {
  const c = this;
  let o = null;
  const d = Array.isArray(t) && typeof e == "function";
  if (this.options.version === 1 && d)
    throw new TypeError("JSON-RPC 1.0 does not support batching");
  if (d || !d && t && typeof t == "object" && typeof e == "function")
    a = e, o = t;
  else {
    typeof n == "function" && (a = n, n = void 0);
    const S = typeof a == "function";
    try {
      o = generateRequest(t, e, n, {
        generator: this.options.generator,
        version: this.options.version,
        notificationIdNull: this.options.notificationIdNull
      });
    } catch (A) {
      if (S)
        return a(A);
      throw A;
    }
    if (!S)
      return o;
  }
  let w;
  try {
    w = JSON.stringify(o, this.options.replacer);
  } catch (S) {
    return a(S);
  }
  return this.callServer(w, function(S, A) {
    c._parseResponse(S, A, a);
  }), o;
};
ClientBrowser.prototype._parseResponse = function(t, e, n) {
  if (t) {
    n(t);
    return;
  }
  if (!e)
    return n();
  let a;
  try {
    a = JSON.parse(e, this.options.reviver);
  } catch (c) {
    return n(c);
  }
  if (n.length === 3)
    if (Array.isArray(a)) {
      const c = function(d) {
        return typeof d.error < "u";
      }, o = function(d) {
        return !c(d);
      };
      return n(null, a.filter(c), a.filter(o));
    } else
      return n(null, a.error, a.result);
  n(null, a);
};
const RpcClient = /* @__PURE__ */ getDefaultExportFromCjs$2(browser$1);
var client = {}, interopRequireDefault = { exports: {} };
(function(t) {
  function e(n) {
    return n && n.__esModule ? n : {
      default: n
    };
  }
  t.exports = e, t.exports.__esModule = !0, t.exports.default = t.exports;
})(interopRequireDefault);
var interopRequireDefaultExports = interopRequireDefault.exports, regeneratorRuntime$1 = { exports: {} }, _typeof = { exports: {} }, hasRequired_typeof;
function require_typeof() {
  return hasRequired_typeof || (hasRequired_typeof = 1, function(t) {
    function e(n) {
      "@babel/helpers - typeof";
      return t.exports = e = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(a) {
        return typeof a;
      } : function(a) {
        return a && typeof Symbol == "function" && a.constructor === Symbol && a !== Symbol.prototype ? "symbol" : typeof a;
      }, t.exports.__esModule = !0, t.exports.default = t.exports, e(n);
    }
    t.exports = e, t.exports.__esModule = !0, t.exports.default = t.exports;
  }(_typeof)), _typeof.exports;
}
var hasRequiredRegeneratorRuntime;
function requireRegeneratorRuntime() {
  return hasRequiredRegeneratorRuntime || (hasRequiredRegeneratorRuntime = 1, function(t) {
    var e = require_typeof().default;
    function n() {
      t.exports = n = function() {
        return c;
      }, t.exports.__esModule = !0, t.exports.default = t.exports;
      var a, c = {}, o = Object.prototype, d = o.hasOwnProperty, m = Object.defineProperty || function(x, l, b) {
        x[l] = b.value;
      }, w = typeof Symbol == "function" ? Symbol : {}, S = w.iterator || "@@iterator", A = w.asyncIterator || "@@asyncIterator", B = w.toStringTag || "@@toStringTag";
      function P(x, l, b) {
        return Object.defineProperty(x, l, {
          value: b,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), x[l];
      }
      try {
        P({}, "");
      } catch {
        P = function(b, M, k) {
          return b[M] = k;
        };
      }
      function I(x, l, b, M) {
        var k = l && l.prototype instanceof X ? l : X, U = Object.create(k.prototype), T = new $(M || []);
        return m(U, "_invoke", {
          value: h(x, b, T)
        }), U;
      }
      function O(x, l, b) {
        try {
          return {
            type: "normal",
            arg: x.call(l, b)
          };
        } catch (M) {
          return {
            type: "throw",
            arg: M
          };
        }
      }
      c.wrap = I;
      var L = "suspendedStart", C = "suspendedYield", z = "executing", q = "completed", Z = {};
      function X() {
      }
      function ie() {
      }
      function fe() {
      }
      var ye = {};
      P(ye, S, function() {
        return this;
      });
      var j = Object.getPrototypeOf, V = j && j(j(E([])));
      V && V !== o && d.call(V, S) && (ye = V);
      var ae = fe.prototype = X.prototype = Object.create(ye);
      function _(x) {
        ["next", "throw", "return"].forEach(function(l) {
          P(x, l, function(b) {
            return this._invoke(l, b);
          });
        });
      }
      function u(x, l) {
        function b(k, U, T, H) {
          var Y = O(x[k], x, U);
          if (Y.type !== "throw") {
            var le = Y.arg, ce = le.value;
            return ce && e(ce) == "object" && d.call(ce, "__await") ? l.resolve(ce.__await).then(function(de) {
              b("next", de, T, H);
            }, function(de) {
              b("throw", de, T, H);
            }) : l.resolve(ce).then(function(de) {
              le.value = de, T(le);
            }, function(de) {
              return b("throw", de, T, H);
            });
          }
          H(Y.arg);
        }
        var M;
        m(this, "_invoke", {
          value: function(U, T) {
            function H() {
              return new l(function(Y, le) {
                b(U, T, Y, le);
              });
            }
            return M = M ? M.then(H, H) : H();
          }
        });
      }
      function h(x, l, b) {
        var M = L;
        return function(k, U) {
          if (M === z)
            throw new Error("Generator is already running");
          if (M === q) {
            if (k === "throw")
              throw U;
            return {
              value: a,
              done: !0
            };
          }
          for (b.method = k, b.arg = U; ; ) {
            var T = b.delegate;
            if (T) {
              var H = p(T, b);
              if (H) {
                if (H === Z)
                  continue;
                return H;
              }
            }
            if (b.method === "next")
              b.sent = b._sent = b.arg;
            else if (b.method === "throw") {
              if (M === L)
                throw M = q, b.arg;
              b.dispatchException(b.arg);
            } else
              b.method === "return" && b.abrupt("return", b.arg);
            M = z;
            var Y = O(x, l, b);
            if (Y.type === "normal") {
              if (M = b.done ? q : C, Y.arg === Z)
                continue;
              return {
                value: Y.arg,
                done: b.done
              };
            }
            Y.type === "throw" && (M = q, b.method = "throw", b.arg = Y.arg);
          }
        };
      }
      function p(x, l) {
        var b = l.method, M = x.iterator[b];
        if (M === a)
          return l.delegate = null, b === "throw" && x.iterator.return && (l.method = "return", l.arg = a, p(x, l), l.method === "throw") || b !== "return" && (l.method = "throw", l.arg = new TypeError("The iterator does not provide a '" + b + "' method")), Z;
        var k = O(M, x.iterator, l.arg);
        if (k.type === "throw")
          return l.method = "throw", l.arg = k.arg, l.delegate = null, Z;
        var U = k.arg;
        return U ? U.done ? (l[x.resultName] = U.value, l.next = x.nextLoc, l.method !== "return" && (l.method = "next", l.arg = a), l.delegate = null, Z) : U : (l.method = "throw", l.arg = new TypeError("iterator result is not an object"), l.delegate = null, Z);
      }
      function y(x) {
        var l = {
          tryLoc: x[0]
        };
        1 in x && (l.catchLoc = x[1]), 2 in x && (l.finallyLoc = x[2], l.afterLoc = x[3]), this.tryEntries.push(l);
      }
      function v(x) {
        var l = x.completion || {};
        l.type = "normal", delete l.arg, x.completion = l;
      }
      function $(x) {
        this.tryEntries = [{
          tryLoc: "root"
        }], x.forEach(y, this), this.reset(!0);
      }
      function E(x) {
        if (x || x === "") {
          var l = x[S];
          if (l)
            return l.call(x);
          if (typeof x.next == "function")
            return x;
          if (!isNaN(x.length)) {
            var b = -1, M = function k() {
              for (; ++b < x.length; )
                if (d.call(x, b))
                  return k.value = x[b], k.done = !1, k;
              return k.value = a, k.done = !0, k;
            };
            return M.next = M;
          }
        }
        throw new TypeError(e(x) + " is not iterable");
      }
      return ie.prototype = fe, m(ae, "constructor", {
        value: fe,
        configurable: !0
      }), m(fe, "constructor", {
        value: ie,
        configurable: !0
      }), ie.displayName = P(fe, B, "GeneratorFunction"), c.isGeneratorFunction = function(x) {
        var l = typeof x == "function" && x.constructor;
        return !!l && (l === ie || (l.displayName || l.name) === "GeneratorFunction");
      }, c.mark = function(x) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(x, fe) : (x.__proto__ = fe, P(x, B, "GeneratorFunction")), x.prototype = Object.create(ae), x;
      }, c.awrap = function(x) {
        return {
          __await: x
        };
      }, _(u.prototype), P(u.prototype, A, function() {
        return this;
      }), c.AsyncIterator = u, c.async = function(x, l, b, M, k) {
        k === void 0 && (k = Promise);
        var U = new u(I(x, l, b, M), k);
        return c.isGeneratorFunction(l) ? U : U.next().then(function(T) {
          return T.done ? T.value : U.next();
        });
      }, _(ae), P(ae, B, "Generator"), P(ae, S, function() {
        return this;
      }), P(ae, "toString", function() {
        return "[object Generator]";
      }), c.keys = function(x) {
        var l = Object(x), b = [];
        for (var M in l)
          b.push(M);
        return b.reverse(), function k() {
          for (; b.length; ) {
            var U = b.pop();
            if (U in l)
              return k.value = U, k.done = !1, k;
          }
          return k.done = !0, k;
        };
      }, c.values = E, $.prototype = {
        constructor: $,
        reset: function(l) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = a, this.done = !1, this.delegate = null, this.method = "next", this.arg = a, this.tryEntries.forEach(v), !l)
            for (var b in this)
              b.charAt(0) === "t" && d.call(this, b) && !isNaN(+b.slice(1)) && (this[b] = a);
        },
        stop: function() {
          this.done = !0;
          var l = this.tryEntries[0].completion;
          if (l.type === "throw")
            throw l.arg;
          return this.rval;
        },
        dispatchException: function(l) {
          if (this.done)
            throw l;
          var b = this;
          function M(le, ce) {
            return T.type = "throw", T.arg = l, b.next = le, ce && (b.method = "next", b.arg = a), !!ce;
          }
          for (var k = this.tryEntries.length - 1; k >= 0; --k) {
            var U = this.tryEntries[k], T = U.completion;
            if (U.tryLoc === "root")
              return M("end");
            if (U.tryLoc <= this.prev) {
              var H = d.call(U, "catchLoc"), Y = d.call(U, "finallyLoc");
              if (H && Y) {
                if (this.prev < U.catchLoc)
                  return M(U.catchLoc, !0);
                if (this.prev < U.finallyLoc)
                  return M(U.finallyLoc);
              } else if (H) {
                if (this.prev < U.catchLoc)
                  return M(U.catchLoc, !0);
              } else {
                if (!Y)
                  throw new Error("try statement without catch or finally");
                if (this.prev < U.finallyLoc)
                  return M(U.finallyLoc);
              }
            }
          }
        },
        abrupt: function(l, b) {
          for (var M = this.tryEntries.length - 1; M >= 0; --M) {
            var k = this.tryEntries[M];
            if (k.tryLoc <= this.prev && d.call(k, "finallyLoc") && this.prev < k.finallyLoc) {
              var U = k;
              break;
            }
          }
          U && (l === "break" || l === "continue") && U.tryLoc <= b && b <= U.finallyLoc && (U = null);
          var T = U ? U.completion : {};
          return T.type = l, T.arg = b, U ? (this.method = "next", this.next = U.finallyLoc, Z) : this.complete(T);
        },
        complete: function(l, b) {
          if (l.type === "throw")
            throw l.arg;
          return l.type === "break" || l.type === "continue" ? this.next = l.arg : l.type === "return" ? (this.rval = this.arg = l.arg, this.method = "return", this.next = "end") : l.type === "normal" && b && (this.next = b), Z;
        },
        finish: function(l) {
          for (var b = this.tryEntries.length - 1; b >= 0; --b) {
            var M = this.tryEntries[b];
            if (M.finallyLoc === l)
              return this.complete(M.completion, M.afterLoc), v(M), Z;
          }
        },
        catch: function(l) {
          for (var b = this.tryEntries.length - 1; b >= 0; --b) {
            var M = this.tryEntries[b];
            if (M.tryLoc === l) {
              var k = M.completion;
              if (k.type === "throw") {
                var U = k.arg;
                v(M);
              }
              return U;
            }
          }
          throw new Error("illegal catch attempt");
        },
        delegateYield: function(l, b, M) {
          return this.delegate = {
            iterator: E(l),
            resultName: b,
            nextLoc: M
          }, this.method === "next" && (this.arg = a), Z;
        }
      }, c;
    }
    t.exports = n, t.exports.__esModule = !0, t.exports.default = t.exports;
  }(regeneratorRuntime$1)), regeneratorRuntime$1.exports;
}
var regenerator, hasRequiredRegenerator;
function requireRegenerator() {
  if (hasRequiredRegenerator)
    return regenerator;
  hasRequiredRegenerator = 1;
  var t = requireRegeneratorRuntime()();
  regenerator = t;
  try {
    regeneratorRuntime = t;
  } catch {
    typeof globalThis == "object" ? globalThis.regeneratorRuntime = t : Function("r", "regeneratorRuntime = r")(t);
  }
  return regenerator;
}
var asyncToGenerator = { exports: {} }, hasRequiredAsyncToGenerator;
function requireAsyncToGenerator() {
  return hasRequiredAsyncToGenerator || (hasRequiredAsyncToGenerator = 1, function(t) {
    function e(a, c, o, d, m, w, S) {
      try {
        var A = a[w](S), B = A.value;
      } catch (P) {
        o(P);
        return;
      }
      A.done ? c(B) : Promise.resolve(B).then(d, m);
    }
    function n(a) {
      return function() {
        var c = this, o = arguments;
        return new Promise(function(d, m) {
          var w = a.apply(c, o);
          function S(B) {
            e(w, d, m, S, A, "next", B);
          }
          function A(B) {
            e(w, d, m, S, A, "throw", B);
          }
          S(void 0);
        });
      };
    }
    t.exports = n, t.exports.__esModule = !0, t.exports.default = t.exports;
  }(asyncToGenerator)), asyncToGenerator.exports;
}
var classCallCheck = { exports: {} }, hasRequiredClassCallCheck;
function requireClassCallCheck() {
  return hasRequiredClassCallCheck || (hasRequiredClassCallCheck = 1, function(t) {
    function e(n, a) {
      if (!(n instanceof a))
        throw new TypeError("Cannot call a class as a function");
    }
    t.exports = e, t.exports.__esModule = !0, t.exports.default = t.exports;
  }(classCallCheck)), classCallCheck.exports;
}
var createClass = { exports: {} }, toPropertyKey = { exports: {} }, toPrimitive = { exports: {} }, hasRequiredToPrimitive;
function requireToPrimitive() {
  return hasRequiredToPrimitive || (hasRequiredToPrimitive = 1, function(t) {
    var e = require_typeof().default;
    function n(a, c) {
      if (e(a) != "object" || !a)
        return a;
      var o = a[Symbol.toPrimitive];
      if (o !== void 0) {
        var d = o.call(a, c || "default");
        if (e(d) != "object")
          return d;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (c === "string" ? String : Number)(a);
    }
    t.exports = n, t.exports.__esModule = !0, t.exports.default = t.exports;
  }(toPrimitive)), toPrimitive.exports;
}
var hasRequiredToPropertyKey;
function requireToPropertyKey() {
  return hasRequiredToPropertyKey || (hasRequiredToPropertyKey = 1, function(t) {
    var e = require_typeof().default, n = requireToPrimitive();
    function a(c) {
      var o = n(c, "string");
      return e(o) == "symbol" ? o : String(o);
    }
    t.exports = a, t.exports.__esModule = !0, t.exports.default = t.exports;
  }(toPropertyKey)), toPropertyKey.exports;
}
var hasRequiredCreateClass;
function requireCreateClass() {
  return hasRequiredCreateClass || (hasRequiredCreateClass = 1, function(t) {
    var e = requireToPropertyKey();
    function n(c, o) {
      for (var d = 0; d < o.length; d++) {
        var m = o[d];
        m.enumerable = m.enumerable || !1, m.configurable = !0, "value" in m && (m.writable = !0), Object.defineProperty(c, e(m.key), m);
      }
    }
    function a(c, o, d) {
      return o && n(c.prototype, o), d && n(c, d), Object.defineProperty(c, "prototype", {
        writable: !1
      }), c;
    }
    t.exports = a, t.exports.__esModule = !0, t.exports.default = t.exports;
  }(createClass)), createClass.exports;
}
var inherits$1 = { exports: {} }, setPrototypeOf = { exports: {} }, hasRequiredSetPrototypeOf;
function requireSetPrototypeOf() {
  return hasRequiredSetPrototypeOf || (hasRequiredSetPrototypeOf = 1, function(t) {
    function e(n, a) {
      return t.exports = e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(o, d) {
        return o.__proto__ = d, o;
      }, t.exports.__esModule = !0, t.exports.default = t.exports, e(n, a);
    }
    t.exports = e, t.exports.__esModule = !0, t.exports.default = t.exports;
  }(setPrototypeOf)), setPrototypeOf.exports;
}
var hasRequiredInherits;
function requireInherits() {
  return hasRequiredInherits || (hasRequiredInherits = 1, function(t) {
    var e = requireSetPrototypeOf();
    function n(a, c) {
      if (typeof c != "function" && c !== null)
        throw new TypeError("Super expression must either be null or a function");
      a.prototype = Object.create(c && c.prototype, {
        constructor: {
          value: a,
          writable: !0,
          configurable: !0
        }
      }), Object.defineProperty(a, "prototype", {
        writable: !1
      }), c && e(a, c);
    }
    t.exports = n, t.exports.__esModule = !0, t.exports.default = t.exports;
  }(inherits$1)), inherits$1.exports;
}
var possibleConstructorReturn = { exports: {} }, assertThisInitialized = { exports: {} }, hasRequiredAssertThisInitialized;
function requireAssertThisInitialized() {
  return hasRequiredAssertThisInitialized || (hasRequiredAssertThisInitialized = 1, function(t) {
    function e(n) {
      if (n === void 0)
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return n;
    }
    t.exports = e, t.exports.__esModule = !0, t.exports.default = t.exports;
  }(assertThisInitialized)), assertThisInitialized.exports;
}
var hasRequiredPossibleConstructorReturn;
function requirePossibleConstructorReturn() {
  return hasRequiredPossibleConstructorReturn || (hasRequiredPossibleConstructorReturn = 1, function(t) {
    var e = require_typeof().default, n = requireAssertThisInitialized();
    function a(c, o) {
      if (o && (e(o) === "object" || typeof o == "function"))
        return o;
      if (o !== void 0)
        throw new TypeError("Derived constructors may only return object or undefined");
      return n(c);
    }
    t.exports = a, t.exports.__esModule = !0, t.exports.default = t.exports;
  }(possibleConstructorReturn)), possibleConstructorReturn.exports;
}
var getPrototypeOf = { exports: {} }, hasRequiredGetPrototypeOf;
function requireGetPrototypeOf() {
  return hasRequiredGetPrototypeOf || (hasRequiredGetPrototypeOf = 1, function(t) {
    function e(n) {
      return t.exports = e = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(c) {
        return c.__proto__ || Object.getPrototypeOf(c);
      }, t.exports.__esModule = !0, t.exports.default = t.exports, e(n);
    }
    t.exports = e, t.exports.__esModule = !0, t.exports.default = t.exports;
  }(getPrototypeOf)), getPrototypeOf.exports;
}
var eventemitter3$1 = { exports: {} }, hasRequiredEventemitter3;
function requireEventemitter3() {
  return hasRequiredEventemitter3 || (hasRequiredEventemitter3 = 1, function(t) {
    var e = Object.prototype.hasOwnProperty, n = "~";
    function a() {
    }
    Object.create && (a.prototype = /* @__PURE__ */ Object.create(null), new a().__proto__ || (n = !1));
    function c(w, S, A) {
      this.fn = w, this.context = S, this.once = A || !1;
    }
    function o(w, S, A, B, P) {
      if (typeof A != "function")
        throw new TypeError("The listener must be a function");
      var I = new c(A, B || w, P), O = n ? n + S : S;
      return w._events[O] ? w._events[O].fn ? w._events[O] = [w._events[O], I] : w._events[O].push(I) : (w._events[O] = I, w._eventsCount++), w;
    }
    function d(w, S) {
      --w._eventsCount === 0 ? w._events = new a() : delete w._events[S];
    }
    function m() {
      this._events = new a(), this._eventsCount = 0;
    }
    m.prototype.eventNames = function() {
      var S = [], A, B;
      if (this._eventsCount === 0)
        return S;
      for (B in A = this._events)
        e.call(A, B) && S.push(n ? B.slice(1) : B);
      return Object.getOwnPropertySymbols ? S.concat(Object.getOwnPropertySymbols(A)) : S;
    }, m.prototype.listeners = function(S) {
      var A = n ? n + S : S, B = this._events[A];
      if (!B)
        return [];
      if (B.fn)
        return [B.fn];
      for (var P = 0, I = B.length, O = new Array(I); P < I; P++)
        O[P] = B[P].fn;
      return O;
    }, m.prototype.listenerCount = function(S) {
      var A = n ? n + S : S, B = this._events[A];
      return B ? B.fn ? 1 : B.length : 0;
    }, m.prototype.emit = function(S, A, B, P, I, O) {
      var L = n ? n + S : S;
      if (!this._events[L])
        return !1;
      var C = this._events[L], z = arguments.length, q, Z;
      if (C.fn) {
        switch (C.once && this.removeListener(S, C.fn, void 0, !0), z) {
          case 1:
            return C.fn.call(C.context), !0;
          case 2:
            return C.fn.call(C.context, A), !0;
          case 3:
            return C.fn.call(C.context, A, B), !0;
          case 4:
            return C.fn.call(C.context, A, B, P), !0;
          case 5:
            return C.fn.call(C.context, A, B, P, I), !0;
          case 6:
            return C.fn.call(C.context, A, B, P, I, O), !0;
        }
        for (Z = 1, q = new Array(z - 1); Z < z; Z++)
          q[Z - 1] = arguments[Z];
        C.fn.apply(C.context, q);
      } else {
        var X = C.length, ie;
        for (Z = 0; Z < X; Z++)
          switch (C[Z].once && this.removeListener(S, C[Z].fn, void 0, !0), z) {
            case 1:
              C[Z].fn.call(C[Z].context);
              break;
            case 2:
              C[Z].fn.call(C[Z].context, A);
              break;
            case 3:
              C[Z].fn.call(C[Z].context, A, B);
              break;
            case 4:
              C[Z].fn.call(C[Z].context, A, B, P);
              break;
            default:
              if (!q)
                for (ie = 1, q = new Array(z - 1); ie < z; ie++)
                  q[ie - 1] = arguments[ie];
              C[Z].fn.apply(C[Z].context, q);
          }
      }
      return !0;
    }, m.prototype.on = function(S, A, B) {
      return o(this, S, A, B, !1);
    }, m.prototype.once = function(S, A, B) {
      return o(this, S, A, B, !0);
    }, m.prototype.removeListener = function(S, A, B, P) {
      var I = n ? n + S : S;
      if (!this._events[I])
        return this;
      if (!A)
        return d(this, I), this;
      var O = this._events[I];
      if (O.fn)
        O.fn === A && (!P || O.once) && (!B || O.context === B) && d(this, I);
      else {
        for (var L = 0, C = [], z = O.length; L < z; L++)
          (O[L].fn !== A || P && !O[L].once || B && O[L].context !== B) && C.push(O[L]);
        C.length ? this._events[I] = C.length === 1 ? C[0] : C : d(this, I);
      }
      return this;
    }, m.prototype.removeAllListeners = function(S) {
      var A;
      return S ? (A = n ? n + S : S, this._events[A] && d(this, A)) : (this._events = new a(), this._eventsCount = 0), this;
    }, m.prototype.off = m.prototype.removeListener, m.prototype.addListener = m.prototype.on, m.prefixed = n, m.EventEmitter = m, t.exports = m;
  }(eventemitter3$1)), eventemitter3$1.exports;
}
var utils$d = {}, hasRequiredUtils;
function requireUtils() {
  if (hasRequiredUtils)
    return utils$d;
  hasRequiredUtils = 1;
  var t = interopRequireDefaultExports;
  Object.defineProperty(utils$d, "__esModule", {
    value: !0
  }), utils$d.DefaultDataPack = void 0, utils$d.createError = o;
  var e = t(requireClassCallCheck()), n = t(requireCreateClass()), a = /* @__PURE__ */ new Map([[-32e3, "Event not provided"], [-32600, "Invalid Request"], [-32601, "Method not found"], [-32602, "Invalid params"], [-32603, "Internal error"], [-32604, "Params not found"], [-32605, "Method forbidden"], [-32606, "Event forbidden"], [-32700, "Parse error"]]), c = /* @__PURE__ */ function() {
    function d() {
      (0, e.default)(this, d);
    }
    return (0, n.default)(d, [{
      key: "encode",
      value: function(w) {
        return JSON.stringify(w);
      }
    }, {
      key: "decode",
      value: function(w) {
        return JSON.parse(w);
      }
    }]), d;
  }();
  utils$d.DefaultDataPack = c;
  function o(d, m) {
    var w = {
      code: d,
      message: a.get(d) || "Internal Server Error"
    };
    return m && (w.data = m), w;
  }
  return utils$d;
}
(function(t) {
  var e = interopRequireDefaultExports;
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = void 0;
  var n = e(requireRegenerator()), a = e(requireAsyncToGenerator()), c = e(require_typeof()), o = e(requireClassCallCheck()), d = e(requireCreateClass()), m = e(requireInherits()), w = e(requirePossibleConstructorReturn()), S = e(requireGetPrototypeOf()), A = requireEventemitter3(), B = requireUtils();
  function P(C) {
    var z = I();
    return function() {
      var Z = (0, S.default)(C), X;
      if (z) {
        var ie = (0, S.default)(this).constructor;
        X = Reflect.construct(Z, arguments, ie);
      } else
        X = Z.apply(this, arguments);
      return (0, w.default)(this, X);
    };
  }
  function I() {
    if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
      return !1;
    if (typeof Proxy == "function")
      return !0;
    try {
      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      })), !0;
    } catch {
      return !1;
    }
  }
  var O = function(C, z) {
    var q = {};
    for (var Z in C)
      Object.prototype.hasOwnProperty.call(C, Z) && z.indexOf(Z) < 0 && (q[Z] = C[Z]);
    if (C != null && typeof Object.getOwnPropertySymbols == "function")
      for (var X = 0, Z = Object.getOwnPropertySymbols(C); X < Z.length; X++)
        z.indexOf(Z[X]) < 0 && Object.prototype.propertyIsEnumerable.call(C, Z[X]) && (q[Z[X]] = C[Z[X]]);
    return q;
  }, L = /* @__PURE__ */ function(C) {
    (0, m.default)(q, C);
    var z = P(q);
    function q(Z) {
      var X, ie = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "ws://localhost:8080", fe = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, ye = arguments.length > 3 ? arguments[3] : void 0, j = arguments.length > 4 ? arguments[4] : void 0;
      (0, o.default)(this, q);
      var V = fe.autoconnect, ae = V === void 0 ? !0 : V, _ = fe.reconnect, u = _ === void 0 ? !0 : _, h = fe.reconnect_interval, p = h === void 0 ? 1e3 : h, y = fe.max_reconnects, v = y === void 0 ? 5 : y, $ = O(fe, ["autoconnect", "reconnect", "reconnect_interval", "max_reconnects"]);
      return X = z.call(this), X.webSocketFactory = Z, X.queue = {}, X.rpc_id = 0, X.address = ie, X.autoconnect = ae, X.ready = !1, X.reconnect = u, X.reconnect_timer_id = void 0, X.reconnect_interval = p, X.max_reconnects = v, X.rest_options = $, X.current_reconnects = 0, X.generate_request_id = ye || function() {
        return ++X.rpc_id;
      }, j ? X.dataPack = j : X.dataPack = new B.DefaultDataPack(), X.autoconnect && X._connect(X.address, Object.assign({
        autoconnect: X.autoconnect,
        reconnect: X.reconnect,
        reconnect_interval: X.reconnect_interval,
        max_reconnects: X.max_reconnects
      }, X.rest_options)), X;
    }
    return (0, d.default)(q, [{
      key: "connect",
      value: function() {
        this.socket || this._connect(this.address, Object.assign({
          autoconnect: this.autoconnect,
          reconnect: this.reconnect,
          reconnect_interval: this.reconnect_interval,
          max_reconnects: this.max_reconnects
        }, this.rest_options));
      }
      /**
       * Calls a registered RPC method on server.
       * @method
       * @param {String} method - RPC method name
       * @param {Object|Array} params - optional method parameters
       * @param {Number} timeout - RPC reply timeout value
       * @param {Object} ws_opts - options passed to ws
       * @return {Promise}
       */
    }, {
      key: "call",
      value: function(X, ie, fe, ye) {
        var j = this;
        return !ye && (0, c.default)(fe) === "object" && (ye = fe, fe = null), new Promise(function(V, ae) {
          if (!j.ready)
            return ae(new Error("socket not ready"));
          var _ = j.generate_request_id(X, ie), u = {
            jsonrpc: "2.0",
            method: X,
            params: ie || void 0,
            id: _
          };
          j.socket.send(j.dataPack.encode(u), ye, function(h) {
            if (h)
              return ae(h);
            j.queue[_] = {
              promise: [V, ae]
            }, fe && (j.queue[_].timeout = setTimeout(function() {
              delete j.queue[_], ae(new Error("reply timeout"));
            }, fe));
          });
        });
      }
      /**
       * Logins with the other side of the connection.
       * @method
       * @param {Object} params - Login credentials object
       * @return {Promise}
       */
    }, {
      key: "login",
      value: function() {
        var Z = (0, a.default)(/* @__PURE__ */ n.default.mark(function ie(fe) {
          var ye;
          return n.default.wrap(function(V) {
            for (; ; )
              switch (V.prev = V.next) {
                case 0:
                  return V.next = 2, this.call("rpc.login", fe);
                case 2:
                  if (ye = V.sent, ye) {
                    V.next = 5;
                    break;
                  }
                  throw new Error("authentication failed");
                case 5:
                  return V.abrupt("return", ye);
                case 6:
                case "end":
                  return V.stop();
              }
          }, ie, this);
        }));
        function X(ie) {
          return Z.apply(this, arguments);
        }
        return X;
      }()
      /**
       * Fetches a list of client's methods registered on server.
       * @method
       * @return {Array}
       */
    }, {
      key: "listMethods",
      value: function() {
        var Z = (0, a.default)(/* @__PURE__ */ n.default.mark(function ie() {
          return n.default.wrap(function(ye) {
            for (; ; )
              switch (ye.prev = ye.next) {
                case 0:
                  return ye.next = 2, this.call("__listMethods");
                case 2:
                  return ye.abrupt("return", ye.sent);
                case 3:
                case "end":
                  return ye.stop();
              }
          }, ie, this);
        }));
        function X() {
          return Z.apply(this, arguments);
        }
        return X;
      }()
      /**
       * Sends a JSON-RPC 2.0 notification to server.
       * @method
       * @param {String} method - RPC method name
       * @param {Object} params - optional method parameters
       * @return {Promise}
       */
    }, {
      key: "notify",
      value: function(X, ie) {
        var fe = this;
        return new Promise(function(ye, j) {
          if (!fe.ready)
            return j(new Error("socket not ready"));
          var V = {
            jsonrpc: "2.0",
            method: X,
            params: ie
          };
          fe.socket.send(fe.dataPack.encode(V), function(ae) {
            if (ae)
              return j(ae);
            ye();
          });
        });
      }
      /**
       * Subscribes for a defined event.
       * @method
       * @param {String|Array} event - event name
       * @return {Undefined}
       * @throws {Error}
       */
    }, {
      key: "subscribe",
      value: function() {
        var Z = (0, a.default)(/* @__PURE__ */ n.default.mark(function ie(fe) {
          var ye;
          return n.default.wrap(function(V) {
            for (; ; )
              switch (V.prev = V.next) {
                case 0:
                  return typeof fe == "string" && (fe = [fe]), V.next = 3, this.call("rpc.on", fe);
                case 3:
                  if (ye = V.sent, !(typeof fe == "string" && ye[fe] !== "ok")) {
                    V.next = 6;
                    break;
                  }
                  throw new Error("Failed subscribing to an event '" + fe + "' with: " + ye[fe]);
                case 6:
                  return V.abrupt("return", ye);
                case 7:
                case "end":
                  return V.stop();
              }
          }, ie, this);
        }));
        function X(ie) {
          return Z.apply(this, arguments);
        }
        return X;
      }()
      /**
       * Unsubscribes from a defined event.
       * @method
       * @param {String|Array} event - event name
       * @return {Undefined}
       * @throws {Error}
       */
    }, {
      key: "unsubscribe",
      value: function() {
        var Z = (0, a.default)(/* @__PURE__ */ n.default.mark(function ie(fe) {
          var ye;
          return n.default.wrap(function(V) {
            for (; ; )
              switch (V.prev = V.next) {
                case 0:
                  return typeof fe == "string" && (fe = [fe]), V.next = 3, this.call("rpc.off", fe);
                case 3:
                  if (ye = V.sent, !(typeof fe == "string" && ye[fe] !== "ok")) {
                    V.next = 6;
                    break;
                  }
                  throw new Error("Failed unsubscribing from an event with: " + ye);
                case 6:
                  return V.abrupt("return", ye);
                case 7:
                case "end":
                  return V.stop();
              }
          }, ie, this);
        }));
        function X(ie) {
          return Z.apply(this, arguments);
        }
        return X;
      }()
      /**
       * Closes a WebSocket connection gracefully.
       * @method
       * @param {Number} code - socket close code
       * @param {String} data - optional data to be sent before closing
       * @return {Undefined}
       */
    }, {
      key: "close",
      value: function(X, ie) {
        this.socket.close(X || 1e3, ie);
      }
      /**
       * Connection/Message handler.
       * @method
       * @private
       * @param {String} address - WebSocket API address
       * @param {Object} options - ws options object
       * @return {Undefined}
       */
    }, {
      key: "_connect",
      value: function(X, ie) {
        var fe = this;
        clearTimeout(this.reconnect_timer_id), this.socket = this.webSocketFactory(X, ie), this.socket.addEventListener("open", function() {
          fe.ready = !0, fe.emit("open"), fe.current_reconnects = 0;
        }), this.socket.addEventListener("message", function(ye) {
          var j = ye.data;
          j instanceof ArrayBuffer && (j = Buffer$F.from(j).toString());
          try {
            j = fe.dataPack.decode(j);
          } catch {
            return;
          }
          if (j.notification && fe.listeners(j.notification).length) {
            if (!Object.keys(j.params).length)
              return fe.emit(j.notification);
            var V = [j.notification];
            if (j.params.constructor === Object)
              V.push(j.params);
            else
              for (var ae = 0; ae < j.params.length; ae++)
                V.push(j.params[ae]);
            return Promise.resolve().then(function() {
              fe.emit.apply(fe, V);
            });
          }
          if (!fe.queue[j.id])
            return j.method ? Promise.resolve().then(function() {
              fe.emit(j.method, j?.params);
            }) : void 0;
          "error" in j == "result" in j && fe.queue[j.id].promise[1](new Error('Server response malformed. Response must include either "result" or "error", but not both.')), fe.queue[j.id].timeout && clearTimeout(fe.queue[j.id].timeout), j.error ? fe.queue[j.id].promise[1](j.error) : fe.queue[j.id].promise[0](j.result), delete fe.queue[j.id];
        }), this.socket.addEventListener("error", function(ye) {
          return fe.emit("error", ye);
        }), this.socket.addEventListener("close", function(ye) {
          var j = ye.code, V = ye.reason;
          fe.ready && setTimeout(function() {
            return fe.emit("close", j, V);
          }, 0), fe.ready = !1, fe.socket = void 0, j !== 1e3 && (fe.current_reconnects++, fe.reconnect && (fe.max_reconnects > fe.current_reconnects || fe.max_reconnects === 0) && (fe.reconnect_timer_id = setTimeout(function() {
            return fe._connect(X, ie);
          }, fe.reconnect_interval)));
        });
      }
    }]), q;
  }(A.EventEmitter);
  t.default = L;
})(client);
const RpcWebSocketCommonClient = /* @__PURE__ */ getDefaultExportFromCjs$2(client);
var websocket_browser = {};
(function(t) {
  var e = interopRequireDefaultExports;
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = B;
  var n = e(requireClassCallCheck()), a = e(requireCreateClass()), c = e(requireInherits()), o = e(requirePossibleConstructorReturn()), d = e(requireGetPrototypeOf()), m = requireEventemitter3();
  function w(P) {
    var I = S();
    return function() {
      var L = (0, d.default)(P), C;
      if (I) {
        var z = (0, d.default)(this).constructor;
        C = Reflect.construct(L, arguments, z);
      } else
        C = L.apply(this, arguments);
      return (0, o.default)(this, C);
    };
  }
  function S() {
    if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
      return !1;
    if (typeof Proxy == "function")
      return !0;
    try {
      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      })), !0;
    } catch {
      return !1;
    }
  }
  var A = /* @__PURE__ */ function(P) {
    (0, c.default)(O, P);
    var I = w(O);
    function O(L, C, z) {
      var q;
      return (0, n.default)(this, O), q = I.call(this), q.socket = new window.WebSocket(L, z), q.socket.onopen = function() {
        return q.emit("open");
      }, q.socket.onmessage = function(Z) {
        return q.emit("message", Z.data);
      }, q.socket.onerror = function(Z) {
        return q.emit("error", Z);
      }, q.socket.onclose = function(Z) {
        q.emit("close", Z.code, Z.reason);
      }, q;
    }
    return (0, a.default)(O, [{
      key: "send",
      value: function(C, z, q) {
        var Z = q || z;
        try {
          this.socket.send(C), Z();
        } catch (X) {
          Z(X);
        }
      }
      /**
       * Closes an underlying socket
       * @method
       * @param {Number} code - status code explaining why the connection is being closed
       * @param {String} reason - a description why the connection is closing
       * @return {Undefined}
       * @throws {Error}
       */
    }, {
      key: "close",
      value: function(C, z) {
        this.socket.close(C, z);
      }
    }, {
      key: "addEventListener",
      value: function(C, z, q) {
        this.socket.addEventListener(C, z, q);
      }
    }]), O;
  }(m.EventEmitter);
  function B(P, I) {
    return new A(P, I);
  }
})(websocket_browser);
const createRpc = /* @__PURE__ */ getDefaultExportFromCjs$2(websocket_browser);
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function validatePointOpts(t) {
  const e = validateBasic(t);
  validateObject(e, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo: n, Fp: a, a: c } = e;
  if (n) {
    if (!a.eql(c, a.ZERO))
      throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
    if (typeof n != "object" || typeof n.beta != "bigint" || typeof n.splitScalar != "function")
      throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
  }
  return Object.freeze({ ...e });
}
const { bytesToNumberBE: b2n, hexToBytes: h2b } = ut, DER = {
  // asn.1 DER encoding utils
  Err: class extends Error {
    constructor(e = "") {
      super(e);
    }
  },
  _parseInt(t) {
    const { Err: e } = DER;
    if (t.length < 2 || t[0] !== 2)
      throw new e("Invalid signature integer tag");
    const n = t[1], a = t.subarray(2, n + 2);
    if (!n || a.length !== n)
      throw new e("Invalid signature integer: wrong length");
    if (a[0] & 128)
      throw new e("Invalid signature integer: negative");
    if (a[0] === 0 && !(a[1] & 128))
      throw new e("Invalid signature integer: unnecessary leading zero");
    return { d: b2n(a), l: t.subarray(n + 2) };
  },
  toSig(t) {
    const { Err: e } = DER, n = typeof t == "string" ? h2b(t) : t;
    if (!isBytes(n))
      throw new Error("ui8a expected");
    let a = n.length;
    if (a < 2 || n[0] != 48)
      throw new e("Invalid signature tag");
    if (n[1] !== a - 2)
      throw new e("Invalid signature: incorrect length");
    const { d: c, l: o } = DER._parseInt(n.subarray(2)), { d, l: m } = DER._parseInt(o);
    if (m.length)
      throw new e("Invalid signature: left bytes after parsing");
    return { r: c, s: d };
  },
  hexFromSig(t) {
    const e = (S) => Number.parseInt(S[0], 16) & 8 ? "00" + S : S, n = (S) => {
      const A = S.toString(16);
      return A.length & 1 ? `0${A}` : A;
    }, a = e(n(t.s)), c = e(n(t.r)), o = a.length / 2, d = c.length / 2, m = n(o), w = n(d);
    return `30${n(d + o + 4)}02${w}${c}02${m}${a}`;
  }
}, _0n$1 = BigInt(0), _1n$2 = BigInt(1);
BigInt(2);
const _3n = BigInt(3);
BigInt(4);
function weierstrassPoints(t) {
  const e = validatePointOpts(t), { Fp: n } = e, a = e.toBytes || ((O, L, C) => {
    const z = L.toAffine();
    return concatBytes(Uint8Array.from([4]), n.toBytes(z.x), n.toBytes(z.y));
  }), c = e.fromBytes || ((O) => {
    const L = O.subarray(1), C = n.fromBytes(L.subarray(0, n.BYTES)), z = n.fromBytes(L.subarray(n.BYTES, 2 * n.BYTES));
    return { x: C, y: z };
  });
  function o(O) {
    const { a: L, b: C } = e, z = n.sqr(O), q = n.mul(z, O);
    return n.add(n.add(q, n.mul(O, L)), C);
  }
  if (!n.eql(n.sqr(e.Gy), o(e.Gx)))
    throw new Error("bad generator point: equation left != right");
  function d(O) {
    return typeof O == "bigint" && _0n$1 < O && O < e.n;
  }
  function m(O) {
    if (!d(O))
      throw new Error("Expected valid bigint: 0 < bigint < curve.n");
  }
  function w(O) {
    const { allowedPrivateKeyLengths: L, nByteLength: C, wrapPrivateKey: z, n: q } = e;
    if (L && typeof O != "bigint") {
      if (isBytes(O) && (O = bytesToHex$1(O)), typeof O != "string" || !L.includes(O.length))
        throw new Error("Invalid key");
      O = O.padStart(C * 2, "0");
    }
    let Z;
    try {
      Z = typeof O == "bigint" ? O : bytesToNumberBE(ensureBytes("private key", O, C));
    } catch {
      throw new Error(`private key must be ${C} bytes, hex or bigint, not ${typeof O}`);
    }
    return z && (Z = mod(Z, q)), m(Z), Z;
  }
  const S = /* @__PURE__ */ new Map();
  function A(O) {
    if (!(O instanceof B))
      throw new Error("ProjectivePoint expected");
  }
  class B {
    constructor(L, C, z) {
      if (this.px = L, this.py = C, this.pz = z, L == null || !n.isValid(L))
        throw new Error("x required");
      if (C == null || !n.isValid(C))
        throw new Error("y required");
      if (z == null || !n.isValid(z))
        throw new Error("z required");
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(L) {
      const { x: C, y: z } = L || {};
      if (!L || !n.isValid(C) || !n.isValid(z))
        throw new Error("invalid affine point");
      if (L instanceof B)
        throw new Error("projective point not allowed");
      const q = (Z) => n.eql(Z, n.ZERO);
      return q(C) && q(z) ? B.ZERO : new B(C, z, n.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(L) {
      const C = n.invertBatch(L.map((z) => z.pz));
      return L.map((z, q) => z.toAffine(C[q])).map(B.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(L) {
      const C = B.fromAffine(c(ensureBytes("pointHex", L)));
      return C.assertValidity(), C;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(L) {
      return B.BASE.multiply(w(L));
    }
    // "Private method", don't use it directly
    _setWindowSize(L) {
      this._WINDOW_SIZE = L, S.delete(this);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      if (this.is0()) {
        if (e.allowInfinityPoint && !n.is0(this.py))
          return;
        throw new Error("bad point: ZERO");
      }
      const { x: L, y: C } = this.toAffine();
      if (!n.isValid(L) || !n.isValid(C))
        throw new Error("bad point: x or y not FE");
      const z = n.sqr(C), q = o(L);
      if (!n.eql(z, q))
        throw new Error("bad point: equation left != right");
      if (!this.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
    }
    hasEvenY() {
      const { y: L } = this.toAffine();
      if (n.isOdd)
        return !n.isOdd(L);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(L) {
      A(L);
      const { px: C, py: z, pz: q } = this, { px: Z, py: X, pz: ie } = L, fe = n.eql(n.mul(C, ie), n.mul(Z, q)), ye = n.eql(n.mul(z, ie), n.mul(X, q));
      return fe && ye;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new B(this.px, n.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a: L, b: C } = e, z = n.mul(C, _3n), { px: q, py: Z, pz: X } = this;
      let ie = n.ZERO, fe = n.ZERO, ye = n.ZERO, j = n.mul(q, q), V = n.mul(Z, Z), ae = n.mul(X, X), _ = n.mul(q, Z);
      return _ = n.add(_, _), ye = n.mul(q, X), ye = n.add(ye, ye), ie = n.mul(L, ye), fe = n.mul(z, ae), fe = n.add(ie, fe), ie = n.sub(V, fe), fe = n.add(V, fe), fe = n.mul(ie, fe), ie = n.mul(_, ie), ye = n.mul(z, ye), ae = n.mul(L, ae), _ = n.sub(j, ae), _ = n.mul(L, _), _ = n.add(_, ye), ye = n.add(j, j), j = n.add(ye, j), j = n.add(j, ae), j = n.mul(j, _), fe = n.add(fe, j), ae = n.mul(Z, X), ae = n.add(ae, ae), j = n.mul(ae, _), ie = n.sub(ie, j), ye = n.mul(ae, V), ye = n.add(ye, ye), ye = n.add(ye, ye), new B(ie, fe, ye);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(L) {
      A(L);
      const { px: C, py: z, pz: q } = this, { px: Z, py: X, pz: ie } = L;
      let fe = n.ZERO, ye = n.ZERO, j = n.ZERO;
      const V = e.a, ae = n.mul(e.b, _3n);
      let _ = n.mul(C, Z), u = n.mul(z, X), h = n.mul(q, ie), p = n.add(C, z), y = n.add(Z, X);
      p = n.mul(p, y), y = n.add(_, u), p = n.sub(p, y), y = n.add(C, q);
      let v = n.add(Z, ie);
      return y = n.mul(y, v), v = n.add(_, h), y = n.sub(y, v), v = n.add(z, q), fe = n.add(X, ie), v = n.mul(v, fe), fe = n.add(u, h), v = n.sub(v, fe), j = n.mul(V, y), fe = n.mul(ae, h), j = n.add(fe, j), fe = n.sub(u, j), j = n.add(u, j), ye = n.mul(fe, j), u = n.add(_, _), u = n.add(u, _), h = n.mul(V, h), y = n.mul(ae, y), u = n.add(u, h), h = n.sub(_, h), h = n.mul(V, h), y = n.add(y, h), _ = n.mul(u, y), ye = n.add(ye, _), _ = n.mul(v, y), fe = n.mul(p, fe), fe = n.sub(fe, _), _ = n.mul(p, u), j = n.mul(v, j), j = n.add(j, _), new B(fe, ye, j);
    }
    subtract(L) {
      return this.add(L.negate());
    }
    is0() {
      return this.equals(B.ZERO);
    }
    wNAF(L) {
      return I.wNAFCached(this, S, L, (C) => {
        const z = n.invertBatch(C.map((q) => q.pz));
        return C.map((q, Z) => q.toAffine(z[Z])).map(B.fromAffine);
      });
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(L) {
      const C = B.ZERO;
      if (L === _0n$1)
        return C;
      if (m(L), L === _1n$2)
        return this;
      const { endo: z } = e;
      if (!z)
        return I.unsafeLadder(this, L);
      let { k1neg: q, k1: Z, k2neg: X, k2: ie } = z.splitScalar(L), fe = C, ye = C, j = this;
      for (; Z > _0n$1 || ie > _0n$1; )
        Z & _1n$2 && (fe = fe.add(j)), ie & _1n$2 && (ye = ye.add(j)), j = j.double(), Z >>= _1n$2, ie >>= _1n$2;
      return q && (fe = fe.negate()), X && (ye = ye.negate()), ye = new B(n.mul(ye.px, z.beta), ye.py, ye.pz), fe.add(ye);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(L) {
      m(L);
      let C = L, z, q;
      const { endo: Z } = e;
      if (Z) {
        const { k1neg: X, k1: ie, k2neg: fe, k2: ye } = Z.splitScalar(C);
        let { p: j, f: V } = this.wNAF(ie), { p: ae, f: _ } = this.wNAF(ye);
        j = I.constTimeNegate(X, j), ae = I.constTimeNegate(fe, ae), ae = new B(n.mul(ae.px, Z.beta), ae.py, ae.pz), z = j.add(ae), q = V.add(_);
      } else {
        const { p: X, f: ie } = this.wNAF(C);
        z = X, q = ie;
      }
      return B.normalizeZ([z, q])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(L, C, z) {
      const q = B.BASE, Z = (ie, fe) => fe === _0n$1 || fe === _1n$2 || !ie.equals(q) ? ie.multiplyUnsafe(fe) : ie.multiply(fe), X = Z(this, C).add(Z(L, z));
      return X.is0() ? void 0 : X;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(L) {
      const { px: C, py: z, pz: q } = this, Z = this.is0();
      L == null && (L = Z ? n.ONE : n.inv(q));
      const X = n.mul(C, L), ie = n.mul(z, L), fe = n.mul(q, L);
      if (Z)
        return { x: n.ZERO, y: n.ZERO };
      if (!n.eql(fe, n.ONE))
        throw new Error("invZ was invalid");
      return { x: X, y: ie };
    }
    isTorsionFree() {
      const { h: L, isTorsionFree: C } = e;
      if (L === _1n$2)
        return !0;
      if (C)
        return C(B, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: L, clearCofactor: C } = e;
      return L === _1n$2 ? this : C ? C(B, this) : this.multiplyUnsafe(e.h);
    }
    toRawBytes(L = !0) {
      return this.assertValidity(), a(B, this, L);
    }
    toHex(L = !0) {
      return bytesToHex$1(this.toRawBytes(L));
    }
  }
  B.BASE = new B(e.Gx, e.Gy, n.ONE), B.ZERO = new B(n.ZERO, n.ONE, n.ZERO);
  const P = e.nBitLength, I = wNAF(B, e.endo ? Math.ceil(P / 2) : P);
  return {
    CURVE: e,
    ProjectivePoint: B,
    normPrivateKeyToScalar: w,
    weierstrassEquation: o,
    isWithinCurveOrder: d
  };
}
function validateOpts(t) {
  const e = validateBasic(t);
  return validateObject(e, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  }), Object.freeze({ lowS: !0, ...e });
}
function weierstrass(t) {
  const e = validateOpts(t), { Fp: n, n: a } = e, c = n.BYTES + 1, o = 2 * n.BYTES + 1;
  function d(y) {
    return _0n$1 < y && y < n.ORDER;
  }
  function m(y) {
    return mod(y, a);
  }
  function w(y) {
    return invert(y, a);
  }
  const { ProjectivePoint: S, normPrivateKeyToScalar: A, weierstrassEquation: B, isWithinCurveOrder: P } = weierstrassPoints({
    ...e,
    toBytes(y, v, $) {
      const E = v.toAffine(), x = n.toBytes(E.x), l = concatBytes;
      return $ ? l(Uint8Array.from([v.hasEvenY() ? 2 : 3]), x) : l(Uint8Array.from([4]), x, n.toBytes(E.y));
    },
    fromBytes(y) {
      const v = y.length, $ = y[0], E = y.subarray(1);
      if (v === c && ($ === 2 || $ === 3)) {
        const x = bytesToNumberBE(E);
        if (!d(x))
          throw new Error("Point is not on curve");
        const l = B(x);
        let b = n.sqrt(l);
        const M = (b & _1n$2) === _1n$2;
        return ($ & 1) === 1 !== M && (b = n.neg(b)), { x, y: b };
      } else if (v === o && $ === 4) {
        const x = n.fromBytes(E.subarray(0, n.BYTES)), l = n.fromBytes(E.subarray(n.BYTES, 2 * n.BYTES));
        return { x, y: l };
      } else
        throw new Error(`Point of length ${v} was invalid. Expected ${c} compressed bytes or ${o} uncompressed bytes`);
    }
  }), I = (y) => bytesToHex$1(numberToBytesBE(y, e.nByteLength));
  function O(y) {
    const v = a >> _1n$2;
    return y > v;
  }
  function L(y) {
    return O(y) ? m(-y) : y;
  }
  const C = (y, v, $) => bytesToNumberBE(y.slice(v, $));
  class z {
    constructor(v, $, E) {
      this.r = v, this.s = $, this.recovery = E, this.assertValidity();
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(v) {
      const $ = e.nByteLength;
      return v = ensureBytes("compactSignature", v, $ * 2), new z(C(v, 0, $), C(v, $, 2 * $));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(v) {
      const { r: $, s: E } = DER.toSig(ensureBytes("DER", v));
      return new z($, E);
    }
    assertValidity() {
      if (!P(this.r))
        throw new Error("r must be 0 < r < CURVE.n");
      if (!P(this.s))
        throw new Error("s must be 0 < s < CURVE.n");
    }
    addRecoveryBit(v) {
      return new z(this.r, this.s, v);
    }
    recoverPublicKey(v) {
      const { r: $, s: E, recovery: x } = this, l = ye(ensureBytes("msgHash", v));
      if (x == null || ![0, 1, 2, 3].includes(x))
        throw new Error("recovery id invalid");
      const b = x === 2 || x === 3 ? $ + e.n : $;
      if (b >= n.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const M = x & 1 ? "03" : "02", k = S.fromHex(M + I(b)), U = w(b), T = m(-l * U), H = m(E * U), Y = S.BASE.multiplyAndAddUnsafe(k, T, H);
      if (!Y)
        throw new Error("point at infinify");
      return Y.assertValidity(), Y;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return O(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new z(this.r, m(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return hexToBytes$1(this.toDERHex());
    }
    toDERHex() {
      return DER.hexFromSig({ r: this.r, s: this.s });
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return hexToBytes$1(this.toCompactHex());
    }
    toCompactHex() {
      return I(this.r) + I(this.s);
    }
  }
  const q = {
    isValidPrivateKey(y) {
      try {
        return A(y), !0;
      } catch {
        return !1;
      }
    },
    normPrivateKeyToScalar: A,
    /**
     * Produces cryptographically secure private key from random of size
     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
     */
    randomPrivateKey: () => {
      const y = getMinHashLength(e.n);
      return mapHashToField(e.randomBytes(y), e.n);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(y = 8, v = S.BASE) {
      return v._setWindowSize(y), v.multiply(BigInt(3)), v;
    }
  };
  function Z(y, v = !0) {
    return S.fromPrivateKey(y).toRawBytes(v);
  }
  function X(y) {
    const v = isBytes(y), $ = typeof y == "string", E = (v || $) && y.length;
    return v ? E === c || E === o : $ ? E === 2 * c || E === 2 * o : y instanceof S;
  }
  function ie(y, v, $ = !0) {
    if (X(y))
      throw new Error("first arg must be private key");
    if (!X(v))
      throw new Error("second arg must be public key");
    return S.fromHex(v).multiply(A(y)).toRawBytes($);
  }
  const fe = e.bits2int || function(y) {
    const v = bytesToNumberBE(y), $ = y.length * 8 - e.nBitLength;
    return $ > 0 ? v >> BigInt($) : v;
  }, ye = e.bits2int_modN || function(y) {
    return m(fe(y));
  }, j = bitMask(e.nBitLength);
  function V(y) {
    if (typeof y != "bigint")
      throw new Error("bigint expected");
    if (!(_0n$1 <= y && y < j))
      throw new Error(`bigint expected < 2^${e.nBitLength}`);
    return numberToBytesBE(y, e.nByteLength);
  }
  function ae(y, v, $ = _) {
    if (["recovered", "canonical"].some((ce) => ce in $))
      throw new Error("sign() legacy options not supported");
    const { hash: E, randomBytes: x } = e;
    let { lowS: l, prehash: b, extraEntropy: M } = $;
    l == null && (l = !0), y = ensureBytes("msgHash", y), b && (y = ensureBytes("prehashed msgHash", E(y)));
    const k = ye(y), U = A(v), T = [V(U), V(k)];
    if (M != null) {
      const ce = M === !0 ? x(n.BYTES) : M;
      T.push(ensureBytes("extraEntropy", ce));
    }
    const H = concatBytes(...T), Y = k;
    function le(ce) {
      const de = fe(ce);
      if (!P(de))
        return;
      const ue = w(de), re = S.BASE.multiply(de).toAffine(), ge = m(re.x);
      if (ge === _0n$1)
        return;
      const Ae = m(ue * m(Y + ge * U));
      if (Ae === _0n$1)
        return;
      let xe = (re.x === ge ? 0 : 2) | Number(re.y & _1n$2), Ee = Ae;
      return l && O(Ae) && (Ee = L(Ae), xe ^= 1), new z(ge, Ee, xe);
    }
    return { seed: H, k2sig: le };
  }
  const _ = { lowS: e.lowS, prehash: !1 }, u = { lowS: e.lowS, prehash: !1 };
  function h(y, v, $ = _) {
    const { seed: E, k2sig: x } = ae(y, v, $), l = e;
    return createHmacDrbg(l.hash.outputLen, l.nByteLength, l.hmac)(E, x);
  }
  S.BASE._setWindowSize(8);
  function p(y, v, $, E = u) {
    const x = y;
    if (v = ensureBytes("msgHash", v), $ = ensureBytes("publicKey", $), "strict" in E)
      throw new Error("options.strict was renamed to lowS");
    const { lowS: l, prehash: b } = E;
    let M, k;
    try {
      if (typeof x == "string" || isBytes(x))
        try {
          M = z.fromDER(x);
        } catch (re) {
          if (!(re instanceof DER.Err))
            throw re;
          M = z.fromCompact(x);
        }
      else if (typeof x == "object" && typeof x.r == "bigint" && typeof x.s == "bigint") {
        const { r: re, s: ge } = x;
        M = new z(re, ge);
      } else
        throw new Error("PARSE");
      k = S.fromHex($);
    } catch (re) {
      if (re.message === "PARSE")
        throw new Error("signature must be Signature instance, Uint8Array or hex string");
      return !1;
    }
    if (l && M.hasHighS())
      return !1;
    b && (v = e.hash(v));
    const { r: U, s: T } = M, H = ye(v), Y = w(T), le = m(H * Y), ce = m(U * Y), de = S.BASE.multiplyAndAddUnsafe(k, le, ce)?.toAffine();
    return de ? m(de.x) === U : !1;
  }
  return {
    CURVE: e,
    getPublicKey: Z,
    getSharedSecret: ie,
    sign: h,
    verify: p,
    ProjectivePoint: S,
    Signature: z,
    utils: q
  };
}
let HMAC$1 = class extends Hash$1 {
  constructor(e, n) {
    super(), this.finished = !1, this.destroyed = !1, hash$2(e);
    const a = toBytes$1(n);
    if (this.iHash = e.create(), typeof this.iHash.update != "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const c = this.blockLen, o = new Uint8Array(c);
    o.set(a.length > c ? e.create().update(a).digest() : a);
    for (let d = 0; d < o.length; d++)
      o[d] ^= 54;
    this.iHash.update(o), this.oHash = e.create();
    for (let d = 0; d < o.length; d++)
      o[d] ^= 106;
    this.oHash.update(o), o.fill(0);
  }
  update(e) {
    return exists$2(this), this.iHash.update(e), this;
  }
  digestInto(e) {
    exists$2(this), bytes$2(e, this.outputLen), this.finished = !0, this.iHash.digestInto(e), this.oHash.update(e), this.oHash.digestInto(e), this.destroy();
  }
  digest() {
    const e = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(e), e;
  }
  _cloneInto(e) {
    e || (e = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n, iHash: a, finished: c, destroyed: o, blockLen: d, outputLen: m } = this;
    return e = e, e.finished = c, e.destroyed = o, e.blockLen = d, e.outputLen = m, e.oHash = n._cloneInto(e.oHash), e.iHash = a._cloneInto(e.iHash), e;
  }
  destroy() {
    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
  }
};
const hmac$2 = (t, e, n) => new HMAC$1(t, e).update(n).digest();
hmac$2.create = (t, e) => new HMAC$1(t, e);
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function getHash(t) {
  return {
    hash: t,
    hmac: (e, ...n) => hmac$2(t, e, concatBytes$1(...n)),
    randomBytes
  };
}
function createCurve(t, e) {
  const n = (a) => weierstrass({ ...t, ...getHash(a) });
  return Object.freeze({ ...n(e), create: n });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"), secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"), _1n$1 = BigInt(1), _2n$1 = BigInt(2), divNearest = (t, e) => (t + e / _2n$1) / e;
function sqrtMod(t) {
  const e = secp256k1P, n = BigInt(3), a = BigInt(6), c = BigInt(11), o = BigInt(22), d = BigInt(23), m = BigInt(44), w = BigInt(88), S = t * t * t % e, A = S * S * t % e, B = pow2(A, n, e) * A % e, P = pow2(B, n, e) * A % e, I = pow2(P, _2n$1, e) * S % e, O = pow2(I, c, e) * I % e, L = pow2(O, o, e) * O % e, C = pow2(L, m, e) * L % e, z = pow2(C, w, e) * C % e, q = pow2(z, m, e) * L % e, Z = pow2(q, n, e) * A % e, X = pow2(Z, d, e) * O % e, ie = pow2(X, a, e) * S % e, fe = pow2(ie, _2n$1, e);
  if (!Fp.eql(Fp.sqr(fe), t))
    throw new Error("Cannot find square root");
  return fe;
}
const Fp = Field(secp256k1P, void 0, void 0, { sqrt: sqrtMod }), secp256k1 = createCurve({
  a: BigInt(0),
  // equation params: a, b
  b: BigInt(7),
  // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975
  Fp,
  // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n
  n: secp256k1N,
  // Curve order, total count of valid points in the field
  // Base point (x, y) aka generator point
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  // Cofactor
  lowS: !0,
  // Allow only low-S signatures by default in sign() and verify()
  /**
   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
   */
  endo: {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (t) => {
      const e = secp256k1N, n = BigInt("0x3086d221a7d46bcde86c90e49284eb15"), a = -_1n$1 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3"), c = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"), o = n, d = BigInt("0x100000000000000000000000000000000"), m = divNearest(o * t, e), w = divNearest(-a * t, e);
      let S = mod(t - m * n - w * c, e), A = mod(-m * a - w * o, e);
      const B = S > d, P = A > d;
      if (B && (S = e - S), P && (A = e - A), S > d || A > d)
        throw new Error("splitScalar: Endomorphism failed, k=" + t);
      return { k1neg: B, k1: S, k2neg: P, k2: A };
    }
  }
}, sha256$1);
BigInt(0);
secp256k1.ProjectivePoint;
function isOnCurve(t) {
  try {
    return ed25519.ExtendedPoint.fromHex(t), !0;
  } catch {
    return !1;
  }
}
const sign = (t, e) => ed25519.sign(t, e.slice(0, 32)), verify = ed25519.verify, toBuffer = (t) => Buffer$1$1.isBuffer(t) ? t : t instanceof Uint8Array ? Buffer$1$1.from(t.buffer, t.byteOffset, t.byteLength) : Buffer$1$1.from(t);
class Struct {
  constructor(e) {
    Object.assign(this, e);
  }
  encode() {
    return Buffer$1$1.from(serialize_1(SOLANA_SCHEMA, this));
  }
  static decode(e) {
    return deserialize_1(SOLANA_SCHEMA, this, e);
  }
  static decodeUnchecked(e) {
    return deserializeUnchecked_1(SOLANA_SCHEMA, this, e);
  }
}
const SOLANA_SCHEMA = /* @__PURE__ */ new Map();
var _class;
let _Symbol$toStringTag;
const MAX_SEED_LENGTH = 32, PUBLIC_KEY_LENGTH = 32;
function isPublicKeyData(t) {
  return t._bn !== void 0;
}
let uniquePublicKeyCounter = 1;
_Symbol$toStringTag = Symbol.toStringTag;
class PublicKey extends Struct {
  /**
   * Create a new PublicKey object
   * @param value ed25519 public key as buffer or base-58 encoded string
   */
  constructor(e) {
    if (super({}), this._bn = void 0, isPublicKeyData(e))
      this._bn = e._bn;
    else {
      if (typeof e == "string") {
        const n = bs58$1.decode(e);
        if (n.length != PUBLIC_KEY_LENGTH)
          throw new Error("Invalid public key input");
        this._bn = new BN$d(n);
      } else
        this._bn = new BN$d(e);
      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH)
        throw new Error("Invalid public key input");
    }
  }
  /**
   * Returns a unique PublicKey for tests and benchmarks using a counter
   */
  static unique() {
    const e = new PublicKey(uniquePublicKeyCounter);
    return uniquePublicKeyCounter += 1, new PublicKey(e.toBuffer());
  }
  /**
   * Default public key value. The base58-encoded string representation is all ones (as seen below)
   * The underlying BN number is 32 bytes that are all zeros
   */
  /**
   * Checks if two publicKeys are equal
   */
  equals(e) {
    return this._bn.eq(e._bn);
  }
  /**
   * Return the base-58 representation of the public key
   */
  toBase58() {
    return bs58$1.encode(this.toBytes());
  }
  toJSON() {
    return this.toBase58();
  }
  /**
   * Return the byte array representation of the public key in big endian
   */
  toBytes() {
    const e = this.toBuffer();
    return new Uint8Array(e.buffer, e.byteOffset, e.byteLength);
  }
  /**
   * Return the Buffer representation of the public key in big endian
   */
  toBuffer() {
    const e = this._bn.toArrayLike(Buffer$1$1);
    if (e.length === PUBLIC_KEY_LENGTH)
      return e;
    const n = Buffer$1$1.alloc(32);
    return e.copy(n, 32 - e.length), n;
  }
  get [_Symbol$toStringTag]() {
    return `PublicKey(${this.toString()})`;
  }
  /**
   * Return the base-58 representation of the public key
   */
  toString() {
    return this.toBase58();
  }
  /**
   * Derive a public key from another key, a seed, and a program ID.
   * The program ID will also serve as the owner of the public key, giving
   * it permission to write data to the account.
   */
  /* eslint-disable require-await */
  static async createWithSeed(e, n, a) {
    const c = Buffer$1$1.concat([e.toBuffer(), Buffer$1$1.from(n), a.toBuffer()]), o = sha256$1(c);
    return new PublicKey(o);
  }
  /**
   * Derive a program address from seeds and a program ID.
   */
  /* eslint-disable require-await */
  static createProgramAddressSync(e, n) {
    let a = Buffer$1$1.alloc(0);
    e.forEach(function(o) {
      if (o.length > MAX_SEED_LENGTH)
        throw new TypeError("Max seed length exceeded");
      a = Buffer$1$1.concat([a, toBuffer(o)]);
    }), a = Buffer$1$1.concat([a, n.toBuffer(), Buffer$1$1.from("ProgramDerivedAddress")]);
    const c = sha256$1(a);
    if (isOnCurve(c))
      throw new Error("Invalid seeds, address must fall off the curve");
    return new PublicKey(c);
  }
  /**
   * Async version of createProgramAddressSync
   * For backwards compatibility
   *
   * @deprecated Use {@link createProgramAddressSync} instead
   */
  /* eslint-disable require-await */
  static async createProgramAddress(e, n) {
    return this.createProgramAddressSync(e, n);
  }
  /**
   * Find a valid program address
   *
   * Valid program addresses must fall off the ed25519 curve.  This function
   * iterates a nonce until it finds one that when combined with the seeds
   * results in a valid program address.
   */
  static findProgramAddressSync(e, n) {
    let a = 255, c;
    for (; a != 0; ) {
      try {
        const o = e.concat(Buffer$1$1.from([a]));
        c = this.createProgramAddressSync(o, n);
      } catch (o) {
        if (o instanceof TypeError)
          throw o;
        a--;
        continue;
      }
      return [c, a];
    }
    throw new Error("Unable to find a viable program address nonce");
  }
  /**
   * Async version of findProgramAddressSync
   * For backwards compatibility
   *
   * @deprecated Use {@link findProgramAddressSync} instead
   */
  static async findProgramAddress(e, n) {
    return this.findProgramAddressSync(e, n);
  }
  /**
   * Check that a pubkey is on the ed25519 curve.
   */
  static isOnCurve(e) {
    const n = new PublicKey(e);
    return isOnCurve(n.toBytes());
  }
}
_class = PublicKey;
PublicKey.default = new _class("11111111111111111111111111111111");
SOLANA_SCHEMA.set(PublicKey, {
  kind: "struct",
  fields: [["_bn", "u256"]]
});
new PublicKey("BPFLoader1111111111111111111111111111111111");
const PACKET_DATA_SIZE = 1232, VERSION_PREFIX_MASK = 127, SIGNATURE_LENGTH_IN_BYTES = 64;
class TransactionExpiredBlockheightExceededError extends Error {
  constructor(e) {
    super(`Signature ${e} has expired: block height exceeded.`), this.signature = void 0, this.signature = e;
  }
}
Object.defineProperty(TransactionExpiredBlockheightExceededError.prototype, "name", {
  value: "TransactionExpiredBlockheightExceededError"
});
class TransactionExpiredTimeoutError extends Error {
  constructor(e, n) {
    super(`Transaction was not confirmed in ${n.toFixed(2)} seconds. It is unknown if it succeeded or failed. Check signature ${e} using the Solana Explorer or CLI tools.`), this.signature = void 0, this.signature = e;
  }
}
Object.defineProperty(TransactionExpiredTimeoutError.prototype, "name", {
  value: "TransactionExpiredTimeoutError"
});
class TransactionExpiredNonceInvalidError extends Error {
  constructor(e) {
    super(`Signature ${e} has expired: the nonce is no longer valid.`), this.signature = void 0, this.signature = e;
  }
}
Object.defineProperty(TransactionExpiredNonceInvalidError.prototype, "name", {
  value: "TransactionExpiredNonceInvalidError"
});
class MessageAccountKeys {
  constructor(e, n) {
    this.staticAccountKeys = void 0, this.accountKeysFromLookups = void 0, this.staticAccountKeys = e, this.accountKeysFromLookups = n;
  }
  keySegments() {
    const e = [this.staticAccountKeys];
    return this.accountKeysFromLookups && (e.push(this.accountKeysFromLookups.writable), e.push(this.accountKeysFromLookups.readonly)), e;
  }
  get(e) {
    for (const n of this.keySegments()) {
      if (e < n.length)
        return n[e];
      e -= n.length;
    }
  }
  get length() {
    return this.keySegments().flat().length;
  }
  compileInstructions(e) {
    if (this.length > 256)
      throw new Error("Account index overflow encountered during compilation");
    const a = /* @__PURE__ */ new Map();
    this.keySegments().flat().forEach((o, d) => {
      a.set(o.toBase58(), d);
    });
    const c = (o) => {
      const d = a.get(o.toBase58());
      if (d === void 0)
        throw new Error("Encountered an unknown instruction account key during compilation");
      return d;
    };
    return e.map((o) => ({
      programIdIndex: c(o.programId),
      accountKeyIndexes: o.keys.map((d) => c(d.pubkey)),
      data: o.data
    }));
  }
}
const publicKey = (t = "publicKey") => blob(32, t), signature = (t = "signature") => blob(64, t), rustString = (t = "string") => {
  const e = struct([u32$1("length"), u32$1("lengthPadding"), blob(offset(u32$1(), -8), "chars")], t), n = e.decode.bind(e), a = e.encode.bind(e), c = e;
  return c.decode = (o, d) => n(o, d).chars.toString(), c.encode = (o, d, m) => {
    const w = {
      chars: Buffer$1$1.from(o, "utf8")
    };
    return a(w, d, m);
  }, c.alloc = (o) => u32$1().span + u32$1().span + Buffer$1$1.from(o, "utf8").length, c;
}, authorized = (t = "authorized") => struct([publicKey("staker"), publicKey("withdrawer")], t), lockup = (t = "lockup") => struct([ns64("unixTimestamp"), ns64("epoch"), publicKey("custodian")], t), voteInit = (t = "voteInit") => struct([publicKey("nodePubkey"), publicKey("authorizedVoter"), publicKey("authorizedWithdrawer"), u8("commission")], t), voteAuthorizeWithSeedArgs = (t = "voteAuthorizeWithSeedArgs") => struct([u32$1("voteAuthorizationType"), publicKey("currentAuthorityDerivedKeyOwnerPubkey"), rustString("currentAuthorityDerivedKeySeed"), publicKey("newAuthorized")], t);
function getAlloc(t, e) {
  const n = (c) => {
    if (c.span >= 0)
      return c.span;
    if (typeof c.alloc == "function")
      return c.alloc(e[c.property]);
    if ("count" in c && "elementLayout" in c) {
      const o = e[c.property];
      if (Array.isArray(o))
        return o.length * n(c.elementLayout);
    } else if ("fields" in c)
      return getAlloc({
        layout: c
      }, e[c.property]);
    return 0;
  };
  let a = 0;
  return t.layout.fields.forEach((c) => {
    a += n(c);
  }), a;
}
function decodeLength(t) {
  let e = 0, n = 0;
  for (; ; ) {
    let a = t.shift();
    if (e |= (a & 127) << n * 7, n += 1, !(a & 128))
      break;
  }
  return e;
}
function encodeLength(t, e) {
  let n = e;
  for (; ; ) {
    let a = n & 127;
    if (n >>= 7, n == 0) {
      t.push(a);
      break;
    } else
      a |= 128, t.push(a);
  }
}
function assert$2(t, e) {
  if (!t)
    throw new Error(e || "Assertion failed");
}
class CompiledKeys {
  constructor(e, n) {
    this.payer = void 0, this.keyMetaMap = void 0, this.payer = e, this.keyMetaMap = n;
  }
  static compile(e, n) {
    const a = /* @__PURE__ */ new Map(), c = (d) => {
      const m = d.toBase58();
      let w = a.get(m);
      return w === void 0 && (w = {
        isSigner: !1,
        isWritable: !1,
        isInvoked: !1
      }, a.set(m, w)), w;
    }, o = c(n);
    o.isSigner = !0, o.isWritable = !0;
    for (const d of e) {
      c(d.programId).isInvoked = !0;
      for (const m of d.keys) {
        const w = c(m.pubkey);
        w.isSigner ||= m.isSigner, w.isWritable ||= m.isWritable;
      }
    }
    return new CompiledKeys(n, a);
  }
  getMessageComponents() {
    const e = [...this.keyMetaMap.entries()];
    assert$2(e.length <= 256, "Max static account keys length exceeded");
    const n = e.filter(([, w]) => w.isSigner && w.isWritable), a = e.filter(([, w]) => w.isSigner && !w.isWritable), c = e.filter(([, w]) => !w.isSigner && w.isWritable), o = e.filter(([, w]) => !w.isSigner && !w.isWritable), d = {
      numRequiredSignatures: n.length + a.length,
      numReadonlySignedAccounts: a.length,
      numReadonlyUnsignedAccounts: o.length
    };
    {
      assert$2(n.length > 0, "Expected at least one writable signer key");
      const [w] = n[0];
      assert$2(w === this.payer.toBase58(), "Expected first writable signer key to be the fee payer");
    }
    const m = [...n.map(([w]) => new PublicKey(w)), ...a.map(([w]) => new PublicKey(w)), ...c.map(([w]) => new PublicKey(w)), ...o.map(([w]) => new PublicKey(w))];
    return [d, m];
  }
  extractTableLookup(e) {
    const [n, a] = this.drainKeysFoundInLookupTable(e.state.addresses, (d) => !d.isSigner && !d.isInvoked && d.isWritable), [c, o] = this.drainKeysFoundInLookupTable(e.state.addresses, (d) => !d.isSigner && !d.isInvoked && !d.isWritable);
    if (!(n.length === 0 && c.length === 0))
      return [{
        accountKey: e.key,
        writableIndexes: n,
        readonlyIndexes: c
      }, {
        writable: a,
        readonly: o
      }];
  }
  /** @internal */
  drainKeysFoundInLookupTable(e, n) {
    const a = new Array(), c = new Array();
    for (const [o, d] of this.keyMetaMap.entries())
      if (n(d)) {
        const m = new PublicKey(o), w = e.findIndex((S) => S.equals(m));
        w >= 0 && (assert$2(w < 256, "Max lookup table index exceeded"), a.push(w), c.push(m), this.keyMetaMap.delete(o));
      }
    return [a, c];
  }
}
class Message {
  constructor(e) {
    this.header = void 0, this.accountKeys = void 0, this.recentBlockhash = void 0, this.instructions = void 0, this.indexToProgramIds = /* @__PURE__ */ new Map(), this.header = e.header, this.accountKeys = e.accountKeys.map((n) => new PublicKey(n)), this.recentBlockhash = e.recentBlockhash, this.instructions = e.instructions, this.instructions.forEach((n) => this.indexToProgramIds.set(n.programIdIndex, this.accountKeys[n.programIdIndex]));
  }
  get version() {
    return "legacy";
  }
  get staticAccountKeys() {
    return this.accountKeys;
  }
  get compiledInstructions() {
    return this.instructions.map((e) => ({
      programIdIndex: e.programIdIndex,
      accountKeyIndexes: e.accounts,
      data: bs58$1.decode(e.data)
    }));
  }
  get addressTableLookups() {
    return [];
  }
  getAccountKeys() {
    return new MessageAccountKeys(this.staticAccountKeys);
  }
  static compile(e) {
    const n = CompiledKeys.compile(e.instructions, e.payerKey), [a, c] = n.getMessageComponents(), d = new MessageAccountKeys(c).compileInstructions(e.instructions).map((m) => ({
      programIdIndex: m.programIdIndex,
      accounts: m.accountKeyIndexes,
      data: bs58$1.encode(m.data)
    }));
    return new Message({
      header: a,
      accountKeys: c,
      recentBlockhash: e.recentBlockhash,
      instructions: d
    });
  }
  isAccountSigner(e) {
    return e < this.header.numRequiredSignatures;
  }
  isAccountWritable(e) {
    const n = this.header.numRequiredSignatures;
    if (e >= this.header.numRequiredSignatures) {
      const a = e - n, o = this.accountKeys.length - n - this.header.numReadonlyUnsignedAccounts;
      return a < o;
    } else {
      const a = n - this.header.numReadonlySignedAccounts;
      return e < a;
    }
  }
  isProgramId(e) {
    return this.indexToProgramIds.has(e);
  }
  programIds() {
    return [...this.indexToProgramIds.values()];
  }
  nonProgramIds() {
    return this.accountKeys.filter((e, n) => !this.isProgramId(n));
  }
  serialize() {
    const e = this.accountKeys.length;
    let n = [];
    encodeLength(n, e);
    const a = this.instructions.map((B) => {
      const {
        accounts: P,
        programIdIndex: I
      } = B, O = Array.from(bs58$1.decode(B.data));
      let L = [];
      encodeLength(L, P.length);
      let C = [];
      return encodeLength(C, O.length), {
        programIdIndex: I,
        keyIndicesCount: Buffer$1$1.from(L),
        keyIndices: P,
        dataLength: Buffer$1$1.from(C),
        data: O
      };
    });
    let c = [];
    encodeLength(c, a.length);
    let o = Buffer$1$1.alloc(PACKET_DATA_SIZE);
    Buffer$1$1.from(c).copy(o);
    let d = c.length;
    a.forEach((B) => {
      const I = struct([u8("programIdIndex"), blob(B.keyIndicesCount.length, "keyIndicesCount"), seq(u8("keyIndex"), B.keyIndices.length, "keyIndices"), blob(B.dataLength.length, "dataLength"), seq(u8("userdatum"), B.data.length, "data")]).encode(B, o, d);
      d += I;
    }), o = o.slice(0, d);
    const m = struct([blob(1, "numRequiredSignatures"), blob(1, "numReadonlySignedAccounts"), blob(1, "numReadonlyUnsignedAccounts"), blob(n.length, "keyCount"), seq(publicKey("key"), e, "keys"), publicKey("recentBlockhash")]), w = {
      numRequiredSignatures: Buffer$1$1.from([this.header.numRequiredSignatures]),
      numReadonlySignedAccounts: Buffer$1$1.from([this.header.numReadonlySignedAccounts]),
      numReadonlyUnsignedAccounts: Buffer$1$1.from([this.header.numReadonlyUnsignedAccounts]),
      keyCount: Buffer$1$1.from(n),
      keys: this.accountKeys.map((B) => toBuffer(B.toBytes())),
      recentBlockhash: bs58$1.decode(this.recentBlockhash)
    };
    let S = Buffer$1$1.alloc(2048);
    const A = m.encode(w, S);
    return o.copy(S, A), S.slice(0, A + o.length);
  }
  /**
   * Decode a compiled message into a Message object.
   */
  static from(e) {
    let n = [...e];
    const a = n.shift();
    if (a !== (a & VERSION_PREFIX_MASK))
      throw new Error("Versioned messages must be deserialized with VersionedMessage.deserialize()");
    const c = n.shift(), o = n.shift(), d = decodeLength(n);
    let m = [];
    for (let P = 0; P < d; P++) {
      const I = n.slice(0, PUBLIC_KEY_LENGTH);
      n = n.slice(PUBLIC_KEY_LENGTH), m.push(new PublicKey(Buffer$1$1.from(I)));
    }
    const w = n.slice(0, PUBLIC_KEY_LENGTH);
    n = n.slice(PUBLIC_KEY_LENGTH);
    const S = decodeLength(n);
    let A = [];
    for (let P = 0; P < S; P++) {
      const I = n.shift(), O = decodeLength(n), L = n.slice(0, O);
      n = n.slice(O);
      const C = decodeLength(n), z = n.slice(0, C), q = bs58$1.encode(Buffer$1$1.from(z));
      n = n.slice(C), A.push({
        programIdIndex: I,
        accounts: L,
        data: q
      });
    }
    const B = {
      header: {
        numRequiredSignatures: a,
        numReadonlySignedAccounts: c,
        numReadonlyUnsignedAccounts: o
      },
      recentBlockhash: bs58$1.encode(Buffer$1$1.from(w)),
      accountKeys: m,
      instructions: A
    };
    return new Message(B);
  }
}
class MessageV0 {
  constructor(e) {
    this.header = void 0, this.staticAccountKeys = void 0, this.recentBlockhash = void 0, this.compiledInstructions = void 0, this.addressTableLookups = void 0, this.header = e.header, this.staticAccountKeys = e.staticAccountKeys, this.recentBlockhash = e.recentBlockhash, this.compiledInstructions = e.compiledInstructions, this.addressTableLookups = e.addressTableLookups;
  }
  get version() {
    return 0;
  }
  get numAccountKeysFromLookups() {
    let e = 0;
    for (const n of this.addressTableLookups)
      e += n.readonlyIndexes.length + n.writableIndexes.length;
    return e;
  }
  getAccountKeys(e) {
    let n;
    if (e && "accountKeysFromLookups" in e && e.accountKeysFromLookups) {
      if (this.numAccountKeysFromLookups != e.accountKeysFromLookups.writable.length + e.accountKeysFromLookups.readonly.length)
        throw new Error("Failed to get account keys because of a mismatch in the number of account keys from lookups");
      n = e.accountKeysFromLookups;
    } else if (e && "addressLookupTableAccounts" in e && e.addressLookupTableAccounts)
      n = this.resolveAddressTableLookups(e.addressLookupTableAccounts);
    else if (this.addressTableLookups.length > 0)
      throw new Error("Failed to get account keys because address table lookups were not resolved");
    return new MessageAccountKeys(this.staticAccountKeys, n);
  }
  isAccountSigner(e) {
    return e < this.header.numRequiredSignatures;
  }
  isAccountWritable(e) {
    const n = this.header.numRequiredSignatures, a = this.staticAccountKeys.length;
    if (e >= a) {
      const c = e - a, o = this.addressTableLookups.reduce((d, m) => d + m.writableIndexes.length, 0);
      return c < o;
    } else if (e >= this.header.numRequiredSignatures) {
      const c = e - n, d = a - n - this.header.numReadonlyUnsignedAccounts;
      return c < d;
    } else {
      const c = n - this.header.numReadonlySignedAccounts;
      return e < c;
    }
  }
  resolveAddressTableLookups(e) {
    const n = {
      writable: [],
      readonly: []
    };
    for (const a of this.addressTableLookups) {
      const c = e.find((o) => o.key.equals(a.accountKey));
      if (!c)
        throw new Error(`Failed to find address lookup table account for table key ${a.accountKey.toBase58()}`);
      for (const o of a.writableIndexes)
        if (o < c.state.addresses.length)
          n.writable.push(c.state.addresses[o]);
        else
          throw new Error(`Failed to find address for index ${o} in address lookup table ${a.accountKey.toBase58()}`);
      for (const o of a.readonlyIndexes)
        if (o < c.state.addresses.length)
          n.readonly.push(c.state.addresses[o]);
        else
          throw new Error(`Failed to find address for index ${o} in address lookup table ${a.accountKey.toBase58()}`);
    }
    return n;
  }
  static compile(e) {
    const n = CompiledKeys.compile(e.instructions, e.payerKey), a = new Array(), c = {
      writable: new Array(),
      readonly: new Array()
    }, o = e.addressLookupTableAccounts || [];
    for (const A of o) {
      const B = n.extractTableLookup(A);
      if (B !== void 0) {
        const [P, {
          writable: I,
          readonly: O
        }] = B;
        a.push(P), c.writable.push(...I), c.readonly.push(...O);
      }
    }
    const [d, m] = n.getMessageComponents(), S = new MessageAccountKeys(m, c).compileInstructions(e.instructions);
    return new MessageV0({
      header: d,
      staticAccountKeys: m,
      recentBlockhash: e.recentBlockhash,
      compiledInstructions: S,
      addressTableLookups: a
    });
  }
  serialize() {
    const e = Array();
    encodeLength(e, this.staticAccountKeys.length);
    const n = this.serializeInstructions(), a = Array();
    encodeLength(a, this.compiledInstructions.length);
    const c = this.serializeAddressTableLookups(), o = Array();
    encodeLength(o, this.addressTableLookups.length);
    const d = struct([u8("prefix"), struct([u8("numRequiredSignatures"), u8("numReadonlySignedAccounts"), u8("numReadonlyUnsignedAccounts")], "header"), blob(e.length, "staticAccountKeysLength"), seq(publicKey(), this.staticAccountKeys.length, "staticAccountKeys"), publicKey("recentBlockhash"), blob(a.length, "instructionsLength"), blob(n.length, "serializedInstructions"), blob(o.length, "addressTableLookupsLength"), blob(c.length, "serializedAddressTableLookups")]), m = new Uint8Array(PACKET_DATA_SIZE), S = d.encode({
      prefix: 128,
      header: this.header,
      staticAccountKeysLength: new Uint8Array(e),
      staticAccountKeys: this.staticAccountKeys.map((A) => A.toBytes()),
      recentBlockhash: bs58$1.decode(this.recentBlockhash),
      instructionsLength: new Uint8Array(a),
      serializedInstructions: n,
      addressTableLookupsLength: new Uint8Array(o),
      serializedAddressTableLookups: c
    }, m);
    return m.slice(0, S);
  }
  serializeInstructions() {
    let e = 0;
    const n = new Uint8Array(PACKET_DATA_SIZE);
    for (const a of this.compiledInstructions) {
      const c = Array();
      encodeLength(c, a.accountKeyIndexes.length);
      const o = Array();
      encodeLength(o, a.data.length);
      const d = struct([u8("programIdIndex"), blob(c.length, "encodedAccountKeyIndexesLength"), seq(u8(), a.accountKeyIndexes.length, "accountKeyIndexes"), blob(o.length, "encodedDataLength"), blob(a.data.length, "data")]);
      e += d.encode({
        programIdIndex: a.programIdIndex,
        encodedAccountKeyIndexesLength: new Uint8Array(c),
        accountKeyIndexes: a.accountKeyIndexes,
        encodedDataLength: new Uint8Array(o),
        data: a.data
      }, n, e);
    }
    return n.slice(0, e);
  }
  serializeAddressTableLookups() {
    let e = 0;
    const n = new Uint8Array(PACKET_DATA_SIZE);
    for (const a of this.addressTableLookups) {
      const c = Array();
      encodeLength(c, a.writableIndexes.length);
      const o = Array();
      encodeLength(o, a.readonlyIndexes.length);
      const d = struct([publicKey("accountKey"), blob(c.length, "encodedWritableIndexesLength"), seq(u8(), a.writableIndexes.length, "writableIndexes"), blob(o.length, "encodedReadonlyIndexesLength"), seq(u8(), a.readonlyIndexes.length, "readonlyIndexes")]);
      e += d.encode({
        accountKey: a.accountKey.toBytes(),
        encodedWritableIndexesLength: new Uint8Array(c),
        writableIndexes: a.writableIndexes,
        encodedReadonlyIndexesLength: new Uint8Array(o),
        readonlyIndexes: a.readonlyIndexes
      }, n, e);
    }
    return n.slice(0, e);
  }
  static deserialize(e) {
    let n = [...e];
    const a = n.shift(), c = a & VERSION_PREFIX_MASK;
    assert$2(a !== c, "Expected versioned message but received legacy message");
    const o = c;
    assert$2(o === 0, `Expected versioned message with version 0 but found version ${o}`);
    const d = {
      numRequiredSignatures: n.shift(),
      numReadonlySignedAccounts: n.shift(),
      numReadonlyUnsignedAccounts: n.shift()
    }, m = [], w = decodeLength(n);
    for (let O = 0; O < w; O++)
      m.push(new PublicKey(n.splice(0, PUBLIC_KEY_LENGTH)));
    const S = bs58$1.encode(n.splice(0, PUBLIC_KEY_LENGTH)), A = decodeLength(n), B = [];
    for (let O = 0; O < A; O++) {
      const L = n.shift(), C = decodeLength(n), z = n.splice(0, C), q = decodeLength(n), Z = new Uint8Array(n.splice(0, q));
      B.push({
        programIdIndex: L,
        accountKeyIndexes: z,
        data: Z
      });
    }
    const P = decodeLength(n), I = [];
    for (let O = 0; O < P; O++) {
      const L = new PublicKey(n.splice(0, PUBLIC_KEY_LENGTH)), C = decodeLength(n), z = n.splice(0, C), q = decodeLength(n), Z = n.splice(0, q);
      I.push({
        accountKey: L,
        writableIndexes: z,
        readonlyIndexes: Z
      });
    }
    return new MessageV0({
      header: d,
      staticAccountKeys: m,
      recentBlockhash: S,
      compiledInstructions: B,
      addressTableLookups: I
    });
  }
}
const VersionedMessage = {
  deserializeMessageVersion(t) {
    const e = t[0], n = e & VERSION_PREFIX_MASK;
    return n === e ? "legacy" : n;
  },
  deserialize: (t) => {
    const e = VersionedMessage.deserializeMessageVersion(t);
    if (e === "legacy")
      return Message.from(t);
    if (e === 0)
      return MessageV0.deserialize(t);
    throw new Error(`Transaction message version ${e} deserialization is not supported`);
  }
};
let TransactionStatus = /* @__PURE__ */ function(t) {
  return t[t.BLOCKHEIGHT_EXCEEDED = 0] = "BLOCKHEIGHT_EXCEEDED", t[t.PROCESSED = 1] = "PROCESSED", t[t.TIMED_OUT = 2] = "TIMED_OUT", t[t.NONCE_INVALID = 3] = "NONCE_INVALID", t;
}({});
const DEFAULT_SIGNATURE = Buffer$1$1.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);
class TransactionInstruction {
  constructor(e) {
    this.keys = void 0, this.programId = void 0, this.data = Buffer$1$1.alloc(0), this.programId = e.programId, this.keys = e.keys, e.data && (this.data = e.data);
  }
  /**
   * @internal
   */
  toJSON() {
    return {
      keys: this.keys.map(({
        pubkey: e,
        isSigner: n,
        isWritable: a
      }) => ({
        pubkey: e.toJSON(),
        isSigner: n,
        isWritable: a
      })),
      programId: this.programId.toJSON(),
      data: [...this.data]
    };
  }
}
let Transaction$1 = class Jt {
  /**
   * The first (payer) Transaction signature
   *
   * @returns {Buffer | null} Buffer of payer's signature
   */
  get signature() {
    return this.signatures.length > 0 ? this.signatures[0].signature : null;
  }
  /**
   * The transaction fee payer
   */
  // Construct a transaction with a blockhash and lastValidBlockHeight
  // Construct a transaction using a durable nonce
  /**
   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.
   * Please supply a `TransactionBlockhashCtor` instead.
   */
  /**
   * Construct an empty Transaction
   */
  constructor(e) {
    if (this.signatures = [], this.feePayer = void 0, this.instructions = [], this.recentBlockhash = void 0, this.lastValidBlockHeight = void 0, this.nonceInfo = void 0, this.minNonceContextSlot = void 0, this._message = void 0, this._json = void 0, !!e)
      if (e.feePayer && (this.feePayer = e.feePayer), e.signatures && (this.signatures = e.signatures), Object.prototype.hasOwnProperty.call(e, "nonceInfo")) {
        const {
          minContextSlot: n,
          nonceInfo: a
        } = e;
        this.minNonceContextSlot = n, this.nonceInfo = a;
      } else if (Object.prototype.hasOwnProperty.call(e, "lastValidBlockHeight")) {
        const {
          blockhash: n,
          lastValidBlockHeight: a
        } = e;
        this.recentBlockhash = n, this.lastValidBlockHeight = a;
      } else {
        const {
          recentBlockhash: n,
          nonceInfo: a
        } = e;
        a && (this.nonceInfo = a), this.recentBlockhash = n;
      }
  }
  /**
   * @internal
   */
  toJSON() {
    return {
      recentBlockhash: this.recentBlockhash || null,
      feePayer: this.feePayer ? this.feePayer.toJSON() : null,
      nonceInfo: this.nonceInfo ? {
        nonce: this.nonceInfo.nonce,
        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()
      } : null,
      instructions: this.instructions.map((e) => e.toJSON()),
      signers: this.signatures.map(({
        publicKey: e
      }) => e.toJSON())
    };
  }
  /**
   * Add one or more instructions to this Transaction
   *
   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction
   */
  add(...e) {
    if (e.length === 0)
      throw new Error("No instructions");
    return e.forEach((n) => {
      "instructions" in n ? this.instructions = this.instructions.concat(n.instructions) : "data" in n && "programId" in n && "keys" in n ? this.instructions.push(n) : this.instructions.push(new TransactionInstruction(n));
    }), this;
  }
  /**
   * Compile transaction data
   */
  compileMessage() {
    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json))
      return this._message;
    let e, n;
    if (this.nonceInfo ? (e = this.nonceInfo.nonce, this.instructions[0] != this.nonceInfo.nonceInstruction ? n = [this.nonceInfo.nonceInstruction, ...this.instructions] : n = this.instructions) : (e = this.recentBlockhash, n = this.instructions), !e)
      throw new Error("Transaction recentBlockhash required");
    n.length < 1 && console.warn("No instructions provided");
    let a;
    if (this.feePayer)
      a = this.feePayer;
    else if (this.signatures.length > 0 && this.signatures[0].publicKey)
      a = this.signatures[0].publicKey;
    else
      throw new Error("Transaction fee payer required");
    for (let L = 0; L < n.length; L++)
      if (n[L].programId === void 0)
        throw new Error(`Transaction instruction index ${L} has undefined program id`);
    const c = [], o = [];
    n.forEach((L) => {
      L.keys.forEach((z) => {
        o.push({
          ...z
        });
      });
      const C = L.programId.toString();
      c.includes(C) || c.push(C);
    }), c.forEach((L) => {
      o.push({
        pubkey: new PublicKey(L),
        isSigner: !1,
        isWritable: !1
      });
    });
    const d = [];
    o.forEach((L) => {
      const C = L.pubkey.toString(), z = d.findIndex((q) => q.pubkey.toString() === C);
      z > -1 ? (d[z].isWritable = d[z].isWritable || L.isWritable, d[z].isSigner = d[z].isSigner || L.isSigner) : d.push(L);
    }), d.sort(function(L, C) {
      if (L.isSigner !== C.isSigner)
        return L.isSigner ? -1 : 1;
      if (L.isWritable !== C.isWritable)
        return L.isWritable ? -1 : 1;
      const z = {
        localeMatcher: "best fit",
        usage: "sort",
        sensitivity: "variant",
        ignorePunctuation: !1,
        numeric: !1,
        caseFirst: "lower"
      };
      return L.pubkey.toBase58().localeCompare(C.pubkey.toBase58(), "en", z);
    });
    const m = d.findIndex((L) => L.pubkey.equals(a));
    if (m > -1) {
      const [L] = d.splice(m, 1);
      L.isSigner = !0, L.isWritable = !0, d.unshift(L);
    } else
      d.unshift({
        pubkey: a,
        isSigner: !0,
        isWritable: !0
      });
    for (const L of this.signatures) {
      const C = d.findIndex((z) => z.pubkey.equals(L.publicKey));
      if (C > -1)
        d[C].isSigner || (d[C].isSigner = !0, console.warn("Transaction references a signature that is unnecessary, only the fee payer and instruction signer accounts should sign a transaction. This behavior is deprecated and will throw an error in the next major version release."));
      else
        throw new Error(`unknown signer: ${L.publicKey.toString()}`);
    }
    let w = 0, S = 0, A = 0;
    const B = [], P = [];
    d.forEach(({
      pubkey: L,
      isSigner: C,
      isWritable: z
    }) => {
      C ? (B.push(L.toString()), w += 1, z || (S += 1)) : (P.push(L.toString()), z || (A += 1));
    });
    const I = B.concat(P), O = n.map((L) => {
      const {
        data: C,
        programId: z
      } = L;
      return {
        programIdIndex: I.indexOf(z.toString()),
        accounts: L.keys.map((q) => I.indexOf(q.pubkey.toString())),
        data: bs58$1.encode(C)
      };
    });
    return O.forEach((L) => {
      assert$2(L.programIdIndex >= 0), L.accounts.forEach((C) => assert$2(C >= 0));
    }), new Message({
      header: {
        numRequiredSignatures: w,
        numReadonlySignedAccounts: S,
        numReadonlyUnsignedAccounts: A
      },
      accountKeys: I,
      recentBlockhash: e,
      instructions: O
    });
  }
  /**
   * @internal
   */
  _compile() {
    const e = this.compileMessage(), n = e.accountKeys.slice(0, e.header.numRequiredSignatures);
    return this.signatures.length === n.length && this.signatures.every((c, o) => n[o].equals(c.publicKey)) || (this.signatures = n.map((a) => ({
      signature: null,
      publicKey: a
    }))), e;
  }
  /**
   * Get a buffer of the Transaction data that need to be covered by signatures
   */
  serializeMessage() {
    return this._compile().serialize();
  }
  /**
   * Get the estimated fee associated with a transaction
   *
   * @param {Connection} connection Connection to RPC Endpoint.
   *
   * @returns {Promise<number | null>} The estimated fee for the transaction
   */
  async getEstimatedFee(e) {
    return (await e.getFeeForMessage(this.compileMessage())).value;
  }
  /**
   * Specify the public keys which will be used to sign the Transaction.
   * The first signer will be used as the transaction fee payer account.
   *
   * Signatures can be added with either `partialSign` or `addSignature`
   *
   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be
   * specified and it can be set in the Transaction constructor or with the
   * `feePayer` property.
   */
  setSigners(...e) {
    if (e.length === 0)
      throw new Error("No signers");
    const n = /* @__PURE__ */ new Set();
    this.signatures = e.filter((a) => {
      const c = a.toString();
      return n.has(c) ? !1 : (n.add(c), !0);
    }).map((a) => ({
      signature: null,
      publicKey: a
    }));
  }
  /**
   * Sign the Transaction with the specified signers. Multiple signatures may
   * be applied to a Transaction. The first signature is considered "primary"
   * and is used identify and confirm transactions.
   *
   * If the Transaction `feePayer` is not set, the first signer will be used
   * as the transaction fee payer account.
   *
   * Transaction fields should not be modified after the first call to `sign`,
   * as doing so may invalidate the signature and cause the Transaction to be
   * rejected.
   *
   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method
   *
   * @param {Array<Signer>} signers Array of signers that will sign the transaction
   */
  sign(...e) {
    if (e.length === 0)
      throw new Error("No signers");
    const n = /* @__PURE__ */ new Set(), a = [];
    for (const o of e) {
      const d = o.publicKey.toString();
      n.has(d) || (n.add(d), a.push(o));
    }
    this.signatures = a.map((o) => ({
      signature: null,
      publicKey: o.publicKey
    }));
    const c = this._compile();
    this._partialSign(c, ...a);
  }
  /**
   * Partially sign a transaction with the specified accounts. All accounts must
   * correspond to either the fee payer or a signer account in the transaction
   * instructions.
   *
   * All the caveats from the `sign` method apply to `partialSign`
   *
   * @param {Array<Signer>} signers Array of signers that will sign the transaction
   */
  partialSign(...e) {
    if (e.length === 0)
      throw new Error("No signers");
    const n = /* @__PURE__ */ new Set(), a = [];
    for (const o of e) {
      const d = o.publicKey.toString();
      n.has(d) || (n.add(d), a.push(o));
    }
    const c = this._compile();
    this._partialSign(c, ...a);
  }
  /**
   * @internal
   */
  _partialSign(e, ...n) {
    const a = e.serialize();
    n.forEach((c) => {
      const o = sign(a, c.secretKey);
      this._addSignature(c.publicKey, toBuffer(o));
    });
  }
  /**
   * Add an externally created signature to a transaction. The public key
   * must correspond to either the fee payer or a signer account in the transaction
   * instructions.
   *
   * @param {PublicKey} pubkey Public key that will be added to the transaction.
   * @param {Buffer} signature An externally created signature to add to the transaction.
   */
  addSignature(e, n) {
    this._compile(), this._addSignature(e, n);
  }
  /**
   * @internal
   */
  _addSignature(e, n) {
    assert$2(n.length === 64);
    const a = this.signatures.findIndex((c) => e.equals(c.publicKey));
    if (a < 0)
      throw new Error(`unknown signer: ${e.toString()}`);
    this.signatures[a].signature = Buffer$1$1.from(n);
  }
  /**
   * Verify signatures of a Transaction
   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.
   * If no boolean is provided, we expect a fully signed Transaction by default.
   *
   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction
   */
  verifySignatures(e = !0) {
    return !this._getMessageSignednessErrors(this.serializeMessage(), e);
  }
  /**
   * @internal
   */
  _getMessageSignednessErrors(e, n) {
    const a = {};
    for (const {
      signature: c,
      publicKey: o
    } of this.signatures)
      c === null ? n && (a.missing ||= []).push(o) : verify(c, e, o.toBytes()) || (a.invalid ||= []).push(o);
    return a.invalid || a.missing ? a : void 0;
  }
  /**
   * Serialize the Transaction in the wire format.
   *
   * @param {Buffer} [config] Config of transaction.
   *
   * @returns {Buffer} Signature of transaction in wire format.
   */
  serialize(e) {
    const {
      requireAllSignatures: n,
      verifySignatures: a
    } = Object.assign({
      requireAllSignatures: !0,
      verifySignatures: !0
    }, e), c = this.serializeMessage();
    if (a) {
      const o = this._getMessageSignednessErrors(c, n);
      if (o) {
        let d = "Signature verification failed.";
        throw o.invalid && (d += `
Invalid signature for public key${o.invalid.length === 1 ? "" : "(s)"} [\`${o.invalid.map((m) => m.toBase58()).join("`, `")}\`].`), o.missing && (d += `
Missing signature for public key${o.missing.length === 1 ? "" : "(s)"} [\`${o.missing.map((m) => m.toBase58()).join("`, `")}\`].`), new Error(d);
      }
    }
    return this._serialize(c);
  }
  /**
   * @internal
   */
  _serialize(e) {
    const {
      signatures: n
    } = this, a = [];
    encodeLength(a, n.length);
    const c = a.length + n.length * 64 + e.length, o = Buffer$1$1.alloc(c);
    return assert$2(n.length < 256), Buffer$1$1.from(a).copy(o, 0), n.forEach(({
      signature: d
    }, m) => {
      d !== null && (assert$2(d.length === 64, "signature has invalid length"), Buffer$1$1.from(d).copy(o, a.length + m * 64));
    }), e.copy(o, a.length + n.length * 64), assert$2(o.length <= PACKET_DATA_SIZE, `Transaction too large: ${o.length} > ${PACKET_DATA_SIZE}`), o;
  }
  /**
   * Deprecated method
   * @internal
   */
  get keys() {
    return assert$2(this.instructions.length === 1), this.instructions[0].keys.map((e) => e.pubkey);
  }
  /**
   * Deprecated method
   * @internal
   */
  get programId() {
    return assert$2(this.instructions.length === 1), this.instructions[0].programId;
  }
  /**
   * Deprecated method
   * @internal
   */
  get data() {
    return assert$2(this.instructions.length === 1), this.instructions[0].data;
  }
  /**
   * Parse a wire transaction into a Transaction object.
   *
   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction
   *
   * @returns {Transaction} Transaction associated with the signature
   */
  static from(e) {
    let n = [...e];
    const a = decodeLength(n);
    let c = [];
    for (let o = 0; o < a; o++) {
      const d = n.slice(0, SIGNATURE_LENGTH_IN_BYTES);
      n = n.slice(SIGNATURE_LENGTH_IN_BYTES), c.push(bs58$1.encode(Buffer$1$1.from(d)));
    }
    return Jt.populate(Message.from(n), c);
  }
  /**
   * Populate Transaction object from message and signatures
   *
   * @param {Message} message Message of transaction
   * @param {Array<string>} signatures List of signatures to assign to the transaction
   *
   * @returns {Transaction} The populated Transaction
   */
  static populate(e, n = []) {
    const a = new Jt();
    return a.recentBlockhash = e.recentBlockhash, e.header.numRequiredSignatures > 0 && (a.feePayer = e.accountKeys[0]), n.forEach((c, o) => {
      const d = {
        signature: c == bs58$1.encode(DEFAULT_SIGNATURE) ? null : bs58$1.decode(c),
        publicKey: e.accountKeys[o]
      };
      a.signatures.push(d);
    }), e.instructions.forEach((c) => {
      const o = c.accounts.map((d) => {
        const m = e.accountKeys[d];
        return {
          pubkey: m,
          isSigner: a.signatures.some((w) => w.publicKey.toString() === m.toString()) || e.isAccountSigner(d),
          isWritable: e.isAccountWritable(d)
        };
      });
      a.instructions.push(new TransactionInstruction({
        keys: o,
        programId: e.accountKeys[c.programIdIndex],
        data: bs58$1.decode(c.data)
      }));
    }), a._message = e, a._json = a.toJSON(), a;
  }
};
class VersionedTransaction {
  get version() {
    return this.message.version;
  }
  constructor(e, n) {
    if (this.signatures = void 0, this.message = void 0, n !== void 0)
      assert$2(n.length === e.header.numRequiredSignatures, "Expected signatures length to be equal to the number of required signatures"), this.signatures = n;
    else {
      const a = [];
      for (let c = 0; c < e.header.numRequiredSignatures; c++)
        a.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));
      this.signatures = a;
    }
    this.message = e;
  }
  serialize() {
    const e = this.message.serialize(), n = Array();
    encodeLength(n, this.signatures.length);
    const a = struct([blob(n.length, "encodedSignaturesLength"), seq(signature(), this.signatures.length, "signatures"), blob(e.length, "serializedMessage")]), c = new Uint8Array(2048), o = a.encode({
      encodedSignaturesLength: new Uint8Array(n),
      signatures: this.signatures,
      serializedMessage: e
    }, c);
    return c.slice(0, o);
  }
  static deserialize(e) {
    let n = [...e];
    const a = [], c = decodeLength(n);
    for (let d = 0; d < c; d++)
      a.push(new Uint8Array(n.splice(0, SIGNATURE_LENGTH_IN_BYTES)));
    const o = VersionedMessage.deserialize(new Uint8Array(n));
    return new VersionedTransaction(o, a);
  }
  sign(e) {
    const n = this.message.serialize(), a = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);
    for (const c of e) {
      const o = a.findIndex((d) => d.equals(c.publicKey));
      assert$2(o >= 0, `Cannot sign with non signer key ${c.publicKey.toBase58()}`), this.signatures[o] = sign(n, c.secretKey);
    }
  }
  addSignature(e, n) {
    assert$2(n.byteLength === 64, "Signature must be 64 bytes long");
    const c = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures).findIndex((o) => o.equals(e));
    assert$2(c >= 0, `Can not add signature; \`${e.toBase58()}\` is not required to sign this transaction`), this.signatures[c] = n;
  }
}
const NUM_TICKS_PER_SECOND = 160, DEFAULT_TICKS_PER_SLOT = 64, NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT, MS_PER_SLOT = 1e3 / NUM_SLOTS_PER_SECOND;
new PublicKey("SysvarC1ock11111111111111111111111111111111");
new PublicKey("SysvarEpochSchedu1e111111111111111111111111");
new PublicKey("Sysvar1nstructions1111111111111111111111111");
const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey("SysvarRecentB1ockHashes11111111111111111111"), SYSVAR_RENT_PUBKEY = new PublicKey("SysvarRent111111111111111111111111111111111");
new PublicKey("SysvarRewards111111111111111111111111111111");
new PublicKey("SysvarS1otHashes111111111111111111111111111");
new PublicKey("SysvarS1otHistory11111111111111111111111111");
new PublicKey("SysvarStakeHistory1111111111111111111111111");
function sleep$1(t) {
  return new Promise((e) => setTimeout(e, t));
}
function encodeData(t, e) {
  const n = t.layout.span >= 0 ? t.layout.span : getAlloc(t, e), a = Buffer$1$1.alloc(n), c = Object.assign({
    instruction: t.index
  }, e);
  return t.layout.encode(c, a), a;
}
const FeeCalculatorLayout = nu64("lamportsPerSignature"), NonceAccountLayout = struct([u32$1("version"), u32$1("state"), publicKey("authorizedPubkey"), publicKey("nonce"), struct([FeeCalculatorLayout], "feeCalculator")]), NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;
class NonceAccount {
  /**
   * @internal
   */
  constructor(e) {
    this.authorizedPubkey = void 0, this.nonce = void 0, this.feeCalculator = void 0, this.authorizedPubkey = e.authorizedPubkey, this.nonce = e.nonce, this.feeCalculator = e.feeCalculator;
  }
  /**
   * Deserialize NonceAccount from the account data.
   *
   * @param buffer account data
   * @return NonceAccount
   */
  static fromAccountData(e) {
    const n = NonceAccountLayout.decode(toBuffer(e), 0);
    return new NonceAccount({
      authorizedPubkey: new PublicKey(n.authorizedPubkey),
      nonce: new PublicKey(n.nonce).toString(),
      feeCalculator: n.feeCalculator
    });
  }
}
const encodeDecode = (t) => {
  const e = t.decode.bind(t), n = t.encode.bind(t);
  return {
    decode: e,
    encode: n
  };
}, bigInt = (t) => (e) => {
  const n = blob(t, e), {
    encode: a,
    decode: c
  } = encodeDecode(n), o = n;
  return o.decode = (d, m) => {
    const w = c(d, m);
    return toBigIntLE_1(Buffer$1$1.from(w));
  }, o.encode = (d, m, w) => {
    const S = toBufferLE_1(d, t);
    return a(S, m, w);
  }, o;
}, u64$1 = bigInt(8), SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({
  Create: {
    index: 0,
    layout: struct([u32$1("instruction"), ns64("lamports"), ns64("space"), publicKey("programId")])
  },
  Assign: {
    index: 1,
    layout: struct([u32$1("instruction"), publicKey("programId")])
  },
  Transfer: {
    index: 2,
    layout: struct([u32$1("instruction"), u64$1("lamports")])
  },
  CreateWithSeed: {
    index: 3,
    layout: struct([u32$1("instruction"), publicKey("base"), rustString("seed"), ns64("lamports"), ns64("space"), publicKey("programId")])
  },
  AdvanceNonceAccount: {
    index: 4,
    layout: struct([u32$1("instruction")])
  },
  WithdrawNonceAccount: {
    index: 5,
    layout: struct([u32$1("instruction"), ns64("lamports")])
  },
  InitializeNonceAccount: {
    index: 6,
    layout: struct([u32$1("instruction"), publicKey("authorized")])
  },
  AuthorizeNonceAccount: {
    index: 7,
    layout: struct([u32$1("instruction"), publicKey("authorized")])
  },
  Allocate: {
    index: 8,
    layout: struct([u32$1("instruction"), ns64("space")])
  },
  AllocateWithSeed: {
    index: 9,
    layout: struct([u32$1("instruction"), publicKey("base"), rustString("seed"), ns64("space"), publicKey("programId")])
  },
  AssignWithSeed: {
    index: 10,
    layout: struct([u32$1("instruction"), publicKey("base"), rustString("seed"), publicKey("programId")])
  },
  TransferWithSeed: {
    index: 11,
    layout: struct([u32$1("instruction"), u64$1("lamports"), rustString("seed"), publicKey("programId")])
  },
  UpgradeNonceAccount: {
    index: 12,
    layout: struct([u32$1("instruction")])
  }
});
class SystemProgram {
  /**
   * @internal
   */
  constructor() {
  }
  /**
   * Public key that identifies the System program
   */
  /**
   * Generate a transaction instruction that creates a new account
   */
  static createAccount(e) {
    const n = SYSTEM_INSTRUCTION_LAYOUTS.Create, a = encodeData(n, {
      lamports: e.lamports,
      space: e.space,
      programId: toBuffer(e.programId.toBuffer())
    });
    return new TransactionInstruction({
      keys: [{
        pubkey: e.fromPubkey,
        isSigner: !0,
        isWritable: !0
      }, {
        pubkey: e.newAccountPubkey,
        isSigner: !0,
        isWritable: !0
      }],
      programId: this.programId,
      data: a
    });
  }
  /**
   * Generate a transaction instruction that transfers lamports from one account to another
   */
  static transfer(e) {
    let n, a;
    if ("basePubkey" in e) {
      const c = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;
      n = encodeData(c, {
        lamports: BigInt(e.lamports),
        seed: e.seed,
        programId: toBuffer(e.programId.toBuffer())
      }), a = [{
        pubkey: e.fromPubkey,
        isSigner: !1,
        isWritable: !0
      }, {
        pubkey: e.basePubkey,
        isSigner: !0,
        isWritable: !1
      }, {
        pubkey: e.toPubkey,
        isSigner: !1,
        isWritable: !0
      }];
    } else {
      const c = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;
      n = encodeData(c, {
        lamports: BigInt(e.lamports)
      }), a = [{
        pubkey: e.fromPubkey,
        isSigner: !0,
        isWritable: !0
      }, {
        pubkey: e.toPubkey,
        isSigner: !1,
        isWritable: !0
      }];
    }
    return new TransactionInstruction({
      keys: a,
      programId: this.programId,
      data: n
    });
  }
  /**
   * Generate a transaction instruction that assigns an account to a program
   */
  static assign(e) {
    let n, a;
    if ("basePubkey" in e) {
      const c = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;
      n = encodeData(c, {
        base: toBuffer(e.basePubkey.toBuffer()),
        seed: e.seed,
        programId: toBuffer(e.programId.toBuffer())
      }), a = [{
        pubkey: e.accountPubkey,
        isSigner: !1,
        isWritable: !0
      }, {
        pubkey: e.basePubkey,
        isSigner: !0,
        isWritable: !1
      }];
    } else {
      const c = SYSTEM_INSTRUCTION_LAYOUTS.Assign;
      n = encodeData(c, {
        programId: toBuffer(e.programId.toBuffer())
      }), a = [{
        pubkey: e.accountPubkey,
        isSigner: !0,
        isWritable: !0
      }];
    }
    return new TransactionInstruction({
      keys: a,
      programId: this.programId,
      data: n
    });
  }
  /**
   * Generate a transaction instruction that creates a new account at
   *   an address generated with `from`, a seed, and programId
   */
  static createAccountWithSeed(e) {
    const n = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, a = encodeData(n, {
      base: toBuffer(e.basePubkey.toBuffer()),
      seed: e.seed,
      lamports: e.lamports,
      space: e.space,
      programId: toBuffer(e.programId.toBuffer())
    });
    let c = [{
      pubkey: e.fromPubkey,
      isSigner: !0,
      isWritable: !0
    }, {
      pubkey: e.newAccountPubkey,
      isSigner: !1,
      isWritable: !0
    }];
    return e.basePubkey != e.fromPubkey && c.push({
      pubkey: e.basePubkey,
      isSigner: !0,
      isWritable: !1
    }), new TransactionInstruction({
      keys: c,
      programId: this.programId,
      data: a
    });
  }
  /**
   * Generate a transaction that creates a new Nonce account
   */
  static createNonceAccount(e) {
    const n = new Transaction$1();
    "basePubkey" in e && "seed" in e ? n.add(SystemProgram.createAccountWithSeed({
      fromPubkey: e.fromPubkey,
      newAccountPubkey: e.noncePubkey,
      basePubkey: e.basePubkey,
      seed: e.seed,
      lamports: e.lamports,
      space: NONCE_ACCOUNT_LENGTH,
      programId: this.programId
    })) : n.add(SystemProgram.createAccount({
      fromPubkey: e.fromPubkey,
      newAccountPubkey: e.noncePubkey,
      lamports: e.lamports,
      space: NONCE_ACCOUNT_LENGTH,
      programId: this.programId
    }));
    const a = {
      noncePubkey: e.noncePubkey,
      authorizedPubkey: e.authorizedPubkey
    };
    return n.add(this.nonceInitialize(a)), n;
  }
  /**
   * Generate an instruction to initialize a Nonce account
   */
  static nonceInitialize(e) {
    const n = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, a = encodeData(n, {
      authorized: toBuffer(e.authorizedPubkey.toBuffer())
    }), c = {
      keys: [{
        pubkey: e.noncePubkey,
        isSigner: !1,
        isWritable: !0
      }, {
        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
        isSigner: !1,
        isWritable: !1
      }, {
        pubkey: SYSVAR_RENT_PUBKEY,
        isSigner: !1,
        isWritable: !1
      }],
      programId: this.programId,
      data: a
    };
    return new TransactionInstruction(c);
  }
  /**
   * Generate an instruction to advance the nonce in a Nonce account
   */
  static nonceAdvance(e) {
    const n = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, a = encodeData(n), c = {
      keys: [{
        pubkey: e.noncePubkey,
        isSigner: !1,
        isWritable: !0
      }, {
        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
        isSigner: !1,
        isWritable: !1
      }, {
        pubkey: e.authorizedPubkey,
        isSigner: !0,
        isWritable: !1
      }],
      programId: this.programId,
      data: a
    };
    return new TransactionInstruction(c);
  }
  /**
   * Generate a transaction instruction that withdraws lamports from a Nonce account
   */
  static nonceWithdraw(e) {
    const n = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, a = encodeData(n, {
      lamports: e.lamports
    });
    return new TransactionInstruction({
      keys: [{
        pubkey: e.noncePubkey,
        isSigner: !1,
        isWritable: !0
      }, {
        pubkey: e.toPubkey,
        isSigner: !1,
        isWritable: !0
      }, {
        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
        isSigner: !1,
        isWritable: !1
      }, {
        pubkey: SYSVAR_RENT_PUBKEY,
        isSigner: !1,
        isWritable: !1
      }, {
        pubkey: e.authorizedPubkey,
        isSigner: !0,
        isWritable: !1
      }],
      programId: this.programId,
      data: a
    });
  }
  /**
   * Generate a transaction instruction that authorizes a new PublicKey as the authority
   * on a Nonce account.
   */
  static nonceAuthorize(e) {
    const n = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, a = encodeData(n, {
      authorized: toBuffer(e.newAuthorizedPubkey.toBuffer())
    });
    return new TransactionInstruction({
      keys: [{
        pubkey: e.noncePubkey,
        isSigner: !1,
        isWritable: !0
      }, {
        pubkey: e.authorizedPubkey,
        isSigner: !0,
        isWritable: !1
      }],
      programId: this.programId,
      data: a
    });
  }
  /**
   * Generate a transaction instruction that allocates space in an account without funding
   */
  static allocate(e) {
    let n, a;
    if ("basePubkey" in e) {
      const c = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;
      n = encodeData(c, {
        base: toBuffer(e.basePubkey.toBuffer()),
        seed: e.seed,
        space: e.space,
        programId: toBuffer(e.programId.toBuffer())
      }), a = [{
        pubkey: e.accountPubkey,
        isSigner: !1,
        isWritable: !0
      }, {
        pubkey: e.basePubkey,
        isSigner: !0,
        isWritable: !1
      }];
    } else {
      const c = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;
      n = encodeData(c, {
        space: e.space
      }), a = [{
        pubkey: e.accountPubkey,
        isSigner: !0,
        isWritable: !0
      }];
    }
    return new TransactionInstruction({
      keys: a,
      programId: this.programId,
      data: n
    });
  }
}
SystemProgram.programId = new PublicKey("11111111111111111111111111111111");
new PublicKey("BPFLoader2111111111111111111111111111111111");
function getDefaultExportFromCjs(t) {
  return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
}
var objToString = Object.prototype.toString, objKeys = Object.keys || function(t) {
  var e = [];
  for (var n in t)
    e.push(n);
  return e;
};
function stringify(t, e) {
  var n, a, c, o, d, m, w;
  if (t === !0)
    return "true";
  if (t === !1)
    return "false";
  switch (typeof t) {
    case "object":
      if (t === null)
        return null;
      if (t.toJSON && typeof t.toJSON == "function")
        return stringify(t.toJSON(), e);
      if (w = objToString.call(t), w === "[object Array]") {
        for (c = "[", a = t.length - 1, n = 0; n < a; n++)
          c += stringify(t[n], !0) + ",";
        return a > -1 && (c += stringify(t[n], !0)), c + "]";
      } else if (w === "[object Object]") {
        for (o = objKeys(t).sort(), a = o.length, c = "", n = 0; n < a; )
          d = o[n], m = stringify(t[d], !1), m !== void 0 && (c && (c += ","), c += JSON.stringify(d) + ":" + m), n++;
        return "{" + c + "}";
      } else
        return JSON.stringify(t);
    case "function":
    case "undefined":
      return e ? null : void 0;
    case "string":
      return JSON.stringify(t);
    default:
      return isFinite(t) ? t : null;
  }
}
var fastStableStringify = function(t) {
  var e = stringify(t, !1);
  if (e !== void 0)
    return "" + e;
}, fastStableStringify$1 = /* @__PURE__ */ getDefaultExportFromCjs(fastStableStringify);
const MINIMUM_SLOT_PER_EPOCH = 32;
function trailingZeros(t) {
  let e = 0;
  for (; t > 1; )
    t /= 2, e++;
  return e;
}
function nextPowerOfTwo(t) {
  return t === 0 ? 1 : (t--, t |= t >> 1, t |= t >> 2, t |= t >> 4, t |= t >> 8, t |= t >> 16, t |= t >> 32, t + 1);
}
class EpochSchedule {
  constructor(e, n, a, c, o) {
    this.slotsPerEpoch = void 0, this.leaderScheduleSlotOffset = void 0, this.warmup = void 0, this.firstNormalEpoch = void 0, this.firstNormalSlot = void 0, this.slotsPerEpoch = e, this.leaderScheduleSlotOffset = n, this.warmup = a, this.firstNormalEpoch = c, this.firstNormalSlot = o;
  }
  getEpoch(e) {
    return this.getEpochAndSlotIndex(e)[0];
  }
  getEpochAndSlotIndex(e) {
    if (e < this.firstNormalSlot) {
      const n = trailingZeros(nextPowerOfTwo(e + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1, a = this.getSlotsInEpoch(n), c = e - (a - MINIMUM_SLOT_PER_EPOCH);
      return [n, c];
    } else {
      const n = e - this.firstNormalSlot, a = Math.floor(n / this.slotsPerEpoch), c = this.firstNormalEpoch + a, o = n % this.slotsPerEpoch;
      return [c, o];
    }
  }
  getFirstSlotInEpoch(e) {
    return e <= this.firstNormalEpoch ? (Math.pow(2, e) - 1) * MINIMUM_SLOT_PER_EPOCH : (e - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;
  }
  getLastSlotInEpoch(e) {
    return this.getFirstSlotInEpoch(e) + this.getSlotsInEpoch(e) - 1;
  }
  getSlotsInEpoch(e) {
    return e < this.firstNormalEpoch ? Math.pow(2, e + trailingZeros(MINIMUM_SLOT_PER_EPOCH)) : this.slotsPerEpoch;
  }
}
class SendTransactionError extends Error {
  constructor(e, n) {
    super(e), this.logs = void 0, this.logs = n;
  }
}
class SolanaJSONRPCError extends Error {
  constructor({
    code: e,
    message: n,
    data: a
  }, c) {
    super(c != null ? `${c}: ${n}` : n), this.code = void 0, this.data = void 0, this.code = e, this.data = a, this.name = "SolanaJSONRPCError";
  }
}
var fetchImpl = globalThis.fetch;
class RpcWebSocketClient extends RpcWebSocketCommonClient {
  constructor(e, n, a) {
    const c = (o) => {
      const d = createRpc(o, {
        autoconnect: !0,
        max_reconnects: 5,
        reconnect: !0,
        reconnect_interval: 1e3,
        ...n
      });
      return "socket" in d ? this.underlyingSocket = d.socket : this.underlyingSocket = d, d;
    };
    super(c, e, n, a), this.underlyingSocket = void 0;
  }
  call(...e) {
    const n = this.underlyingSocket?.readyState;
    return n === 1 ? super.call(...e) : Promise.reject(new Error("Tried to call a JSON-RPC method `" + e[0] + "` but the socket was not `CONNECTING` or `OPEN` (`readyState` was " + n + ")"));
  }
  notify(...e) {
    const n = this.underlyingSocket?.readyState;
    return n === 1 ? super.notify(...e) : Promise.reject(new Error("Tried to send a JSON-RPC notification `" + e[0] + "` but the socket was not `CONNECTING` or `OPEN` (`readyState` was " + n + ")"));
  }
}
function decodeData(t, e) {
  let n;
  try {
    n = t.layout.decode(e);
  } catch (a) {
    throw new Error("invalid instruction; " + a);
  }
  if (n.typeIndex !== t.index)
    throw new Error(`invalid account data; account type mismatch ${n.typeIndex} != ${t.index}`);
  return n;
}
const LOOKUP_TABLE_META_SIZE = 56;
class AddressLookupTableAccount {
  constructor(e) {
    this.key = void 0, this.state = void 0, this.key = e.key, this.state = e.state;
  }
  isActive() {
    const e = BigInt("0xffffffffffffffff");
    return this.state.deactivationSlot === e;
  }
  static deserialize(e) {
    const n = decodeData(LookupTableMetaLayout, e), a = e.length - LOOKUP_TABLE_META_SIZE;
    assert$2(a >= 0, "lookup table is invalid"), assert$2(a % 32 === 0, "lookup table is invalid");
    const c = a / 32, {
      addresses: o
    } = struct([seq(publicKey(), c, "addresses")]).decode(e.slice(LOOKUP_TABLE_META_SIZE));
    return {
      deactivationSlot: n.deactivationSlot,
      lastExtendedSlot: n.lastExtendedSlot,
      lastExtendedSlotStartIndex: n.lastExtendedStartIndex,
      authority: n.authority.length !== 0 ? new PublicKey(n.authority[0]) : void 0,
      addresses: o.map((d) => new PublicKey(d))
    };
  }
}
const LookupTableMetaLayout = {
  index: 1,
  layout: struct([
    u32$1("typeIndex"),
    u64$1("deactivationSlot"),
    nu64("lastExtendedSlot"),
    u8("lastExtendedStartIndex"),
    u8(),
    // option
    seq(publicKey(), offset(u8(), -1), "authority")
  ])
}, URL_RE = /^[^:]+:\/\/([^:[]+|\[[^\]]+\])(:\d+)?(.*)/i;
function makeWebsocketUrl(t) {
  const e = t.match(URL_RE);
  if (e == null)
    throw TypeError(`Failed to validate endpoint URL \`${t}\``);
  const [
    n,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    a,
    c,
    o
  ] = e, d = t.startsWith("https:") ? "wss:" : "ws:", m = c == null ? null : parseInt(c.slice(1), 10), w = (
    // Only shift the port by +1 as a convention for ws(s) only if given endpoint
    // is explicitly specifying the endpoint port (HTTP-based RPC), assuming
    // we're directly trying to connect to solana-validator's ws listening port.
    // When the endpoint omits the port, we're connecting to the protocol
    // default ports: http(80) or https(443) and it's assumed we're behind a reverse
    // proxy which manages WebSocket upgrade and backend port redirection.
    m == null ? "" : `:${m + 1}`
  );
  return `${d}//${a}${w}${o}`;
}
const PublicKeyFromString = coerce(instance(PublicKey), string(), (t) => new PublicKey(t)), RawAccountDataResult = tuple([string(), literal("base64")]), BufferFromRawAccountData = coerce(instance(Buffer$1$1), RawAccountDataResult, (t) => Buffer$1$1.from(t[0], "base64")), BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1e3;
function assertEndpointUrl(t) {
  if (/^https?:/.test(t) === !1)
    throw new TypeError("Endpoint URL must start with `http:` or `https:`.");
  return t;
}
function extractCommitmentFromConfig(t) {
  let e, n;
  if (typeof t == "string")
    e = t;
  else if (t) {
    const {
      commitment: a,
      ...c
    } = t;
    e = a, n = c;
  }
  return {
    commitment: e,
    config: n
  };
}
function createRpcResult(t) {
  return union([type({
    jsonrpc: literal("2.0"),
    id: string(),
    result: t
  }), type({
    jsonrpc: literal("2.0"),
    id: string(),
    error: type({
      code: unknown(),
      message: string(),
      data: optional(any())
    })
  })]);
}
const UnknownRpcResult = createRpcResult(unknown());
function jsonRpcResult(t) {
  return coerce(createRpcResult(t), UnknownRpcResult, (e) => "error" in e ? e : {
    ...e,
    result: create(e.result, t)
  });
}
function jsonRpcResultAndContext(t) {
  return jsonRpcResult(type({
    context: type({
      slot: number$2()
    }),
    value: t
  }));
}
function notificationResultAndContext(t) {
  return type({
    context: type({
      slot: number$2()
    }),
    value: t
  });
}
function versionedMessageFromResponse(t, e) {
  return t === 0 ? new MessageV0({
    header: e.header,
    staticAccountKeys: e.accountKeys.map((n) => new PublicKey(n)),
    recentBlockhash: e.recentBlockhash,
    compiledInstructions: e.instructions.map((n) => ({
      programIdIndex: n.programIdIndex,
      accountKeyIndexes: n.accounts,
      data: bs58$1.decode(n.data)
    })),
    addressTableLookups: e.addressTableLookups
  }) : new Message(e);
}
const GetInflationGovernorResult = type({
  foundation: number$2(),
  foundationTerm: number$2(),
  initial: number$2(),
  taper: number$2(),
  terminal: number$2()
}), GetInflationRewardResult = jsonRpcResult(array(nullable(type({
  epoch: number$2(),
  effectiveSlot: number$2(),
  amount: number$2(),
  postBalance: number$2(),
  commission: optional(nullable(number$2()))
})))), GetRecentPrioritizationFeesResult = array(type({
  slot: number$2(),
  prioritizationFee: number$2()
})), GetInflationRateResult = type({
  total: number$2(),
  validator: number$2(),
  foundation: number$2(),
  epoch: number$2()
}), GetEpochInfoResult = type({
  epoch: number$2(),
  slotIndex: number$2(),
  slotsInEpoch: number$2(),
  absoluteSlot: number$2(),
  blockHeight: optional(number$2()),
  transactionCount: optional(number$2())
}), GetEpochScheduleResult = type({
  slotsPerEpoch: number$2(),
  leaderScheduleSlotOffset: number$2(),
  warmup: boolean(),
  firstNormalEpoch: number$2(),
  firstNormalSlot: number$2()
}), GetLeaderScheduleResult = record(string(), array(number$2())), TransactionErrorResult = nullable(union([type({}), string()])), SignatureStatusResult = type({
  err: TransactionErrorResult
}), SignatureReceivedResult = literal("receivedSignature"), VersionResult = type({
  "solana-core": string(),
  "feature-set": optional(number$2())
}), SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({
  err: nullable(union([type({}), string()])),
  logs: nullable(array(string())),
  accounts: optional(nullable(array(nullable(type({
    executable: boolean(),
    owner: string(),
    lamports: number$2(),
    data: array(string()),
    rentEpoch: optional(number$2())
  }))))),
  unitsConsumed: optional(number$2()),
  returnData: optional(nullable(type({
    programId: string(),
    data: tuple([string(), literal("base64")])
  })))
})), BlockProductionResponseStruct = jsonRpcResultAndContext(type({
  byIdentity: record(string(), array(number$2())),
  range: type({
    firstSlot: number$2(),
    lastSlot: number$2()
  })
}));
function createRpcClient(t, e, n, a, c, o) {
  const d = n || fetchImpl;
  let m;
  o != null && console.warn("You have supplied an `httpAgent` when creating a `Connection` in a browser environment.It has been ignored; `httpAgent` is only used in Node environments.");
  let w;
  return a && (w = async (A, B) => {
    const P = await new Promise((I, O) => {
      try {
        a(A, B, (L, C) => I([L, C]));
      } catch (L) {
        O(L);
      }
    });
    return await d(...P);
  }), new RpcClient(async (A, B) => {
    const P = {
      method: "POST",
      body: A,
      agent: m,
      headers: Object.assign({
        "Content-Type": "application/json"
      }, e || {}, COMMON_HTTP_HEADERS)
    };
    try {
      let I = 5, O, L = 500;
      for (; w ? O = await w(t, P) : O = await d(t, P), !(O.status !== 429 || c === !0 || (I -= 1, I === 0)); )
        console.error(`Server responded with ${O.status} ${O.statusText}.  Retrying after ${L}ms delay...`), await sleep$1(L), L *= 2;
      const C = await O.text();
      O.ok ? B(null, C) : B(new Error(`${O.status} ${O.statusText}: ${C}`));
    } catch (I) {
      I instanceof Error && B(I);
    }
  }, {});
}
function createRpcRequest(t) {
  return (e, n) => new Promise((a, c) => {
    t.request(e, n, (o, d) => {
      if (o) {
        c(o);
        return;
      }
      a(d);
    });
  });
}
function createRpcBatchRequest(t) {
  return (e) => new Promise((n, a) => {
    e.length === 0 && n([]);
    const c = e.map((o) => t.request(o.methodName, o.args));
    t.request(c, (o, d) => {
      if (o) {
        a(o);
        return;
      }
      n(d);
    });
  });
}
const GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult), GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult), GetRecentPrioritizationFeesRpcResult = jsonRpcResult(GetRecentPrioritizationFeesResult), GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult), GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult), GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult), SlotRpcResult = jsonRpcResult(number$2()), GetSupplyRpcResult = jsonRpcResultAndContext(type({
  total: number$2(),
  circulating: number$2(),
  nonCirculating: number$2(),
  nonCirculatingAccounts: array(PublicKeyFromString)
})), TokenAmountResult = type({
  amount: string(),
  uiAmount: nullable(number$2()),
  decimals: number$2(),
  uiAmountString: optional(string())
}), GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({
  address: PublicKeyFromString,
  amount: string(),
  uiAmount: nullable(number$2()),
  decimals: number$2(),
  uiAmountString: optional(string())
}))), GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({
  pubkey: PublicKeyFromString,
  account: type({
    executable: boolean(),
    owner: PublicKeyFromString,
    lamports: number$2(),
    data: BufferFromRawAccountData,
    rentEpoch: number$2()
  })
}))), ParsedAccountDataResult = type({
  program: string(),
  parsed: unknown(),
  space: number$2()
}), GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({
  pubkey: PublicKeyFromString,
  account: type({
    executable: boolean(),
    owner: PublicKeyFromString,
    lamports: number$2(),
    data: ParsedAccountDataResult,
    rentEpoch: number$2()
  })
}))), GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({
  lamports: number$2(),
  address: PublicKeyFromString
}))), AccountInfoResult = type({
  executable: boolean(),
  owner: PublicKeyFromString,
  lamports: number$2(),
  data: BufferFromRawAccountData,
  rentEpoch: number$2()
}), KeyedAccountInfoResult = type({
  pubkey: PublicKeyFromString,
  account: AccountInfoResult
}), ParsedOrRawAccountData = coerce(union([instance(Buffer$1$1), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), (t) => Array.isArray(t) ? create(t, BufferFromRawAccountData) : t), ParsedAccountInfoResult = type({
  executable: boolean(),
  owner: PublicKeyFromString,
  lamports: number$2(),
  data: ParsedOrRawAccountData,
  rentEpoch: number$2()
}), KeyedParsedAccountInfoResult = type({
  pubkey: PublicKeyFromString,
  account: ParsedAccountInfoResult
}), StakeActivationResult = type({
  state: union([literal("active"), literal("inactive"), literal("activating"), literal("deactivating")]),
  active: number$2(),
  inactive: number$2()
}), GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({
  signature: string(),
  slot: number$2(),
  err: TransactionErrorResult,
  memo: nullable(string()),
  blockTime: optional(nullable(number$2()))
}))), GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({
  signature: string(),
  slot: number$2(),
  err: TransactionErrorResult,
  memo: nullable(string()),
  blockTime: optional(nullable(number$2()))
}))), AccountNotificationResult = type({
  subscription: number$2(),
  result: notificationResultAndContext(AccountInfoResult)
}), ProgramAccountInfoResult = type({
  pubkey: PublicKeyFromString,
  account: AccountInfoResult
}), ProgramAccountNotificationResult = type({
  subscription: number$2(),
  result: notificationResultAndContext(ProgramAccountInfoResult)
}), SlotInfoResult = type({
  parent: number$2(),
  slot: number$2(),
  root: number$2()
}), SlotNotificationResult = type({
  subscription: number$2(),
  result: SlotInfoResult
}), SlotUpdateResult = union([type({
  type: union([literal("firstShredReceived"), literal("completed"), literal("optimisticConfirmation"), literal("root")]),
  slot: number$2(),
  timestamp: number$2()
}), type({
  type: literal("createdBank"),
  parent: number$2(),
  slot: number$2(),
  timestamp: number$2()
}), type({
  type: literal("frozen"),
  slot: number$2(),
  timestamp: number$2(),
  stats: type({
    numTransactionEntries: number$2(),
    numSuccessfulTransactions: number$2(),
    numFailedTransactions: number$2(),
    maxTransactionsPerEntry: number$2()
  })
}), type({
  type: literal("dead"),
  slot: number$2(),
  timestamp: number$2(),
  err: string()
})]), SlotUpdateNotificationResult = type({
  subscription: number$2(),
  result: SlotUpdateResult
}), SignatureNotificationResult = type({
  subscription: number$2(),
  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))
}), RootNotificationResult = type({
  subscription: number$2(),
  result: number$2()
}), ContactInfoResult = type({
  pubkey: string(),
  gossip: nullable(string()),
  tpu: nullable(string()),
  rpc: nullable(string()),
  version: nullable(string())
}), VoteAccountInfoResult = type({
  votePubkey: string(),
  nodePubkey: string(),
  activatedStake: number$2(),
  epochVoteAccount: boolean(),
  epochCredits: array(tuple([number$2(), number$2(), number$2()])),
  commission: number$2(),
  lastVote: number$2(),
  rootSlot: nullable(number$2())
}), GetVoteAccounts = jsonRpcResult(type({
  current: array(VoteAccountInfoResult),
  delinquent: array(VoteAccountInfoResult)
})), ConfirmationStatus = union([literal("processed"), literal("confirmed"), literal("finalized")]), SignatureStatusResponse = type({
  slot: number$2(),
  confirmations: nullable(number$2()),
  err: TransactionErrorResult,
  confirmationStatus: optional(ConfirmationStatus)
}), GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse))), GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number$2()), AddressTableLookupStruct = type({
  accountKey: PublicKeyFromString,
  writableIndexes: array(number$2()),
  readonlyIndexes: array(number$2())
}), ConfirmedTransactionResult = type({
  signatures: array(string()),
  message: type({
    accountKeys: array(string()),
    header: type({
      numRequiredSignatures: number$2(),
      numReadonlySignedAccounts: number$2(),
      numReadonlyUnsignedAccounts: number$2()
    }),
    instructions: array(type({
      accounts: array(number$2()),
      data: string(),
      programIdIndex: number$2()
    })),
    recentBlockhash: string(),
    addressTableLookups: optional(array(AddressTableLookupStruct))
  })
}), AnnotatedAccountKey = type({
  pubkey: PublicKeyFromString,
  signer: boolean(),
  writable: boolean(),
  source: optional(union([literal("transaction"), literal("lookupTable")]))
}), ConfirmedTransactionAccountsModeResult = type({
  accountKeys: array(AnnotatedAccountKey),
  signatures: array(string())
}), ParsedInstructionResult = type({
  parsed: unknown(),
  program: string(),
  programId: PublicKeyFromString
}), RawInstructionResult = type({
  accounts: array(PublicKeyFromString),
  data: string(),
  programId: PublicKeyFromString
}), InstructionResult = union([RawInstructionResult, ParsedInstructionResult]), UnknownInstructionResult = union([type({
  parsed: unknown(),
  program: string(),
  programId: string()
}), type({
  accounts: array(string()),
  data: string(),
  programId: string()
})]), ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, (t) => "accounts" in t ? create(t, RawInstructionResult) : create(t, ParsedInstructionResult)), ParsedConfirmedTransactionResult = type({
  signatures: array(string()),
  message: type({
    accountKeys: array(AnnotatedAccountKey),
    instructions: array(ParsedOrRawInstruction),
    recentBlockhash: string(),
    addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))
  })
}), TokenBalanceResult = type({
  accountIndex: number$2(),
  mint: string(),
  owner: optional(string()),
  uiTokenAmount: TokenAmountResult
}), LoadedAddressesResult = type({
  writable: array(PublicKeyFromString),
  readonly: array(PublicKeyFromString)
}), ConfirmedTransactionMetaResult = type({
  err: TransactionErrorResult,
  fee: number$2(),
  innerInstructions: optional(nullable(array(type({
    index: number$2(),
    instructions: array(type({
      accounts: array(number$2()),
      data: string(),
      programIdIndex: number$2()
    }))
  })))),
  preBalances: array(number$2()),
  postBalances: array(number$2()),
  logMessages: optional(nullable(array(string()))),
  preTokenBalances: optional(nullable(array(TokenBalanceResult))),
  postTokenBalances: optional(nullable(array(TokenBalanceResult))),
  loadedAddresses: optional(LoadedAddressesResult),
  computeUnitsConsumed: optional(number$2())
}), ParsedConfirmedTransactionMetaResult = type({
  err: TransactionErrorResult,
  fee: number$2(),
  innerInstructions: optional(nullable(array(type({
    index: number$2(),
    instructions: array(ParsedOrRawInstruction)
  })))),
  preBalances: array(number$2()),
  postBalances: array(number$2()),
  logMessages: optional(nullable(array(string()))),
  preTokenBalances: optional(nullable(array(TokenBalanceResult))),
  postTokenBalances: optional(nullable(array(TokenBalanceResult))),
  loadedAddresses: optional(LoadedAddressesResult),
  computeUnitsConsumed: optional(number$2())
}), TransactionVersionStruct = union([literal(0), literal("legacy")]), RewardsResult = type({
  pubkey: string(),
  lamports: number$2(),
  postBalance: nullable(number$2()),
  rewardType: nullable(string()),
  commission: optional(nullable(number$2()))
}), GetBlockRpcResult = jsonRpcResult(nullable(type({
  blockhash: string(),
  previousBlockhash: string(),
  parentSlot: number$2(),
  transactions: array(type({
    transaction: ConfirmedTransactionResult,
    meta: nullable(ConfirmedTransactionMetaResult),
    version: optional(TransactionVersionStruct)
  })),
  rewards: optional(array(RewardsResult)),
  blockTime: nullable(number$2()),
  blockHeight: nullable(number$2())
}))), GetNoneModeBlockRpcResult = jsonRpcResult(nullable(type({
  blockhash: string(),
  previousBlockhash: string(),
  parentSlot: number$2(),
  rewards: optional(array(RewardsResult)),
  blockTime: nullable(number$2()),
  blockHeight: nullable(number$2())
}))), GetAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({
  blockhash: string(),
  previousBlockhash: string(),
  parentSlot: number$2(),
  transactions: array(type({
    transaction: ConfirmedTransactionAccountsModeResult,
    meta: nullable(ConfirmedTransactionMetaResult),
    version: optional(TransactionVersionStruct)
  })),
  rewards: optional(array(RewardsResult)),
  blockTime: nullable(number$2()),
  blockHeight: nullable(number$2())
}))), GetParsedBlockRpcResult = jsonRpcResult(nullable(type({
  blockhash: string(),
  previousBlockhash: string(),
  parentSlot: number$2(),
  transactions: array(type({
    transaction: ParsedConfirmedTransactionResult,
    meta: nullable(ParsedConfirmedTransactionMetaResult),
    version: optional(TransactionVersionStruct)
  })),
  rewards: optional(array(RewardsResult)),
  blockTime: nullable(number$2()),
  blockHeight: nullable(number$2())
}))), GetParsedAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({
  blockhash: string(),
  previousBlockhash: string(),
  parentSlot: number$2(),
  transactions: array(type({
    transaction: ConfirmedTransactionAccountsModeResult,
    meta: nullable(ParsedConfirmedTransactionMetaResult),
    version: optional(TransactionVersionStruct)
  })),
  rewards: optional(array(RewardsResult)),
  blockTime: nullable(number$2()),
  blockHeight: nullable(number$2())
}))), GetParsedNoneModeBlockRpcResult = jsonRpcResult(nullable(type({
  blockhash: string(),
  previousBlockhash: string(),
  parentSlot: number$2(),
  rewards: optional(array(RewardsResult)),
  blockTime: nullable(number$2()),
  blockHeight: nullable(number$2())
}))), GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({
  blockhash: string(),
  previousBlockhash: string(),
  parentSlot: number$2(),
  transactions: array(type({
    transaction: ConfirmedTransactionResult,
    meta: nullable(ConfirmedTransactionMetaResult)
  })),
  rewards: optional(array(RewardsResult)),
  blockTime: nullable(number$2())
}))), GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({
  blockhash: string(),
  previousBlockhash: string(),
  parentSlot: number$2(),
  signatures: array(string()),
  blockTime: nullable(number$2())
}))), GetTransactionRpcResult = jsonRpcResult(nullable(type({
  slot: number$2(),
  meta: nullable(ConfirmedTransactionMetaResult),
  blockTime: optional(nullable(number$2())),
  transaction: ConfirmedTransactionResult,
  version: optional(TransactionVersionStruct)
}))), GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({
  slot: number$2(),
  transaction: ParsedConfirmedTransactionResult,
  meta: nullable(ParsedConfirmedTransactionMetaResult),
  blockTime: optional(nullable(number$2())),
  version: optional(TransactionVersionStruct)
}))), GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({
  blockhash: string(),
  feeCalculator: type({
    lamportsPerSignature: number$2()
  })
})), GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({
  blockhash: string(),
  lastValidBlockHeight: number$2()
})), IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean()), PerfSampleResult = type({
  slot: number$2(),
  numTransactions: number$2(),
  numSlots: number$2(),
  samplePeriodSecs: number$2()
}), GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult)), GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({
  feeCalculator: type({
    lamportsPerSignature: number$2()
  })
}))), RequestAirdropRpcResult = jsonRpcResult(string()), SendTransactionRpcResult = jsonRpcResult(string()), LogsResult = type({
  err: TransactionErrorResult,
  logs: array(string()),
  signature: string()
}), LogsNotificationResult = type({
  result: notificationResultAndContext(LogsResult),
  subscription: number$2()
}), COMMON_HTTP_HEADERS = {
  "solana-client": "js/0.0.0-development"
};
class Connection {
  /**
   * Establish a JSON RPC connection
   *
   * @param endpoint URL to the fullnode JSON RPC endpoint
   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object
   */
  constructor(e, n) {
    this._commitment = void 0, this._confirmTransactionInitialTimeout = void 0, this._rpcEndpoint = void 0, this._rpcWsEndpoint = void 0, this._rpcClient = void 0, this._rpcRequest = void 0, this._rpcBatchRequest = void 0, this._rpcWebSocket = void 0, this._rpcWebSocketConnected = !1, this._rpcWebSocketHeartbeat = null, this._rpcWebSocketIdleTimeout = null, this._rpcWebSocketGeneration = 0, this._disableBlockhashCaching = !1, this._pollingBlockhash = !1, this._blockhashInfo = {
      latestBlockhash: null,
      lastFetch: 0,
      transactionSignatures: [],
      simulatedSignatures: []
    }, this._nextClientSubscriptionId = 0, this._subscriptionDisposeFunctionsByClientSubscriptionId = {}, this._subscriptionHashByClientSubscriptionId = {}, this._subscriptionStateChangeCallbacksByHash = {}, this._subscriptionCallbacksByServerSubscriptionId = {}, this._subscriptionsByHash = {}, this._subscriptionsAutoDisposedByRpc = /* @__PURE__ */ new Set(), this.getBlockHeight = /* @__PURE__ */ (() => {
      const S = {};
      return async (A) => {
        const {
          commitment: B,
          config: P
        } = extractCommitmentFromConfig(A), I = this._buildArgs([], B, void 0, P), O = fastStableStringify$1(I);
        return S[O] = S[O] ?? (async () => {
          try {
            const L = await this._rpcRequest("getBlockHeight", I), C = create(L, jsonRpcResult(number$2()));
            if ("error" in C)
              throw new SolanaJSONRPCError(C.error, "failed to get block height information");
            return C.result;
          } finally {
            delete S[O];
          }
        })(), await S[O];
      };
    })();
    let a, c, o, d, m, w;
    n && typeof n == "string" ? this._commitment = n : n && (this._commitment = n.commitment, this._confirmTransactionInitialTimeout = n.confirmTransactionInitialTimeout, a = n.wsEndpoint, c = n.httpHeaders, o = n.fetch, d = n.fetchMiddleware, m = n.disableRetryOnRateLimit, w = n.httpAgent), this._rpcEndpoint = assertEndpointUrl(e), this._rpcWsEndpoint = a || makeWebsocketUrl(e), this._rpcClient = createRpcClient(e, c, o, d, m, w), this._rpcRequest = createRpcRequest(this._rpcClient), this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient), this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {
      autoconnect: !1,
      max_reconnects: 1 / 0
    }), this._rpcWebSocket.on("open", this._wsOnOpen.bind(this)), this._rpcWebSocket.on("error", this._wsOnError.bind(this)), this._rpcWebSocket.on("close", this._wsOnClose.bind(this)), this._rpcWebSocket.on("accountNotification", this._wsOnAccountNotification.bind(this)), this._rpcWebSocket.on("programNotification", this._wsOnProgramAccountNotification.bind(this)), this._rpcWebSocket.on("slotNotification", this._wsOnSlotNotification.bind(this)), this._rpcWebSocket.on("slotsUpdatesNotification", this._wsOnSlotUpdatesNotification.bind(this)), this._rpcWebSocket.on("signatureNotification", this._wsOnSignatureNotification.bind(this)), this._rpcWebSocket.on("rootNotification", this._wsOnRootNotification.bind(this)), this._rpcWebSocket.on("logsNotification", this._wsOnLogsNotification.bind(this));
  }
  /**
   * The default commitment used for requests
   */
  get commitment() {
    return this._commitment;
  }
  /**
   * The RPC endpoint
   */
  get rpcEndpoint() {
    return this._rpcEndpoint;
  }
  /**
   * Fetch the balance for the specified public key, return with context
   */
  async getBalanceAndContext(e, n) {
    const {
      commitment: a,
      config: c
    } = extractCommitmentFromConfig(n), o = this._buildArgs([e.toBase58()], a, void 0, c), d = await this._rpcRequest("getBalance", o), m = create(d, jsonRpcResultAndContext(number$2()));
    if ("error" in m)
      throw new SolanaJSONRPCError(m.error, `failed to get balance for ${e.toBase58()}`);
    return m.result;
  }
  /**
   * Fetch the balance for the specified public key
   */
  async getBalance(e, n) {
    return await this.getBalanceAndContext(e, n).then((a) => a.value).catch((a) => {
      throw new Error("failed to get balance of account " + e.toBase58() + ": " + a);
    });
  }
  /**
   * Fetch the estimated production time of a block
   */
  async getBlockTime(e) {
    const n = await this._rpcRequest("getBlockTime", [e]), a = create(n, jsonRpcResult(nullable(number$2())));
    if ("error" in a)
      throw new SolanaJSONRPCError(a.error, `failed to get block time for slot ${e}`);
    return a.result;
  }
  /**
   * Fetch the lowest slot that the node has information about in its ledger.
   * This value may increase over time if the node is configured to purge older ledger data
   */
  async getMinimumLedgerSlot() {
    const e = await this._rpcRequest("minimumLedgerSlot", []), n = create(e, jsonRpcResult(number$2()));
    if ("error" in n)
      throw new SolanaJSONRPCError(n.error, "failed to get minimum ledger slot");
    return n.result;
  }
  /**
   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger
   */
  async getFirstAvailableBlock() {
    const e = await this._rpcRequest("getFirstAvailableBlock", []), n = create(e, SlotRpcResult);
    if ("error" in n)
      throw new SolanaJSONRPCError(n.error, "failed to get first available block");
    return n.result;
  }
  /**
   * Fetch information about the current supply
   */
  async getSupply(e) {
    let n = {};
    typeof e == "string" ? n = {
      commitment: e
    } : e ? n = {
      ...e,
      commitment: e && e.commitment || this.commitment
    } : n = {
      commitment: this.commitment
    };
    const a = await this._rpcRequest("getSupply", [n]), c = create(a, GetSupplyRpcResult);
    if ("error" in c)
      throw new SolanaJSONRPCError(c.error, "failed to get supply");
    return c.result;
  }
  /**
   * Fetch the current supply of a token mint
   */
  async getTokenSupply(e, n) {
    const a = this._buildArgs([e.toBase58()], n), c = await this._rpcRequest("getTokenSupply", a), o = create(c, jsonRpcResultAndContext(TokenAmountResult));
    if ("error" in o)
      throw new SolanaJSONRPCError(o.error, "failed to get token supply");
    return o.result;
  }
  /**
   * Fetch the current balance of a token account
   */
  async getTokenAccountBalance(e, n) {
    const a = this._buildArgs([e.toBase58()], n), c = await this._rpcRequest("getTokenAccountBalance", a), o = create(c, jsonRpcResultAndContext(TokenAmountResult));
    if ("error" in o)
      throw new SolanaJSONRPCError(o.error, "failed to get token account balance");
    return o.result;
  }
  /**
   * Fetch all the token accounts owned by the specified account
   *
   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}
   */
  async getTokenAccountsByOwner(e, n, a) {
    const {
      commitment: c,
      config: o
    } = extractCommitmentFromConfig(a);
    let d = [e.toBase58()];
    "mint" in n ? d.push({
      mint: n.mint.toBase58()
    }) : d.push({
      programId: n.programId.toBase58()
    });
    const m = this._buildArgs(d, c, "base64", o), w = await this._rpcRequest("getTokenAccountsByOwner", m), S = create(w, GetTokenAccountsByOwner);
    if ("error" in S)
      throw new SolanaJSONRPCError(S.error, `failed to get token accounts owned by account ${e.toBase58()}`);
    return S.result;
  }
  /**
   * Fetch parsed token accounts owned by the specified account
   *
   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}
   */
  async getParsedTokenAccountsByOwner(e, n, a) {
    let c = [e.toBase58()];
    "mint" in n ? c.push({
      mint: n.mint.toBase58()
    }) : c.push({
      programId: n.programId.toBase58()
    });
    const o = this._buildArgs(c, a, "jsonParsed"), d = await this._rpcRequest("getTokenAccountsByOwner", o), m = create(d, GetParsedTokenAccountsByOwner);
    if ("error" in m)
      throw new SolanaJSONRPCError(m.error, `failed to get token accounts owned by account ${e.toBase58()}`);
    return m.result;
  }
  /**
   * Fetch the 20 largest accounts with their current balances
   */
  async getLargestAccounts(e) {
    const n = {
      ...e,
      commitment: e && e.commitment || this.commitment
    }, a = n.filter || n.commitment ? [n] : [], c = await this._rpcRequest("getLargestAccounts", a), o = create(c, GetLargestAccountsRpcResult);
    if ("error" in o)
      throw new SolanaJSONRPCError(o.error, "failed to get largest accounts");
    return o.result;
  }
  /**
   * Fetch the 20 largest token accounts with their current balances
   * for a given mint.
   */
  async getTokenLargestAccounts(e, n) {
    const a = this._buildArgs([e.toBase58()], n), c = await this._rpcRequest("getTokenLargestAccounts", a), o = create(c, GetTokenLargestAccountsResult);
    if ("error" in o)
      throw new SolanaJSONRPCError(o.error, "failed to get token largest accounts");
    return o.result;
  }
  /**
   * Fetch all the account info for the specified public key, return with context
   */
  async getAccountInfoAndContext(e, n) {
    const {
      commitment: a,
      config: c
    } = extractCommitmentFromConfig(n), o = this._buildArgs([e.toBase58()], a, "base64", c), d = await this._rpcRequest("getAccountInfo", o), m = create(d, jsonRpcResultAndContext(nullable(AccountInfoResult)));
    if ("error" in m)
      throw new SolanaJSONRPCError(m.error, `failed to get info about account ${e.toBase58()}`);
    return m.result;
  }
  /**
   * Fetch parsed account info for the specified public key
   */
  async getParsedAccountInfo(e, n) {
    const {
      commitment: a,
      config: c
    } = extractCommitmentFromConfig(n), o = this._buildArgs([e.toBase58()], a, "jsonParsed", c), d = await this._rpcRequest("getAccountInfo", o), m = create(d, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));
    if ("error" in m)
      throw new SolanaJSONRPCError(m.error, `failed to get info about account ${e.toBase58()}`);
    return m.result;
  }
  /**
   * Fetch all the account info for the specified public key
   */
  async getAccountInfo(e, n) {
    try {
      return (await this.getAccountInfoAndContext(e, n)).value;
    } catch (a) {
      throw new Error("failed to get info about account " + e.toBase58() + ": " + a);
    }
  }
  /**
   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context
   */
  async getMultipleParsedAccounts(e, n) {
    const {
      commitment: a,
      config: c
    } = extractCommitmentFromConfig(n), o = e.map((S) => S.toBase58()), d = this._buildArgs([o], a, "jsonParsed", c), m = await this._rpcRequest("getMultipleAccounts", d), w = create(m, jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))));
    if ("error" in w)
      throw new SolanaJSONRPCError(w.error, `failed to get info for accounts ${o}`);
    return w.result;
  }
  /**
   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context
   */
  async getMultipleAccountsInfoAndContext(e, n) {
    const {
      commitment: a,
      config: c
    } = extractCommitmentFromConfig(n), o = e.map((S) => S.toBase58()), d = this._buildArgs([o], a, "base64", c), m = await this._rpcRequest("getMultipleAccounts", d), w = create(m, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));
    if ("error" in w)
      throw new SolanaJSONRPCError(w.error, `failed to get info for accounts ${o}`);
    return w.result;
  }
  /**
   * Fetch all the account info for multiple accounts specified by an array of public keys
   */
  async getMultipleAccountsInfo(e, n) {
    return (await this.getMultipleAccountsInfoAndContext(e, n)).value;
  }
  /**
   * Returns epoch activation information for a stake account that has been delegated
   */
  async getStakeActivation(e, n, a) {
    const {
      commitment: c,
      config: o
    } = extractCommitmentFromConfig(n), d = this._buildArgs([e.toBase58()], c, void 0, {
      ...o,
      epoch: a ?? o?.epoch
    }), m = await this._rpcRequest("getStakeActivation", d), w = create(m, jsonRpcResult(StakeActivationResult));
    if ("error" in w)
      throw new SolanaJSONRPCError(w.error, `failed to get Stake Activation ${e.toBase58()}`);
    return w.result;
  }
  /**
   * Fetch all the accounts owned by the specified program id
   *
   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}
   */
  // eslint-disable-next-line no-dupe-class-members
  // eslint-disable-next-line no-dupe-class-members
  async getProgramAccounts(e, n) {
    const {
      commitment: a,
      config: c
    } = extractCommitmentFromConfig(n), {
      encoding: o,
      ...d
    } = c || {}, m = this._buildArgs([e.toBase58()], a, o || "base64", d), w = await this._rpcRequest("getProgramAccounts", m), S = array(KeyedAccountInfoResult), A = d.withContext === !0 ? create(w, jsonRpcResultAndContext(S)) : create(w, jsonRpcResult(S));
    if ("error" in A)
      throw new SolanaJSONRPCError(A.error, `failed to get accounts owned by program ${e.toBase58()}`);
    return A.result;
  }
  /**
   * Fetch and parse all the accounts owned by the specified program id
   *
   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}
   */
  async getParsedProgramAccounts(e, n) {
    const {
      commitment: a,
      config: c
    } = extractCommitmentFromConfig(n), o = this._buildArgs([e.toBase58()], a, "jsonParsed", c), d = await this._rpcRequest("getProgramAccounts", o), m = create(d, jsonRpcResult(array(KeyedParsedAccountInfoResult)));
    if ("error" in m)
      throw new SolanaJSONRPCError(m.error, `failed to get accounts owned by program ${e.toBase58()}`);
    return m.result;
  }
  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */
  // eslint-disable-next-line no-dupe-class-members
  // eslint-disable-next-line no-dupe-class-members
  async confirmTransaction(e, n) {
    let a;
    if (typeof e == "string")
      a = e;
    else {
      const o = e;
      if (o.abortSignal?.aborted)
        return Promise.reject(o.abortSignal.reason);
      a = o.signature;
    }
    let c;
    try {
      c = bs58$1.decode(a);
    } catch {
      throw new Error("signature must be base58 encoded: " + a);
    }
    return assert$2(c.length === 64, "signature has invalid length"), typeof e == "string" ? await this.confirmTransactionUsingLegacyTimeoutStrategy({
      commitment: n || this.commitment,
      signature: a
    }) : "lastValidBlockHeight" in e ? await this.confirmTransactionUsingBlockHeightExceedanceStrategy({
      commitment: n || this.commitment,
      strategy: e
    }) : await this.confirmTransactionUsingDurableNonceStrategy({
      commitment: n || this.commitment,
      strategy: e
    });
  }
  getCancellationPromise(e) {
    return new Promise((n, a) => {
      e != null && (e.aborted ? a(e.reason) : e.addEventListener("abort", () => {
        a(e.reason);
      }));
    });
  }
  getTransactionConfirmationPromise({
    commitment: e,
    signature: n
  }) {
    let a, c, o = !1;
    const d = new Promise((w, S) => {
      try {
        a = this.onSignature(n, (B, P) => {
          a = void 0;
          const I = {
            context: P,
            value: B
          };
          w({
            __type: TransactionStatus.PROCESSED,
            response: I
          });
        }, e);
        const A = new Promise((B) => {
          a == null ? B() : c = this._onSubscriptionStateChange(a, (P) => {
            P === "subscribed" && B();
          });
        });
        (async () => {
          if (await A, o)
            return;
          const B = await this.getSignatureStatus(n);
          if (o || B == null)
            return;
          const {
            context: P,
            value: I
          } = B;
          if (I != null)
            if (I?.err)
              S(I.err);
            else {
              switch (e) {
                case "confirmed":
                case "single":
                case "singleGossip": {
                  if (I.confirmationStatus === "processed")
                    return;
                  break;
                }
                case "finalized":
                case "max":
                case "root": {
                  if (I.confirmationStatus === "processed" || I.confirmationStatus === "confirmed")
                    return;
                  break;
                }
                case "processed":
                case "recent":
              }
              o = !0, w({
                __type: TransactionStatus.PROCESSED,
                response: {
                  context: P,
                  value: I
                }
              });
            }
        })();
      } catch (A) {
        S(A);
      }
    });
    return {
      abortConfirmation: () => {
        c && (c(), c = void 0), a != null && (this.removeSignatureListener(a), a = void 0);
      },
      confirmationPromise: d
    };
  }
  async confirmTransactionUsingBlockHeightExceedanceStrategy({
    commitment: e,
    strategy: {
      abortSignal: n,
      lastValidBlockHeight: a,
      signature: c
    }
  }) {
    let o = !1;
    const d = new Promise((B) => {
      const P = async () => {
        try {
          return await this.getBlockHeight(e);
        } catch {
          return -1;
        }
      };
      (async () => {
        let I = await P();
        if (!o) {
          for (; I <= a; )
            if (await sleep$1(1e3), o || (I = await P(), o))
              return;
          B({
            __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED
          });
        }
      })();
    }), {
      abortConfirmation: m,
      confirmationPromise: w
    } = this.getTransactionConfirmationPromise({
      commitment: e,
      signature: c
    }), S = this.getCancellationPromise(n);
    let A;
    try {
      const B = await Promise.race([S, w, d]);
      if (B.__type === TransactionStatus.PROCESSED)
        A = B.response;
      else
        throw new TransactionExpiredBlockheightExceededError(c);
    } finally {
      o = !0, m();
    }
    return A;
  }
  async confirmTransactionUsingDurableNonceStrategy({
    commitment: e,
    strategy: {
      abortSignal: n,
      minContextSlot: a,
      nonceAccountPubkey: c,
      nonceValue: o,
      signature: d
    }
  }) {
    let m = !1;
    const w = new Promise((I) => {
      let O = o, L = null;
      const C = async () => {
        try {
          const {
            context: z,
            value: q
          } = await this.getNonceAndContext(c, {
            commitment: e,
            minContextSlot: a
          });
          return L = z.slot, q?.nonce;
        } catch {
          return O;
        }
      };
      (async () => {
        if (O = await C(), !m)
          for (; ; ) {
            if (o !== O) {
              I({
                __type: TransactionStatus.NONCE_INVALID,
                slotInWhichNonceDidAdvance: L
              });
              return;
            }
            if (await sleep$1(2e3), m || (O = await C(), m))
              return;
          }
      })();
    }), {
      abortConfirmation: S,
      confirmationPromise: A
    } = this.getTransactionConfirmationPromise({
      commitment: e,
      signature: d
    }), B = this.getCancellationPromise(n);
    let P;
    try {
      const I = await Promise.race([B, A, w]);
      if (I.__type === TransactionStatus.PROCESSED)
        P = I.response;
      else {
        let O;
        for (; ; ) {
          const L = await this.getSignatureStatus(d);
          if (L == null)
            break;
          if (L.context.slot < (I.slotInWhichNonceDidAdvance ?? a)) {
            await sleep$1(400);
            continue;
          }
          O = L;
          break;
        }
        if (O?.value) {
          const L = e || "finalized", {
            confirmationStatus: C
          } = O.value;
          switch (L) {
            case "processed":
            case "recent":
              if (C !== "processed" && C !== "confirmed" && C !== "finalized")
                throw new TransactionExpiredNonceInvalidError(d);
              break;
            case "confirmed":
            case "single":
            case "singleGossip":
              if (C !== "confirmed" && C !== "finalized")
                throw new TransactionExpiredNonceInvalidError(d);
              break;
            case "finalized":
            case "max":
            case "root":
              if (C !== "finalized")
                throw new TransactionExpiredNonceInvalidError(d);
              break;
            default:
          }
          P = {
            context: O.context,
            value: {
              err: O.value.err
            }
          };
        } else
          throw new TransactionExpiredNonceInvalidError(d);
      }
    } finally {
      m = !0, S();
    }
    return P;
  }
  async confirmTransactionUsingLegacyTimeoutStrategy({
    commitment: e,
    signature: n
  }) {
    let a;
    const c = new Promise((w) => {
      let S = this._confirmTransactionInitialTimeout || 6e4;
      switch (e) {
        case "processed":
        case "recent":
        case "single":
        case "confirmed":
        case "singleGossip": {
          S = this._confirmTransactionInitialTimeout || 3e4;
          break;
        }
      }
      a = setTimeout(() => w({
        __type: TransactionStatus.TIMED_OUT,
        timeoutMs: S
      }), S);
    }), {
      abortConfirmation: o,
      confirmationPromise: d
    } = this.getTransactionConfirmationPromise({
      commitment: e,
      signature: n
    });
    let m;
    try {
      const w = await Promise.race([d, c]);
      if (w.__type === TransactionStatus.PROCESSED)
        m = w.response;
      else
        throw new TransactionExpiredTimeoutError(n, w.timeoutMs / 1e3);
    } finally {
      clearTimeout(a), o();
    }
    return m;
  }
  /**
   * Return the list of nodes that are currently participating in the cluster
   */
  async getClusterNodes() {
    const e = await this._rpcRequest("getClusterNodes", []), n = create(e, jsonRpcResult(array(ContactInfoResult)));
    if ("error" in n)
      throw new SolanaJSONRPCError(n.error, "failed to get cluster nodes");
    return n.result;
  }
  /**
   * Return the list of nodes that are currently participating in the cluster
   */
  async getVoteAccounts(e) {
    const n = this._buildArgs([], e), a = await this._rpcRequest("getVoteAccounts", n), c = create(a, GetVoteAccounts);
    if ("error" in c)
      throw new SolanaJSONRPCError(c.error, "failed to get vote accounts");
    return c.result;
  }
  /**
   * Fetch the current slot that the node is processing
   */
  async getSlot(e) {
    const {
      commitment: n,
      config: a
    } = extractCommitmentFromConfig(e), c = this._buildArgs([], n, void 0, a), o = await this._rpcRequest("getSlot", c), d = create(o, jsonRpcResult(number$2()));
    if ("error" in d)
      throw new SolanaJSONRPCError(d.error, "failed to get slot");
    return d.result;
  }
  /**
   * Fetch the current slot leader of the cluster
   */
  async getSlotLeader(e) {
    const {
      commitment: n,
      config: a
    } = extractCommitmentFromConfig(e), c = this._buildArgs([], n, void 0, a), o = await this._rpcRequest("getSlotLeader", c), d = create(o, jsonRpcResult(string()));
    if ("error" in d)
      throw new SolanaJSONRPCError(d.error, "failed to get slot leader");
    return d.result;
  }
  /**
   * Fetch `limit` number of slot leaders starting from `startSlot`
   *
   * @param startSlot fetch slot leaders starting from this slot
   * @param limit number of slot leaders to return
   */
  async getSlotLeaders(e, n) {
    const a = [e, n], c = await this._rpcRequest("getSlotLeaders", a), o = create(c, jsonRpcResult(array(PublicKeyFromString)));
    if ("error" in o)
      throw new SolanaJSONRPCError(o.error, "failed to get slot leaders");
    return o.result;
  }
  /**
   * Fetch the current status of a signature
   */
  async getSignatureStatus(e, n) {
    const {
      context: a,
      value: c
    } = await this.getSignatureStatuses([e], n);
    assert$2(c.length === 1);
    const o = c[0];
    return {
      context: a,
      value: o
    };
  }
  /**
   * Fetch the current statuses of a batch of signatures
   */
  async getSignatureStatuses(e, n) {
    const a = [e];
    n && a.push(n);
    const c = await this._rpcRequest("getSignatureStatuses", a), o = create(c, GetSignatureStatusesRpcResult);
    if ("error" in o)
      throw new SolanaJSONRPCError(o.error, "failed to get signature status");
    return o.result;
  }
  /**
   * Fetch the current transaction count of the cluster
   */
  async getTransactionCount(e) {
    const {
      commitment: n,
      config: a
    } = extractCommitmentFromConfig(e), c = this._buildArgs([], n, void 0, a), o = await this._rpcRequest("getTransactionCount", c), d = create(o, jsonRpcResult(number$2()));
    if ("error" in d)
      throw new SolanaJSONRPCError(d.error, "failed to get transaction count");
    return d.result;
  }
  /**
   * Fetch the current total currency supply of the cluster in lamports
   *
   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.
   */
  async getTotalSupply(e) {
    return (await this.getSupply({
      commitment: e,
      excludeNonCirculatingAccountsList: !0
    })).value.total;
  }
  /**
   * Fetch the cluster InflationGovernor parameters
   */
  async getInflationGovernor(e) {
    const n = this._buildArgs([], e), a = await this._rpcRequest("getInflationGovernor", n), c = create(a, GetInflationGovernorRpcResult);
    if ("error" in c)
      throw new SolanaJSONRPCError(c.error, "failed to get inflation");
    return c.result;
  }
  /**
   * Fetch the inflation reward for a list of addresses for an epoch
   */
  async getInflationReward(e, n, a) {
    const {
      commitment: c,
      config: o
    } = extractCommitmentFromConfig(a), d = this._buildArgs([e.map((S) => S.toBase58())], c, void 0, {
      ...o,
      epoch: n ?? o?.epoch
    }), m = await this._rpcRequest("getInflationReward", d), w = create(m, GetInflationRewardResult);
    if ("error" in w)
      throw new SolanaJSONRPCError(w.error, "failed to get inflation reward");
    return w.result;
  }
  /**
   * Fetch the specific inflation values for the current epoch
   */
  async getInflationRate() {
    const e = await this._rpcRequest("getInflationRate", []), n = create(e, GetInflationRateRpcResult);
    if ("error" in n)
      throw new SolanaJSONRPCError(n.error, "failed to get inflation rate");
    return n.result;
  }
  /**
   * Fetch the Epoch Info parameters
   */
  async getEpochInfo(e) {
    const {
      commitment: n,
      config: a
    } = extractCommitmentFromConfig(e), c = this._buildArgs([], n, void 0, a), o = await this._rpcRequest("getEpochInfo", c), d = create(o, GetEpochInfoRpcResult);
    if ("error" in d)
      throw new SolanaJSONRPCError(d.error, "failed to get epoch info");
    return d.result;
  }
  /**
   * Fetch the Epoch Schedule parameters
   */
  async getEpochSchedule() {
    const e = await this._rpcRequest("getEpochSchedule", []), n = create(e, GetEpochScheduleRpcResult);
    if ("error" in n)
      throw new SolanaJSONRPCError(n.error, "failed to get epoch schedule");
    const a = n.result;
    return new EpochSchedule(a.slotsPerEpoch, a.leaderScheduleSlotOffset, a.warmup, a.firstNormalEpoch, a.firstNormalSlot);
  }
  /**
   * Fetch the leader schedule for the current epoch
   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}
   */
  async getLeaderSchedule() {
    const e = await this._rpcRequest("getLeaderSchedule", []), n = create(e, GetLeaderScheduleRpcResult);
    if ("error" in n)
      throw new SolanaJSONRPCError(n.error, "failed to get leader schedule");
    return n.result;
  }
  /**
   * Fetch the minimum balance needed to exempt an account of `dataLength`
   * size from rent
   */
  async getMinimumBalanceForRentExemption(e, n) {
    const a = this._buildArgs([e], n), c = await this._rpcRequest("getMinimumBalanceForRentExemption", a), o = create(c, GetMinimumBalanceForRentExemptionRpcResult);
    return "error" in o ? (console.warn("Unable to fetch minimum balance for rent exemption"), 0) : o.result;
  }
  /**
   * Fetch a recent blockhash from the cluster, return with context
   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}
   *
   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.
   */
  async getRecentBlockhashAndContext(e) {
    const n = this._buildArgs([], e), a = await this._rpcRequest("getRecentBlockhash", n), c = create(a, GetRecentBlockhashAndContextRpcResult);
    if ("error" in c)
      throw new SolanaJSONRPCError(c.error, "failed to get recent blockhash");
    return c.result;
  }
  /**
   * Fetch recent performance samples
   * @return {Promise<Array<PerfSample>>}
   */
  async getRecentPerformanceSamples(e) {
    const n = await this._rpcRequest("getRecentPerformanceSamples", e ? [e] : []), a = create(n, GetRecentPerformanceSamplesRpcResult);
    if ("error" in a)
      throw new SolanaJSONRPCError(a.error, "failed to get recent performance samples");
    return a.result;
  }
  /**
   * Fetch the fee calculator for a recent blockhash from the cluster, return with context
   *
   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.
   */
  async getFeeCalculatorForBlockhash(e, n) {
    const a = this._buildArgs([e], n), c = await this._rpcRequest("getFeeCalculatorForBlockhash", a), o = create(c, GetFeeCalculatorRpcResult);
    if ("error" in o)
      throw new SolanaJSONRPCError(o.error, "failed to get fee calculator");
    const {
      context: d,
      value: m
    } = o.result;
    return {
      context: d,
      value: m !== null ? m.feeCalculator : null
    };
  }
  /**
   * Fetch the fee for a message from the cluster, return with context
   */
  async getFeeForMessage(e, n) {
    const a = toBuffer(e.serialize()).toString("base64"), c = this._buildArgs([a], n), o = await this._rpcRequest("getFeeForMessage", c), d = create(o, jsonRpcResultAndContext(nullable(number$2())));
    if ("error" in d)
      throw new SolanaJSONRPCError(d.error, "failed to get fee for message");
    if (d.result === null)
      throw new Error("invalid blockhash");
    return d.result;
  }
  /**
   * Fetch a list of prioritization fees from recent blocks.
   */
  async getRecentPrioritizationFees(e) {
    const n = e?.lockedWritableAccounts?.map((d) => d.toBase58()), a = n?.length ? [n] : [], c = await this._rpcRequest("getRecentPrioritizationFees", a), o = create(c, GetRecentPrioritizationFeesRpcResult);
    if ("error" in o)
      throw new SolanaJSONRPCError(o.error, "failed to get recent prioritization fees");
    return o.result;
  }
  /**
   * Fetch a recent blockhash from the cluster
   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}
   *
   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.
   */
  async getRecentBlockhash(e) {
    try {
      return (await this.getRecentBlockhashAndContext(e)).value;
    } catch (n) {
      throw new Error("failed to get recent blockhash: " + n);
    }
  }
  /**
   * Fetch the latest blockhash from the cluster
   * @return {Promise<BlockhashWithExpiryBlockHeight>}
   */
  async getLatestBlockhash(e) {
    try {
      return (await this.getLatestBlockhashAndContext(e)).value;
    } catch (n) {
      throw new Error("failed to get recent blockhash: " + n);
    }
  }
  /**
   * Fetch the latest blockhash from the cluster
   * @return {Promise<BlockhashWithExpiryBlockHeight>}
   */
  async getLatestBlockhashAndContext(e) {
    const {
      commitment: n,
      config: a
    } = extractCommitmentFromConfig(e), c = this._buildArgs([], n, void 0, a), o = await this._rpcRequest("getLatestBlockhash", c), d = create(o, GetLatestBlockhashRpcResult);
    if ("error" in d)
      throw new SolanaJSONRPCError(d.error, "failed to get latest blockhash");
    return d.result;
  }
  /**
   * Returns whether a blockhash is still valid or not
   */
  async isBlockhashValid(e, n) {
    const {
      commitment: a,
      config: c
    } = extractCommitmentFromConfig(n), o = this._buildArgs([e], a, void 0, c), d = await this._rpcRequest("isBlockhashValid", o), m = create(d, IsBlockhashValidRpcResult);
    if ("error" in m)
      throw new SolanaJSONRPCError(m.error, "failed to determine if the blockhash `" + e + "`is valid");
    return m.result;
  }
  /**
   * Fetch the node version
   */
  async getVersion() {
    const e = await this._rpcRequest("getVersion", []), n = create(e, jsonRpcResult(VersionResult));
    if ("error" in n)
      throw new SolanaJSONRPCError(n.error, "failed to get version");
    return n.result;
  }
  /**
   * Fetch the genesis hash
   */
  async getGenesisHash() {
    const e = await this._rpcRequest("getGenesisHash", []), n = create(e, jsonRpcResult(string()));
    if ("error" in n)
      throw new SolanaJSONRPCError(n.error, "failed to get genesis hash");
    return n.result;
  }
  /**
   * Fetch a processed block from the cluster.
   *
   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by
   * setting the `maxSupportedTransactionVersion` property.
   */
  /**
   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by
   * setting the `maxSupportedTransactionVersion` property.
   */
  // eslint-disable-next-line no-dupe-class-members
  /**
   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by
   * setting the `maxSupportedTransactionVersion` property.
   */
  // eslint-disable-next-line no-dupe-class-members
  /**
   * Fetch a processed block from the cluster.
   */
  // eslint-disable-next-line no-dupe-class-members
  // eslint-disable-next-line no-dupe-class-members
  // eslint-disable-next-line no-dupe-class-members
  /**
   * Fetch a processed block from the cluster.
   */
  // eslint-disable-next-line no-dupe-class-members
  async getBlock(e, n) {
    const {
      commitment: a,
      config: c
    } = extractCommitmentFromConfig(n), o = this._buildArgsAtLeastConfirmed([e], a, void 0, c), d = await this._rpcRequest("getBlock", o);
    try {
      switch (c?.transactionDetails) {
        case "accounts": {
          const m = create(d, GetAccountsModeBlockRpcResult);
          if ("error" in m)
            throw m.error;
          return m.result;
        }
        case "none": {
          const m = create(d, GetNoneModeBlockRpcResult);
          if ("error" in m)
            throw m.error;
          return m.result;
        }
        default: {
          const m = create(d, GetBlockRpcResult);
          if ("error" in m)
            throw m.error;
          const {
            result: w
          } = m;
          return w ? {
            ...w,
            transactions: w.transactions.map(({
              transaction: S,
              meta: A,
              version: B
            }) => ({
              meta: A,
              transaction: {
                ...S,
                message: versionedMessageFromResponse(B, S.message)
              },
              version: B
            }))
          } : null;
        }
      }
    } catch (m) {
      throw new SolanaJSONRPCError(m, "failed to get confirmed block");
    }
  }
  /**
   * Fetch parsed transaction details for a confirmed or finalized block
   */
  // eslint-disable-next-line no-dupe-class-members
  // eslint-disable-next-line no-dupe-class-members
  // eslint-disable-next-line no-dupe-class-members
  async getParsedBlock(e, n) {
    const {
      commitment: a,
      config: c
    } = extractCommitmentFromConfig(n), o = this._buildArgsAtLeastConfirmed([e], a, "jsonParsed", c), d = await this._rpcRequest("getBlock", o);
    try {
      switch (c?.transactionDetails) {
        case "accounts": {
          const m = create(d, GetParsedAccountsModeBlockRpcResult);
          if ("error" in m)
            throw m.error;
          return m.result;
        }
        case "none": {
          const m = create(d, GetParsedNoneModeBlockRpcResult);
          if ("error" in m)
            throw m.error;
          return m.result;
        }
        default: {
          const m = create(d, GetParsedBlockRpcResult);
          if ("error" in m)
            throw m.error;
          return m.result;
        }
      }
    } catch (m) {
      throw new SolanaJSONRPCError(m, "failed to get block");
    }
  }
  /*
   * Returns recent block production information from the current or previous epoch
   */
  async getBlockProduction(e) {
    let n, a;
    if (typeof e == "string")
      a = e;
    else if (e) {
      const {
        commitment: m,
        ...w
      } = e;
      a = m, n = w;
    }
    const c = this._buildArgs([], a, "base64", n), o = await this._rpcRequest("getBlockProduction", c), d = create(o, BlockProductionResponseStruct);
    if ("error" in d)
      throw new SolanaJSONRPCError(d.error, "failed to get block production information");
    return d.result;
  }
  /**
   * Fetch a confirmed or finalized transaction from the cluster.
   *
   * @deprecated Instead, call `getTransaction` using a
   * `GetVersionedTransactionConfig` by setting the
   * `maxSupportedTransactionVersion` property.
   */
  /**
   * Fetch a confirmed or finalized transaction from the cluster.
   */
  // eslint-disable-next-line no-dupe-class-members
  /**
   * Fetch a confirmed or finalized transaction from the cluster.
   */
  // eslint-disable-next-line no-dupe-class-members
  async getTransaction(e, n) {
    const {
      commitment: a,
      config: c
    } = extractCommitmentFromConfig(n), o = this._buildArgsAtLeastConfirmed([e], a, void 0, c), d = await this._rpcRequest("getTransaction", o), m = create(d, GetTransactionRpcResult);
    if ("error" in m)
      throw new SolanaJSONRPCError(m.error, "failed to get transaction");
    const w = m.result;
    return w && {
      ...w,
      transaction: {
        ...w.transaction,
        message: versionedMessageFromResponse(w.version, w.transaction.message)
      }
    };
  }
  /**
   * Fetch parsed transaction details for a confirmed or finalized transaction
   */
  async getParsedTransaction(e, n) {
    const {
      commitment: a,
      config: c
    } = extractCommitmentFromConfig(n), o = this._buildArgsAtLeastConfirmed([e], a, "jsonParsed", c), d = await this._rpcRequest("getTransaction", o), m = create(d, GetParsedTransactionRpcResult);
    if ("error" in m)
      throw new SolanaJSONRPCError(m.error, "failed to get transaction");
    return m.result;
  }
  /**
   * Fetch parsed transaction details for a batch of confirmed transactions
   */
  async getParsedTransactions(e, n) {
    const {
      commitment: a,
      config: c
    } = extractCommitmentFromConfig(n), o = e.map((w) => ({
      methodName: "getTransaction",
      args: this._buildArgsAtLeastConfirmed([w], a, "jsonParsed", c)
    }));
    return (await this._rpcBatchRequest(o)).map((w) => {
      const S = create(w, GetParsedTransactionRpcResult);
      if ("error" in S)
        throw new SolanaJSONRPCError(S.error, "failed to get transactions");
      return S.result;
    });
  }
  /**
   * Fetch transaction details for a batch of confirmed transactions.
   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.
   *
   * @deprecated Instead, call `getTransactions` using a
   * `GetVersionedTransactionConfig` by setting the
   * `maxSupportedTransactionVersion` property.
   */
  /**
   * Fetch transaction details for a batch of confirmed transactions.
   * Similar to {@link getParsedTransactions} but returns a {@link
   * VersionedTransactionResponse}.
   */
  // eslint-disable-next-line no-dupe-class-members
  /**
   * Fetch transaction details for a batch of confirmed transactions.
   * Similar to {@link getParsedTransactions} but returns a {@link
   * VersionedTransactionResponse}.
   */
  // eslint-disable-next-line no-dupe-class-members
  async getTransactions(e, n) {
    const {
      commitment: a,
      config: c
    } = extractCommitmentFromConfig(n), o = e.map((w) => ({
      methodName: "getTransaction",
      args: this._buildArgsAtLeastConfirmed([w], a, void 0, c)
    }));
    return (await this._rpcBatchRequest(o)).map((w) => {
      const S = create(w, GetTransactionRpcResult);
      if ("error" in S)
        throw new SolanaJSONRPCError(S.error, "failed to get transactions");
      const A = S.result;
      return A && {
        ...A,
        transaction: {
          ...A.transaction,
          message: versionedMessageFromResponse(A.version, A.transaction.message)
        }
      };
    });
  }
  /**
   * Fetch a list of Transactions and transaction statuses from the cluster
   * for a confirmed block.
   *
   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.
   */
  async getConfirmedBlock(e, n) {
    const a = this._buildArgsAtLeastConfirmed([e], n), c = await this._rpcRequest("getConfirmedBlock", a), o = create(c, GetConfirmedBlockRpcResult);
    if ("error" in o)
      throw new SolanaJSONRPCError(o.error, "failed to get confirmed block");
    const d = o.result;
    if (!d)
      throw new Error("Confirmed block " + e + " not found");
    const m = {
      ...d,
      transactions: d.transactions.map(({
        transaction: w,
        meta: S
      }) => {
        const A = new Message(w.message);
        return {
          meta: S,
          transaction: {
            ...w,
            message: A
          }
        };
      })
    };
    return {
      ...m,
      transactions: m.transactions.map(({
        transaction: w,
        meta: S
      }) => ({
        meta: S,
        transaction: Transaction$1.populate(w.message, w.signatures)
      }))
    };
  }
  /**
   * Fetch confirmed blocks between two slots
   */
  async getBlocks(e, n, a) {
    const c = this._buildArgsAtLeastConfirmed(n !== void 0 ? [e, n] : [e], a), o = await this._rpcRequest("getBlocks", c), d = create(o, jsonRpcResult(array(number$2())));
    if ("error" in d)
      throw new SolanaJSONRPCError(d.error, "failed to get blocks");
    return d.result;
  }
  /**
   * Fetch a list of Signatures from the cluster for a block, excluding rewards
   */
  async getBlockSignatures(e, n) {
    const a = this._buildArgsAtLeastConfirmed([e], n, void 0, {
      transactionDetails: "signatures",
      rewards: !1
    }), c = await this._rpcRequest("getBlock", a), o = create(c, GetBlockSignaturesRpcResult);
    if ("error" in o)
      throw new SolanaJSONRPCError(o.error, "failed to get block");
    const d = o.result;
    if (!d)
      throw new Error("Block " + e + " not found");
    return d;
  }
  /**
   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards
   *
   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.
   */
  async getConfirmedBlockSignatures(e, n) {
    const a = this._buildArgsAtLeastConfirmed([e], n, void 0, {
      transactionDetails: "signatures",
      rewards: !1
    }), c = await this._rpcRequest("getConfirmedBlock", a), o = create(c, GetBlockSignaturesRpcResult);
    if ("error" in o)
      throw new SolanaJSONRPCError(o.error, "failed to get confirmed block");
    const d = o.result;
    if (!d)
      throw new Error("Confirmed block " + e + " not found");
    return d;
  }
  /**
   * Fetch a transaction details for a confirmed transaction
   *
   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.
   */
  async getConfirmedTransaction(e, n) {
    const a = this._buildArgsAtLeastConfirmed([e], n), c = await this._rpcRequest("getConfirmedTransaction", a), o = create(c, GetTransactionRpcResult);
    if ("error" in o)
      throw new SolanaJSONRPCError(o.error, "failed to get transaction");
    const d = o.result;
    if (!d)
      return d;
    const m = new Message(d.transaction.message), w = d.transaction.signatures;
    return {
      ...d,
      transaction: Transaction$1.populate(m, w)
    };
  }
  /**
   * Fetch parsed transaction details for a confirmed transaction
   *
   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.
   */
  async getParsedConfirmedTransaction(e, n) {
    const a = this._buildArgsAtLeastConfirmed([e], n, "jsonParsed"), c = await this._rpcRequest("getConfirmedTransaction", a), o = create(c, GetParsedTransactionRpcResult);
    if ("error" in o)
      throw new SolanaJSONRPCError(o.error, "failed to get confirmed transaction");
    return o.result;
  }
  /**
   * Fetch parsed transaction details for a batch of confirmed transactions
   *
   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.
   */
  async getParsedConfirmedTransactions(e, n) {
    const a = e.map((d) => ({
      methodName: "getConfirmedTransaction",
      args: this._buildArgsAtLeastConfirmed([d], n, "jsonParsed")
    }));
    return (await this._rpcBatchRequest(a)).map((d) => {
      const m = create(d, GetParsedTransactionRpcResult);
      if ("error" in m)
        throw new SolanaJSONRPCError(m.error, "failed to get confirmed transactions");
      return m.result;
    });
  }
  /**
   * Fetch a list of all the confirmed signatures for transactions involving an address
   * within a specified slot range. Max range allowed is 10,000 slots.
   *
   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.
   *
   * @param address queried address
   * @param startSlot start slot, inclusive
   * @param endSlot end slot, inclusive
   */
  async getConfirmedSignaturesForAddress(e, n, a) {
    let c = {}, o = await this.getFirstAvailableBlock();
    for (; !("until" in c) && (n--, !(n <= 0 || n < o)); )
      try {
        const w = await this.getConfirmedBlockSignatures(n, "finalized");
        w.signatures.length > 0 && (c.until = w.signatures[w.signatures.length - 1].toString());
      } catch (w) {
        if (w instanceof Error && w.message.includes("skipped"))
          continue;
        throw w;
      }
    let d = await this.getSlot("finalized");
    for (; !("before" in c) && (a++, !(a > d)); )
      try {
        const w = await this.getConfirmedBlockSignatures(a);
        w.signatures.length > 0 && (c.before = w.signatures[w.signatures.length - 1].toString());
      } catch (w) {
        if (w instanceof Error && w.message.includes("skipped"))
          continue;
        throw w;
      }
    return (await this.getConfirmedSignaturesForAddress2(e, c)).map((w) => w.signature);
  }
  /**
   * Returns confirmed signatures for transactions involving an
   * address backwards in time from the provided signature or most recent confirmed block
   *
   *
   * @param address queried address
   * @param options
   */
  async getConfirmedSignaturesForAddress2(e, n, a) {
    const c = this._buildArgsAtLeastConfirmed([e.toBase58()], a, void 0, n), o = await this._rpcRequest("getConfirmedSignaturesForAddress2", c), d = create(o, GetConfirmedSignaturesForAddress2RpcResult);
    if ("error" in d)
      throw new SolanaJSONRPCError(d.error, "failed to get confirmed signatures for address");
    return d.result;
  }
  /**
   * Returns confirmed signatures for transactions involving an
   * address backwards in time from the provided signature or most recent confirmed block
   *
   *
   * @param address queried address
   * @param options
   */
  async getSignaturesForAddress(e, n, a) {
    const c = this._buildArgsAtLeastConfirmed([e.toBase58()], a, void 0, n), o = await this._rpcRequest("getSignaturesForAddress", c), d = create(o, GetSignaturesForAddressRpcResult);
    if ("error" in d)
      throw new SolanaJSONRPCError(d.error, "failed to get signatures for address");
    return d.result;
  }
  async getAddressLookupTable(e, n) {
    const {
      context: a,
      value: c
    } = await this.getAccountInfoAndContext(e, n);
    let o = null;
    return c !== null && (o = new AddressLookupTableAccount({
      key: e,
      state: AddressLookupTableAccount.deserialize(c.data)
    })), {
      context: a,
      value: o
    };
  }
  /**
   * Fetch the contents of a Nonce account from the cluster, return with context
   */
  async getNonceAndContext(e, n) {
    const {
      context: a,
      value: c
    } = await this.getAccountInfoAndContext(e, n);
    let o = null;
    return c !== null && (o = NonceAccount.fromAccountData(c.data)), {
      context: a,
      value: o
    };
  }
  /**
   * Fetch the contents of a Nonce account from the cluster
   */
  async getNonce(e, n) {
    return await this.getNonceAndContext(e, n).then((a) => a.value).catch((a) => {
      throw new Error("failed to get nonce for account " + e.toBase58() + ": " + a);
    });
  }
  /**
   * Request an allocation of lamports to the specified address
   *
   * ```typescript
   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from "@solana/web3.js";
   *
   * (async () => {
   *   const connection = new Connection("https://api.testnet.solana.com", "confirmed");
   *   const myAddress = new PublicKey("2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM");
   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);
   *   await connection.confirmTransaction(signature);
   * })();
   * ```
   */
  async requestAirdrop(e, n) {
    const a = await this._rpcRequest("requestAirdrop", [e.toBase58(), n]), c = create(a, RequestAirdropRpcResult);
    if ("error" in c)
      throw new SolanaJSONRPCError(c.error, `airdrop to ${e.toBase58()} failed`);
    return c.result;
  }
  /**
   * @internal
   */
  async _blockhashWithExpiryBlockHeight(e) {
    if (!e) {
      for (; this._pollingBlockhash; )
        await sleep$1(100);
      const a = Date.now() - this._blockhashInfo.lastFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;
      if (this._blockhashInfo.latestBlockhash !== null && !a)
        return this._blockhashInfo.latestBlockhash;
    }
    return await this._pollNewBlockhash();
  }
  /**
   * @internal
   */
  async _pollNewBlockhash() {
    this._pollingBlockhash = !0;
    try {
      const e = Date.now(), n = this._blockhashInfo.latestBlockhash, a = n ? n.blockhash : null;
      for (let c = 0; c < 50; c++) {
        const o = await this.getLatestBlockhash("finalized");
        if (a !== o.blockhash)
          return this._blockhashInfo = {
            latestBlockhash: o,
            lastFetch: Date.now(),
            transactionSignatures: [],
            simulatedSignatures: []
          }, o;
        await sleep$1(MS_PER_SLOT / 2);
      }
      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - e}ms`);
    } finally {
      this._pollingBlockhash = !1;
    }
  }
  /**
   * get the stake minimum delegation
   */
  async getStakeMinimumDelegation(e) {
    const {
      commitment: n,
      config: a
    } = extractCommitmentFromConfig(e), c = this._buildArgs([], n, "base64", a), o = await this._rpcRequest("getStakeMinimumDelegation", c), d = create(o, jsonRpcResultAndContext(number$2()));
    if ("error" in d)
      throw new SolanaJSONRPCError(d.error, "failed to get stake minimum delegation");
    return d.result;
  }
  /**
   * Simulate a transaction
   *
   * @deprecated Instead, call {@link simulateTransaction} with {@link
   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters
   */
  /**
   * Simulate a transaction
   */
  // eslint-disable-next-line no-dupe-class-members
  /**
   * Simulate a transaction
   */
  // eslint-disable-next-line no-dupe-class-members
  async simulateTransaction(e, n, a) {
    if ("message" in e) {
      const L = e.serialize(), C = Buffer$1$1.from(L).toString("base64");
      if (Array.isArray(n) || a !== void 0)
        throw new Error("Invalid arguments");
      const z = n || {};
      z.encoding = "base64", "commitment" in z || (z.commitment = this.commitment);
      const q = [C, z], Z = await this._rpcRequest("simulateTransaction", q), X = create(Z, SimulatedTransactionResponseStruct);
      if ("error" in X)
        throw new Error("failed to simulate transaction: " + X.error.message);
      return X.result;
    }
    let c;
    if (e instanceof Transaction$1) {
      let O = e;
      c = new Transaction$1(), c.feePayer = O.feePayer, c.instructions = e.instructions, c.nonceInfo = O.nonceInfo, c.signatures = O.signatures;
    } else
      c = Transaction$1.populate(e), c._message = c._json = void 0;
    if (n !== void 0 && !Array.isArray(n))
      throw new Error("Invalid arguments");
    const o = n;
    if (c.nonceInfo && o)
      c.sign(...o);
    else {
      let O = this._disableBlockhashCaching;
      for (; ; ) {
        const L = await this._blockhashWithExpiryBlockHeight(O);
        if (c.lastValidBlockHeight = L.lastValidBlockHeight, c.recentBlockhash = L.blockhash, !o)
          break;
        if (c.sign(...o), !c.signature)
          throw new Error("!signature");
        const C = c.signature.toString("base64");
        if (!this._blockhashInfo.simulatedSignatures.includes(C) && !this._blockhashInfo.transactionSignatures.includes(C)) {
          this._blockhashInfo.simulatedSignatures.push(C);
          break;
        } else
          O = !0;
      }
    }
    const d = c._compile(), m = d.serialize(), S = c._serialize(m).toString("base64"), A = {
      encoding: "base64",
      commitment: this.commitment
    };
    if (a) {
      const O = (Array.isArray(a) ? a : d.nonProgramIds()).map((L) => L.toBase58());
      A.accounts = {
        encoding: "base64",
        addresses: O
      };
    }
    o && (A.sigVerify = !0);
    const B = [S, A], P = await this._rpcRequest("simulateTransaction", B), I = create(P, SimulatedTransactionResponseStruct);
    if ("error" in I) {
      let O;
      if ("data" in I.error && (O = I.error.data.logs, O && Array.isArray(O))) {
        const L = `
    `, C = L + O.join(L);
        console.error(I.error.message, C);
      }
      throw new SendTransactionError("failed to simulate transaction: " + I.error.message, O);
    }
    return I.result;
  }
  /**
   * Sign and send a transaction
   *
   * @deprecated Instead, call {@link sendTransaction} with a {@link
   * VersionedTransaction}
   */
  /**
   * Send a signed transaction
   */
  // eslint-disable-next-line no-dupe-class-members
  /**
   * Sign and send a transaction
   */
  // eslint-disable-next-line no-dupe-class-members
  async sendTransaction(e, n, a) {
    if ("version" in e) {
      if (n && Array.isArray(n))
        throw new Error("Invalid arguments");
      const d = e.serialize();
      return await this.sendRawTransaction(d, n);
    }
    if (n === void 0 || !Array.isArray(n))
      throw new Error("Invalid arguments");
    const c = n;
    if (e.nonceInfo)
      e.sign(...c);
    else {
      let d = this._disableBlockhashCaching;
      for (; ; ) {
        const m = await this._blockhashWithExpiryBlockHeight(d);
        if (e.lastValidBlockHeight = m.lastValidBlockHeight, e.recentBlockhash = m.blockhash, e.sign(...c), !e.signature)
          throw new Error("!signature");
        const w = e.signature.toString("base64");
        if (this._blockhashInfo.transactionSignatures.includes(w))
          d = !0;
        else {
          this._blockhashInfo.transactionSignatures.push(w);
          break;
        }
      }
    }
    const o = e.serialize();
    return await this.sendRawTransaction(o, a);
  }
  /**
   * Send a transaction that has already been signed and serialized into the
   * wire format
   */
  async sendRawTransaction(e, n) {
    const a = toBuffer(e).toString("base64");
    return await this.sendEncodedTransaction(a, n);
  }
  /**
   * Send a transaction that has already been signed, serialized into the
   * wire format, and encoded as a base64 string
   */
  async sendEncodedTransaction(e, n) {
    const a = {
      encoding: "base64"
    }, c = n && n.skipPreflight, o = n && n.preflightCommitment || this.commitment;
    n && n.maxRetries != null && (a.maxRetries = n.maxRetries), n && n.minContextSlot != null && (a.minContextSlot = n.minContextSlot), c && (a.skipPreflight = c), o && (a.preflightCommitment = o);
    const d = [e, a], m = await this._rpcRequest("sendTransaction", d), w = create(m, SendTransactionRpcResult);
    if ("error" in w) {
      let S;
      throw "data" in w.error && (S = w.error.data.logs), new SendTransactionError("failed to send transaction: " + w.error.message, S);
    }
    return w.result;
  }
  /**
   * @internal
   */
  _wsOnOpen() {
    this._rpcWebSocketConnected = !0, this._rpcWebSocketHeartbeat = setInterval(() => {
      (async () => {
        try {
          await this._rpcWebSocket.notify("ping");
        } catch {
        }
      })();
    }, 5e3), this._updateSubscriptions();
  }
  /**
   * @internal
   */
  _wsOnError(e) {
    this._rpcWebSocketConnected = !1, console.error("ws error:", e.message);
  }
  /**
   * @internal
   */
  _wsOnClose(e) {
    if (this._rpcWebSocketConnected = !1, this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER, this._rpcWebSocketIdleTimeout && (clearTimeout(this._rpcWebSocketIdleTimeout), this._rpcWebSocketIdleTimeout = null), this._rpcWebSocketHeartbeat && (clearInterval(this._rpcWebSocketHeartbeat), this._rpcWebSocketHeartbeat = null), e === 1e3) {
      this._updateSubscriptions();
      return;
    }
    this._subscriptionCallbacksByServerSubscriptionId = {}, Object.entries(this._subscriptionsByHash).forEach(([n, a]) => {
      this._setSubscription(n, {
        ...a,
        state: "pending"
      });
    });
  }
  /**
   * @internal
   */
  _setSubscription(e, n) {
    const a = this._subscriptionsByHash[e]?.state;
    if (this._subscriptionsByHash[e] = n, a !== n.state) {
      const c = this._subscriptionStateChangeCallbacksByHash[e];
      c && c.forEach((o) => {
        try {
          o(n.state);
        } catch {
        }
      });
    }
  }
  /**
   * @internal
   */
  _onSubscriptionStateChange(e, n) {
    const a = this._subscriptionHashByClientSubscriptionId[e];
    if (a == null)
      return () => {
      };
    const c = this._subscriptionStateChangeCallbacksByHash[a] ||= /* @__PURE__ */ new Set();
    return c.add(n), () => {
      c.delete(n), c.size === 0 && delete this._subscriptionStateChangeCallbacksByHash[a];
    };
  }
  /**
   * @internal
   */
  async _updateSubscriptions() {
    if (Object.keys(this._subscriptionsByHash).length === 0) {
      this._rpcWebSocketConnected && (this._rpcWebSocketConnected = !1, this._rpcWebSocketIdleTimeout = setTimeout(() => {
        this._rpcWebSocketIdleTimeout = null;
        try {
          this._rpcWebSocket.close();
        } catch (a) {
          a instanceof Error && console.log(`Error when closing socket connection: ${a.message}`);
        }
      }, 500));
      return;
    }
    if (this._rpcWebSocketIdleTimeout !== null && (clearTimeout(this._rpcWebSocketIdleTimeout), this._rpcWebSocketIdleTimeout = null, this._rpcWebSocketConnected = !0), !this._rpcWebSocketConnected) {
      this._rpcWebSocket.connect();
      return;
    }
    const e = this._rpcWebSocketGeneration, n = () => e === this._rpcWebSocketGeneration;
    await Promise.all(
      // Don't be tempted to change this to `Object.entries`. We call
      // `_updateSubscriptions` recursively when processing the state,
      // so it's important that we look up the *current* version of
      // each subscription, every time we process a hash.
      Object.keys(this._subscriptionsByHash).map(async (a) => {
        const c = this._subscriptionsByHash[a];
        if (c !== void 0)
          switch (c.state) {
            case "pending":
            case "unsubscribed":
              if (c.callbacks.size === 0) {
                delete this._subscriptionsByHash[a], c.state === "unsubscribed" && delete this._subscriptionCallbacksByServerSubscriptionId[c.serverSubscriptionId], await this._updateSubscriptions();
                return;
              }
              await (async () => {
                const {
                  args: o,
                  method: d
                } = c;
                try {
                  this._setSubscription(a, {
                    ...c,
                    state: "subscribing"
                  });
                  const m = await this._rpcWebSocket.call(d, o);
                  this._setSubscription(a, {
                    ...c,
                    serverSubscriptionId: m,
                    state: "subscribed"
                  }), this._subscriptionCallbacksByServerSubscriptionId[m] = c.callbacks, await this._updateSubscriptions();
                } catch (m) {
                  if (m instanceof Error && console.error(`${d} error for argument`, o, m.message), !n())
                    return;
                  this._setSubscription(a, {
                    ...c,
                    state: "pending"
                  }), await this._updateSubscriptions();
                }
              })();
              break;
            case "subscribed":
              c.callbacks.size === 0 && await (async () => {
                const {
                  serverSubscriptionId: o,
                  unsubscribeMethod: d
                } = c;
                if (this._subscriptionsAutoDisposedByRpc.has(o))
                  this._subscriptionsAutoDisposedByRpc.delete(o);
                else {
                  this._setSubscription(a, {
                    ...c,
                    state: "unsubscribing"
                  }), this._setSubscription(a, {
                    ...c,
                    state: "unsubscribing"
                  });
                  try {
                    await this._rpcWebSocket.call(d, [o]);
                  } catch (m) {
                    if (m instanceof Error && console.error(`${d} error:`, m.message), !n())
                      return;
                    this._setSubscription(a, {
                      ...c,
                      state: "subscribed"
                    }), await this._updateSubscriptions();
                    return;
                  }
                }
                this._setSubscription(a, {
                  ...c,
                  state: "unsubscribed"
                }), await this._updateSubscriptions();
              })();
              break;
          }
      })
    );
  }
  /**
   * @internal
   */
  _handleServerNotification(e, n) {
    const a = this._subscriptionCallbacksByServerSubscriptionId[e];
    a !== void 0 && a.forEach((c) => {
      try {
        c(
          ...n
        );
      } catch (o) {
        console.error(o);
      }
    });
  }
  /**
   * @internal
   */
  _wsOnAccountNotification(e) {
    const {
      result: n,
      subscription: a
    } = create(e, AccountNotificationResult);
    this._handleServerNotification(a, [n.value, n.context]);
  }
  /**
   * @internal
   */
  _makeSubscription(e, n) {
    const a = this._nextClientSubscriptionId++, c = fastStableStringify$1(
      [e.method, n],
      !0
      /* isArrayProp */
    ), o = this._subscriptionsByHash[c];
    return o === void 0 ? this._subscriptionsByHash[c] = {
      ...e,
      args: n,
      callbacks: /* @__PURE__ */ new Set([e.callback]),
      state: "pending"
    } : o.callbacks.add(e.callback), this._subscriptionHashByClientSubscriptionId[a] = c, this._subscriptionDisposeFunctionsByClientSubscriptionId[a] = async () => {
      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[a], delete this._subscriptionHashByClientSubscriptionId[a];
      const d = this._subscriptionsByHash[c];
      assert$2(d !== void 0, `Could not find a \`Subscription\` when tearing down client subscription #${a}`), d.callbacks.delete(e.callback), await this._updateSubscriptions();
    }, this._updateSubscriptions(), a;
  }
  /**
   * Register a callback to be invoked whenever the specified account changes
   *
   * @param publicKey Public key of the account to monitor
   * @param callback Function to invoke whenever the account is changed
   * @param commitment Specify the commitment level account changes must reach before notification
   * @return subscription id
   */
  onAccountChange(e, n, a) {
    const c = this._buildArgs(
      [e.toBase58()],
      a || this._commitment || "finalized",
      // Apply connection/server default.
      "base64"
    );
    return this._makeSubscription({
      callback: n,
      method: "accountSubscribe",
      unsubscribeMethod: "accountUnsubscribe"
    }, c);
  }
  /**
   * Deregister an account notification callback
   *
   * @param id client subscription id to deregister
   */
  async removeAccountChangeListener(e) {
    await this._unsubscribeClientSubscription(e, "account change");
  }
  /**
   * @internal
   */
  _wsOnProgramAccountNotification(e) {
    const {
      result: n,
      subscription: a
    } = create(e, ProgramAccountNotificationResult);
    this._handleServerNotification(a, [{
      accountId: n.value.pubkey,
      accountInfo: n.value.account
    }, n.context]);
  }
  /**
   * Register a callback to be invoked whenever accounts owned by the
   * specified program change
   *
   * @param programId Public key of the program to monitor
   * @param callback Function to invoke whenever the account is changed
   * @param commitment Specify the commitment level account changes must reach before notification
   * @param filters The program account filters to pass into the RPC method
   * @return subscription id
   */
  onProgramAccountChange(e, n, a, c) {
    const o = this._buildArgs(
      [e.toBase58()],
      a || this._commitment || "finalized",
      // Apply connection/server default.
      "base64",
      c ? {
        filters: c
      } : void 0
      /* extra */
    );
    return this._makeSubscription({
      callback: n,
      method: "programSubscribe",
      unsubscribeMethod: "programUnsubscribe"
    }, o);
  }
  /**
   * Deregister an account notification callback
   *
   * @param id client subscription id to deregister
   */
  async removeProgramAccountChangeListener(e) {
    await this._unsubscribeClientSubscription(e, "program account change");
  }
  /**
   * Registers a callback to be invoked whenever logs are emitted.
   */
  onLogs(e, n, a) {
    const c = this._buildArgs(
      [typeof e == "object" ? {
        mentions: [e.toString()]
      } : e],
      a || this._commitment || "finalized"
      // Apply connection/server default.
    );
    return this._makeSubscription({
      callback: n,
      method: "logsSubscribe",
      unsubscribeMethod: "logsUnsubscribe"
    }, c);
  }
  /**
   * Deregister a logs callback.
   *
   * @param id client subscription id to deregister.
   */
  async removeOnLogsListener(e) {
    await this._unsubscribeClientSubscription(e, "logs");
  }
  /**
   * @internal
   */
  _wsOnLogsNotification(e) {
    const {
      result: n,
      subscription: a
    } = create(e, LogsNotificationResult);
    this._handleServerNotification(a, [n.value, n.context]);
  }
  /**
   * @internal
   */
  _wsOnSlotNotification(e) {
    const {
      result: n,
      subscription: a
    } = create(e, SlotNotificationResult);
    this._handleServerNotification(a, [n]);
  }
  /**
   * Register a callback to be invoked upon slot changes
   *
   * @param callback Function to invoke whenever the slot changes
   * @return subscription id
   */
  onSlotChange(e) {
    return this._makeSubscription(
      {
        callback: e,
        method: "slotSubscribe",
        unsubscribeMethod: "slotUnsubscribe"
      },
      []
      /* args */
    );
  }
  /**
   * Deregister a slot notification callback
   *
   * @param id client subscription id to deregister
   */
  async removeSlotChangeListener(e) {
    await this._unsubscribeClientSubscription(e, "slot change");
  }
  /**
   * @internal
   */
  _wsOnSlotUpdatesNotification(e) {
    const {
      result: n,
      subscription: a
    } = create(e, SlotUpdateNotificationResult);
    this._handleServerNotification(a, [n]);
  }
  /**
   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s
   * may be useful to track live progress of a cluster.
   *
   * @param callback Function to invoke whenever the slot updates
   * @return subscription id
   */
  onSlotUpdate(e) {
    return this._makeSubscription(
      {
        callback: e,
        method: "slotsUpdatesSubscribe",
        unsubscribeMethod: "slotsUpdatesUnsubscribe"
      },
      []
      /* args */
    );
  }
  /**
   * Deregister a slot update notification callback
   *
   * @param id client subscription id to deregister
   */
  async removeSlotUpdateListener(e) {
    await this._unsubscribeClientSubscription(e, "slot update");
  }
  /**
   * @internal
   */
  async _unsubscribeClientSubscription(e, n) {
    const a = this._subscriptionDisposeFunctionsByClientSubscriptionId[e];
    a ? await a() : console.warn(`Ignored unsubscribe request because an active subscription with id \`${e}\` for '${n}' events could not be found.`);
  }
  _buildArgs(e, n, a, c) {
    const o = n || this._commitment;
    if (o || a || c) {
      let d = {};
      a && (d.encoding = a), o && (d.commitment = o), c && (d = Object.assign(d, c)), e.push(d);
    }
    return e;
  }
  /**
   * @internal
   */
  _buildArgsAtLeastConfirmed(e, n, a, c) {
    const o = n || this._commitment;
    if (o && !["confirmed", "finalized"].includes(o))
      throw new Error("Using Connection with default commitment: `" + this._commitment + "`, but method requires at least `confirmed`");
    return this._buildArgs(e, n, a, c);
  }
  /**
   * @internal
   */
  _wsOnSignatureNotification(e) {
    const {
      result: n,
      subscription: a
    } = create(e, SignatureNotificationResult);
    n.value !== "receivedSignature" && this._subscriptionsAutoDisposedByRpc.add(a), this._handleServerNotification(a, n.value === "receivedSignature" ? [{
      type: "received"
    }, n.context] : [{
      type: "status",
      result: n.value
    }, n.context]);
  }
  /**
   * Register a callback to be invoked upon signature updates
   *
   * @param signature Transaction signature string in base 58
   * @param callback Function to invoke on signature notifications
   * @param commitment Specify the commitment level signature must reach before notification
   * @return subscription id
   */
  onSignature(e, n, a) {
    const c = this._buildArgs(
      [e],
      a || this._commitment || "finalized"
      // Apply connection/server default.
    ), o = this._makeSubscription({
      callback: (d, m) => {
        if (d.type === "status") {
          n(d.result, m);
          try {
            this.removeSignatureListener(o);
          } catch {
          }
        }
      },
      method: "signatureSubscribe",
      unsubscribeMethod: "signatureUnsubscribe"
    }, c);
    return o;
  }
  /**
   * Register a callback to be invoked when a transaction is
   * received and/or processed.
   *
   * @param signature Transaction signature string in base 58
   * @param callback Function to invoke on signature notifications
   * @param options Enable received notifications and set the commitment
   *   level that signature must reach before notification
   * @return subscription id
   */
  onSignatureWithOptions(e, n, a) {
    const {
      commitment: c,
      ...o
    } = {
      ...a,
      commitment: a && a.commitment || this._commitment || "finalized"
      // Apply connection/server default.
    }, d = this._buildArgs([e], c, void 0, o), m = this._makeSubscription({
      callback: (w, S) => {
        n(w, S);
        try {
          this.removeSignatureListener(m);
        } catch {
        }
      },
      method: "signatureSubscribe",
      unsubscribeMethod: "signatureUnsubscribe"
    }, d);
    return m;
  }
  /**
   * Deregister a signature notification callback
   *
   * @param id client subscription id to deregister
   */
  async removeSignatureListener(e) {
    await this._unsubscribeClientSubscription(e, "signature result");
  }
  /**
   * @internal
   */
  _wsOnRootNotification(e) {
    const {
      result: n,
      subscription: a
    } = create(e, RootNotificationResult);
    this._handleServerNotification(a, [n]);
  }
  /**
   * Register a callback to be invoked upon root changes
   *
   * @param callback Function to invoke whenever the root changes
   * @return subscription id
   */
  onRootChange(e) {
    return this._makeSubscription(
      {
        callback: e,
        method: "rootSubscribe",
        unsubscribeMethod: "rootUnsubscribe"
      },
      []
      /* args */
    );
  }
  /**
   * Deregister a root notification callback
   *
   * @param id client subscription id to deregister
   */
  async removeRootChangeListener(e) {
    await this._unsubscribeClientSubscription(e, "root change");
  }
}
Object.freeze({
  CreateLookupTable: {
    index: 0,
    layout: struct([u32$1("instruction"), u64$1("recentSlot"), u8("bumpSeed")])
  },
  FreezeLookupTable: {
    index: 1,
    layout: struct([u32$1("instruction")])
  },
  ExtendLookupTable: {
    index: 2,
    layout: struct([u32$1("instruction"), u64$1(), seq(publicKey(), offset(u32$1(), -8), "addresses")])
  },
  DeactivateLookupTable: {
    index: 3,
    layout: struct([u32$1("instruction")])
  },
  CloseLookupTable: {
    index: 4,
    layout: struct([u32$1("instruction")])
  }
});
new PublicKey("AddressLookupTab1e1111111111111111111111111");
Object.freeze({
  RequestUnits: {
    index: 0,
    layout: struct([u8("instruction"), u32$1("units"), u32$1("additionalFee")])
  },
  RequestHeapFrame: {
    index: 1,
    layout: struct([u8("instruction"), u32$1("bytes")])
  },
  SetComputeUnitLimit: {
    index: 2,
    layout: struct([u8("instruction"), u32$1("units")])
  },
  SetComputeUnitPrice: {
    index: 3,
    layout: struct([u8("instruction"), u64$1("microLamports")])
  }
});
new PublicKey("ComputeBudget111111111111111111111111111111");
struct([u8("numSignatures"), u8("padding"), u16("signatureOffset"), u16("signatureInstructionIndex"), u16("publicKeyOffset"), u16("publicKeyInstructionIndex"), u16("messageDataOffset"), u16("messageDataSize"), u16("messageInstructionIndex")]);
new PublicKey("Ed25519SigVerify111111111111111111111111111");
secp256k1.utils.isValidPrivateKey;
secp256k1.getPublicKey;
struct([u8("numSignatures"), u16("signatureOffset"), u8("signatureInstructionIndex"), u16("ethAddressOffset"), u8("ethAddressInstructionIndex"), u16("messageDataOffset"), u16("messageDataSize"), u8("messageInstructionIndex"), blob(20, "ethAddress"), blob(64, "signature"), u8("recoveryId")]);
new PublicKey("KeccakSecp256k11111111111111111111111111111");
var _class2;
new PublicKey("StakeConfig11111111111111111111111111111111");
class Lockup {
  /**
   * Create a new Lockup object
   */
  constructor(e, n, a) {
    this.unixTimestamp = void 0, this.epoch = void 0, this.custodian = void 0, this.unixTimestamp = e, this.epoch = n, this.custodian = a;
  }
  /**
   * Default, inactive Lockup value
   */
}
_class2 = Lockup;
Lockup.default = new _class2(0, 0, PublicKey.default);
Object.freeze({
  Initialize: {
    index: 0,
    layout: struct([u32$1("instruction"), authorized(), lockup()])
  },
  Authorize: {
    index: 1,
    layout: struct([u32$1("instruction"), publicKey("newAuthorized"), u32$1("stakeAuthorizationType")])
  },
  Delegate: {
    index: 2,
    layout: struct([u32$1("instruction")])
  },
  Split: {
    index: 3,
    layout: struct([u32$1("instruction"), ns64("lamports")])
  },
  Withdraw: {
    index: 4,
    layout: struct([u32$1("instruction"), ns64("lamports")])
  },
  Deactivate: {
    index: 5,
    layout: struct([u32$1("instruction")])
  },
  Merge: {
    index: 7,
    layout: struct([u32$1("instruction")])
  },
  AuthorizeWithSeed: {
    index: 8,
    layout: struct([u32$1("instruction"), publicKey("newAuthorized"), u32$1("stakeAuthorizationType"), rustString("authoritySeed"), publicKey("authorityOwner")])
  }
});
new PublicKey("Stake11111111111111111111111111111111111111");
Object.freeze({
  InitializeAccount: {
    index: 0,
    layout: struct([u32$1("instruction"), voteInit()])
  },
  Authorize: {
    index: 1,
    layout: struct([u32$1("instruction"), publicKey("newAuthorized"), u32$1("voteAuthorizationType")])
  },
  Withdraw: {
    index: 3,
    layout: struct([u32$1("instruction"), ns64("lamports")])
  },
  AuthorizeWithSeed: {
    index: 10,
    layout: struct([u32$1("instruction"), voteAuthorizeWithSeedArgs()])
  }
});
new PublicKey("Vote111111111111111111111111111111111111111");
new PublicKey("Va1idator1nfo111111111111111111111111111111");
type({
  name: string(),
  website: optional(string()),
  details: optional(string()),
  keybaseUsername: optional(string())
});
new PublicKey("Vote111111111111111111111111111111111111111");
struct([
  publicKey("nodePubkey"),
  publicKey("authorizedWithdrawer"),
  u8("commission"),
  nu64(),
  // votes.length
  seq(struct([nu64("slot"), u32$1("confirmationCount")]), offset(u32$1(), -8), "votes"),
  u8("rootSlotValid"),
  nu64("rootSlot"),
  nu64(),
  // authorizedVoters.length
  seq(struct([nu64("epoch"), publicKey("authorizedVoter")]), offset(u32$1(), -8), "authorizedVoters"),
  struct([seq(struct([publicKey("authorizedPubkey"), nu64("epochOfLastAuthorizedSwitch"), nu64("targetEpoch")]), 32, "buf"), nu64("idx"), u8("isEmpty")], "priorVoters"),
  nu64(),
  // epochCredits.length
  seq(struct([nu64("epoch"), nu64("credits"), nu64("prevCredits")]), offset(u32$1(), -8), "epochCredits"),
  struct([nu64("slot"), nu64("timestamp")], "lastTimestamp")
]);
class SolanaConfig extends BaseWebToken {
  signer;
  minConfirm = 1;
  constructor(e) {
    super(e), this.base = ["lamports", 1e9];
  }
  async getProvider() {
    return this.providerInstance || (this.providerInstance = new Connection(this.providerUrl, {
      confirmTransactionInitialTimeout: 6e4,
      commitment: "confirmed"
    })), this.providerInstance;
  }
  async getTx(e) {
    const n = await this.getProvider(), a = await n.getTransaction(e, { commitment: "confirmed", maxSupportedTransactionVersion: 0 });
    if (!a)
      throw new Error("Confirmed tx not found");
    const c = await n.getSlot("confirmed");
    if (!a.meta)
      throw new Error(`Unable to resolve transaction ${e}`);
    const o = new BigNumber$1(a.meta.postBalances[1]).minus(new BigNumber$1(a.meta.preBalances[1])), d = a.transaction.message.getAccountKeys().staticAccountKeys;
    return {
      from: d[0].toBase58(),
      to: d[1].toBase58(),
      amount: o,
      blockHeight: new BigNumber$1(a.slot),
      pending: !1,
      confirmed: c - a.slot >= 1
    };
  }
  ownerToAddress(e) {
    return typeof e == "string" && (e = Buffer$F.from(e)), bs58$3.encode(e);
  }
  async sign(e) {
    return await (await this.getSigner()).sign(e);
  }
  getSigner() {
    return this.signer || (this.signer = new HexSolanaSigner$1(this.wallet)), this.signer;
  }
  verify(e, n, a) {
    return HexSolanaSigner$1.verify(e, n, a);
  }
  async getCurrentHeight() {
    return new BigNumber$1((await (await this.getProvider()).getEpochInfo()).blockHeight ?? 0);
  }
  async getFee(e, n) {
    return new BigNumber$1(5e3);
  }
  async sendTx(e) {
    return await this.wallet.sendTransaction(e, await this.getProvider(), { skipPreflight: !0 });
  }
  async createTx(e, n, a) {
    const c = new PublicKey(await this.getPublicKey()), o = await retry$1(async (m) => {
      try {
        return await (await this.getProvider()).getRecentBlockhash();
      } catch (w) {
        throw w.message?.includes("blockhash") ? w : (m(w), new Error("Unreachable"));
      }
    }, { retries: 3, minTimeout: 1e3 }), d = new Transaction$1({ recentBlockhash: o.blockhash, feePayer: c });
    return d.add(SystemProgram.transfer({
      fromPubkey: c,
      toPubkey: new PublicKey(n),
      lamports: +new BigNumber$1(e).toNumber()
    })), { tx: d, txId: void 0 };
  }
  async getPublicKey() {
    if (!this.wallet.publicKey)
      throw new Error("Wallet.publicKey is undefined");
    return this.wallet.publicKey.toBuffer();
  }
}
const version$1 = "abi/5.7.0", logger$5 = new Logger(version$1), _constructorGuard = {};
let ModifiersBytes = { calldata: !0, memory: !0, storage: !0 }, ModifiersNest = { calldata: !0, memory: !0 };
function checkModifier(t, e) {
  if (t === "bytes" || t === "string") {
    if (ModifiersBytes[e])
      return !0;
  } else if (t === "address") {
    if (e === "payable")
      return !0;
  } else if ((t.indexOf("[") >= 0 || t === "tuple") && ModifiersNest[e])
    return !0;
  return (ModifiersBytes[e] || e === "payable") && logger$5.throwArgumentError("invalid modifier", "name", e), !1;
}
function parseParamType(t, e) {
  let n = t;
  function a(m) {
    logger$5.throwArgumentError(`unexpected character at position ${m}`, "param", t);
  }
  t = t.replace(/\s/g, " ");
  function c(m) {
    let w = { type: "", name: "", parent: m, state: { allowType: !0 } };
    return e && (w.indexed = !1), w;
  }
  let o = { type: "", name: "", state: { allowType: !0 } }, d = o;
  for (let m = 0; m < t.length; m++) {
    let w = t[m];
    switch (w) {
      case "(":
        d.state.allowType && d.type === "" ? d.type = "tuple" : d.state.allowParams || a(m), d.state.allowType = !1, d.type = verifyType(d.type), d.components = [c(d)], d = d.components[0];
        break;
      case ")":
        delete d.state, d.name === "indexed" && (e || a(m), d.indexed = !0, d.name = ""), checkModifier(d.type, d.name) && (d.name = ""), d.type = verifyType(d.type);
        let S = d;
        d = d.parent, d || a(m), delete S.parent, d.state.allowParams = !1, d.state.allowName = !0, d.state.allowArray = !0;
        break;
      case ",":
        delete d.state, d.name === "indexed" && (e || a(m), d.indexed = !0, d.name = ""), checkModifier(d.type, d.name) && (d.name = ""), d.type = verifyType(d.type);
        let A = c(d.parent);
        d.parent.components.push(A), delete d.parent, d = A;
        break;
      case " ":
        d.state.allowType && d.type !== "" && (d.type = verifyType(d.type), delete d.state.allowType, d.state.allowName = !0, d.state.allowParams = !0), d.state.allowName && d.name !== "" && (d.name === "indexed" ? (e || a(m), d.indexed && a(m), d.indexed = !0, d.name = "") : checkModifier(d.type, d.name) ? d.name = "" : d.state.allowName = !1);
        break;
      case "[":
        d.state.allowArray || a(m), d.type += w, d.state.allowArray = !1, d.state.allowName = !1, d.state.readArray = !0;
        break;
      case "]":
        d.state.readArray || a(m), d.type += w, d.state.readArray = !1, d.state.allowArray = !0, d.state.allowName = !0;
        break;
      default:
        d.state.allowType ? (d.type += w, d.state.allowParams = !0, d.state.allowArray = !0) : d.state.allowName ? (d.name += w, delete d.state.allowArray) : d.state.readArray ? d.type += w : a(m);
    }
  }
  return d.parent && logger$5.throwArgumentError("unexpected eof", "param", t), delete o.state, d.name === "indexed" ? (e || a(n.length - 7), d.indexed && a(n.length - 7), d.indexed = !0, d.name = "") : checkModifier(d.type, d.name) && (d.name = ""), o.type = verifyType(o.type), o;
}
function populate(t, e) {
  for (let n in e)
    defineReadOnly(t, n, e[n]);
}
const FormatTypes = Object.freeze({
  // Bare formatting, as is needed for computing a sighash of an event or function
  sighash: "sighash",
  // Human-Readable with Minimal spacing and without names (compact human-readable)
  minimal: "minimal",
  // Human-Readable with nice spacing, including all names
  full: "full",
  // JSON-format a la Solidity
  json: "json"
}), paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
class ParamType {
  constructor(e, n) {
    e !== _constructorGuard && logger$5.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "new ParamType()"
    }), populate(this, n);
    let a = this.type.match(paramTypeArray);
    a ? populate(this, {
      arrayLength: parseInt(a[2] || "-1"),
      arrayChildren: ParamType.fromObject({
        type: a[1],
        components: this.components
      }),
      baseType: "array"
    }) : populate(this, {
      arrayLength: null,
      arrayChildren: null,
      baseType: this.components != null ? "tuple" : this.type
    }), this._isParamType = !0, Object.freeze(this);
  }
  // Format the parameter fragment
  //   - sighash: "(uint256,address)"
  //   - minimal: "tuple(uint256,address) indexed"
  //   - full:    "tuple(uint256 foo, address bar) indexed baz"
  format(e) {
    if (e || (e = FormatTypes.sighash), FormatTypes[e] || logger$5.throwArgumentError("invalid format type", "format", e), e === FormatTypes.json) {
      let a = {
        type: this.baseType === "tuple" ? "tuple" : this.type,
        name: this.name || void 0
      };
      return typeof this.indexed == "boolean" && (a.indexed = this.indexed), this.components && (a.components = this.components.map((c) => JSON.parse(c.format(e)))), JSON.stringify(a);
    }
    let n = "";
    return this.baseType === "array" ? (n += this.arrayChildren.format(e), n += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]") : this.baseType === "tuple" ? (e !== FormatTypes.sighash && (n += this.type), n += "(" + this.components.map((a) => a.format(e)).join(e === FormatTypes.full ? ", " : ",") + ")") : n += this.type, e !== FormatTypes.sighash && (this.indexed === !0 && (n += " indexed"), e === FormatTypes.full && this.name && (n += " " + this.name)), n;
  }
  static from(e, n) {
    return typeof e == "string" ? ParamType.fromString(e, n) : ParamType.fromObject(e);
  }
  static fromObject(e) {
    return ParamType.isParamType(e) ? e : new ParamType(_constructorGuard, {
      name: e.name || null,
      type: verifyType(e.type),
      indexed: e.indexed == null ? null : !!e.indexed,
      components: e.components ? e.components.map(ParamType.fromObject) : null
    });
  }
  static fromString(e, n) {
    function a(c) {
      return ParamType.fromObject({
        name: c.name,
        type: c.type,
        indexed: c.indexed,
        components: c.components
      });
    }
    return a(parseParamType(e, !!n));
  }
  static isParamType(e) {
    return !!(e != null && e._isParamType);
  }
}
function parseParams(t, e) {
  return splitNesting(t).map((n) => ParamType.fromString(n, e));
}
class Fragment {
  constructor(e, n) {
    e !== _constructorGuard && logger$5.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "new Fragment()"
    }), populate(this, n), this._isFragment = !0, Object.freeze(this);
  }
  static from(e) {
    return Fragment.isFragment(e) ? e : typeof e == "string" ? Fragment.fromString(e) : Fragment.fromObject(e);
  }
  static fromObject(e) {
    if (Fragment.isFragment(e))
      return e;
    switch (e.type) {
      case "function":
        return FunctionFragment.fromObject(e);
      case "event":
        return EventFragment.fromObject(e);
      case "constructor":
        return ConstructorFragment.fromObject(e);
      case "error":
        return ErrorFragment.fromObject(e);
      case "fallback":
      case "receive":
        return null;
    }
    return logger$5.throwArgumentError("invalid fragment object", "value", e);
  }
  static fromString(e) {
    return e = e.replace(/\s/g, " "), e = e.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " "), e = e.trim(), e.split(" ")[0] === "event" ? EventFragment.fromString(e.substring(5).trim()) : e.split(" ")[0] === "function" ? FunctionFragment.fromString(e.substring(8).trim()) : e.split("(")[0].trim() === "constructor" ? ConstructorFragment.fromString(e.trim()) : e.split(" ")[0] === "error" ? ErrorFragment.fromString(e.substring(5).trim()) : logger$5.throwArgumentError("unsupported fragment", "value", e);
  }
  static isFragment(e) {
    return !!(e && e._isFragment);
  }
}
class EventFragment extends Fragment {
  format(e) {
    if (e || (e = FormatTypes.sighash), FormatTypes[e] || logger$5.throwArgumentError("invalid format type", "format", e), e === FormatTypes.json)
      return JSON.stringify({
        type: "event",
        anonymous: this.anonymous,
        name: this.name,
        inputs: this.inputs.map((a) => JSON.parse(a.format(e)))
      });
    let n = "";
    return e !== FormatTypes.sighash && (n += "event "), n += this.name + "(" + this.inputs.map((a) => a.format(e)).join(e === FormatTypes.full ? ", " : ",") + ") ", e !== FormatTypes.sighash && this.anonymous && (n += "anonymous "), n.trim();
  }
  static from(e) {
    return typeof e == "string" ? EventFragment.fromString(e) : EventFragment.fromObject(e);
  }
  static fromObject(e) {
    if (EventFragment.isEventFragment(e))
      return e;
    e.type !== "event" && logger$5.throwArgumentError("invalid event object", "value", e);
    const n = {
      name: verifyIdentifier(e.name),
      anonymous: e.anonymous,
      inputs: e.inputs ? e.inputs.map(ParamType.fromObject) : [],
      type: "event"
    };
    return new EventFragment(_constructorGuard, n);
  }
  static fromString(e) {
    let n = e.match(regexParen);
    n || logger$5.throwArgumentError("invalid event string", "value", e);
    let a = !1;
    return n[3].split(" ").forEach((c) => {
      switch (c.trim()) {
        case "anonymous":
          a = !0;
          break;
        case "":
          break;
        default:
          logger$5.warn("unknown modifier: " + c);
      }
    }), EventFragment.fromObject({
      name: n[1].trim(),
      anonymous: a,
      inputs: parseParams(n[2], !0),
      type: "event"
    });
  }
  static isEventFragment(e) {
    return e && e._isFragment && e.type === "event";
  }
}
function parseGas(t, e) {
  e.gas = null;
  let n = t.split("@");
  return n.length !== 1 ? (n.length > 2 && logger$5.throwArgumentError("invalid human-readable ABI signature", "value", t), n[1].match(/^[0-9]+$/) || logger$5.throwArgumentError("invalid human-readable ABI signature gas", "value", t), e.gas = BigNumber.from(n[1]), n[0]) : t;
}
function parseModifiers(t, e) {
  e.constant = !1, e.payable = !1, e.stateMutability = "nonpayable", t.split(" ").forEach((n) => {
    switch (n.trim()) {
      case "constant":
        e.constant = !0;
        break;
      case "payable":
        e.payable = !0, e.stateMutability = "payable";
        break;
      case "nonpayable":
        e.payable = !1, e.stateMutability = "nonpayable";
        break;
      case "pure":
        e.constant = !0, e.stateMutability = "pure";
        break;
      case "view":
        e.constant = !0, e.stateMutability = "view";
        break;
      case "external":
      case "public":
      case "":
        break;
      default:
        console.log("unknown modifier: " + n);
    }
  });
}
function verifyState(t) {
  let e = {
    constant: !1,
    payable: !0,
    stateMutability: "payable"
  };
  return t.stateMutability != null ? (e.stateMutability = t.stateMutability, e.constant = e.stateMutability === "view" || e.stateMutability === "pure", t.constant != null && !!t.constant !== e.constant && logger$5.throwArgumentError("cannot have constant function with mutability " + e.stateMutability, "value", t), e.payable = e.stateMutability === "payable", t.payable != null && !!t.payable !== e.payable && logger$5.throwArgumentError("cannot have payable function with mutability " + e.stateMutability, "value", t)) : t.payable != null ? (e.payable = !!t.payable, t.constant == null && !e.payable && t.type !== "constructor" && logger$5.throwArgumentError("unable to determine stateMutability", "value", t), e.constant = !!t.constant, e.constant ? e.stateMutability = "view" : e.stateMutability = e.payable ? "payable" : "nonpayable", e.payable && e.constant && logger$5.throwArgumentError("cannot have constant payable function", "value", t)) : t.constant != null ? (e.constant = !!t.constant, e.payable = !e.constant, e.stateMutability = e.constant ? "view" : "payable") : t.type !== "constructor" && logger$5.throwArgumentError("unable to determine stateMutability", "value", t), e;
}
class ConstructorFragment extends Fragment {
  format(e) {
    if (e || (e = FormatTypes.sighash), FormatTypes[e] || logger$5.throwArgumentError("invalid format type", "format", e), e === FormatTypes.json)
      return JSON.stringify({
        type: "constructor",
        stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
        payable: this.payable,
        gas: this.gas ? this.gas.toNumber() : void 0,
        inputs: this.inputs.map((a) => JSON.parse(a.format(e)))
      });
    e === FormatTypes.sighash && logger$5.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "format(sighash)"
    });
    let n = "constructor(" + this.inputs.map((a) => a.format(e)).join(e === FormatTypes.full ? ", " : ",") + ") ";
    return this.stateMutability && this.stateMutability !== "nonpayable" && (n += this.stateMutability + " "), n.trim();
  }
  static from(e) {
    return typeof e == "string" ? ConstructorFragment.fromString(e) : ConstructorFragment.fromObject(e);
  }
  static fromObject(e) {
    if (ConstructorFragment.isConstructorFragment(e))
      return e;
    e.type !== "constructor" && logger$5.throwArgumentError("invalid constructor object", "value", e);
    let n = verifyState(e);
    n.constant && logger$5.throwArgumentError("constructor cannot be constant", "value", e);
    const a = {
      name: null,
      type: e.type,
      inputs: e.inputs ? e.inputs.map(ParamType.fromObject) : [],
      payable: n.payable,
      stateMutability: n.stateMutability,
      gas: e.gas ? BigNumber.from(e.gas) : null
    };
    return new ConstructorFragment(_constructorGuard, a);
  }
  static fromString(e) {
    let n = { type: "constructor" };
    e = parseGas(e, n);
    let a = e.match(regexParen);
    return (!a || a[1].trim() !== "constructor") && logger$5.throwArgumentError("invalid constructor string", "value", e), n.inputs = parseParams(a[2].trim(), !1), parseModifiers(a[3].trim(), n), ConstructorFragment.fromObject(n);
  }
  static isConstructorFragment(e) {
    return e && e._isFragment && e.type === "constructor";
  }
}
class FunctionFragment extends ConstructorFragment {
  format(e) {
    if (e || (e = FormatTypes.sighash), FormatTypes[e] || logger$5.throwArgumentError("invalid format type", "format", e), e === FormatTypes.json)
      return JSON.stringify({
        type: "function",
        name: this.name,
        constant: this.constant,
        stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
        payable: this.payable,
        gas: this.gas ? this.gas.toNumber() : void 0,
        inputs: this.inputs.map((a) => JSON.parse(a.format(e))),
        outputs: this.outputs.map((a) => JSON.parse(a.format(e)))
      });
    let n = "";
    return e !== FormatTypes.sighash && (n += "function "), n += this.name + "(" + this.inputs.map((a) => a.format(e)).join(e === FormatTypes.full ? ", " : ",") + ") ", e !== FormatTypes.sighash && (this.stateMutability ? this.stateMutability !== "nonpayable" && (n += this.stateMutability + " ") : this.constant && (n += "view "), this.outputs && this.outputs.length && (n += "returns (" + this.outputs.map((a) => a.format(e)).join(", ") + ") "), this.gas != null && (n += "@" + this.gas.toString() + " ")), n.trim();
  }
  static from(e) {
    return typeof e == "string" ? FunctionFragment.fromString(e) : FunctionFragment.fromObject(e);
  }
  static fromObject(e) {
    if (FunctionFragment.isFunctionFragment(e))
      return e;
    e.type !== "function" && logger$5.throwArgumentError("invalid function object", "value", e);
    let n = verifyState(e);
    const a = {
      type: e.type,
      name: verifyIdentifier(e.name),
      constant: n.constant,
      inputs: e.inputs ? e.inputs.map(ParamType.fromObject) : [],
      outputs: e.outputs ? e.outputs.map(ParamType.fromObject) : [],
      payable: n.payable,
      stateMutability: n.stateMutability,
      gas: e.gas ? BigNumber.from(e.gas) : null
    };
    return new FunctionFragment(_constructorGuard, a);
  }
  static fromString(e) {
    let n = { type: "function" };
    e = parseGas(e, n);
    let a = e.split(" returns ");
    a.length > 2 && logger$5.throwArgumentError("invalid function string", "value", e);
    let c = a[0].match(regexParen);
    if (c || logger$5.throwArgumentError("invalid function signature", "value", e), n.name = c[1].trim(), n.name && verifyIdentifier(n.name), n.inputs = parseParams(c[2], !1), parseModifiers(c[3].trim(), n), a.length > 1) {
      let o = a[1].match(regexParen);
      (o[1].trim() != "" || o[3].trim() != "") && logger$5.throwArgumentError("unexpected tokens", "value", e), n.outputs = parseParams(o[2], !1);
    } else
      n.outputs = [];
    return FunctionFragment.fromObject(n);
  }
  static isFunctionFragment(e) {
    return e && e._isFragment && e.type === "function";
  }
}
function checkForbidden(t) {
  const e = t.format();
  return (e === "Error(string)" || e === "Panic(uint256)") && logger$5.throwArgumentError(`cannot specify user defined ${e} error`, "fragment", t), t;
}
class ErrorFragment extends Fragment {
  format(e) {
    if (e || (e = FormatTypes.sighash), FormatTypes[e] || logger$5.throwArgumentError("invalid format type", "format", e), e === FormatTypes.json)
      return JSON.stringify({
        type: "error",
        name: this.name,
        inputs: this.inputs.map((a) => JSON.parse(a.format(e)))
      });
    let n = "";
    return e !== FormatTypes.sighash && (n += "error "), n += this.name + "(" + this.inputs.map((a) => a.format(e)).join(e === FormatTypes.full ? ", " : ",") + ") ", n.trim();
  }
  static from(e) {
    return typeof e == "string" ? ErrorFragment.fromString(e) : ErrorFragment.fromObject(e);
  }
  static fromObject(e) {
    if (ErrorFragment.isErrorFragment(e))
      return e;
    e.type !== "error" && logger$5.throwArgumentError("invalid error object", "value", e);
    const n = {
      type: e.type,
      name: verifyIdentifier(e.name),
      inputs: e.inputs ? e.inputs.map(ParamType.fromObject) : []
    };
    return checkForbidden(new ErrorFragment(_constructorGuard, n));
  }
  static fromString(e) {
    let n = { type: "error" }, a = e.match(regexParen);
    return a || logger$5.throwArgumentError("invalid error signature", "value", e), n.name = a[1].trim(), n.name && verifyIdentifier(n.name), n.inputs = parseParams(a[2], !1), checkForbidden(ErrorFragment.fromObject(n));
  }
  static isErrorFragment(e) {
    return e && e._isFragment && e.type === "error";
  }
}
function verifyType(t) {
  return t.match(/^uint($|[^1-9])/) ? t = "uint256" + t.substring(4) : t.match(/^int($|[^1-9])/) && (t = "int256" + t.substring(3)), t;
}
const regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
function verifyIdentifier(t) {
  return (!t || !t.match(regexIdentifier)) && logger$5.throwArgumentError(`invalid identifier "${t}"`, "value", t), t;
}
const regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
function splitNesting(t) {
  t = t.trim();
  let e = [], n = "", a = 0;
  for (let c = 0; c < t.length; c++) {
    let o = t[c];
    o === "," && a === 0 ? (e.push(n), n = "") : (n += o, o === "(" ? a++ : o === ")" && (a--, a === -1 && logger$5.throwArgumentError("unbalanced parenthesis", "value", t)));
  }
  return n && e.push(n), e;
}
const logger$4 = new Logger(version$1);
function checkResultErrors(t) {
  const e = [], n = function(a, c) {
    if (Array.isArray(c))
      for (let o in c) {
        const d = a.slice();
        d.push(o);
        try {
          n(d, c[o]);
        } catch (m) {
          e.push({ path: d, error: m });
        }
      }
  };
  return n([], t), e;
}
class Coder {
  constructor(e, n, a, c) {
    this.name = e, this.type = n, this.localName = a, this.dynamic = c;
  }
  _throwError(e, n) {
    logger$4.throwArgumentError(e, this.localName, n);
  }
}
class Writer {
  constructor(e) {
    defineReadOnly(this, "wordSize", e || 32), this._data = [], this._dataLength = 0, this._padding = new Uint8Array(e);
  }
  get data() {
    return hexConcat(this._data);
  }
  get length() {
    return this._dataLength;
  }
  _writeData(e) {
    return this._data.push(e), this._dataLength += e.length, e.length;
  }
  appendWriter(e) {
    return this._writeData(concat(e._data));
  }
  // Arrayish items; padded on the right to wordSize
  writeBytes(e) {
    let n = arrayify(e);
    const a = n.length % this.wordSize;
    return a && (n = concat([n, this._padding.slice(a)])), this._writeData(n);
  }
  _getValue(e) {
    let n = arrayify(BigNumber.from(e));
    return n.length > this.wordSize && logger$4.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
      length: this.wordSize,
      offset: n.length
    }), n.length % this.wordSize && (n = concat([this._padding.slice(n.length % this.wordSize), n])), n;
  }
  // BigNumberish items; padded on the left to wordSize
  writeValue(e) {
    return this._writeData(this._getValue(e));
  }
  writeUpdatableValue() {
    const e = this._data.length;
    return this._data.push(this._padding), this._dataLength += this.wordSize, (n) => {
      this._data[e] = this._getValue(n);
    };
  }
}
class Reader {
  constructor(e, n, a, c) {
    defineReadOnly(this, "_data", arrayify(e)), defineReadOnly(this, "wordSize", n || 32), defineReadOnly(this, "_coerceFunc", a), defineReadOnly(this, "allowLoose", c), this._offset = 0;
  }
  get data() {
    return hexlify(this._data);
  }
  get consumed() {
    return this._offset;
  }
  // The default Coerce function
  static coerce(e, n) {
    let a = e.match("^u?int([0-9]+)$");
    return a && parseInt(a[1]) <= 48 && (n = n.toNumber()), n;
  }
  coerce(e, n) {
    return this._coerceFunc ? this._coerceFunc(e, n) : Reader.coerce(e, n);
  }
  _peekBytes(e, n, a) {
    let c = Math.ceil(n / this.wordSize) * this.wordSize;
    return this._offset + c > this._data.length && (this.allowLoose && a && this._offset + n <= this._data.length ? c = n : logger$4.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
      length: this._data.length,
      offset: this._offset + c
    })), this._data.slice(this._offset, this._offset + c);
  }
  subReader(e) {
    return new Reader(this._data.slice(this._offset + e), this.wordSize, this._coerceFunc, this.allowLoose);
  }
  readBytes(e, n) {
    let a = this._peekBytes(0, e, !!n);
    return this._offset += a.length, a.slice(0, e);
  }
  readValue() {
    return BigNumber.from(this.readBytes(this.wordSize));
  }
}
class AddressCoder extends Coder {
  constructor(e) {
    super("address", "address", e, !1);
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000";
  }
  encode(e, n) {
    try {
      n = getAddress(n);
    } catch (a) {
      this._throwError(a.message, n);
    }
    return e.writeValue(n);
  }
  decode(e) {
    return getAddress(hexZeroPad(e.readValue().toHexString(), 20));
  }
}
class AnonymousCoder extends Coder {
  constructor(e) {
    super(e.name, e.type, void 0, e.dynamic), this.coder = e;
  }
  defaultValue() {
    return this.coder.defaultValue();
  }
  encode(e, n) {
    return this.coder.encode(e, n);
  }
  decode(e) {
    return this.coder.decode(e);
  }
}
const logger$3 = new Logger(version$1);
function pack(t, e, n) {
  let a = null;
  if (Array.isArray(n))
    a = n;
  else if (n && typeof n == "object") {
    let w = {};
    a = e.map((S) => {
      const A = S.localName;
      return A || logger$3.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, {
        argument: "values",
        coder: S,
        value: n
      }), w[A] && logger$3.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, {
        argument: "values",
        coder: S,
        value: n
      }), w[A] = !0, n[A];
    });
  } else
    logger$3.throwArgumentError("invalid tuple value", "tuple", n);
  e.length !== a.length && logger$3.throwArgumentError("types/value length mismatch", "tuple", n);
  let c = new Writer(t.wordSize), o = new Writer(t.wordSize), d = [];
  e.forEach((w, S) => {
    let A = a[S];
    if (w.dynamic) {
      let B = o.length;
      w.encode(o, A);
      let P = c.writeUpdatableValue();
      d.push((I) => {
        P(I + B);
      });
    } else
      w.encode(c, A);
  }), d.forEach((w) => {
    w(c.length);
  });
  let m = t.appendWriter(c);
  return m += t.appendWriter(o), m;
}
function unpack(t, e) {
  let n = [], a = t.subReader(0);
  e.forEach((o) => {
    let d = null;
    if (o.dynamic) {
      let m = t.readValue(), w = a.subReader(m.toNumber());
      try {
        d = o.decode(w);
      } catch (S) {
        if (S.code === Logger.errors.BUFFER_OVERRUN)
          throw S;
        d = S, d.baseType = o.name, d.name = o.localName, d.type = o.type;
      }
    } else
      try {
        d = o.decode(t);
      } catch (m) {
        if (m.code === Logger.errors.BUFFER_OVERRUN)
          throw m;
        d = m, d.baseType = o.name, d.name = o.localName, d.type = o.type;
      }
    d != null && n.push(d);
  });
  const c = e.reduce((o, d) => {
    const m = d.localName;
    return m && (o[m] || (o[m] = 0), o[m]++), o;
  }, {});
  e.forEach((o, d) => {
    let m = o.localName;
    if (!m || c[m] !== 1 || (m === "length" && (m = "_length"), n[m] != null))
      return;
    const w = n[d];
    w instanceof Error ? Object.defineProperty(n, m, {
      enumerable: !0,
      get: () => {
        throw w;
      }
    }) : n[m] = w;
  });
  for (let o = 0; o < n.length; o++) {
    const d = n[o];
    d instanceof Error && Object.defineProperty(n, o, {
      enumerable: !0,
      get: () => {
        throw d;
      }
    });
  }
  return Object.freeze(n);
}
class ArrayCoder extends Coder {
  constructor(e, n, a) {
    const c = e.type + "[" + (n >= 0 ? n : "") + "]", o = n === -1 || e.dynamic;
    super("array", c, a, o), this.coder = e, this.length = n;
  }
  defaultValue() {
    const e = this.coder.defaultValue(), n = [];
    for (let a = 0; a < this.length; a++)
      n.push(e);
    return n;
  }
  encode(e, n) {
    Array.isArray(n) || this._throwError("expected array value", n);
    let a = this.length;
    a === -1 && (a = n.length, e.writeValue(n.length)), logger$3.checkArgumentCount(n.length, a, "coder array" + (this.localName ? " " + this.localName : ""));
    let c = [];
    for (let o = 0; o < n.length; o++)
      c.push(this.coder);
    return pack(e, c, n);
  }
  decode(e) {
    let n = this.length;
    n === -1 && (n = e.readValue().toNumber(), n * 32 > e._data.length && logger$3.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, {
      length: e._data.length,
      count: n
    }));
    let a = [];
    for (let c = 0; c < n; c++)
      a.push(new AnonymousCoder(this.coder));
    return e.coerce(this.name, unpack(e, a));
  }
}
class BooleanCoder extends Coder {
  constructor(e) {
    super("bool", "bool", e, !1);
  }
  defaultValue() {
    return !1;
  }
  encode(e, n) {
    return e.writeValue(n ? 1 : 0);
  }
  decode(e) {
    return e.coerce(this.type, !e.readValue().isZero());
  }
}
class DynamicBytesCoder extends Coder {
  constructor(e, n) {
    super(e, e, n, !0);
  }
  defaultValue() {
    return "0x";
  }
  encode(e, n) {
    n = arrayify(n);
    let a = e.writeValue(n.length);
    return a += e.writeBytes(n), a;
  }
  decode(e) {
    return e.readBytes(e.readValue().toNumber(), !0);
  }
}
class BytesCoder extends DynamicBytesCoder {
  constructor(e) {
    super("bytes", e);
  }
  decode(e) {
    return e.coerce(this.name, hexlify(super.decode(e)));
  }
}
class FixedBytesCoder extends Coder {
  constructor(e, n) {
    let a = "bytes" + String(e);
    super(a, a, n, !1), this.size = e;
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
  }
  encode(e, n) {
    let a = arrayify(n);
    return a.length !== this.size && this._throwError("incorrect data length", n), e.writeBytes(a);
  }
  decode(e) {
    return e.coerce(this.name, hexlify(e.readBytes(this.size)));
  }
}
class NullCoder extends Coder {
  constructor(e) {
    super("null", "", e, !1);
  }
  defaultValue() {
    return null;
  }
  encode(e, n) {
    return n != null && this._throwError("not null", n), e.writeBytes([]);
  }
  decode(e) {
    return e.readBytes(0), e.coerce(this.name, null);
  }
}
class NumberCoder extends Coder {
  constructor(e, n, a) {
    const c = (n ? "int" : "uint") + e * 8;
    super(c, c, a, !1), this.size = e, this.signed = n;
  }
  defaultValue() {
    return 0;
  }
  encode(e, n) {
    let a = BigNumber.from(n), c = MaxUint256$1.mask(e.wordSize * 8);
    if (this.signed) {
      let o = c.mask(this.size * 8 - 1);
      (a.gt(o) || a.lt(o.add(One$1).mul(NegativeOne$1))) && this._throwError("value out-of-bounds", n);
    } else
      (a.lt(Zero$1) || a.gt(c.mask(this.size * 8))) && this._throwError("value out-of-bounds", n);
    return a = a.toTwos(this.size * 8).mask(this.size * 8), this.signed && (a = a.fromTwos(this.size * 8).toTwos(8 * e.wordSize)), e.writeValue(a);
  }
  decode(e) {
    let n = e.readValue().mask(this.size * 8);
    return this.signed && (n = n.fromTwos(this.size * 8)), e.coerce(this.name, n);
  }
}
class StringCoder extends DynamicBytesCoder {
  constructor(e) {
    super("string", e);
  }
  defaultValue() {
    return "";
  }
  encode(e, n) {
    return super.encode(e, toUtf8Bytes(n));
  }
  decode(e) {
    return toUtf8String(super.decode(e));
  }
}
class TupleCoder extends Coder {
  constructor(e, n) {
    let a = !1;
    const c = [];
    e.forEach((d) => {
      d.dynamic && (a = !0), c.push(d.type);
    });
    const o = "tuple(" + c.join(",") + ")";
    super("tuple", o, n, a), this.coders = e;
  }
  defaultValue() {
    const e = [];
    this.coders.forEach((a) => {
      e.push(a.defaultValue());
    });
    const n = this.coders.reduce((a, c) => {
      const o = c.localName;
      return o && (a[o] || (a[o] = 0), a[o]++), a;
    }, {});
    return this.coders.forEach((a, c) => {
      let o = a.localName;
      !o || n[o] !== 1 || (o === "length" && (o = "_length"), e[o] == null && (e[o] = e[c]));
    }), Object.freeze(e);
  }
  encode(e, n) {
    return pack(e, this.coders, n);
  }
  decode(e) {
    return e.coerce(this.name, unpack(e, this.coders));
  }
}
const logger$2 = new Logger(version$1), paramTypeBytes = new RegExp(/^bytes([0-9]*)$/), paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
class AbiCoder {
  constructor(e) {
    defineReadOnly(this, "coerceFunc", e || null);
  }
  _getCoder(e) {
    switch (e.baseType) {
      case "address":
        return new AddressCoder(e.name);
      case "bool":
        return new BooleanCoder(e.name);
      case "string":
        return new StringCoder(e.name);
      case "bytes":
        return new BytesCoder(e.name);
      case "array":
        return new ArrayCoder(this._getCoder(e.arrayChildren), e.arrayLength, e.name);
      case "tuple":
        return new TupleCoder((e.components || []).map((a) => this._getCoder(a)), e.name);
      case "":
        return new NullCoder(e.name);
    }
    let n = e.type.match(paramTypeNumber);
    if (n) {
      let a = parseInt(n[2] || "256");
      return (a === 0 || a > 256 || a % 8 !== 0) && logger$2.throwArgumentError("invalid " + n[1] + " bit length", "param", e), new NumberCoder(a / 8, n[1] === "int", e.name);
    }
    if (n = e.type.match(paramTypeBytes), n) {
      let a = parseInt(n[1]);
      return (a === 0 || a > 32) && logger$2.throwArgumentError("invalid bytes length", "param", e), new FixedBytesCoder(a, e.name);
    }
    return logger$2.throwArgumentError("invalid type", "type", e.type);
  }
  _getWordSize() {
    return 32;
  }
  _getReader(e, n) {
    return new Reader(e, this._getWordSize(), this.coerceFunc, n);
  }
  _getWriter() {
    return new Writer(this._getWordSize());
  }
  getDefaultValue(e) {
    const n = e.map((c) => this._getCoder(ParamType.from(c)));
    return new TupleCoder(n, "_").defaultValue();
  }
  encode(e, n) {
    e.length !== n.length && logger$2.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, {
      count: { types: e.length, values: n.length },
      value: { types: e, values: n }
    });
    const a = e.map((d) => this._getCoder(ParamType.from(d))), c = new TupleCoder(a, "_"), o = this._getWriter();
    return c.encode(o, n), o.data;
  }
  decode(e, n, a) {
    const c = e.map((d) => this._getCoder(ParamType.from(d)));
    return new TupleCoder(c, "_").decode(this._getReader(arrayify(n), a));
  }
}
const defaultAbiCoder = new AbiCoder(), logger$1 = new Logger(version$1);
class LogDescription extends Description {
}
class TransactionDescription extends Description {
}
class ErrorDescription extends Description {
}
class Indexed extends Description {
  static isIndexed(e) {
    return !!(e && e._isIndexed);
  }
}
const BuiltinErrors = {
  "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: !0 },
  "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
};
function wrapAccessError(t, e) {
  const n = new Error(`deferred error during ABI decoding triggered accessing ${t}`);
  return n.error = e, n;
}
class Interface {
  constructor(e) {
    let n = [];
    typeof e == "string" ? n = JSON.parse(e) : n = e, defineReadOnly(this, "fragments", n.map((a) => Fragment.from(a)).filter((a) => a != null)), defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")()), defineReadOnly(this, "functions", {}), defineReadOnly(this, "errors", {}), defineReadOnly(this, "events", {}), defineReadOnly(this, "structs", {}), this.fragments.forEach((a) => {
      let c = null;
      switch (a.type) {
        case "constructor":
          if (this.deploy) {
            logger$1.warn("duplicate definition - constructor");
            return;
          }
          defineReadOnly(this, "deploy", a);
          return;
        case "function":
          c = this.functions;
          break;
        case "event":
          c = this.events;
          break;
        case "error":
          c = this.errors;
          break;
        default:
          return;
      }
      let o = a.format();
      if (c[o]) {
        logger$1.warn("duplicate definition - " + o);
        return;
      }
      c[o] = a;
    }), this.deploy || defineReadOnly(this, "deploy", ConstructorFragment.from({
      payable: !1,
      type: "constructor"
    })), defineReadOnly(this, "_isInterface", !0);
  }
  format(e) {
    e || (e = FormatTypes.full), e === FormatTypes.sighash && logger$1.throwArgumentError("interface does not support formatting sighash", "format", e);
    const n = this.fragments.map((a) => a.format(e));
    return e === FormatTypes.json ? JSON.stringify(n.map((a) => JSON.parse(a))) : n;
  }
  // Sub-classes can override these to handle other blockchains
  static getAbiCoder() {
    return defaultAbiCoder;
  }
  static getAddress(e) {
    return getAddress(e);
  }
  static getSighash(e) {
    return hexDataSlice(id(e.format()), 0, 4);
  }
  static getEventTopic(e) {
    return id(e.format());
  }
  // Find a function definition by any means necessary (unless it is ambiguous)
  getFunction(e) {
    if (isHexString$1(e)) {
      for (const a in this.functions)
        if (e === this.getSighash(a))
          return this.functions[a];
      logger$1.throwArgumentError("no matching function", "sighash", e);
    }
    if (e.indexOf("(") === -1) {
      const a = e.trim(), c = Object.keys(this.functions).filter((o) => o.split(
        "("
        /* fix:) */
      )[0] === a);
      return c.length === 0 ? logger$1.throwArgumentError("no matching function", "name", a) : c.length > 1 && logger$1.throwArgumentError("multiple matching functions", "name", a), this.functions[c[0]];
    }
    const n = this.functions[FunctionFragment.fromString(e).format()];
    return n || logger$1.throwArgumentError("no matching function", "signature", e), n;
  }
  // Find an event definition by any means necessary (unless it is ambiguous)
  getEvent(e) {
    if (isHexString$1(e)) {
      const a = e.toLowerCase();
      for (const c in this.events)
        if (a === this.getEventTopic(c))
          return this.events[c];
      logger$1.throwArgumentError("no matching event", "topichash", a);
    }
    if (e.indexOf("(") === -1) {
      const a = e.trim(), c = Object.keys(this.events).filter((o) => o.split(
        "("
        /* fix:) */
      )[0] === a);
      return c.length === 0 ? logger$1.throwArgumentError("no matching event", "name", a) : c.length > 1 && logger$1.throwArgumentError("multiple matching events", "name", a), this.events[c[0]];
    }
    const n = this.events[EventFragment.fromString(e).format()];
    return n || logger$1.throwArgumentError("no matching event", "signature", e), n;
  }
  // Find a function definition by any means necessary (unless it is ambiguous)
  getError(e) {
    if (isHexString$1(e)) {
      const a = getStatic(this.constructor, "getSighash");
      for (const c in this.errors) {
        const o = this.errors[c];
        if (e === a(o))
          return this.errors[c];
      }
      logger$1.throwArgumentError("no matching error", "sighash", e);
    }
    if (e.indexOf("(") === -1) {
      const a = e.trim(), c = Object.keys(this.errors).filter((o) => o.split(
        "("
        /* fix:) */
      )[0] === a);
      return c.length === 0 ? logger$1.throwArgumentError("no matching error", "name", a) : c.length > 1 && logger$1.throwArgumentError("multiple matching errors", "name", a), this.errors[c[0]];
    }
    const n = this.errors[FunctionFragment.fromString(e).format()];
    return n || logger$1.throwArgumentError("no matching error", "signature", e), n;
  }
  // Get the sighash (the bytes4 selector) used by Solidity to identify a function
  getSighash(e) {
    if (typeof e == "string")
      try {
        e = this.getFunction(e);
      } catch (n) {
        try {
          e = this.getError(e);
        } catch {
          throw n;
        }
      }
    return getStatic(this.constructor, "getSighash")(e);
  }
  // Get the topic (the bytes32 hash) used by Solidity to identify an event
  getEventTopic(e) {
    return typeof e == "string" && (e = this.getEvent(e)), getStatic(this.constructor, "getEventTopic")(e);
  }
  _decodeParams(e, n) {
    return this._abiCoder.decode(e, n);
  }
  _encodeParams(e, n) {
    return this._abiCoder.encode(e, n);
  }
  encodeDeploy(e) {
    return this._encodeParams(this.deploy.inputs, e || []);
  }
  decodeErrorResult(e, n) {
    typeof e == "string" && (e = this.getError(e));
    const a = arrayify(n);
    return hexlify(a.slice(0, 4)) !== this.getSighash(e) && logger$1.throwArgumentError(`data signature does not match error ${e.name}.`, "data", hexlify(a)), this._decodeParams(e.inputs, a.slice(4));
  }
  encodeErrorResult(e, n) {
    return typeof e == "string" && (e = this.getError(e)), hexlify(concat([
      this.getSighash(e),
      this._encodeParams(e.inputs, n || [])
    ]));
  }
  // Decode the data for a function call (e.g. tx.data)
  decodeFunctionData(e, n) {
    typeof e == "string" && (e = this.getFunction(e));
    const a = arrayify(n);
    return hexlify(a.slice(0, 4)) !== this.getSighash(e) && logger$1.throwArgumentError(`data signature does not match function ${e.name}.`, "data", hexlify(a)), this._decodeParams(e.inputs, a.slice(4));
  }
  // Encode the data for a function call (e.g. tx.data)
  encodeFunctionData(e, n) {
    return typeof e == "string" && (e = this.getFunction(e)), hexlify(concat([
      this.getSighash(e),
      this._encodeParams(e.inputs, n || [])
    ]));
  }
  // Decode the result from a function call (e.g. from eth_call)
  decodeFunctionResult(e, n) {
    typeof e == "string" && (e = this.getFunction(e));
    let a = arrayify(n), c = null, o = "", d = null, m = null, w = null;
    switch (a.length % this._abiCoder._getWordSize()) {
      case 0:
        try {
          return this._abiCoder.decode(e.outputs, a);
        } catch {
        }
        break;
      case 4: {
        const S = hexlify(a.slice(0, 4)), A = BuiltinErrors[S];
        if (A)
          d = this._abiCoder.decode(A.inputs, a.slice(4)), m = A.name, w = A.signature, A.reason && (c = d[0]), m === "Error" ? o = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(d[0])}` : m === "Panic" && (o = `; VM Exception while processing transaction: reverted with panic code ${d[0]}`);
        else
          try {
            const B = this.getError(S);
            d = this._abiCoder.decode(B.inputs, a.slice(4)), m = B.name, w = B.format();
          } catch {
          }
        break;
      }
    }
    return logger$1.throwError("call revert exception" + o, Logger.errors.CALL_EXCEPTION, {
      method: e.format(),
      data: hexlify(n),
      errorArgs: d,
      errorName: m,
      errorSignature: w,
      reason: c
    });
  }
  // Encode the result for a function call (e.g. for eth_call)
  encodeFunctionResult(e, n) {
    return typeof e == "string" && (e = this.getFunction(e)), hexlify(this._abiCoder.encode(e.outputs, n || []));
  }
  // Create the filter for the event with search criteria (e.g. for eth_filterLog)
  encodeFilterTopics(e, n) {
    typeof e == "string" && (e = this.getEvent(e)), n.length > e.inputs.length && logger$1.throwError("too many arguments for " + e.format(), Logger.errors.UNEXPECTED_ARGUMENT, {
      argument: "values",
      value: n
    });
    let a = [];
    e.anonymous || a.push(this.getEventTopic(e));
    const c = (o, d) => o.type === "string" ? id(d) : o.type === "bytes" ? keccak256$1(hexlify(d)) : (o.type === "bool" && typeof d == "boolean" && (d = d ? "0x01" : "0x00"), o.type.match(/^u?int/) && (d = BigNumber.from(d).toHexString()), o.type === "address" && this._abiCoder.encode(["address"], [d]), hexZeroPad(hexlify(d), 32));
    for (n.forEach((o, d) => {
      let m = e.inputs[d];
      if (!m.indexed) {
        o != null && logger$1.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + m.name, o);
        return;
      }
      o == null ? a.push(null) : m.baseType === "array" || m.baseType === "tuple" ? logger$1.throwArgumentError("filtering with tuples or arrays not supported", "contract." + m.name, o) : Array.isArray(o) ? a.push(o.map((w) => c(m, w))) : a.push(c(m, o));
    }); a.length && a[a.length - 1] === null; )
      a.pop();
    return a;
  }
  encodeEventLog(e, n) {
    typeof e == "string" && (e = this.getEvent(e));
    const a = [], c = [], o = [];
    return e.anonymous || a.push(this.getEventTopic(e)), n.length !== e.inputs.length && logger$1.throwArgumentError("event arguments/values mismatch", "values", n), e.inputs.forEach((d, m) => {
      const w = n[m];
      if (d.indexed)
        if (d.type === "string")
          a.push(id(w));
        else if (d.type === "bytes")
          a.push(keccak256$1(w));
        else {
          if (d.baseType === "tuple" || d.baseType === "array")
            throw new Error("not implemented");
          a.push(this._abiCoder.encode([d.type], [w]));
        }
      else
        c.push(d), o.push(w);
    }), {
      data: this._abiCoder.encode(c, o),
      topics: a
    };
  }
  // Decode a filter for the event and the search criteria
  decodeEventLog(e, n, a) {
    if (typeof e == "string" && (e = this.getEvent(e)), a != null && !e.anonymous) {
      let P = this.getEventTopic(e);
      (!isHexString$1(a[0], 32) || a[0].toLowerCase() !== P) && logger$1.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: P, value: a[0] }), a = a.slice(1);
    }
    let c = [], o = [], d = [];
    e.inputs.forEach((P, I) => {
      P.indexed ? P.type === "string" || P.type === "bytes" || P.baseType === "tuple" || P.baseType === "array" ? (c.push(ParamType.fromObject({ type: "bytes32", name: P.name })), d.push(!0)) : (c.push(P), d.push(!1)) : (o.push(P), d.push(!1));
    });
    let m = a != null ? this._abiCoder.decode(c, concat(a)) : null, w = this._abiCoder.decode(o, n, !0), S = [], A = 0, B = 0;
    e.inputs.forEach((P, I) => {
      if (P.indexed)
        if (m == null)
          S[I] = new Indexed({ _isIndexed: !0, hash: null });
        else if (d[I])
          S[I] = new Indexed({ _isIndexed: !0, hash: m[B++] });
        else
          try {
            S[I] = m[B++];
          } catch (O) {
            S[I] = O;
          }
      else
        try {
          S[I] = w[A++];
        } catch (O) {
          S[I] = O;
        }
      if (P.name && S[P.name] == null) {
        const O = S[I];
        O instanceof Error ? Object.defineProperty(S, P.name, {
          enumerable: !0,
          get: () => {
            throw wrapAccessError(`property ${JSON.stringify(P.name)}`, O);
          }
        }) : S[P.name] = O;
      }
    });
    for (let P = 0; P < S.length; P++) {
      const I = S[P];
      I instanceof Error && Object.defineProperty(S, P, {
        enumerable: !0,
        get: () => {
          throw wrapAccessError(`index ${P}`, I);
        }
      });
    }
    return Object.freeze(S);
  }
  // Given a transaction, find the matching function fragment (if any) and
  // determine all its properties and call parameters
  parseTransaction(e) {
    let n = this.getFunction(e.data.substring(0, 10).toLowerCase());
    return n ? new TransactionDescription({
      args: this._abiCoder.decode(n.inputs, "0x" + e.data.substring(10)),
      functionFragment: n,
      name: n.name,
      signature: n.format(),
      sighash: this.getSighash(n),
      value: BigNumber.from(e.value || "0")
    }) : null;
  }
  // @TODO
  //parseCallResult(data: BytesLike): ??
  // Given an event log, find the matching event fragment (if any) and
  // determine all its properties and values
  parseLog(e) {
    let n = this.getEvent(e.topics[0]);
    return !n || n.anonymous ? null : new LogDescription({
      eventFragment: n,
      name: n.name,
      signature: n.format(),
      topic: this.getEventTopic(n),
      args: this.decodeEventLog(n, e.data, e.topics)
    });
  }
  parseError(e) {
    const n = hexlify(e);
    let a = this.getError(n.substring(0, 10).toLowerCase());
    return a ? new ErrorDescription({
      args: this._abiCoder.decode(a.inputs, "0x" + n.substring(10)),
      errorFragment: a,
      name: a.name,
      signature: a.format(),
      sighash: this.getSighash(a)
    }) : null;
  }
  /*
  static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
      if (Interface.isInterface(value)) {
          return value;
      }
      if (typeof(value) === "string") {
          return new Interface(JSON.parse(value));
      }
      return new Interface(value);
  }
  */
  static isInterface(e) {
    return !!(e && e._isInterface);
  }
}
const version = "contracts/5.7.0";
var __awaiter$4 = function(t, e, n, a) {
  function c(o) {
    return o instanceof n ? o : new n(function(d) {
      d(o);
    });
  }
  return new (n || (n = Promise))(function(o, d) {
    function m(A) {
      try {
        S(a.next(A));
      } catch (B) {
        d(B);
      }
    }
    function w(A) {
      try {
        S(a.throw(A));
      } catch (B) {
        d(B);
      }
    }
    function S(A) {
      A.done ? o(A.value) : c(A.value).then(m, w);
    }
    S((a = a.apply(t, e || [])).next());
  });
};
const logger = new Logger(version);
function resolveName(t, e) {
  return __awaiter$4(this, void 0, void 0, function* () {
    const n = yield e;
    typeof n != "string" && logger.throwArgumentError("invalid address or ENS name", "name", n);
    try {
      return getAddress(n);
    } catch {
    }
    t || logger.throwError("a provider or signer is needed to resolve ENS names", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "resolveName"
    });
    const a = yield t.resolveName(n);
    return a == null && logger.throwArgumentError("resolver or addr is not configured for ENS name", "name", n), a;
  });
}
function resolveAddresses(t, e, n) {
  return __awaiter$4(this, void 0, void 0, function* () {
    return Array.isArray(n) ? yield Promise.all(n.map((a, c) => resolveAddresses(t, Array.isArray(e) ? e[c] : e[a.name], a))) : n.type === "address" ? yield resolveName(t, e) : n.type === "tuple" ? yield resolveAddresses(t, e, n.components) : n.baseType === "array" ? Array.isArray(e) ? yield Promise.all(e.map((a) => resolveAddresses(t, a, n.arrayChildren))) : Promise.reject(logger.makeError("invalid value for array", Logger.errors.INVALID_ARGUMENT, {
      argument: "value",
      value: e
    })) : e;
  });
}
function populateTransaction(t, e, n) {
  return __awaiter$4(this, void 0, void 0, function* () {
    let a = {};
    n.length === e.inputs.length + 1 && typeof n[n.length - 1] == "object" && (a = shallowCopy(n.pop())), logger.checkArgumentCount(n.length, e.inputs.length, "passed to contract"), t.signer ? a.from ? a.from = resolveProperties({
      override: resolveName(t.signer, a.from),
      signer: t.signer.getAddress()
    }).then((S) => __awaiter$4(this, void 0, void 0, function* () {
      return getAddress(S.signer) !== S.override && logger.throwError("Contract with a Signer cannot override from", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "overrides.from"
      }), S.override;
    })) : a.from = t.signer.getAddress() : a.from && (a.from = resolveName(t.provider, a.from));
    const c = yield resolveProperties({
      args: resolveAddresses(t.signer || t.provider, n, e.inputs),
      address: t.resolvedAddress,
      overrides: resolveProperties(a) || {}
    }), o = t.interface.encodeFunctionData(e, c.args), d = {
      data: o,
      to: c.address
    }, m = c.overrides;
    if (m.nonce != null && (d.nonce = BigNumber.from(m.nonce).toNumber()), m.gasLimit != null && (d.gasLimit = BigNumber.from(m.gasLimit)), m.gasPrice != null && (d.gasPrice = BigNumber.from(m.gasPrice)), m.maxFeePerGas != null && (d.maxFeePerGas = BigNumber.from(m.maxFeePerGas)), m.maxPriorityFeePerGas != null && (d.maxPriorityFeePerGas = BigNumber.from(m.maxPriorityFeePerGas)), m.from != null && (d.from = m.from), m.type != null && (d.type = m.type), m.accessList != null && (d.accessList = accessListify(m.accessList)), d.gasLimit == null && e.gas != null) {
      let S = 21e3;
      const A = arrayify(o);
      for (let B = 0; B < A.length; B++)
        S += 4, A[B] && (S += 64);
      d.gasLimit = BigNumber.from(e.gas).add(S);
    }
    if (m.value) {
      const S = BigNumber.from(m.value);
      !S.isZero() && !e.payable && logger.throwError("non-payable method cannot override value", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "overrides.value",
        value: a.value
      }), d.value = S;
    }
    m.customData && (d.customData = shallowCopy(m.customData)), m.ccipReadEnabled && (d.ccipReadEnabled = !!m.ccipReadEnabled), delete a.nonce, delete a.gasLimit, delete a.gasPrice, delete a.from, delete a.value, delete a.type, delete a.accessList, delete a.maxFeePerGas, delete a.maxPriorityFeePerGas, delete a.customData, delete a.ccipReadEnabled;
    const w = Object.keys(a).filter((S) => a[S] != null);
    return w.length && logger.throwError(`cannot override ${w.map((S) => JSON.stringify(S)).join(",")}`, Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "overrides",
      overrides: w
    }), d;
  });
}
function buildPopulate(t, e) {
  return function(...n) {
    return populateTransaction(t, e, n);
  };
}
function buildEstimate(t, e) {
  const n = t.signer || t.provider;
  return function(...a) {
    return __awaiter$4(this, void 0, void 0, function* () {
      n || logger.throwError("estimate require a provider or signer", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "estimateGas"
      });
      const c = yield populateTransaction(t, e, a);
      return yield n.estimateGas(c);
    });
  };
}
function addContractWait(t, e) {
  const n = e.wait.bind(e);
  e.wait = (a) => n(a).then((c) => (c.events = c.logs.map((o) => {
    let d = deepCopy(o), m = null;
    try {
      m = t.interface.parseLog(o);
    } catch {
    }
    return m && (d.args = m.args, d.decode = (w, S) => t.interface.decodeEventLog(m.eventFragment, w, S), d.event = m.name, d.eventSignature = m.signature), d.removeListener = () => t.provider, d.getBlock = () => t.provider.getBlock(c.blockHash), d.getTransaction = () => t.provider.getTransaction(c.transactionHash), d.getTransactionReceipt = () => Promise.resolve(c), d;
  }), c));
}
function buildCall(t, e, n) {
  const a = t.signer || t.provider;
  return function(...c) {
    return __awaiter$4(this, void 0, void 0, function* () {
      let o;
      if (c.length === e.inputs.length + 1 && typeof c[c.length - 1] == "object") {
        const w = shallowCopy(c.pop());
        w.blockTag != null && (o = yield w.blockTag), delete w.blockTag, c.push(w);
      }
      t.deployTransaction != null && (yield t._deployed(o));
      const d = yield populateTransaction(t, e, c), m = yield a.call(d, o);
      try {
        let w = t.interface.decodeFunctionResult(e, m);
        return n && e.outputs.length === 1 && (w = w[0]), w;
      } catch (w) {
        throw w.code === Logger.errors.CALL_EXCEPTION && (w.address = t.address, w.args = c, w.transaction = d), w;
      }
    });
  };
}
function buildSend(t, e) {
  return function(...n) {
    return __awaiter$4(this, void 0, void 0, function* () {
      t.signer || logger.throwError("sending a transaction requires a signer", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "sendTransaction"
      }), t.deployTransaction != null && (yield t._deployed());
      const a = yield populateTransaction(t, e, n), c = yield t.signer.sendTransaction(a);
      return addContractWait(t, c), c;
    });
  };
}
function buildDefault(t, e, n) {
  return e.constant ? buildCall(t, e, n) : buildSend(t, e);
}
function getEventTag(t) {
  return t.address && (t.topics == null || t.topics.length === 0) ? "*" : (t.address || "*") + "@" + (t.topics ? t.topics.map((e) => Array.isArray(e) ? e.join("|") : e).join(":") : "");
}
class RunningEvent {
  constructor(e, n) {
    defineReadOnly(this, "tag", e), defineReadOnly(this, "filter", n), this._listeners = [];
  }
  addListener(e, n) {
    this._listeners.push({ listener: e, once: n });
  }
  removeListener(e) {
    let n = !1;
    this._listeners = this._listeners.filter((a) => n || a.listener !== e ? !0 : (n = !0, !1));
  }
  removeAllListeners() {
    this._listeners = [];
  }
  listeners() {
    return this._listeners.map((e) => e.listener);
  }
  listenerCount() {
    return this._listeners.length;
  }
  run(e) {
    const n = this.listenerCount();
    return this._listeners = this._listeners.filter((a) => {
      const c = e.slice();
      return setTimeout(() => {
        a.listener.apply(this, c);
      }, 0), !a.once;
    }), n;
  }
  prepareEvent(e) {
  }
  // Returns the array that will be applied to an emit
  getEmit(e) {
    return [e];
  }
}
class ErrorRunningEvent extends RunningEvent {
  constructor() {
    super("error", null);
  }
}
class FragmentRunningEvent extends RunningEvent {
  constructor(e, n, a, c) {
    const o = {
      address: e
    };
    let d = n.getEventTopic(a);
    c ? (d !== c[0] && logger.throwArgumentError("topic mismatch", "topics", c), o.topics = c.slice()) : o.topics = [d], super(getEventTag(o), o), defineReadOnly(this, "address", e), defineReadOnly(this, "interface", n), defineReadOnly(this, "fragment", a);
  }
  prepareEvent(e) {
    super.prepareEvent(e), e.event = this.fragment.name, e.eventSignature = this.fragment.format(), e.decode = (n, a) => this.interface.decodeEventLog(this.fragment, n, a);
    try {
      e.args = this.interface.decodeEventLog(this.fragment, e.data, e.topics);
    } catch (n) {
      e.args = null, e.decodeError = n;
    }
  }
  getEmit(e) {
    const n = checkResultErrors(e.args);
    if (n.length)
      throw n[0].error;
    const a = (e.args || []).slice();
    return a.push(e), a;
  }
}
class WildcardRunningEvent extends RunningEvent {
  constructor(e, n) {
    super("*", { address: e }), defineReadOnly(this, "address", e), defineReadOnly(this, "interface", n);
  }
  prepareEvent(e) {
    super.prepareEvent(e);
    try {
      const n = this.interface.parseLog(e);
      e.event = n.name, e.eventSignature = n.signature, e.decode = (a, c) => this.interface.decodeEventLog(n.eventFragment, a, c), e.args = n.args;
    } catch {
    }
  }
}
class BaseContract {
  constructor(e, n, a) {
    defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(n)), a == null ? (defineReadOnly(this, "provider", null), defineReadOnly(this, "signer", null)) : Signer.isSigner(a) ? (defineReadOnly(this, "provider", a.provider || null), defineReadOnly(this, "signer", a)) : Provider$1.isProvider(a) ? (defineReadOnly(this, "provider", a), defineReadOnly(this, "signer", null)) : logger.throwArgumentError("invalid signer or provider", "signerOrProvider", a), defineReadOnly(this, "callStatic", {}), defineReadOnly(this, "estimateGas", {}), defineReadOnly(this, "functions", {}), defineReadOnly(this, "populateTransaction", {}), defineReadOnly(this, "filters", {});
    {
      const d = {};
      Object.keys(this.interface.events).forEach((m) => {
        const w = this.interface.events[m];
        defineReadOnly(this.filters, m, (...S) => ({
          address: this.address,
          topics: this.interface.encodeFilterTopics(w, S)
        })), d[w.name] || (d[w.name] = []), d[w.name].push(m);
      }), Object.keys(d).forEach((m) => {
        const w = d[m];
        w.length === 1 ? defineReadOnly(this.filters, m, this.filters[w[0]]) : logger.warn(`Duplicate definition of ${m} (${w.join(", ")})`);
      });
    }
    if (defineReadOnly(this, "_runningEvents", {}), defineReadOnly(this, "_wrappedEmits", {}), e == null && logger.throwArgumentError("invalid contract address or ENS name", "addressOrName", e), defineReadOnly(this, "address", e), this.provider)
      defineReadOnly(this, "resolvedAddress", resolveName(this.provider, e));
    else
      try {
        defineReadOnly(this, "resolvedAddress", Promise.resolve(getAddress(e)));
      } catch {
        logger.throwError("provider is required to use ENS name as contract address", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "new Contract"
        });
      }
    this.resolvedAddress.catch((d) => {
    });
    const c = {}, o = {};
    Object.keys(this.interface.functions).forEach((d) => {
      const m = this.interface.functions[d];
      if (o[d]) {
        logger.warn(`Duplicate ABI entry for ${JSON.stringify(d)}`);
        return;
      }
      o[d] = !0;
      {
        const w = m.name;
        c[`%${w}`] || (c[`%${w}`] = []), c[`%${w}`].push(d);
      }
      this[d] == null && defineReadOnly(this, d, buildDefault(this, m, !0)), this.functions[d] == null && defineReadOnly(this.functions, d, buildDefault(this, m, !1)), this.callStatic[d] == null && defineReadOnly(this.callStatic, d, buildCall(this, m, !0)), this.populateTransaction[d] == null && defineReadOnly(this.populateTransaction, d, buildPopulate(this, m)), this.estimateGas[d] == null && defineReadOnly(this.estimateGas, d, buildEstimate(this, m));
    }), Object.keys(c).forEach((d) => {
      const m = c[d];
      if (m.length > 1)
        return;
      d = d.substring(1);
      const w = m[0];
      try {
        this[d] == null && defineReadOnly(this, d, this[w]);
      } catch {
      }
      this.functions[d] == null && defineReadOnly(this.functions, d, this.functions[w]), this.callStatic[d] == null && defineReadOnly(this.callStatic, d, this.callStatic[w]), this.populateTransaction[d] == null && defineReadOnly(this.populateTransaction, d, this.populateTransaction[w]), this.estimateGas[d] == null && defineReadOnly(this.estimateGas, d, this.estimateGas[w]);
    });
  }
  static getContractAddress(e) {
    return getContractAddress(e);
  }
  static getInterface(e) {
    return Interface.isInterface(e) ? e : new Interface(e);
  }
  // @TODO: Allow timeout?
  deployed() {
    return this._deployed();
  }
  _deployed(e) {
    return this._deployedPromise || (this.deployTransaction ? this._deployedPromise = this.deployTransaction.wait().then(() => this) : this._deployedPromise = this.provider.getCode(this.address, e).then((n) => (n === "0x" && logger.throwError("contract not deployed", Logger.errors.UNSUPPORTED_OPERATION, {
      contractAddress: this.address,
      operation: "getDeployed"
    }), this))), this._deployedPromise;
  }
  // @TODO:
  // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>
  // @TODO:
  // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>
  fallback(e) {
    this.signer || logger.throwError("sending a transactions require a signer", Logger.errors.UNSUPPORTED_OPERATION, { operation: "sendTransaction(fallback)" });
    const n = shallowCopy(e || {});
    return ["from", "to"].forEach(function(a) {
      n[a] != null && logger.throwError("cannot override " + a, Logger.errors.UNSUPPORTED_OPERATION, { operation: a });
    }), n.to = this.resolvedAddress, this.deployed().then(() => this.signer.sendTransaction(n));
  }
  // Reconnect to a different signer or provider
  connect(e) {
    typeof e == "string" && (e = new VoidSigner(e, this.provider));
    const n = new this.constructor(this.address, this.interface, e);
    return this.deployTransaction && defineReadOnly(n, "deployTransaction", this.deployTransaction), n;
  }
  // Re-attach to a different on-chain instance of this contract
  attach(e) {
    return new this.constructor(e, this.interface, this.signer || this.provider);
  }
  static isIndexed(e) {
    return Indexed.isIndexed(e);
  }
  _normalizeRunningEvent(e) {
    return this._runningEvents[e.tag] ? this._runningEvents[e.tag] : e;
  }
  _getRunningEvent(e) {
    if (typeof e == "string") {
      if (e === "error")
        return this._normalizeRunningEvent(new ErrorRunningEvent());
      if (e === "event")
        return this._normalizeRunningEvent(new RunningEvent("event", null));
      if (e === "*")
        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
      const n = this.interface.getEvent(e);
      return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, n));
    }
    if (e.topics && e.topics.length > 0) {
      try {
        const a = e.topics[0];
        if (typeof a != "string")
          throw new Error("invalid topic");
        const c = this.interface.getEvent(a);
        return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, c, e.topics));
      } catch {
      }
      const n = {
        address: this.address,
        topics: e.topics
      };
      return this._normalizeRunningEvent(new RunningEvent(getEventTag(n), n));
    }
    return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
  }
  _checkRunningEvents(e) {
    if (e.listenerCount() === 0) {
      delete this._runningEvents[e.tag];
      const n = this._wrappedEmits[e.tag];
      n && e.filter && (this.provider.off(e.filter, n), delete this._wrappedEmits[e.tag]);
    }
  }
  // Subclasses can override this to gracefully recover
  // from parse errors if they wish
  _wrapEvent(e, n, a) {
    const c = deepCopy(n);
    return c.removeListener = () => {
      a && (e.removeListener(a), this._checkRunningEvents(e));
    }, c.getBlock = () => this.provider.getBlock(n.blockHash), c.getTransaction = () => this.provider.getTransaction(n.transactionHash), c.getTransactionReceipt = () => this.provider.getTransactionReceipt(n.transactionHash), e.prepareEvent(c), c;
  }
  _addEventListener(e, n, a) {
    if (this.provider || logger.throwError("events require a provider or a signer with a provider", Logger.errors.UNSUPPORTED_OPERATION, { operation: "once" }), e.addListener(n, a), this._runningEvents[e.tag] = e, !this._wrappedEmits[e.tag]) {
      const c = (o) => {
        let d = this._wrapEvent(e, o, n);
        if (d.decodeError == null)
          try {
            const m = e.getEmit(d);
            this.emit(e.filter, ...m);
          } catch (m) {
            d.decodeError = m.error;
          }
        e.filter != null && this.emit("event", d), d.decodeError != null && this.emit("error", d.decodeError, d);
      };
      this._wrappedEmits[e.tag] = c, e.filter != null && this.provider.on(e.filter, c);
    }
  }
  queryFilter(e, n, a) {
    const c = this._getRunningEvent(e), o = shallowCopy(c.filter);
    return typeof n == "string" && isHexString$1(n, 32) ? (a != null && logger.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", a), o.blockHash = n) : (o.fromBlock = n ?? 0, o.toBlock = a ?? "latest"), this.provider.getLogs(o).then((d) => d.map((m) => this._wrapEvent(c, m, null)));
  }
  on(e, n) {
    return this._addEventListener(this._getRunningEvent(e), n, !1), this;
  }
  once(e, n) {
    return this._addEventListener(this._getRunningEvent(e), n, !0), this;
  }
  emit(e, ...n) {
    if (!this.provider)
      return !1;
    const a = this._getRunningEvent(e), c = a.run(n) > 0;
    return this._checkRunningEvents(a), c;
  }
  listenerCount(e) {
    return this.provider ? e == null ? Object.keys(this._runningEvents).reduce((n, a) => n + this._runningEvents[a].listenerCount(), 0) : this._getRunningEvent(e).listenerCount() : 0;
  }
  listeners(e) {
    if (!this.provider)
      return [];
    if (e == null) {
      const n = [];
      for (let a in this._runningEvents)
        this._runningEvents[a].listeners().forEach((c) => {
          n.push(c);
        });
      return n;
    }
    return this._getRunningEvent(e).listeners();
  }
  removeAllListeners(e) {
    if (!this.provider)
      return this;
    if (e == null) {
      for (const a in this._runningEvents) {
        const c = this._runningEvents[a];
        c.removeAllListeners(), this._checkRunningEvents(c);
      }
      return this;
    }
    const n = this._getRunningEvent(e);
    return n.removeAllListeners(), this._checkRunningEvents(n), this;
  }
  off(e, n) {
    if (!this.provider)
      return this;
    const a = this._getRunningEvent(e);
    return a.removeListener(n), this._checkRunningEvents(a), this;
  }
  removeListener(e, n) {
    return this.off(e, n);
  }
}
class Contract extends BaseContract {
}
class ERC20Config extends EthereumConfig {
  contractInstance;
  contractAddress;
  constructor(e) {
    super(e), this.contractAddress = e.contractAddress;
  }
  async getContract() {
    return this.contractInstance || (this.contractInstance = new Contract(this.contractAddress, erc20abi, this.w3signer), this.base = ["wei", Math.pow(10, await this.contractInstance.decimals())]), this.contractInstance;
  }
  async getTx(e) {
    const n = await this.providerInstance.getTransaction(e);
    if (!n)
      throw new Error("Tx doesn't exist");
    if (n.data.length !== 138 || n.data.slice(2, 10) !== "a9059cbb")
      throw new Error("Tx isn't a ERC20 transfer");
    const a = `0x${n.data.slice(34, 74)}`, c = new BigNumber$1(n.data.slice(74), 16);
    return {
      from: n.from,
      to: a,
      blockHeight: n.blockNumber ? new BigNumber$1(n.blockNumber) : void 0,
      amount: c,
      pending: !n.blockNumber,
      confirmed: n.confirmations >= this.minConfirm
    };
  }
  async getFee(e, n) {
    const a = "0x" + new BigNumber$1(e).toString(16), c = await this.getContract(), o = await this.providerInstance.getGasPrice(), d = await c.estimateGas.transfer(n, a);
    return new BigNumber$1(o.mul(d).toString());
  }
  async createTx(e, n, a) {
    const c = await this.getContract(), o = "0x" + new BigNumber$1(e).toString(16), d = await c.populateTransaction.transfer(n, o);
    if (d.gasPrice = await this.providerInstance.getGasPrice(), d.gasLimit = await c.estimateGas.transfer(n, o), d.chainId = (await this.providerInstance.getNetwork()).chainId, !this.address)
      throw new Error("Address is undefined - you might be missing a wallet, or have not run Irys.ready()");
    return d.nonce = await this.providerInstance.getTransactionCount(this.address), { txId: void 0, tx: d };
  }
}
var bip39 = {}, _assert = {};
Object.defineProperty(_assert, "__esModule", { value: !0 });
_assert.output = _assert.exists = _assert.hash = _assert.bytes = _assert.bool = _assert.number = void 0;
function number$1(t) {
  if (!Number.isSafeInteger(t) || t < 0)
    throw new Error(`Wrong positive integer: ${t}`);
}
_assert.number = number$1;
function bool$1(t) {
  if (typeof t != "boolean")
    throw new Error(`Expected boolean, not ${t}`);
}
_assert.bool = bool$1;
function bytes$1(t, ...e) {
  if (!(t instanceof Uint8Array))
    throw new TypeError("Expected Uint8Array");
  if (e.length > 0 && !e.includes(t.length))
    throw new TypeError(`Expected Uint8Array of length ${e}, not of length=${t.length}`);
}
_assert.bytes = bytes$1;
function hash$1(t) {
  if (typeof t != "function" || typeof t.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  number$1(t.outputLen), number$1(t.blockLen);
}
_assert.hash = hash$1;
function exists$1(t, e = !0) {
  if (t.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e && t.finished)
    throw new Error("Hash#digest() has already been called");
}
_assert.exists = exists$1;
function output$1(t, e) {
  bytes$1(t);
  const n = e.outputLen;
  if (t.length < n)
    throw new Error(`digestInto() expects output buffer of length at least ${n}`);
}
_assert.output = output$1;
const assert$1 = {
  number: number$1,
  bool: bool$1,
  bytes: bytes$1,
  hash: hash$1,
  exists: exists$1,
  output: output$1
};
_assert.default = assert$1;
var pbkdf2$1 = {}, hmac$1 = {}, utils$c = {}, cryptoBrowser = {};
Object.defineProperty(cryptoBrowser, "__esModule", { value: !0 });
cryptoBrowser.crypto = void 0;
cryptoBrowser.crypto = {
  node: void 0,
  web: typeof self == "object" && "crypto" in self ? self.crypto : void 0
};
(function(t) {
  /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  Object.defineProperty(t, "__esModule", { value: !0 }), t.randomBytes = t.wrapConstructorWithOpts = t.wrapConstructor = t.checkOpts = t.Hash = t.concatBytes = t.toBytes = t.utf8ToBytes = t.asyncLoop = t.nextTick = t.hexToBytes = t.bytesToHex = t.isLE = t.rotr = t.createView = t.u32 = t.u8 = void 0;
  const e = cryptoBrowser, n = (X) => new Uint8Array(X.buffer, X.byteOffset, X.byteLength);
  t.u8 = n;
  const a = (X) => new Uint32Array(X.buffer, X.byteOffset, Math.floor(X.byteLength / 4));
  t.u32 = a;
  const c = (X) => new DataView(X.buffer, X.byteOffset, X.byteLength);
  t.createView = c;
  const o = (X, ie) => X << 32 - ie | X >>> ie;
  if (t.rotr = o, t.isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68, !t.isLE)
    throw new Error("Non little-endian hardware is not supported");
  const d = Array.from({ length: 256 }, (X, ie) => ie.toString(16).padStart(2, "0"));
  function m(X) {
    if (!(X instanceof Uint8Array))
      throw new Error("Uint8Array expected");
    let ie = "";
    for (let fe = 0; fe < X.length; fe++)
      ie += d[X[fe]];
    return ie;
  }
  t.bytesToHex = m;
  function w(X) {
    if (typeof X != "string")
      throw new TypeError("hexToBytes: expected string, got " + typeof X);
    if (X.length % 2)
      throw new Error("hexToBytes: received invalid unpadded hex");
    const ie = new Uint8Array(X.length / 2);
    for (let fe = 0; fe < ie.length; fe++) {
      const ye = fe * 2, j = X.slice(ye, ye + 2), V = Number.parseInt(j, 16);
      if (Number.isNaN(V) || V < 0)
        throw new Error("Invalid byte sequence");
      ie[fe] = V;
    }
    return ie;
  }
  t.hexToBytes = w;
  const S = async () => {
  };
  t.nextTick = S;
  async function A(X, ie, fe) {
    let ye = Date.now();
    for (let j = 0; j < X; j++) {
      fe(j);
      const V = Date.now() - ye;
      V >= 0 && V < ie || (await (0, t.nextTick)(), ye += V);
    }
  }
  t.asyncLoop = A;
  function B(X) {
    if (typeof X != "string")
      throw new TypeError(`utf8ToBytes expected string, got ${typeof X}`);
    return new TextEncoder().encode(X);
  }
  t.utf8ToBytes = B;
  function P(X) {
    if (typeof X == "string" && (X = B(X)), !(X instanceof Uint8Array))
      throw new TypeError(`Expected input type is Uint8Array (got ${typeof X})`);
    return X;
  }
  t.toBytes = P;
  function I(...X) {
    if (!X.every((ye) => ye instanceof Uint8Array))
      throw new Error("Uint8Array list expected");
    if (X.length === 1)
      return X[0];
    const ie = X.reduce((ye, j) => ye + j.length, 0), fe = new Uint8Array(ie);
    for (let ye = 0, j = 0; ye < X.length; ye++) {
      const V = X[ye];
      fe.set(V, j), j += V.length;
    }
    return fe;
  }
  t.concatBytes = I;
  class O {
    // Safe version that clones internal state
    clone() {
      return this._cloneInto();
    }
  }
  t.Hash = O;
  const L = (X) => Object.prototype.toString.call(X) === "[object Object]" && X.constructor === Object;
  function C(X, ie) {
    if (ie !== void 0 && (typeof ie != "object" || !L(ie)))
      throw new TypeError("Options should be object or undefined");
    return Object.assign(X, ie);
  }
  t.checkOpts = C;
  function z(X) {
    const ie = (ye) => X().update(P(ye)).digest(), fe = X();
    return ie.outputLen = fe.outputLen, ie.blockLen = fe.blockLen, ie.create = () => X(), ie;
  }
  t.wrapConstructor = z;
  function q(X) {
    const ie = (ye, j) => X(j).update(P(ye)).digest(), fe = X({});
    return ie.outputLen = fe.outputLen, ie.blockLen = fe.blockLen, ie.create = (ye) => X(ye), ie;
  }
  t.wrapConstructorWithOpts = q;
  function Z(X = 32) {
    if (e.crypto.web)
      return e.crypto.web.getRandomValues(new Uint8Array(X));
    if (e.crypto.node)
      return new Uint8Array(e.crypto.node.randomBytes(X).buffer);
    throw new Error("The environment doesn't have randomBytes function");
  }
  t.randomBytes = Z;
})(utils$c);
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.hmac = void 0;
  const e = _assert, n = utils$c;
  class a extends n.Hash {
    constructor(d, m) {
      super(), this.finished = !1, this.destroyed = !1, e.default.hash(d);
      const w = (0, n.toBytes)(m);
      if (this.iHash = d.create(), typeof this.iHash.update != "function")
        throw new TypeError("Expected instance of class which extends utils.Hash");
      this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
      const S = this.blockLen, A = new Uint8Array(S);
      A.set(w.length > S ? d.create().update(w).digest() : w);
      for (let B = 0; B < A.length; B++)
        A[B] ^= 54;
      this.iHash.update(A), this.oHash = d.create();
      for (let B = 0; B < A.length; B++)
        A[B] ^= 106;
      this.oHash.update(A), A.fill(0);
    }
    update(d) {
      return e.default.exists(this), this.iHash.update(d), this;
    }
    digestInto(d) {
      e.default.exists(this), e.default.bytes(d, this.outputLen), this.finished = !0, this.iHash.digestInto(d), this.oHash.update(d), this.oHash.digestInto(d), this.destroy();
    }
    digest() {
      const d = new Uint8Array(this.oHash.outputLen);
      return this.digestInto(d), d;
    }
    _cloneInto(d) {
      d || (d = Object.create(Object.getPrototypeOf(this), {}));
      const { oHash: m, iHash: w, finished: S, destroyed: A, blockLen: B, outputLen: P } = this;
      return d = d, d.finished = S, d.destroyed = A, d.blockLen = B, d.outputLen = P, d.oHash = m._cloneInto(d.oHash), d.iHash = w._cloneInto(d.iHash), d;
    }
    destroy() {
      this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
    }
  }
  const c = (o, d, m) => new a(o, d).update(m).digest();
  t.hmac = c, t.hmac.create = (o, d) => new a(o, d);
})(hmac$1);
Object.defineProperty(pbkdf2$1, "__esModule", { value: !0 });
pbkdf2$1.pbkdf2Async = pbkdf2$1.pbkdf2 = void 0;
const _assert_js_1$1 = _assert, hmac_js_1 = hmac$1, utils_js_1$3 = utils$c;
function pbkdf2Init(t, e, n, a) {
  _assert_js_1$1.default.hash(t);
  const c = (0, utils_js_1$3.checkOpts)({ dkLen: 32, asyncTick: 10 }, a), { c: o, dkLen: d, asyncTick: m } = c;
  if (_assert_js_1$1.default.number(o), _assert_js_1$1.default.number(d), _assert_js_1$1.default.number(m), o < 1)
    throw new Error("PBKDF2: iterations (c) should be >= 1");
  const w = (0, utils_js_1$3.toBytes)(e), S = (0, utils_js_1$3.toBytes)(n), A = new Uint8Array(d), B = hmac_js_1.hmac.create(t, w), P = B._cloneInto().update(S);
  return { c: o, dkLen: d, asyncTick: m, DK: A, PRF: B, PRFSalt: P };
}
function pbkdf2Output(t, e, n, a, c) {
  return t.destroy(), e.destroy(), a && a.destroy(), c.fill(0), n;
}
function pbkdf2(t, e, n, a) {
  const { c, dkLen: o, DK: d, PRF: m, PRFSalt: w } = pbkdf2Init(t, e, n, a);
  let S;
  const A = new Uint8Array(4), B = (0, utils_js_1$3.createView)(A), P = new Uint8Array(m.outputLen);
  for (let I = 1, O = 0; O < o; I++, O += m.outputLen) {
    const L = d.subarray(O, O + m.outputLen);
    B.setInt32(0, I, !1), (S = w._cloneInto(S)).update(A).digestInto(P), L.set(P.subarray(0, L.length));
    for (let C = 1; C < c; C++) {
      m._cloneInto(S).update(P).digestInto(P);
      for (let z = 0; z < L.length; z++)
        L[z] ^= P[z];
    }
  }
  return pbkdf2Output(m, w, d, S, P);
}
pbkdf2$1.pbkdf2 = pbkdf2;
async function pbkdf2Async(t, e, n, a) {
  const { c, dkLen: o, asyncTick: d, DK: m, PRF: w, PRFSalt: S } = pbkdf2Init(t, e, n, a);
  let A;
  const B = new Uint8Array(4), P = (0, utils_js_1$3.createView)(B), I = new Uint8Array(w.outputLen);
  for (let O = 1, L = 0; L < o; O++, L += w.outputLen) {
    const C = m.subarray(L, L + w.outputLen);
    P.setInt32(0, O, !1), (A = S._cloneInto(A)).update(B).digestInto(I), C.set(I.subarray(0, C.length)), await (0, utils_js_1$3.asyncLoop)(c - 1, d, (z) => {
      w._cloneInto(A).update(I).digestInto(I);
      for (let q = 0; q < C.length; q++)
        C[q] ^= I[q];
    });
  }
  return pbkdf2Output(w, S, m, A, I);
}
pbkdf2$1.pbkdf2Async = pbkdf2Async;
var sha256 = {}, _sha2 = {};
Object.defineProperty(_sha2, "__esModule", { value: !0 });
_sha2.SHA2 = void 0;
const _assert_js_1 = _assert, utils_js_1$2 = utils$c;
function setBigUint64$1(t, e, n, a) {
  if (typeof t.setBigUint64 == "function")
    return t.setBigUint64(e, n, a);
  const c = BigInt(32), o = BigInt(4294967295), d = Number(n >> c & o), m = Number(n & o), w = a ? 4 : 0, S = a ? 0 : 4;
  t.setUint32(e + w, d, a), t.setUint32(e + S, m, a);
}
let SHA2$1 = class extends utils_js_1$2.Hash {
  constructor(e, n, a, c) {
    super(), this.blockLen = e, this.outputLen = n, this.padOffset = a, this.isLE = c, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(e), this.view = (0, utils_js_1$2.createView)(this.buffer);
  }
  update(e) {
    _assert_js_1.default.exists(this);
    const { view: n, buffer: a, blockLen: c } = this;
    e = (0, utils_js_1$2.toBytes)(e);
    const o = e.length;
    for (let d = 0; d < o; ) {
      const m = Math.min(c - this.pos, o - d);
      if (m === c) {
        const w = (0, utils_js_1$2.createView)(e);
        for (; c <= o - d; d += c)
          this.process(w, d);
        continue;
      }
      a.set(e.subarray(d, d + m), this.pos), this.pos += m, d += m, this.pos === c && (this.process(n, 0), this.pos = 0);
    }
    return this.length += e.length, this.roundClean(), this;
  }
  digestInto(e) {
    _assert_js_1.default.exists(this), _assert_js_1.default.output(e, this), this.finished = !0;
    const { buffer: n, view: a, blockLen: c, isLE: o } = this;
    let { pos: d } = this;
    n[d++] = 128, this.buffer.subarray(d).fill(0), this.padOffset > c - d && (this.process(a, 0), d = 0);
    for (let B = d; B < c; B++)
      n[B] = 0;
    setBigUint64$1(a, c - 8, BigInt(this.length * 8), o), this.process(a, 0);
    const m = (0, utils_js_1$2.createView)(e), w = this.outputLen;
    if (w % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const S = w / 4, A = this.get();
    if (S > A.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let B = 0; B < S; B++)
      m.setUint32(4 * B, A[B], o);
  }
  digest() {
    const { buffer: e, outputLen: n } = this;
    this.digestInto(e);
    const a = e.slice(0, n);
    return this.destroy(), a;
  }
  _cloneInto(e) {
    e || (e = new this.constructor()), e.set(...this.get());
    const { blockLen: n, buffer: a, length: c, finished: o, destroyed: d, pos: m } = this;
    return e.length = c, e.pos = m, e.finished = o, e.destroyed = d, c % n && e.buffer.set(a), e;
  }
};
_sha2.SHA2 = SHA2$1;
Object.defineProperty(sha256, "__esModule", { value: !0 });
sha256.sha224 = sha256.sha256 = void 0;
const _sha2_js_1$1 = _sha2, utils_js_1$1 = utils$c, Chi = (t, e, n) => t & e ^ ~t & n, Maj = (t, e, n) => t & e ^ t & n ^ e & n, SHA256_K = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), IV = new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), SHA256_W = new Uint32Array(64);
class SHA256 extends _sha2_js_1$1.SHA2 {
  constructor() {
    super(64, 32, 8, !1), this.A = IV[0] | 0, this.B = IV[1] | 0, this.C = IV[2] | 0, this.D = IV[3] | 0, this.E = IV[4] | 0, this.F = IV[5] | 0, this.G = IV[6] | 0, this.H = IV[7] | 0;
  }
  get() {
    const { A: e, B: n, C: a, D: c, E: o, F: d, G: m, H: w } = this;
    return [e, n, a, c, o, d, m, w];
  }
  // prettier-ignore
  set(e, n, a, c, o, d, m, w) {
    this.A = e | 0, this.B = n | 0, this.C = a | 0, this.D = c | 0, this.E = o | 0, this.F = d | 0, this.G = m | 0, this.H = w | 0;
  }
  process(e, n) {
    for (let B = 0; B < 16; B++, n += 4)
      SHA256_W[B] = e.getUint32(n, !1);
    for (let B = 16; B < 64; B++) {
      const P = SHA256_W[B - 15], I = SHA256_W[B - 2], O = (0, utils_js_1$1.rotr)(P, 7) ^ (0, utils_js_1$1.rotr)(P, 18) ^ P >>> 3, L = (0, utils_js_1$1.rotr)(I, 17) ^ (0, utils_js_1$1.rotr)(I, 19) ^ I >>> 10;
      SHA256_W[B] = L + SHA256_W[B - 7] + O + SHA256_W[B - 16] | 0;
    }
    let { A: a, B: c, C: o, D: d, E: m, F: w, G: S, H: A } = this;
    for (let B = 0; B < 64; B++) {
      const P = (0, utils_js_1$1.rotr)(m, 6) ^ (0, utils_js_1$1.rotr)(m, 11) ^ (0, utils_js_1$1.rotr)(m, 25), I = A + P + Chi(m, w, S) + SHA256_K[B] + SHA256_W[B] | 0, L = ((0, utils_js_1$1.rotr)(a, 2) ^ (0, utils_js_1$1.rotr)(a, 13) ^ (0, utils_js_1$1.rotr)(a, 22)) + Maj(a, c, o) | 0;
      A = S, S = w, w = m, m = d + I | 0, d = o, o = c, c = a, a = I + L | 0;
    }
    a = a + this.A | 0, c = c + this.B | 0, o = o + this.C | 0, d = d + this.D | 0, m = m + this.E | 0, w = w + this.F | 0, S = S + this.G | 0, A = A + this.H | 0, this.set(a, c, o, d, m, w, S, A);
  }
  roundClean() {
    SHA256_W.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
}
class SHA224 extends SHA256 {
  constructor() {
    super(), this.A = -1056596264, this.B = 914150663, this.C = 812702999, this.D = -150054599, this.E = -4191439, this.F = 1750603025, this.G = 1694076839, this.H = -1090891868, this.outputLen = 28;
  }
}
sha256.sha256 = (0, utils_js_1$1.wrapConstructor)(() => new SHA256());
sha256.sha224 = (0, utils_js_1$1.wrapConstructor)(() => new SHA224());
var sha512$1 = {}, _u64 = {};
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.add = t.toBig = t.split = t.fromBig = void 0;
  const e = BigInt(2 ** 32 - 1), n = BigInt(32);
  function a(ae, _ = !1) {
    return _ ? { h: Number(ae & e), l: Number(ae >> n & e) } : { h: Number(ae >> n & e) | 0, l: Number(ae & e) | 0 };
  }
  t.fromBig = a;
  function c(ae, _ = !1) {
    let u = new Uint32Array(ae.length), h = new Uint32Array(ae.length);
    for (let p = 0; p < ae.length; p++) {
      const { h: y, l: v } = a(ae[p], _);
      [u[p], h[p]] = [y, v];
    }
    return [u, h];
  }
  t.split = c;
  const o = (ae, _) => BigInt(ae >>> 0) << n | BigInt(_ >>> 0);
  t.toBig = o;
  const d = (ae, _, u) => ae >>> u, m = (ae, _, u) => ae << 32 - u | _ >>> u, w = (ae, _, u) => ae >>> u | _ << 32 - u, S = (ae, _, u) => ae << 32 - u | _ >>> u, A = (ae, _, u) => ae << 64 - u | _ >>> u - 32, B = (ae, _, u) => ae >>> u - 32 | _ << 64 - u, P = (ae, _) => _, I = (ae, _) => ae, O = (ae, _, u) => ae << u | _ >>> 32 - u, L = (ae, _, u) => _ << u | ae >>> 32 - u, C = (ae, _, u) => _ << u - 32 | ae >>> 64 - u, z = (ae, _, u) => ae << u - 32 | _ >>> 64 - u;
  function q(ae, _, u, h) {
    const p = (_ >>> 0) + (h >>> 0);
    return { h: ae + u + (p / 2 ** 32 | 0) | 0, l: p | 0 };
  }
  t.add = q;
  const Z = (ae, _, u) => (ae >>> 0) + (_ >>> 0) + (u >>> 0), X = (ae, _, u, h) => _ + u + h + (ae / 2 ** 32 | 0) | 0, ie = (ae, _, u, h) => (ae >>> 0) + (_ >>> 0) + (u >>> 0) + (h >>> 0), fe = (ae, _, u, h, p) => _ + u + h + p + (ae / 2 ** 32 | 0) | 0, ye = (ae, _, u, h, p) => (ae >>> 0) + (_ >>> 0) + (u >>> 0) + (h >>> 0) + (p >>> 0), j = (ae, _, u, h, p, y) => _ + u + h + p + y + (ae / 2 ** 32 | 0) | 0, V = {
    fromBig: a,
    split: c,
    toBig: t.toBig,
    shrSH: d,
    shrSL: m,
    rotrSH: w,
    rotrSL: S,
    rotrBH: A,
    rotrBL: B,
    rotr32H: P,
    rotr32L: I,
    rotlSH: O,
    rotlSL: L,
    rotlBH: C,
    rotlBL: z,
    add: q,
    add3L: Z,
    add3H: X,
    add4L: ie,
    add4H: fe,
    add5H: j,
    add5L: ye
  };
  t.default = V;
})(_u64);
Object.defineProperty(sha512$1, "__esModule", { value: !0 });
sha512$1.sha384 = sha512$1.sha512_256 = sha512$1.sha512_224 = sha512$1.sha512 = sha512$1.SHA512 = void 0;
const _sha2_js_1 = _sha2, _u64_js_1 = _u64, utils_js_1 = utils$c, [SHA512_Kh$1, SHA512_Kl$1] = _u64_js_1.default.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((t) => BigInt(t))), SHA512_W_H$1 = new Uint32Array(80), SHA512_W_L$1 = new Uint32Array(80);
let SHA512$1 = class extends _sha2_js_1.SHA2 {
  constructor() {
    super(128, 64, 16, !1), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  // prettier-ignore
  get() {
    const { Ah: e, Al: n, Bh: a, Bl: c, Ch: o, Cl: d, Dh: m, Dl: w, Eh: S, El: A, Fh: B, Fl: P, Gh: I, Gl: O, Hh: L, Hl: C } = this;
    return [e, n, a, c, o, d, m, w, S, A, B, P, I, O, L, C];
  }
  // prettier-ignore
  set(e, n, a, c, o, d, m, w, S, A, B, P, I, O, L, C) {
    this.Ah = e | 0, this.Al = n | 0, this.Bh = a | 0, this.Bl = c | 0, this.Ch = o | 0, this.Cl = d | 0, this.Dh = m | 0, this.Dl = w | 0, this.Eh = S | 0, this.El = A | 0, this.Fh = B | 0, this.Fl = P | 0, this.Gh = I | 0, this.Gl = O | 0, this.Hh = L | 0, this.Hl = C | 0;
  }
  process(e, n) {
    for (let Z = 0; Z < 16; Z++, n += 4)
      SHA512_W_H$1[Z] = e.getUint32(n), SHA512_W_L$1[Z] = e.getUint32(n += 4);
    for (let Z = 16; Z < 80; Z++) {
      const X = SHA512_W_H$1[Z - 15] | 0, ie = SHA512_W_L$1[Z - 15] | 0, fe = _u64_js_1.default.rotrSH(X, ie, 1) ^ _u64_js_1.default.rotrSH(X, ie, 8) ^ _u64_js_1.default.shrSH(X, ie, 7), ye = _u64_js_1.default.rotrSL(X, ie, 1) ^ _u64_js_1.default.rotrSL(X, ie, 8) ^ _u64_js_1.default.shrSL(X, ie, 7), j = SHA512_W_H$1[Z - 2] | 0, V = SHA512_W_L$1[Z - 2] | 0, ae = _u64_js_1.default.rotrSH(j, V, 19) ^ _u64_js_1.default.rotrBH(j, V, 61) ^ _u64_js_1.default.shrSH(j, V, 6), _ = _u64_js_1.default.rotrSL(j, V, 19) ^ _u64_js_1.default.rotrBL(j, V, 61) ^ _u64_js_1.default.shrSL(j, V, 6), u = _u64_js_1.default.add4L(ye, _, SHA512_W_L$1[Z - 7], SHA512_W_L$1[Z - 16]), h = _u64_js_1.default.add4H(u, fe, ae, SHA512_W_H$1[Z - 7], SHA512_W_H$1[Z - 16]);
      SHA512_W_H$1[Z] = h | 0, SHA512_W_L$1[Z] = u | 0;
    }
    let { Ah: a, Al: c, Bh: o, Bl: d, Ch: m, Cl: w, Dh: S, Dl: A, Eh: B, El: P, Fh: I, Fl: O, Gh: L, Gl: C, Hh: z, Hl: q } = this;
    for (let Z = 0; Z < 80; Z++) {
      const X = _u64_js_1.default.rotrSH(B, P, 14) ^ _u64_js_1.default.rotrSH(B, P, 18) ^ _u64_js_1.default.rotrBH(B, P, 41), ie = _u64_js_1.default.rotrSL(B, P, 14) ^ _u64_js_1.default.rotrSL(B, P, 18) ^ _u64_js_1.default.rotrBL(B, P, 41), fe = B & I ^ ~B & L, ye = P & O ^ ~P & C, j = _u64_js_1.default.add5L(q, ie, ye, SHA512_Kl$1[Z], SHA512_W_L$1[Z]), V = _u64_js_1.default.add5H(j, z, X, fe, SHA512_Kh$1[Z], SHA512_W_H$1[Z]), ae = j | 0, _ = _u64_js_1.default.rotrSH(a, c, 28) ^ _u64_js_1.default.rotrBH(a, c, 34) ^ _u64_js_1.default.rotrBH(a, c, 39), u = _u64_js_1.default.rotrSL(a, c, 28) ^ _u64_js_1.default.rotrBL(a, c, 34) ^ _u64_js_1.default.rotrBL(a, c, 39), h = a & o ^ a & m ^ o & m, p = c & d ^ c & w ^ d & w;
      z = L | 0, q = C | 0, L = I | 0, C = O | 0, I = B | 0, O = P | 0, { h: B, l: P } = _u64_js_1.default.add(S | 0, A | 0, V | 0, ae | 0), S = m | 0, A = w | 0, m = o | 0, w = d | 0, o = a | 0, d = c | 0;
      const y = _u64_js_1.default.add3L(ae, u, p);
      a = _u64_js_1.default.add3H(y, V, _, h), c = y | 0;
    }
    ({ h: a, l: c } = _u64_js_1.default.add(this.Ah | 0, this.Al | 0, a | 0, c | 0)), { h: o, l: d } = _u64_js_1.default.add(this.Bh | 0, this.Bl | 0, o | 0, d | 0), { h: m, l: w } = _u64_js_1.default.add(this.Ch | 0, this.Cl | 0, m | 0, w | 0), { h: S, l: A } = _u64_js_1.default.add(this.Dh | 0, this.Dl | 0, S | 0, A | 0), { h: B, l: P } = _u64_js_1.default.add(this.Eh | 0, this.El | 0, B | 0, P | 0), { h: I, l: O } = _u64_js_1.default.add(this.Fh | 0, this.Fl | 0, I | 0, O | 0), { h: L, l: C } = _u64_js_1.default.add(this.Gh | 0, this.Gl | 0, L | 0, C | 0), { h: z, l: q } = _u64_js_1.default.add(this.Hh | 0, this.Hl | 0, z | 0, q | 0), this.set(a, c, o, d, m, w, S, A, B, P, I, O, L, C, z, q);
  }
  roundClean() {
    SHA512_W_H$1.fill(0), SHA512_W_L$1.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
sha512$1.SHA512 = SHA512$1;
class SHA512_224 extends SHA512$1 {
  constructor() {
    super(), this.Ah = -1942145080, this.Al = 424955298, this.Bh = 1944164710, this.Bl = -1982016298, this.Ch = 502970286, this.Cl = 855612546, this.Dh = 1738396948, this.Dl = 1479516111, this.Eh = 258812777, this.El = 2077511080, this.Fh = 2011393907, this.Fl = 79989058, this.Gh = 1067287976, this.Gl = 1780299464, this.Hh = 286451373, this.Hl = -1848208735, this.outputLen = 28;
  }
}
let SHA512_256$1 = class extends SHA512$1 {
  constructor() {
    super(), this.Ah = 573645204, this.Al = -64227540, this.Bh = -1621794909, this.Bl = -934517566, this.Ch = 596883563, this.Cl = 1867755857, this.Dh = -1774684391, this.Dl = 1497426621, this.Eh = -1775747358, this.El = -1467023389, this.Fh = -1101128155, this.Fl = 1401305490, this.Gh = 721525244, this.Gl = 746961066, this.Hh = 246885852, this.Hl = -2117784414, this.outputLen = 32;
  }
}, SHA384$1 = class extends SHA512$1 {
  constructor() {
    super(), this.Ah = -876896931, this.Al = -1056596264, this.Bh = 1654270250, this.Bl = 914150663, this.Ch = -1856437926, this.Cl = 812702999, this.Dh = 355462360, this.Dl = -150054599, this.Eh = 1731405415, this.El = -4191439, this.Fh = -1900787065, this.Fl = 1750603025, this.Gh = -619958771, this.Gl = 1694076839, this.Hh = 1203062813, this.Hl = -1090891868, this.outputLen = 48;
  }
};
sha512$1.sha512 = (0, utils_js_1.wrapConstructor)(() => new SHA512$1());
sha512$1.sha512_224 = (0, utils_js_1.wrapConstructor)(() => new SHA512_224());
sha512$1.sha512_256 = (0, utils_js_1.wrapConstructor)(() => new SHA512_256$1());
sha512$1.sha384 = (0, utils_js_1.wrapConstructor)(() => new SHA384$1());
var lib = {};
(function(t) {
  /*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  Object.defineProperty(t, "__esModule", { value: !0 }), t.bytes = t.stringToBytes = t.str = t.bytesToString = t.hex = t.utf8 = t.bech32m = t.bech32 = t.base58check = t.createBase58check = t.base58xmr = t.base58xrp = t.base58flickr = t.base58 = t.base64urlnopad = t.base64url = t.base64 = t.base32crockford = t.base32hex = t.base32 = t.base16 = t.utils = t.assertNumber = void 0;
  // @__NO_SIDE_EFFECTS__
  function e(u) {
    if (!Number.isSafeInteger(u))
      throw new Error(`Wrong integer: ${u}`);
  }
  t.assertNumber = e;
  function n(u) {
    return u instanceof Uint8Array || u != null && typeof u == "object" && u.constructor.name === "Uint8Array";
  }
  // @__NO_SIDE_EFFECTS__
  function a(...u) {
    const h = ($) => $, p = ($, E) => (x) => $(E(x)), y = u.map(($) => $.encode).reduceRight(p, h), v = u.map(($) => $.decode).reduce(p, h);
    return { encode: y, decode: v };
  }
  // @__NO_SIDE_EFFECTS__
  function c(u) {
    return {
      encode: (h) => {
        if (!Array.isArray(h) || h.length && typeof h[0] != "number")
          throw new Error("alphabet.encode input should be an array of numbers");
        return h.map((p) => {
          if (p < 0 || p >= u.length)
            throw new Error(`Digit index outside alphabet: ${p} (alphabet: ${u.length})`);
          return u[p];
        });
      },
      decode: (h) => {
        if (!Array.isArray(h) || h.length && typeof h[0] != "string")
          throw new Error("alphabet.decode input should be array of strings");
        return h.map((p) => {
          if (typeof p != "string")
            throw new Error(`alphabet.decode: not string element=${p}`);
          const y = u.indexOf(p);
          if (y === -1)
            throw new Error(`Unknown letter: "${p}". Allowed: ${u}`);
          return y;
        });
      }
    };
  }
  // @__NO_SIDE_EFFECTS__
  function o(u = "") {
    if (typeof u != "string")
      throw new Error("join separator should be string");
    return {
      encode: (h) => {
        if (!Array.isArray(h) || h.length && typeof h[0] != "string")
          throw new Error("join.encode input should be array of strings");
        for (let p of h)
          if (typeof p != "string")
            throw new Error(`join.encode: non-string input=${p}`);
        return h.join(u);
      },
      decode: (h) => {
        if (typeof h != "string")
          throw new Error("join.decode input should be string");
        return h.split(u);
      }
    };
  }
  // @__NO_SIDE_EFFECTS__
  function d(u, h = "=") {
    if (typeof h != "string")
      throw new Error("padding chr should be string");
    return {
      encode(p) {
        if (!Array.isArray(p) || p.length && typeof p[0] != "string")
          throw new Error("padding.encode input should be array of strings");
        for (let y of p)
          if (typeof y != "string")
            throw new Error(`padding.encode: non-string input=${y}`);
        for (; p.length * u % 8; )
          p.push(h);
        return p;
      },
      decode(p) {
        if (!Array.isArray(p) || p.length && typeof p[0] != "string")
          throw new Error("padding.encode input should be array of strings");
        for (let v of p)
          if (typeof v != "string")
            throw new Error(`padding.decode: non-string input=${v}`);
        let y = p.length;
        if (y * u % 8)
          throw new Error("Invalid padding: string should have whole number of bytes");
        for (; y > 0 && p[y - 1] === h; y--)
          if (!((y - 1) * u % 8))
            throw new Error("Invalid padding: string has too much padding");
        return p.slice(0, y);
      }
    };
  }
  // @__NO_SIDE_EFFECTS__
  function m(u) {
    if (typeof u != "function")
      throw new Error("normalize fn should be function");
    return { encode: (h) => h, decode: (h) => u(h) };
  }
  // @__NO_SIDE_EFFECTS__
  function w(u, h, p) {
    if (h < 2)
      throw new Error(`convertRadix: wrong from=${h}, base cannot be less than 2`);
    if (p < 2)
      throw new Error(`convertRadix: wrong to=${p}, base cannot be less than 2`);
    if (!Array.isArray(u))
      throw new Error("convertRadix: data should be array");
    if (!u.length)
      return [];
    let y = 0;
    const v = [], $ = Array.from(u);
    for ($.forEach((E) => {
      if (E < 0 || E >= h)
        throw new Error(`Wrong integer: ${E}`);
    }); ; ) {
      let E = 0, x = !0;
      for (let l = y; l < $.length; l++) {
        const b = $[l], M = h * E + b;
        if (!Number.isSafeInteger(M) || h * E / h !== E || M - b !== h * E)
          throw new Error("convertRadix: carry overflow");
        E = M % p;
        const k = Math.floor(M / p);
        if ($[l] = k, !Number.isSafeInteger(k) || k * p + E !== M)
          throw new Error("convertRadix: carry overflow");
        if (x)
          k ? x = !1 : y = l;
        else
          continue;
      }
      if (v.push(E), x)
        break;
    }
    for (let E = 0; E < u.length - 1 && u[E] === 0; E++)
      v.push(0);
    return v.reverse();
  }
  const S = /* @__NO_SIDE_EFFECTS__ */ (u, h) => h ? /* @__PURE__ */ S(h, u % h) : u, A = /* @__NO_SIDE_EFFECTS__ */ (u, h) => u + (h - /* @__PURE__ */ S(u, h));
  // @__NO_SIDE_EFFECTS__
  function B(u, h, p, y) {
    if (!Array.isArray(u))
      throw new Error("convertRadix2: data should be array");
    if (h <= 0 || h > 32)
      throw new Error(`convertRadix2: wrong from=${h}`);
    if (p <= 0 || p > 32)
      throw new Error(`convertRadix2: wrong to=${p}`);
    if (/* @__PURE__ */ A(h, p) > 32)
      throw new Error(`convertRadix2: carry overflow from=${h} to=${p} carryBits=${/* @__PURE__ */ A(h, p)}`);
    let v = 0, $ = 0;
    const E = 2 ** p - 1, x = [];
    for (const l of u) {
      if (l >= 2 ** h)
        throw new Error(`convertRadix2: invalid data word=${l} from=${h}`);
      if (v = v << h | l, $ + h > 32)
        throw new Error(`convertRadix2: carry overflow pos=${$} from=${h}`);
      for ($ += h; $ >= p; $ -= p)
        x.push((v >> $ - p & E) >>> 0);
      v &= 2 ** $ - 1;
    }
    if (v = v << p - $ & E, !y && $ >= h)
      throw new Error("Excess padding");
    if (!y && v)
      throw new Error(`Non-zero padding: ${v}`);
    return y && $ > 0 && x.push(v >>> 0), x;
  }
  // @__NO_SIDE_EFFECTS__
  function P(u) {
    return {
      encode: (h) => {
        if (!n(h))
          throw new Error("radix.encode input should be Uint8Array");
        return /* @__PURE__ */ w(Array.from(h), 2 ** 8, u);
      },
      decode: (h) => {
        if (!Array.isArray(h) || h.length && typeof h[0] != "number")
          throw new Error("radix.decode input should be array of numbers");
        return Uint8Array.from(/* @__PURE__ */ w(h, u, 2 ** 8));
      }
    };
  }
  // @__NO_SIDE_EFFECTS__
  function I(u, h = !1) {
    if (u <= 0 || u > 32)
      throw new Error("radix2: bits should be in (0..32]");
    if (/* @__PURE__ */ A(8, u) > 32 || /* @__PURE__ */ A(u, 8) > 32)
      throw new Error("radix2: carry overflow");
    return {
      encode: (p) => {
        if (!n(p))
          throw new Error("radix2.encode input should be Uint8Array");
        return /* @__PURE__ */ B(Array.from(p), 8, u, !h);
      },
      decode: (p) => {
        if (!Array.isArray(p) || p.length && typeof p[0] != "number")
          throw new Error("radix2.decode input should be array of numbers");
        return Uint8Array.from(/* @__PURE__ */ B(p, u, 8, h));
      }
    };
  }
  // @__NO_SIDE_EFFECTS__
  function O(u) {
    if (typeof u != "function")
      throw new Error("unsafeWrapper fn should be function");
    return function(...h) {
      try {
        return u.apply(null, h);
      } catch {
      }
    };
  }
  // @__NO_SIDE_EFFECTS__
  function L(u, h) {
    if (typeof h != "function")
      throw new Error("checksum fn should be function");
    return {
      encode(p) {
        if (!n(p))
          throw new Error("checksum.encode: input should be Uint8Array");
        const y = h(p).slice(0, u), v = new Uint8Array(p.length + u);
        return v.set(p), v.set(y, p.length), v;
      },
      decode(p) {
        if (!n(p))
          throw new Error("checksum.decode: input should be Uint8Array");
        const y = p.slice(0, -u), v = h(y).slice(0, u), $ = p.slice(-u);
        for (let E = 0; E < u; E++)
          if (v[E] !== $[E])
            throw new Error("Invalid checksum");
        return y;
      }
    };
  }
  t.utils = {
    alphabet: c,
    chain: a,
    checksum: L,
    convertRadix: w,
    convertRadix2: B,
    radix: P,
    radix2: I,
    join: o,
    padding: d
  }, t.base16 = /* @__PURE__ */ a(/* @__PURE__ */ I(4), /* @__PURE__ */ c("0123456789ABCDEF"), /* @__PURE__ */ o("")), t.base32 = /* @__PURE__ */ a(/* @__PURE__ */ I(5), /* @__PURE__ */ c("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), /* @__PURE__ */ d(5), /* @__PURE__ */ o("")), t.base32hex = /* @__PURE__ */ a(/* @__PURE__ */ I(5), /* @__PURE__ */ c("0123456789ABCDEFGHIJKLMNOPQRSTUV"), /* @__PURE__ */ d(5), /* @__PURE__ */ o("")), t.base32crockford = /* @__PURE__ */ a(/* @__PURE__ */ I(5), /* @__PURE__ */ c("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), /* @__PURE__ */ o(""), /* @__PURE__ */ m((u) => u.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1"))), t.base64 = /* @__PURE__ */ a(/* @__PURE__ */ I(6), /* @__PURE__ */ c("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), /* @__PURE__ */ d(6), /* @__PURE__ */ o("")), t.base64url = /* @__PURE__ */ a(/* @__PURE__ */ I(6), /* @__PURE__ */ c("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), /* @__PURE__ */ d(6), /* @__PURE__ */ o("")), t.base64urlnopad = /* @__PURE__ */ a(/* @__PURE__ */ I(6), /* @__PURE__ */ c("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), /* @__PURE__ */ o(""));
  const C = (u) => /* @__PURE__ */ a(/* @__PURE__ */ P(58), /* @__PURE__ */ c(u), /* @__PURE__ */ o(""));
  t.base58 = C("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"), t.base58flickr = C("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"), t.base58xrp = C("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
  const z = [0, 2, 3, 5, 6, 7, 9, 10, 11];
  t.base58xmr = {
    encode(u) {
      let h = "";
      for (let p = 0; p < u.length; p += 8) {
        const y = u.subarray(p, p + 8);
        h += t.base58.encode(y).padStart(z[y.length], "1");
      }
      return h;
    },
    decode(u) {
      let h = [];
      for (let p = 0; p < u.length; p += 11) {
        const y = u.slice(p, p + 11), v = z.indexOf(y.length), $ = t.base58.decode(y);
        for (let E = 0; E < $.length - v; E++)
          if ($[E] !== 0)
            throw new Error("base58xmr: wrong padding");
        h = h.concat(Array.from($.slice($.length - v)));
      }
      return Uint8Array.from(h);
    }
  };
  const q = (u) => /* @__PURE__ */ a(/* @__PURE__ */ L(4, (h) => u(u(h))), t.base58);
  t.createBase58check = q, t.base58check = t.createBase58check;
  const Z = /* @__PURE__ */ a(/* @__PURE__ */ c("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), /* @__PURE__ */ o("")), X = [996825010, 642813549, 513874426, 1027748829, 705979059];
  // @__NO_SIDE_EFFECTS__
  function ie(u) {
    const h = u >> 25;
    let p = (u & 33554431) << 5;
    for (let y = 0; y < X.length; y++)
      (h >> y & 1) === 1 && (p ^= X[y]);
    return p;
  }
  // @__NO_SIDE_EFFECTS__
  function fe(u, h, p = 1) {
    const y = u.length;
    let v = 1;
    for (let $ = 0; $ < y; $++) {
      const E = u.charCodeAt($);
      if (E < 33 || E > 126)
        throw new Error(`Invalid prefix (${u})`);
      v = /* @__PURE__ */ ie(v) ^ E >> 5;
    }
    v = /* @__PURE__ */ ie(v);
    for (let $ = 0; $ < y; $++)
      v = /* @__PURE__ */ ie(v) ^ u.charCodeAt($) & 31;
    for (let $ of h)
      v = /* @__PURE__ */ ie(v) ^ $;
    for (let $ = 0; $ < 6; $++)
      v = /* @__PURE__ */ ie(v);
    return v ^= p, Z.encode(/* @__PURE__ */ B([v % 2 ** 30], 30, 5, !1));
  }
  // @__NO_SIDE_EFFECTS__
  function ye(u) {
    const h = u === "bech32" ? 1 : 734539939, p = /* @__PURE__ */ I(5), y = p.decode, v = p.encode, $ = /* @__PURE__ */ O(y);
    function E(M, k, U = 90) {
      if (typeof M != "string")
        throw new Error(`bech32.encode prefix should be string, not ${typeof M}`);
      if (!Array.isArray(k) || k.length && typeof k[0] != "number")
        throw new Error(`bech32.encode words should be array of numbers, not ${typeof k}`);
      const T = M.length + 7 + k.length;
      if (U !== !1 && T > U)
        throw new TypeError(`Length ${T} exceeds limit ${U}`);
      const H = M.toLowerCase(), Y = /* @__PURE__ */ fe(H, k, h);
      return `${H}1${Z.encode(k)}${Y}`;
    }
    function x(M, k = 90) {
      if (typeof M != "string")
        throw new Error(`bech32.decode input should be string, not ${typeof M}`);
      if (M.length < 8 || k !== !1 && M.length > k)
        throw new TypeError(`Wrong string length: ${M.length} (${M}). Expected (8..${k})`);
      const U = M.toLowerCase();
      if (M !== U && M !== M.toUpperCase())
        throw new Error("String must be lowercase or uppercase");
      M = U;
      const T = M.lastIndexOf("1");
      if (T === 0 || T === -1)
        throw new Error('Letter "1" must be present between prefix and data only');
      const H = M.slice(0, T), Y = M.slice(T + 1);
      if (Y.length < 6)
        throw new Error("Data must be at least 6 characters long");
      const le = Z.decode(Y).slice(0, -6), ce = /* @__PURE__ */ fe(H, le, h);
      if (!Y.endsWith(ce))
        throw new Error(`Invalid checksum in ${M}: expected "${ce}"`);
      return { prefix: H, words: le };
    }
    const l = /* @__PURE__ */ O(x);
    function b(M) {
      const { prefix: k, words: U } = x(M, !1);
      return { prefix: k, words: U, bytes: y(U) };
    }
    return { encode: E, decode: x, decodeToBytes: b, decodeUnsafe: l, fromWords: y, fromWordsUnsafe: $, toWords: v };
  }
  t.bech32 = /* @__PURE__ */ ye("bech32"), t.bech32m = /* @__PURE__ */ ye("bech32m"), t.utf8 = {
    encode: (u) => new TextDecoder().decode(u),
    decode: (u) => new TextEncoder().encode(u)
  }, t.hex = /* @__PURE__ */ a(/* @__PURE__ */ I(4), /* @__PURE__ */ c("0123456789abcdef"), /* @__PURE__ */ o(""), /* @__PURE__ */ m((u) => {
    if (typeof u != "string" || u.length % 2)
      throw new TypeError(`hex.decode: expected string, got ${typeof u} with length ${u.length}`);
    return u.toLowerCase();
  }));
  const j = {
    utf8: t.utf8,
    hex: t.hex,
    base16: t.base16,
    base32: t.base32,
    base64: t.base64,
    base64url: t.base64url,
    base58: t.base58,
    base58xmr: t.base58xmr
  }, V = "Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr", ae = (u, h) => {
    if (typeof u != "string" || !j.hasOwnProperty(u))
      throw new TypeError(V);
    if (!n(h))
      throw new TypeError("bytesToString() expects Uint8Array");
    return j[u].encode(h);
  };
  t.bytesToString = ae, t.str = t.bytesToString;
  const _ = (u, h) => {
    if (!j.hasOwnProperty(u))
      throw new TypeError(V);
    if (typeof h != "string")
      throw new TypeError("stringToBytes() expects string");
    return j[u].decode(h);
  };
  t.stringToBytes = _, t.bytes = t.stringToBytes;
})(lib);
Object.defineProperty(bip39, "__esModule", { value: !0 });
var mnemonicToSeedSync_1 = bip39.mnemonicToSeedSync = bip39.mnemonicToSeed = bip39.validateMnemonic = bip39.entropyToMnemonic = bip39.mnemonicToEntropy = bip39.generateMnemonic = void 0;
/*! scure-bip39 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */
const _assert_1 = _assert, pbkdf2_1 = pbkdf2$1, sha256_1 = sha256, sha512_1 = sha512$1, utils_1 = utils$c, base_1 = lib, isJapanese = (t) => t[0] === "あいこくしん";
function nfkd(t) {
  if (typeof t != "string")
    throw new TypeError(`Invalid mnemonic type: ${typeof t}`);
  return t.normalize("NFKD");
}
function normalize(t) {
  const e = nfkd(t), n = e.split(" ");
  if (![12, 15, 18, 21, 24].includes(n.length))
    throw new Error("Invalid mnemonic");
  return { nfkd: e, words: n };
}
function assertEntropy(t) {
  _assert_1.default.bytes(t, 16, 20, 24, 28, 32);
}
function generateMnemonic(t, e = 128) {
  if (_assert_1.default.number(e), e % 32 !== 0 || e > 256)
    throw new TypeError("Invalid entropy");
  return entropyToMnemonic((0, utils_1.randomBytes)(e / 8), t);
}
bip39.generateMnemonic = generateMnemonic;
const calcChecksum = (t) => {
  const e = 8 - t.length / 4;
  return new Uint8Array([(0, sha256_1.sha256)(t)[0] >> e << e]);
};
function getCoder(t) {
  if (!Array.isArray(t) || t.length !== 2 ** 11 || typeof t[0] != "string")
    throw new Error("Worlist: expected array of 2048 strings");
  return t.forEach((e) => {
    if (typeof e != "string")
      throw new Error(`Wordlist: non-string element: ${e}`);
  }), base_1.utils.chain(base_1.utils.checksum(1, calcChecksum), base_1.utils.radix2(11, !0), base_1.utils.alphabet(t));
}
function mnemonicToEntropy(t, e) {
  const { words: n } = normalize(t), a = getCoder(e).decode(n);
  return assertEntropy(a), a;
}
bip39.mnemonicToEntropy = mnemonicToEntropy;
function entropyToMnemonic(t, e) {
  return assertEntropy(t), getCoder(e).encode(t).join(isJapanese(e) ? "　" : " ");
}
bip39.entropyToMnemonic = entropyToMnemonic;
function validateMnemonic(t, e) {
  try {
    mnemonicToEntropy(t, e);
  } catch {
    return !1;
  }
  return !0;
}
bip39.validateMnemonic = validateMnemonic;
const salt = (t) => nfkd(`mnemonic${t}`);
function mnemonicToSeed(t, e = "") {
  return (0, pbkdf2_1.pbkdf2Async)(sha512_1.sha512, normalize(t).nfkd, salt(e), { c: 2048, dkLen: 64 });
}
bip39.mnemonicToSeed = mnemonicToSeed;
function mnemonicToSeedSync(t, e = "") {
  return (0, pbkdf2_1.pbkdf2)(sha512_1.sha512, normalize(t).nfkd, salt(e), { c: 2048, dkLen: 64 });
}
mnemonicToSeedSync_1 = bip39.mnemonicToSeedSync = mnemonicToSeedSync;
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const u32 = (t) => new Uint32Array(t.buffer, t.byteOffset, Math.floor(t.byteLength / 4)), createView = (t) => new DataView(t.buffer, t.byteOffset, t.byteLength), isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!isLE)
  throw new Error("Non little-endian hardware is not supported");
const hexes = Array.from({ length: 256 }, (t, e) => e.toString(16).padStart(2, "0"));
function bytesToHex(t) {
  if (!(t instanceof Uint8Array))
    throw new Error("Uint8Array expected");
  let e = "";
  for (let n = 0; n < t.length; n++)
    e += hexes[t[n]];
  return e;
}
function hexToBytes(t) {
  if (typeof t != "string")
    throw new TypeError("hexToBytes: expected string, got " + typeof t);
  if (t.length % 2)
    throw new Error("hexToBytes: received invalid unpadded hex");
  const e = new Uint8Array(t.length / 2);
  for (let n = 0; n < e.length; n++) {
    const a = n * 2, c = t.slice(a, a + 2), o = Number.parseInt(c, 16);
    if (Number.isNaN(o) || o < 0)
      throw new Error("Invalid byte sequence");
    e[n] = o;
  }
  return e;
}
function utf8ToBytes(t) {
  if (typeof t != "string")
    throw new TypeError(`utf8ToBytes expected string, got ${typeof t}`);
  return new TextEncoder().encode(t);
}
function toBytes(t) {
  if (typeof t == "string" && (t = utf8ToBytes(t)), !(t instanceof Uint8Array))
    throw new TypeError(`Expected input type is Uint8Array (got ${typeof t})`);
  return t;
}
class Hash {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
}
function wrapConstructor(t) {
  const e = (a) => t().update(toBytes(a)).digest(), n = t();
  return e.outputLen = n.outputLen, e.blockLen = n.blockLen, e.create = () => t(), e;
}
function wrapConstructorWithOpts(t) {
  const e = (a, c) => t(c).update(toBytes(a)).digest(), n = t({});
  return e.outputLen = n.outputLen, e.blockLen = n.blockLen, e.create = (a) => t(a), e;
}
function number(t) {
  if (!Number.isSafeInteger(t) || t < 0)
    throw new Error(`Wrong positive integer: ${t}`);
}
function bool(t) {
  if (typeof t != "boolean")
    throw new Error(`Expected boolean, not ${t}`);
}
function bytes(t, ...e) {
  if (!(t instanceof Uint8Array))
    throw new TypeError("Expected Uint8Array");
  if (e.length > 0 && !e.includes(t.length))
    throw new TypeError(`Expected Uint8Array of length ${e}, not of length=${t.length}`);
}
function hash(t) {
  if (typeof t != "function" || typeof t.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  number(t.outputLen), number(t.blockLen);
}
function exists(t, e = !0) {
  if (t.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e && t.finished)
    throw new Error("Hash#digest() has already been called");
}
function output(t, e) {
  bytes(t);
  const n = e.outputLen;
  if (t.length < n)
    throw new Error(`digestInto() expects output buffer of length at least ${n}`);
}
const assert = {
  number,
  bool,
  bytes,
  hash,
  exists,
  output
}, U32_MASK64 = BigInt(2 ** 32 - 1), _32n = BigInt(32);
function fromBig(t, e = !1) {
  return e ? { h: Number(t & U32_MASK64), l: Number(t >> _32n & U32_MASK64) } : { h: Number(t >> _32n & U32_MASK64) | 0, l: Number(t & U32_MASK64) | 0 };
}
function split(t, e = !1) {
  let n = new Uint32Array(t.length), a = new Uint32Array(t.length);
  for (let c = 0; c < t.length; c++) {
    const { h: o, l: d } = fromBig(t[c], e);
    [n[c], a[c]] = [o, d];
  }
  return [n, a];
}
const toBig = (t, e) => BigInt(t >>> 0) << _32n | BigInt(e >>> 0), shrSH = (t, e, n) => t >>> n, shrSL = (t, e, n) => t << 32 - n | e >>> n, rotrSH = (t, e, n) => t >>> n | e << 32 - n, rotrSL = (t, e, n) => t << 32 - n | e >>> n, rotrBH = (t, e, n) => t << 64 - n | e >>> n - 32, rotrBL = (t, e, n) => t >>> n - 32 | e << 64 - n, rotr32H = (t, e) => e, rotr32L = (t, e) => t, rotlSH = (t, e, n) => t << n | e >>> 32 - n, rotlSL = (t, e, n) => e << n | t >>> 32 - n, rotlBH = (t, e, n) => e << n - 32 | t >>> 64 - n, rotlBL = (t, e, n) => t << n - 32 | e >>> 64 - n;
function add(t, e, n, a) {
  const c = (e >>> 0) + (a >>> 0);
  return { h: t + n + (c / 2 ** 32 | 0) | 0, l: c | 0 };
}
const add3L = (t, e, n) => (t >>> 0) + (e >>> 0) + (n >>> 0), add3H = (t, e, n, a) => e + n + a + (t / 2 ** 32 | 0) | 0, add4L = (t, e, n, a) => (t >>> 0) + (e >>> 0) + (n >>> 0) + (a >>> 0), add4H = (t, e, n, a, c) => e + n + a + c + (t / 2 ** 32 | 0) | 0, add5L = (t, e, n, a, c) => (t >>> 0) + (e >>> 0) + (n >>> 0) + (a >>> 0) + (c >>> 0), add5H = (t, e, n, a, c, o) => e + n + a + c + o + (t / 2 ** 32 | 0) | 0, u64 = {
  fromBig,
  split,
  toBig,
  shrSH,
  shrSL,
  rotrSH,
  rotrSL,
  rotrBH,
  rotrBL,
  rotr32H,
  rotr32L,
  rotlSH,
  rotlSL,
  rotlBH,
  rotlBL,
  add,
  add3L,
  add3H,
  add4L,
  add4H,
  add5H,
  add5L
}, [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []], _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _7n = BigInt(7), _256n = BigInt(256), _0x71n = BigInt(113);
for (let t = 0, e = _1n, n = 1, a = 0; t < 24; t++) {
  [n, a] = [a, (2 * n + 3 * a) % 5], SHA3_PI.push(2 * (5 * a + n)), SHA3_ROTL.push((t + 1) * (t + 2) / 2 % 64);
  let c = _0n;
  for (let o = 0; o < 7; o++)
    e = (e << _1n ^ (e >> _7n) * _0x71n) % _256n, e & _2n && (c ^= _1n << (_1n << BigInt(o)) - _1n);
  _SHA3_IOTA.push(c);
}
const [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, !0), rotlH = (t, e, n) => n > 32 ? u64.rotlBH(t, e, n) : u64.rotlSH(t, e, n), rotlL = (t, e, n) => n > 32 ? u64.rotlBL(t, e, n) : u64.rotlSL(t, e, n);
function keccakP(t, e = 24) {
  const n = new Uint32Array(10);
  for (let a = 24 - e; a < 24; a++) {
    for (let d = 0; d < 10; d++)
      n[d] = t[d] ^ t[d + 10] ^ t[d + 20] ^ t[d + 30] ^ t[d + 40];
    for (let d = 0; d < 10; d += 2) {
      const m = (d + 8) % 10, w = (d + 2) % 10, S = n[w], A = n[w + 1], B = rotlH(S, A, 1) ^ n[m], P = rotlL(S, A, 1) ^ n[m + 1];
      for (let I = 0; I < 50; I += 10)
        t[d + I] ^= B, t[d + I + 1] ^= P;
    }
    let c = t[2], o = t[3];
    for (let d = 0; d < 24; d++) {
      const m = SHA3_ROTL[d], w = rotlH(c, o, m), S = rotlL(c, o, m), A = SHA3_PI[d];
      c = t[A], o = t[A + 1], t[A] = w, t[A + 1] = S;
    }
    for (let d = 0; d < 50; d += 10) {
      for (let m = 0; m < 10; m++)
        n[m] = t[d + m];
      for (let m = 0; m < 10; m++)
        t[d + m] ^= ~n[(m + 2) % 10] & n[(m + 4) % 10];
    }
    t[0] ^= SHA3_IOTA_H[a], t[1] ^= SHA3_IOTA_L[a];
  }
  n.fill(0);
}
class Keccak extends Hash {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(e, n, a, c = !1, o = 24) {
    if (super(), this.blockLen = e, this.suffix = n, this.outputLen = a, this.enableXOF = c, this.rounds = o, this.pos = 0, this.posOut = 0, this.finished = !1, this.destroyed = !1, assert.number(a), 0 >= this.blockLen || this.blockLen >= 200)
      throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200), this.state32 = u32(this.state);
  }
  keccak() {
    keccakP(this.state32, this.rounds), this.posOut = 0, this.pos = 0;
  }
  update(e) {
    assert.exists(this);
    const { blockLen: n, state: a } = this;
    e = toBytes(e);
    const c = e.length;
    for (let o = 0; o < c; ) {
      const d = Math.min(n - this.pos, c - o);
      for (let m = 0; m < d; m++)
        a[this.pos++] ^= e[o++];
      this.pos === n && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = !0;
    const { state: e, suffix: n, pos: a, blockLen: c } = this;
    e[a] ^= n, n & 128 && a === c - 1 && this.keccak(), e[c - 1] ^= 128, this.keccak();
  }
  writeInto(e) {
    assert.exists(this, !1), assert.bytes(e), this.finish();
    const n = this.state, { blockLen: a } = this;
    for (let c = 0, o = e.length; c < o; ) {
      this.posOut >= a && this.keccak();
      const d = Math.min(a - this.posOut, o - c);
      e.set(n.subarray(this.posOut, this.posOut + d), c), this.posOut += d, c += d;
    }
    return e;
  }
  xofInto(e) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(e);
  }
  xof(e) {
    return assert.number(e), this.xofInto(new Uint8Array(e));
  }
  digestInto(e) {
    if (assert.output(e, this), this.finished)
      throw new Error("digest() was already called");
    return this.writeInto(e), this.destroy(), e;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = !0, this.state.fill(0);
  }
  _cloneInto(e) {
    const { blockLen: n, suffix: a, outputLen: c, rounds: o, enableXOF: d } = this;
    return e || (e = new Keccak(n, a, c, d, o)), e.state32.set(this.state32), e.pos = this.pos, e.posOut = this.posOut, e.finished = this.finished, e.rounds = o, e.suffix = a, e.outputLen = c, e.enableXOF = d, e.destroyed = this.destroyed, e;
  }
}
const gen = (t, e, n) => wrapConstructor(() => new Keccak(e, t, n));
gen(6, 144, 224 / 8);
const sha3_256 = gen(6, 136, 256 / 8);
gen(6, 104, 384 / 8);
gen(6, 72, 512 / 8);
gen(1, 144, 224 / 8);
gen(1, 136, 256 / 8);
gen(1, 104, 384 / 8);
gen(1, 72, 512 / 8);
const genShake = (t, e, n) => wrapConstructorWithOpts((a = {}) => new Keccak(e, t, a.dkLen === void 0 ? n : a.dkLen, !0));
genShake(31, 168, 128 / 8);
genShake(31, 136, 256 / 8);
class HMAC extends Hash {
  constructor(e, n) {
    super(), this.finished = !1, this.destroyed = !1, assert.hash(e);
    const a = toBytes(n);
    if (this.iHash = e.create(), typeof this.iHash.update != "function")
      throw new TypeError("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const c = this.blockLen, o = new Uint8Array(c);
    o.set(a.length > c ? e.create().update(a).digest() : a);
    for (let d = 0; d < o.length; d++)
      o[d] ^= 54;
    this.iHash.update(o), this.oHash = e.create();
    for (let d = 0; d < o.length; d++)
      o[d] ^= 106;
    this.oHash.update(o), o.fill(0);
  }
  update(e) {
    return assert.exists(this), this.iHash.update(e), this;
  }
  digestInto(e) {
    assert.exists(this), assert.bytes(e, this.outputLen), this.finished = !0, this.iHash.digestInto(e), this.oHash.update(e), this.oHash.digestInto(e), this.destroy();
  }
  digest() {
    const e = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(e), e;
  }
  _cloneInto(e) {
    e || (e = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n, iHash: a, finished: c, destroyed: o, blockLen: d, outputLen: m } = this;
    return e = e, e.finished = c, e.destroyed = o, e.blockLen = d, e.outputLen = m, e.oHash = n._cloneInto(e.oHash), e.iHash = a._cloneInto(e.iHash), e;
  }
  destroy() {
    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
  }
}
const hmac = (t, e, n) => new HMAC(t, e).update(n).digest();
hmac.create = (t, e) => new HMAC(t, e);
function setBigUint64(t, e, n, a) {
  if (typeof t.setBigUint64 == "function")
    return t.setBigUint64(e, n, a);
  const c = BigInt(32), o = BigInt(4294967295), d = Number(n >> c & o), m = Number(n & o), w = a ? 4 : 0, S = a ? 0 : 4;
  t.setUint32(e + w, d, a), t.setUint32(e + S, m, a);
}
class SHA2 extends Hash {
  constructor(e, n, a, c) {
    super(), this.blockLen = e, this.outputLen = n, this.padOffset = a, this.isLE = c, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(e), this.view = createView(this.buffer);
  }
  update(e) {
    assert.exists(this);
    const { view: n, buffer: a, blockLen: c } = this;
    e = toBytes(e);
    const o = e.length;
    for (let d = 0; d < o; ) {
      const m = Math.min(c - this.pos, o - d);
      if (m === c) {
        const w = createView(e);
        for (; c <= o - d; d += c)
          this.process(w, d);
        continue;
      }
      a.set(e.subarray(d, d + m), this.pos), this.pos += m, d += m, this.pos === c && (this.process(n, 0), this.pos = 0);
    }
    return this.length += e.length, this.roundClean(), this;
  }
  digestInto(e) {
    assert.exists(this), assert.output(e, this), this.finished = !0;
    const { buffer: n, view: a, blockLen: c, isLE: o } = this;
    let { pos: d } = this;
    n[d++] = 128, this.buffer.subarray(d).fill(0), this.padOffset > c - d && (this.process(a, 0), d = 0);
    for (let w = d; w < c; w++)
      n[w] = 0;
    setBigUint64(a, c - 8, BigInt(this.length * 8), o), this.process(a, 0);
    const m = createView(e);
    this.get().forEach((w, S) => m.setUint32(4 * S, w, o));
  }
  digest() {
    const { buffer: e, outputLen: n } = this;
    this.digestInto(e);
    const a = e.slice(0, n);
    return this.destroy(), a;
  }
  _cloneInto(e) {
    e || (e = new this.constructor()), e.set(...this.get());
    const { blockLen: n, buffer: a, length: c, finished: o, destroyed: d, pos: m } = this;
    return e.length = c, e.pos = m, e.finished = o, e.destroyed = d, c % n && e.buffer.set(a), e;
  }
}
const [SHA512_Kh, SHA512_Kl] = u64.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((t) => BigInt(t))), SHA512_W_H = new Uint32Array(80), SHA512_W_L = new Uint32Array(80);
class SHA512 extends SHA2 {
  constructor() {
    super(128, 64, 16, !1), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  // prettier-ignore
  get() {
    const { Ah: e, Al: n, Bh: a, Bl: c, Ch: o, Cl: d, Dh: m, Dl: w, Eh: S, El: A, Fh: B, Fl: P, Gh: I, Gl: O, Hh: L, Hl: C } = this;
    return [e, n, a, c, o, d, m, w, S, A, B, P, I, O, L, C];
  }
  // prettier-ignore
  set(e, n, a, c, o, d, m, w, S, A, B, P, I, O, L, C) {
    this.Ah = e | 0, this.Al = n | 0, this.Bh = a | 0, this.Bl = c | 0, this.Ch = o | 0, this.Cl = d | 0, this.Dh = m | 0, this.Dl = w | 0, this.Eh = S | 0, this.El = A | 0, this.Fh = B | 0, this.Fl = P | 0, this.Gh = I | 0, this.Gl = O | 0, this.Hh = L | 0, this.Hl = C | 0;
  }
  process(e, n) {
    for (let Z = 0; Z < 16; Z++, n += 4)
      SHA512_W_H[Z] = e.getUint32(n), SHA512_W_L[Z] = e.getUint32(n += 4);
    for (let Z = 16; Z < 80; Z++) {
      const X = SHA512_W_H[Z - 15] | 0, ie = SHA512_W_L[Z - 15] | 0, fe = u64.rotrSH(X, ie, 1) ^ u64.rotrSH(X, ie, 8) ^ u64.shrSH(X, ie, 7), ye = u64.rotrSL(X, ie, 1) ^ u64.rotrSL(X, ie, 8) ^ u64.shrSL(X, ie, 7), j = SHA512_W_H[Z - 2] | 0, V = SHA512_W_L[Z - 2] | 0, ae = u64.rotrSH(j, V, 19) ^ u64.rotrBH(j, V, 61) ^ u64.shrSH(j, V, 6), _ = u64.rotrSL(j, V, 19) ^ u64.rotrBL(j, V, 61) ^ u64.shrSL(j, V, 6), u = u64.add4L(ye, _, SHA512_W_L[Z - 7], SHA512_W_L[Z - 16]), h = u64.add4H(u, fe, ae, SHA512_W_H[Z - 7], SHA512_W_H[Z - 16]);
      SHA512_W_H[Z] = h | 0, SHA512_W_L[Z] = u | 0;
    }
    let { Ah: a, Al: c, Bh: o, Bl: d, Ch: m, Cl: w, Dh: S, Dl: A, Eh: B, El: P, Fh: I, Fl: O, Gh: L, Gl: C, Hh: z, Hl: q } = this;
    for (let Z = 0; Z < 80; Z++) {
      const X = u64.rotrSH(B, P, 14) ^ u64.rotrSH(B, P, 18) ^ u64.rotrBH(B, P, 41), ie = u64.rotrSL(B, P, 14) ^ u64.rotrSL(B, P, 18) ^ u64.rotrBL(B, P, 41), fe = B & I ^ ~B & L, ye = P & O ^ ~P & C, j = u64.add5L(q, ie, ye, SHA512_Kl[Z], SHA512_W_L[Z]), V = u64.add5H(j, z, X, fe, SHA512_Kh[Z], SHA512_W_H[Z]), ae = j | 0, _ = u64.rotrSH(a, c, 28) ^ u64.rotrBH(a, c, 34) ^ u64.rotrBH(a, c, 39), u = u64.rotrSL(a, c, 28) ^ u64.rotrBL(a, c, 34) ^ u64.rotrBL(a, c, 39), h = a & o ^ a & m ^ o & m, p = c & d ^ c & w ^ d & w;
      z = L | 0, q = C | 0, L = I | 0, C = O | 0, I = B | 0, O = P | 0, { h: B, l: P } = u64.add(S | 0, A | 0, V | 0, ae | 0), S = m | 0, A = w | 0, m = o | 0, w = d | 0, o = a | 0, d = c | 0;
      const y = u64.add3L(ae, u, p);
      a = u64.add3H(y, V, _, h), c = y | 0;
    }
    ({ h: a, l: c } = u64.add(this.Ah | 0, this.Al | 0, a | 0, c | 0)), { h: o, l: d } = u64.add(this.Bh | 0, this.Bl | 0, o | 0, d | 0), { h: m, l: w } = u64.add(this.Ch | 0, this.Cl | 0, m | 0, w | 0), { h: S, l: A } = u64.add(this.Dh | 0, this.Dl | 0, S | 0, A | 0), { h: B, l: P } = u64.add(this.Eh | 0, this.El | 0, B | 0, P | 0), { h: I, l: O } = u64.add(this.Fh | 0, this.Fl | 0, I | 0, O | 0), { h: L, l: C } = u64.add(this.Gh | 0, this.Gl | 0, L | 0, C | 0), { h: z, l: q } = u64.add(this.Hh | 0, this.Hl | 0, z | 0, q | 0), this.set(a, c, o, d, m, w, S, A, B, P, I, O, L, C, z, q);
  }
  roundClean() {
    SHA512_W_H.fill(0), SHA512_W_L.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
}
class SHA512_256 extends SHA512 {
  constructor() {
    super(), this.Ah = 573645204, this.Al = -64227540, this.Bh = -1621794909, this.Bl = -934517566, this.Ch = 596883563, this.Cl = 1867755857, this.Dh = -1774684391, this.Dl = 1497426621, this.Eh = -1775747358, this.El = -1467023389, this.Fh = -1101128155, this.Fl = 1401305490, this.Gh = 721525244, this.Gl = 746961066, this.Hh = 246885852, this.Hl = -2117784414, this.outputLen = 32;
  }
}
class SHA384 extends SHA512 {
  constructor() {
    super(), this.Ah = -876896931, this.Al = -1056596264, this.Bh = 1654270250, this.Bl = 914150663, this.Ch = -1856437926, this.Cl = 812702999, this.Dh = 355462360, this.Dl = -150054599, this.Eh = 1731405415, this.El = -4191439, this.Fh = -1900787065, this.Fl = 1750603025, this.Gh = -619958771, this.Gl = 1694076839, this.Hh = 1203062813, this.Hl = -1090891868, this.outputLen = 48;
  }
}
const sha512 = wrapConstructor(() => new SHA512());
wrapConstructor(() => new SHA512_256());
wrapConstructor(() => new SHA384());
var axios$2 = { exports: {} }, bind$2 = function t(e, n) {
  return function() {
    for (var c = new Array(arguments.length), o = 0; o < c.length; o++)
      c[o] = arguments[o];
    return e.apply(n, c);
  };
}, bind$1 = bind$2, toString = Object.prototype.toString, kindOf = /* @__PURE__ */ function(t) {
  return function(e) {
    var n = toString.call(e);
    return t[n] || (t[n] = n.slice(8, -1).toLowerCase());
  };
}(/* @__PURE__ */ Object.create(null));
function kindOfTest(t) {
  return t = t.toLowerCase(), function(n) {
    return kindOf(n) === t;
  };
}
function isArray(t) {
  return Array.isArray(t);
}
function isUndefined(t) {
  return typeof t > "u";
}
function isBuffer(t) {
  return t !== null && !isUndefined(t) && t.constructor !== null && !isUndefined(t.constructor) && typeof t.constructor.isBuffer == "function" && t.constructor.isBuffer(t);
}
var isArrayBuffer = kindOfTest("ArrayBuffer");
function isArrayBufferView(t) {
  var e;
  return typeof ArrayBuffer < "u" && ArrayBuffer.isView ? e = ArrayBuffer.isView(t) : e = t && t.buffer && isArrayBuffer(t.buffer), e;
}
function isString$2(t) {
  return typeof t == "string";
}
function isNumber(t) {
  return typeof t == "number";
}
function isObject$1(t) {
  return t !== null && typeof t == "object";
}
function isPlainObject(t) {
  if (kindOf(t) !== "object")
    return !1;
  var e = Object.getPrototypeOf(t);
  return e === null || e === Object.prototype;
}
var isDate = kindOfTest("Date"), isFile = kindOfTest("File"), isBlob$1 = kindOfTest("Blob"), isFileList = kindOfTest("FileList");
function isFunction$1(t) {
  return toString.call(t) === "[object Function]";
}
function isStream(t) {
  return isObject$1(t) && isFunction$1(t.pipe);
}
function isFormData$1(t) {
  var e = "[object FormData]";
  return t && (typeof FormData == "function" && t instanceof FormData || toString.call(t) === e || isFunction$1(t.toString) && t.toString() === e);
}
var isURLSearchParams = kindOfTest("URLSearchParams");
function trim(t) {
  return t.trim ? t.trim() : t.replace(/^\s+|\s+$/g, "");
}
function isStandardBrowserEnv() {
  return typeof navigator < "u" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS") ? !1 : typeof window < "u" && typeof document < "u";
}
function forEach(t, e) {
  if (!(t === null || typeof t > "u"))
    if (typeof t != "object" && (t = [t]), isArray(t))
      for (var n = 0, a = t.length; n < a; n++)
        e.call(null, t[n], n, t);
    else
      for (var c in t)
        Object.prototype.hasOwnProperty.call(t, c) && e.call(null, t[c], c, t);
}
function merge() {
  var t = {};
  function e(c, o) {
    isPlainObject(t[o]) && isPlainObject(c) ? t[o] = merge(t[o], c) : isPlainObject(c) ? t[o] = merge({}, c) : isArray(c) ? t[o] = c.slice() : t[o] = c;
  }
  for (var n = 0, a = arguments.length; n < a; n++)
    forEach(arguments[n], e);
  return t;
}
function extend(t, e, n) {
  return forEach(e, function(c, o) {
    n && typeof c == "function" ? t[o] = bind$1(c, n) : t[o] = c;
  }), t;
}
function stripBOM(t) {
  return t.charCodeAt(0) === 65279 && (t = t.slice(1)), t;
}
function inherits(t, e, n, a) {
  t.prototype = Object.create(e.prototype, a), t.prototype.constructor = t, n && Object.assign(t.prototype, n);
}
function toFlatObject(t, e, n) {
  var a, c, o, d = {};
  e = e || {};
  do {
    for (a = Object.getOwnPropertyNames(t), c = a.length; c-- > 0; )
      o = a[c], d[o] || (e[o] = t[o], d[o] = !0);
    t = Object.getPrototypeOf(t);
  } while (t && (!n || n(t, e)) && t !== Object.prototype);
  return e;
}
function endsWith(t, e, n) {
  t = String(t), (n === void 0 || n > t.length) && (n = t.length), n -= e.length;
  var a = t.indexOf(e, n);
  return a !== -1 && a === n;
}
function toArray(t) {
  if (!t)
    return null;
  var e = t.length;
  if (isUndefined(e))
    return null;
  for (var n = new Array(e); e-- > 0; )
    n[e] = t[e];
  return n;
}
var isTypedArray = /* @__PURE__ */ function(t) {
  return function(e) {
    return t && e instanceof t;
  };
}(typeof Uint8Array < "u" && Object.getPrototypeOf(Uint8Array)), utils$b = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData: isFormData$1,
  isArrayBufferView,
  isString: isString$2,
  isNumber,
  isObject: isObject$1,
  isPlainObject,
  isUndefined,
  isDate,
  isFile,
  isBlob: isBlob$1,
  isFunction: isFunction$1,
  isStream,
  isURLSearchParams,
  isStandardBrowserEnv,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  isTypedArray,
  isFileList
}, utils$a = utils$b;
function encode(t) {
  return encodeURIComponent(t).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
var buildURL$1 = function t(e, n, a) {
  if (!n)
    return e;
  var c;
  if (a)
    c = a(n);
  else if (utils$a.isURLSearchParams(n))
    c = n.toString();
  else {
    var o = [];
    utils$a.forEach(n, function(w, S) {
      w === null || typeof w > "u" || (utils$a.isArray(w) ? S = S + "[]" : w = [w], utils$a.forEach(w, function(B) {
        utils$a.isDate(B) ? B = B.toISOString() : utils$a.isObject(B) && (B = JSON.stringify(B)), o.push(encode(S) + "=" + encode(B));
      }));
    }), c = o.join("&");
  }
  if (c) {
    var d = e.indexOf("#");
    d !== -1 && (e = e.slice(0, d)), e += (e.indexOf("?") === -1 ? "?" : "&") + c;
  }
  return e;
}, utils$9 = utils$b;
function InterceptorManager$1() {
  this.handlers = [];
}
InterceptorManager$1.prototype.use = function t(e, n, a) {
  return this.handlers.push({
    fulfilled: e,
    rejected: n,
    synchronous: a ? a.synchronous : !1,
    runWhen: a ? a.runWhen : null
  }), this.handlers.length - 1;
};
InterceptorManager$1.prototype.eject = function t(e) {
  this.handlers[e] && (this.handlers[e] = null);
};
InterceptorManager$1.prototype.forEach = function t(e) {
  utils$9.forEach(this.handlers, function(a) {
    a !== null && e(a);
  });
};
var InterceptorManager_1 = InterceptorManager$1, utils$8 = utils$b, normalizeHeaderName$1 = function t(e, n) {
  utils$8.forEach(e, function(c, o) {
    o !== n && o.toUpperCase() === n.toUpperCase() && (e[n] = c, delete e[o]);
  });
}, utils$7 = utils$b;
function AxiosError$2(t, e, n, a, c) {
  Error.call(this), this.message = t, this.name = "AxiosError", e && (this.code = e), n && (this.config = n), a && (this.request = a), c && (this.response = c);
}
utils$7.inherits(AxiosError$2, Error, {
  toJSON: function t() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});
var prototype = AxiosError$2.prototype, descriptors = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED"
  // eslint-disable-next-line func-names
].forEach(function(t) {
  descriptors[t] = { value: t };
});
Object.defineProperties(AxiosError$2, descriptors);
Object.defineProperty(prototype, "isAxiosError", { value: !0 });
AxiosError$2.from = function(t, e, n, a, c, o) {
  var d = Object.create(prototype);
  return utils$7.toFlatObject(t, d, function(w) {
    return w !== Error.prototype;
  }), AxiosError$2.call(d, t.message, e, n, a, c), d.name = t.name, o && Object.assign(d, o), d;
};
var AxiosError_1 = AxiosError$2, transitional = {
  silentJSONParsing: !0,
  forcedJSONParsing: !0,
  clarifyTimeoutError: !1
}, utils$6 = utils$b;
function toFormData$1(t, e) {
  e = e || new FormData();
  var n = [];
  function a(o) {
    return o === null ? "" : utils$6.isDate(o) ? o.toISOString() : utils$6.isArrayBuffer(o) || utils$6.isTypedArray(o) ? typeof Blob == "function" ? new Blob([o]) : Buffer$F.from(o) : o;
  }
  function c(o, d) {
    if (utils$6.isPlainObject(o) || utils$6.isArray(o)) {
      if (n.indexOf(o) !== -1)
        throw Error("Circular reference detected in " + d);
      n.push(o), utils$6.forEach(o, function(w, S) {
        if (!utils$6.isUndefined(w)) {
          var A = d ? d + "." + S : S, B;
          if (w && !d && typeof w == "object") {
            if (utils$6.endsWith(S, "{}"))
              w = JSON.stringify(w);
            else if (utils$6.endsWith(S, "[]") && (B = utils$6.toArray(w))) {
              B.forEach(function(P) {
                !utils$6.isUndefined(P) && e.append(A, a(P));
              });
              return;
            }
          }
          c(w, A);
        }
      }), n.pop();
    } else
      e.append(d, a(o));
  }
  return c(t), e;
}
var toFormData_1 = toFormData$1, settle, hasRequiredSettle;
function requireSettle() {
  if (hasRequiredSettle)
    return settle;
  hasRequiredSettle = 1;
  var t = AxiosError_1;
  return settle = function(n, a, c) {
    var o = c.config.validateStatus;
    !c.status || !o || o(c.status) ? n(c) : a(new t(
      "Request failed with status code " + c.status,
      [t.ERR_BAD_REQUEST, t.ERR_BAD_RESPONSE][Math.floor(c.status / 100) - 4],
      c.config,
      c.request,
      c
    ));
  }, settle;
}
var cookies, hasRequiredCookies;
function requireCookies() {
  if (hasRequiredCookies)
    return cookies;
  hasRequiredCookies = 1;
  var t = utils$b;
  return cookies = t.isStandardBrowserEnv() ? (
    // Standard browser envs support document.cookie
    /* @__PURE__ */ function() {
      return {
        write: function(a, c, o, d, m, w) {
          var S = [];
          S.push(a + "=" + encodeURIComponent(c)), t.isNumber(o) && S.push("expires=" + new Date(o).toGMTString()), t.isString(d) && S.push("path=" + d), t.isString(m) && S.push("domain=" + m), w === !0 && S.push("secure"), document.cookie = S.join("; ");
        },
        read: function(a) {
          var c = document.cookie.match(new RegExp("(^|;\\s*)(" + a + ")=([^;]*)"));
          return c ? decodeURIComponent(c[3]) : null;
        },
        remove: function(a) {
          this.write(a, "", Date.now() - 864e5);
        }
      };
    }()
  ) : (
    // Non standard browser env (web workers, react-native) lack needed support.
    /* @__PURE__ */ function() {
      return {
        write: function() {
        },
        read: function() {
          return null;
        },
        remove: function() {
        }
      };
    }()
  ), cookies;
}
var isAbsoluteURL$1 = function t(e) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(e);
}, combineURLs$1 = function t(e, n) {
  return n ? e.replace(/\/+$/, "") + "/" + n.replace(/^\/+/, "") : e;
}, isAbsoluteURL = isAbsoluteURL$1, combineURLs = combineURLs$1, buildFullPath$1 = function t(e, n) {
  return e && !isAbsoluteURL(n) ? combineURLs(e, n) : n;
}, parseHeaders, hasRequiredParseHeaders;
function requireParseHeaders() {
  if (hasRequiredParseHeaders)
    return parseHeaders;
  hasRequiredParseHeaders = 1;
  var t = utils$b, e = [
    "age",
    "authorization",
    "content-length",
    "content-type",
    "etag",
    "expires",
    "from",
    "host",
    "if-modified-since",
    "if-unmodified-since",
    "last-modified",
    "location",
    "max-forwards",
    "proxy-authorization",
    "referer",
    "retry-after",
    "user-agent"
  ];
  return parseHeaders = function(a) {
    var c = {}, o, d, m;
    return a && t.forEach(a.split(`
`), function(S) {
      if (m = S.indexOf(":"), o = t.trim(S.substr(0, m)).toLowerCase(), d = t.trim(S.substr(m + 1)), o) {
        if (c[o] && e.indexOf(o) >= 0)
          return;
        o === "set-cookie" ? c[o] = (c[o] ? c[o] : []).concat([d]) : c[o] = c[o] ? c[o] + ", " + d : d;
      }
    }), c;
  }, parseHeaders;
}
var isURLSameOrigin, hasRequiredIsURLSameOrigin;
function requireIsURLSameOrigin() {
  if (hasRequiredIsURLSameOrigin)
    return isURLSameOrigin;
  hasRequiredIsURLSameOrigin = 1;
  var t = utils$b;
  return isURLSameOrigin = t.isStandardBrowserEnv() ? (
    // Standard browser envs have full support of the APIs needed to test
    // whether the request URL is of the same origin as current location.
    function() {
      var n = /(msie|trident)/i.test(navigator.userAgent), a = document.createElement("a"), c;
      function o(d) {
        var m = d;
        return n && (a.setAttribute("href", m), m = a.href), a.setAttribute("href", m), {
          href: a.href,
          protocol: a.protocol ? a.protocol.replace(/:$/, "") : "",
          host: a.host,
          search: a.search ? a.search.replace(/^\?/, "") : "",
          hash: a.hash ? a.hash.replace(/^#/, "") : "",
          hostname: a.hostname,
          port: a.port,
          pathname: a.pathname.charAt(0) === "/" ? a.pathname : "/" + a.pathname
        };
      }
      return c = o(window.location.href), function(m) {
        var w = t.isString(m) ? o(m) : m;
        return w.protocol === c.protocol && w.host === c.host;
      };
    }()
  ) : (
    // Non standard browser envs (web workers, react-native) lack needed support.
    /* @__PURE__ */ function() {
      return function() {
        return !0;
      };
    }()
  ), isURLSameOrigin;
}
var CanceledError_1, hasRequiredCanceledError;
function requireCanceledError() {
  if (hasRequiredCanceledError)
    return CanceledError_1;
  hasRequiredCanceledError = 1;
  var t = AxiosError_1, e = utils$b;
  function n(a) {
    t.call(this, a ?? "canceled", t.ERR_CANCELED), this.name = "CanceledError";
  }
  return e.inherits(n, t, {
    __CANCEL__: !0
  }), CanceledError_1 = n, CanceledError_1;
}
var parseProtocol, hasRequiredParseProtocol;
function requireParseProtocol() {
  return hasRequiredParseProtocol || (hasRequiredParseProtocol = 1, parseProtocol = function(e) {
    var n = /^([-+\w]{1,25})(:?\/\/|:)/.exec(e);
    return n && n[1] || "";
  }), parseProtocol;
}
var xhr, hasRequiredXhr;
function requireXhr() {
  if (hasRequiredXhr)
    return xhr;
  hasRequiredXhr = 1;
  var t = utils$b, e = requireSettle(), n = requireCookies(), a = buildURL$1, c = buildFullPath$1, o = requireParseHeaders(), d = requireIsURLSameOrigin(), m = transitional, w = AxiosError_1, S = requireCanceledError(), A = requireParseProtocol();
  return xhr = function(P) {
    return new Promise(function(O, L) {
      var C = P.data, z = P.headers, q = P.responseType, Z;
      function X() {
        P.cancelToken && P.cancelToken.unsubscribe(Z), P.signal && P.signal.removeEventListener("abort", Z);
      }
      t.isFormData(C) && t.isStandardBrowserEnv() && delete z["Content-Type"];
      var ie = new XMLHttpRequest();
      if (P.auth) {
        var fe = P.auth.username || "", ye = P.auth.password ? unescape(encodeURIComponent(P.auth.password)) : "";
        z.Authorization = "Basic " + btoa(fe + ":" + ye);
      }
      var j = c(P.baseURL, P.url);
      ie.open(P.method.toUpperCase(), a(j, P.params, P.paramsSerializer), !0), ie.timeout = P.timeout;
      function V() {
        if (ie) {
          var u = "getAllResponseHeaders" in ie ? o(ie.getAllResponseHeaders()) : null, h = !q || q === "text" || q === "json" ? ie.responseText : ie.response, p = {
            data: h,
            status: ie.status,
            statusText: ie.statusText,
            headers: u,
            config: P,
            request: ie
          };
          e(function(v) {
            O(v), X();
          }, function(v) {
            L(v), X();
          }, p), ie = null;
        }
      }
      if ("onloadend" in ie ? ie.onloadend = V : ie.onreadystatechange = function() {
        !ie || ie.readyState !== 4 || ie.status === 0 && !(ie.responseURL && ie.responseURL.indexOf("file:") === 0) || setTimeout(V);
      }, ie.onabort = function() {
        ie && (L(new w("Request aborted", w.ECONNABORTED, P, ie)), ie = null);
      }, ie.onerror = function() {
        L(new w("Network Error", w.ERR_NETWORK, P, ie, ie)), ie = null;
      }, ie.ontimeout = function() {
        var h = P.timeout ? "timeout of " + P.timeout + "ms exceeded" : "timeout exceeded", p = P.transitional || m;
        P.timeoutErrorMessage && (h = P.timeoutErrorMessage), L(new w(
          h,
          p.clarifyTimeoutError ? w.ETIMEDOUT : w.ECONNABORTED,
          P,
          ie
        )), ie = null;
      }, t.isStandardBrowserEnv()) {
        var ae = (P.withCredentials || d(j)) && P.xsrfCookieName ? n.read(P.xsrfCookieName) : void 0;
        ae && (z[P.xsrfHeaderName] = ae);
      }
      "setRequestHeader" in ie && t.forEach(z, function(h, p) {
        typeof C > "u" && p.toLowerCase() === "content-type" ? delete z[p] : ie.setRequestHeader(p, h);
      }), t.isUndefined(P.withCredentials) || (ie.withCredentials = !!P.withCredentials), q && q !== "json" && (ie.responseType = P.responseType), typeof P.onDownloadProgress == "function" && ie.addEventListener("progress", P.onDownloadProgress), typeof P.onUploadProgress == "function" && ie.upload && ie.upload.addEventListener("progress", P.onUploadProgress), (P.cancelToken || P.signal) && (Z = function(u) {
        ie && (L(!u || u && u.type ? new S() : u), ie.abort(), ie = null);
      }, P.cancelToken && P.cancelToken.subscribe(Z), P.signal && (P.signal.aborted ? Z() : P.signal.addEventListener("abort", Z))), C || (C = null);
      var _ = A(j);
      if (_ && ["http", "https", "file"].indexOf(_) === -1) {
        L(new w("Unsupported protocol " + _ + ":", w.ERR_BAD_REQUEST, P));
        return;
      }
      ie.send(C);
    });
  }, xhr;
}
var _null, hasRequired_null;
function require_null() {
  return hasRequired_null || (hasRequired_null = 1, _null = null), _null;
}
var utils$5 = utils$b, normalizeHeaderName = normalizeHeaderName$1, AxiosError$1 = AxiosError_1, transitionalDefaults = transitional, toFormData = toFormData_1, DEFAULT_CONTENT_TYPE = {
  "Content-Type": "application/x-www-form-urlencoded"
};
function setContentTypeIfUnset(t, e) {
  !utils$5.isUndefined(t) && utils$5.isUndefined(t["Content-Type"]) && (t["Content-Type"] = e);
}
function getDefaultAdapter() {
  var t;
  return (typeof XMLHttpRequest < "u" || typeof process$1 < "u" && Object.prototype.toString.call(process$1) === "[object process]") && (t = requireXhr()), t;
}
function stringifySafely(t, e, n) {
  if (utils$5.isString(t))
    try {
      return (e || JSON.parse)(t), utils$5.trim(t);
    } catch (a) {
      if (a.name !== "SyntaxError")
        throw a;
    }
  return (n || JSON.stringify)(t);
}
var defaults$3 = {
  transitional: transitionalDefaults,
  adapter: getDefaultAdapter(),
  transformRequest: [function t(e, n) {
    if (normalizeHeaderName(n, "Accept"), normalizeHeaderName(n, "Content-Type"), utils$5.isFormData(e) || utils$5.isArrayBuffer(e) || utils$5.isBuffer(e) || utils$5.isStream(e) || utils$5.isFile(e) || utils$5.isBlob(e))
      return e;
    if (utils$5.isArrayBufferView(e))
      return e.buffer;
    if (utils$5.isURLSearchParams(e))
      return setContentTypeIfUnset(n, "application/x-www-form-urlencoded;charset=utf-8"), e.toString();
    var a = utils$5.isObject(e), c = n && n["Content-Type"], o;
    if ((o = utils$5.isFileList(e)) || a && c === "multipart/form-data") {
      var d = this.env && this.env.FormData;
      return toFormData(o ? { "files[]": e } : e, d && new d());
    } else if (a || c === "application/json")
      return setContentTypeIfUnset(n, "application/json"), stringifySafely(e);
    return e;
  }],
  transformResponse: [function t(e) {
    var n = this.transitional || defaults$3.transitional, a = n && n.silentJSONParsing, c = n && n.forcedJSONParsing, o = !a && this.responseType === "json";
    if (o || c && utils$5.isString(e) && e.length)
      try {
        return JSON.parse(e);
      } catch (d) {
        if (o)
          throw d.name === "SyntaxError" ? AxiosError$1.from(d, AxiosError$1.ERR_BAD_RESPONSE, this, null, this.response) : d;
      }
    return e;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: require_null()
  },
  validateStatus: function t(e) {
    return e >= 200 && e < 300;
  },
  headers: {
    common: {
      Accept: "application/json, text/plain, */*"
    }
  }
};
utils$5.forEach(["delete", "get", "head"], function t(e) {
  defaults$3.headers[e] = {};
});
utils$5.forEach(["post", "put", "patch"], function t(e) {
  defaults$3.headers[e] = utils$5.merge(DEFAULT_CONTENT_TYPE);
});
var defaults_1 = defaults$3, utils$4 = utils$b, defaults$2 = defaults_1, transformData$1 = function t(e, n, a) {
  var c = this || defaults$2;
  return utils$4.forEach(a, function(d) {
    e = d.call(c, e, n);
  }), e;
}, isCancel$1, hasRequiredIsCancel;
function requireIsCancel() {
  return hasRequiredIsCancel || (hasRequiredIsCancel = 1, isCancel$1 = function(e) {
    return !!(e && e.__CANCEL__);
  }), isCancel$1;
}
var utils$3 = utils$b, transformData = transformData$1, isCancel = requireIsCancel(), defaults$1 = defaults_1, CanceledError = requireCanceledError();
function throwIfCancellationRequested(t) {
  if (t.cancelToken && t.cancelToken.throwIfRequested(), t.signal && t.signal.aborted)
    throw new CanceledError();
}
var dispatchRequest$1 = function t(e) {
  throwIfCancellationRequested(e), e.headers = e.headers || {}, e.data = transformData.call(
    e,
    e.data,
    e.headers,
    e.transformRequest
  ), e.headers = utils$3.merge(
    e.headers.common || {},
    e.headers[e.method] || {},
    e.headers
  ), utils$3.forEach(
    ["delete", "get", "head", "post", "put", "patch", "common"],
    function(c) {
      delete e.headers[c];
    }
  );
  var n = e.adapter || defaults$1.adapter;
  return n(e).then(function(c) {
    return throwIfCancellationRequested(e), c.data = transformData.call(
      e,
      c.data,
      c.headers,
      e.transformResponse
    ), c;
  }, function(c) {
    return isCancel(c) || (throwIfCancellationRequested(e), c && c.response && (c.response.data = transformData.call(
      e,
      c.response.data,
      c.response.headers,
      e.transformResponse
    ))), Promise.reject(c);
  });
}, utils$2 = utils$b, mergeConfig$2 = function t(e, n) {
  n = n || {};
  var a = {};
  function c(A, B) {
    return utils$2.isPlainObject(A) && utils$2.isPlainObject(B) ? utils$2.merge(A, B) : utils$2.isPlainObject(B) ? utils$2.merge({}, B) : utils$2.isArray(B) ? B.slice() : B;
  }
  function o(A) {
    if (utils$2.isUndefined(n[A])) {
      if (!utils$2.isUndefined(e[A]))
        return c(void 0, e[A]);
    } else
      return c(e[A], n[A]);
  }
  function d(A) {
    if (!utils$2.isUndefined(n[A]))
      return c(void 0, n[A]);
  }
  function m(A) {
    if (utils$2.isUndefined(n[A])) {
      if (!utils$2.isUndefined(e[A]))
        return c(void 0, e[A]);
    } else
      return c(void 0, n[A]);
  }
  function w(A) {
    if (A in n)
      return c(e[A], n[A]);
    if (A in e)
      return c(void 0, e[A]);
  }
  var S = {
    url: d,
    method: d,
    data: d,
    baseURL: m,
    transformRequest: m,
    transformResponse: m,
    paramsSerializer: m,
    timeout: m,
    timeoutMessage: m,
    withCredentials: m,
    adapter: m,
    responseType: m,
    xsrfCookieName: m,
    xsrfHeaderName: m,
    onUploadProgress: m,
    onDownloadProgress: m,
    decompress: m,
    maxContentLength: m,
    maxBodyLength: m,
    beforeRedirect: m,
    transport: m,
    httpAgent: m,
    httpsAgent: m,
    cancelToken: m,
    socketPath: m,
    responseEncoding: m,
    validateStatus: w
  };
  return utils$2.forEach(Object.keys(e).concat(Object.keys(n)), function(B) {
    var P = S[B] || o, I = P(B);
    utils$2.isUndefined(I) && P !== w || (a[B] = I);
  }), a;
}, data, hasRequiredData;
function requireData() {
  return hasRequiredData || (hasRequiredData = 1, data = {
    version: "0.27.2"
  }), data;
}
var VERSION$1 = requireData().version, AxiosError = AxiosError_1, validators$1 = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach(function(t, e) {
  validators$1[t] = function(a) {
    return typeof a === t || "a" + (e < 1 ? "n " : " ") + t;
  };
});
var deprecatedWarnings = {};
validators$1.transitional = function t(e, n, a) {
  function c(o, d) {
    return "[Axios v" + VERSION$1 + "] Transitional option '" + o + "'" + d + (a ? ". " + a : "");
  }
  return function(o, d, m) {
    if (e === !1)
      throw new AxiosError(
        c(d, " has been removed" + (n ? " in " + n : "")),
        AxiosError.ERR_DEPRECATED
      );
    return n && !deprecatedWarnings[d] && (deprecatedWarnings[d] = !0, console.warn(
      c(
        d,
        " has been deprecated since v" + n + " and will be removed in the near future"
      )
    )), e ? e(o, d, m) : !0;
  };
};
function assertOptions(t, e, n) {
  if (typeof t != "object")
    throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
  for (var a = Object.keys(t), c = a.length; c-- > 0; ) {
    var o = a[c], d = e[o];
    if (d) {
      var m = t[o], w = m === void 0 || d(m, o, t);
      if (w !== !0)
        throw new AxiosError("option " + o + " must be " + w, AxiosError.ERR_BAD_OPTION_VALUE);
      continue;
    }
    if (n !== !0)
      throw new AxiosError("Unknown option " + o, AxiosError.ERR_BAD_OPTION);
  }
}
var validator$1 = {
  assertOptions,
  validators: validators$1
}, utils$1 = utils$b, buildURL = buildURL$1, InterceptorManager = InterceptorManager_1, dispatchRequest = dispatchRequest$1, mergeConfig$1 = mergeConfig$2, buildFullPath = buildFullPath$1, validator = validator$1, validators = validator.validators;
function Axios$1(t) {
  this.defaults = t, this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}
Axios$1.prototype.request = function t(e, n) {
  typeof e == "string" ? (n = n || {}, n.url = e) : n = e || {}, n = mergeConfig$1(this.defaults, n), n.method ? n.method = n.method.toLowerCase() : this.defaults.method ? n.method = this.defaults.method.toLowerCase() : n.method = "get";
  var a = n.transitional;
  a !== void 0 && validator.assertOptions(a, {
    silentJSONParsing: validators.transitional(validators.boolean),
    forcedJSONParsing: validators.transitional(validators.boolean),
    clarifyTimeoutError: validators.transitional(validators.boolean)
  }, !1);
  var c = [], o = !0;
  this.interceptors.request.forEach(function(I) {
    typeof I.runWhen == "function" && I.runWhen(n) === !1 || (o = o && I.synchronous, c.unshift(I.fulfilled, I.rejected));
  });
  var d = [];
  this.interceptors.response.forEach(function(I) {
    d.push(I.fulfilled, I.rejected);
  });
  var m;
  if (!o) {
    var w = [dispatchRequest, void 0];
    for (Array.prototype.unshift.apply(w, c), w = w.concat(d), m = Promise.resolve(n); w.length; )
      m = m.then(w.shift(), w.shift());
    return m;
  }
  for (var S = n; c.length; ) {
    var A = c.shift(), B = c.shift();
    try {
      S = A(S);
    } catch (P) {
      B(P);
      break;
    }
  }
  try {
    m = dispatchRequest(S);
  } catch (P) {
    return Promise.reject(P);
  }
  for (; d.length; )
    m = m.then(d.shift(), d.shift());
  return m;
};
Axios$1.prototype.getUri = function t(e) {
  e = mergeConfig$1(this.defaults, e);
  var n = buildFullPath(e.baseURL, e.url);
  return buildURL(n, e.params, e.paramsSerializer);
};
utils$1.forEach(["delete", "get", "head", "options"], function t(e) {
  Axios$1.prototype[e] = function(n, a) {
    return this.request(mergeConfig$1(a || {}, {
      method: e,
      url: n,
      data: (a || {}).data
    }));
  };
});
utils$1.forEach(["post", "put", "patch"], function t(e) {
  function n(a) {
    return function(o, d, m) {
      return this.request(mergeConfig$1(m || {}, {
        method: e,
        headers: a ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url: o,
        data: d
      }));
    };
  }
  Axios$1.prototype[e] = n(), Axios$1.prototype[e + "Form"] = n(!0);
});
var Axios_1 = Axios$1, CancelToken_1, hasRequiredCancelToken;
function requireCancelToken() {
  if (hasRequiredCancelToken)
    return CancelToken_1;
  hasRequiredCancelToken = 1;
  var t = requireCanceledError();
  function e(n) {
    if (typeof n != "function")
      throw new TypeError("executor must be a function.");
    var a;
    this.promise = new Promise(function(d) {
      a = d;
    });
    var c = this;
    this.promise.then(function(o) {
      if (c._listeners) {
        var d, m = c._listeners.length;
        for (d = 0; d < m; d++)
          c._listeners[d](o);
        c._listeners = null;
      }
    }), this.promise.then = function(o) {
      var d, m = new Promise(function(w) {
        c.subscribe(w), d = w;
      }).then(o);
      return m.cancel = function() {
        c.unsubscribe(d);
      }, m;
    }, n(function(d) {
      c.reason || (c.reason = new t(d), a(c.reason));
    });
  }
  return e.prototype.throwIfRequested = function() {
    if (this.reason)
      throw this.reason;
  }, e.prototype.subscribe = function(a) {
    if (this.reason) {
      a(this.reason);
      return;
    }
    this._listeners ? this._listeners.push(a) : this._listeners = [a];
  }, e.prototype.unsubscribe = function(a) {
    if (this._listeners) {
      var c = this._listeners.indexOf(a);
      c !== -1 && this._listeners.splice(c, 1);
    }
  }, e.source = function() {
    var a, c = new e(function(d) {
      a = d;
    });
    return {
      token: c,
      cancel: a
    };
  }, CancelToken_1 = e, CancelToken_1;
}
var spread, hasRequiredSpread;
function requireSpread() {
  return hasRequiredSpread || (hasRequiredSpread = 1, spread = function(e) {
    return function(a) {
      return e.apply(null, a);
    };
  }), spread;
}
var isAxiosError, hasRequiredIsAxiosError;
function requireIsAxiosError() {
  if (hasRequiredIsAxiosError)
    return isAxiosError;
  hasRequiredIsAxiosError = 1;
  var t = utils$b;
  return isAxiosError = function(n) {
    return t.isObject(n) && n.isAxiosError === !0;
  }, isAxiosError;
}
var utils = utils$b, bind = bind$2, Axios = Axios_1, mergeConfig = mergeConfig$2, defaults = defaults_1;
function createInstance(t) {
  var e = new Axios(t), n = bind(Axios.prototype.request, e);
  return utils.extend(n, Axios.prototype, e), utils.extend(n, e), n.create = function(c) {
    return createInstance(mergeConfig(t, c));
  }, n;
}
var axios$1 = createInstance(defaults);
axios$1.Axios = Axios;
axios$1.CanceledError = requireCanceledError();
axios$1.CancelToken = requireCancelToken();
axios$1.isCancel = requireIsCancel();
axios$1.VERSION = requireData().version;
axios$1.toFormData = toFormData_1;
axios$1.AxiosError = AxiosError_1;
axios$1.Cancel = axios$1.CanceledError;
axios$1.all = function t(e) {
  return Promise.all(e);
};
axios$1.spread = requireSpread();
axios$1.isAxiosError = requireIsAxiosError();
axios$2.exports = axios$1;
axios$2.exports.default = axios$1;
var axiosExports = axios$2.exports, axios = axiosExports;
const axios2 = /* @__PURE__ */ getDefaultExportFromCjs$2(axios);
var browser = typeof self == "object" ? self.FormData : window.FormData;
const FormData$1 = /* @__PURE__ */ getDefaultExportFromCjs$2(browser);
var __defProp = Object.defineProperty, __getOwnPropDesc = Object.getOwnPropertyDescriptor, __export = (t, e) => {
  for (var n in e)
    __defProp(t, n, { get: e[n], enumerable: !0 });
}, __decorateClass = (t, e, n, a) => {
  for (var c = a > 1 ? void 0 : a ? __getOwnPropDesc(e, n) : e, o = t.length - 1, d; o >= 0; o--)
    (d = t[o]) && (c = (a ? d(e, n, c) : d(c)) || c);
  return a && c && __defProp(e, n, c), c;
}, pathRegex = /^m(\/[0-9]+')+$/, replaceDerive = (t) => t.replace("'", ""), HMAC_KEY = "ed25519 seed", HARDENED_OFFSET = 2147483648, getMasterKeyFromSeed = (t) => {
  const n = hmac.create(sha512, HMAC_KEY).update(hexToBytes(t)).digest(), a = n.slice(0, 32), c = n.slice(32);
  return {
    key: a,
    chainCode: c
  };
}, CKDPriv = ({ key: t, chainCode: e }, n) => {
  const a = new ArrayBuffer(4);
  new DataView(a).setUint32(0, n);
  const c = new Uint8Array(a), o = new Uint8Array([0]), d = new Uint8Array([...o, ...t, ...c]), m = hmac.create(sha512, e).update(d).digest(), w = m.slice(0, 32), S = m.slice(32);
  return {
    key: w,
    chainCode: S
  };
}, isValidPath = (t) => pathRegex.test(t) ? !t.split("/").slice(1).map(replaceDerive).some(Number.isNaN) : !1, derivePath = (t, e, n = HARDENED_OFFSET) => {
  if (!isValidPath(t))
    throw new Error("Invalid derivation path");
  const { key: a, chainCode: c } = getMasterKeyFromSeed(e);
  return t.split("/").slice(1).map(replaceDerive).map((d) => parseInt(d, 10)).reduce((d, m) => CKDPriv(d, m + n), { key: a, chainCode: c });
};
async function sleep(t) {
  return new Promise((e) => {
    setTimeout(e, t);
  });
}
var DEFAULT_VERSION_PATH_BASE = "/v1";
function fixNodeUrl(t) {
  let e = `${t}`;
  return e.endsWith("/") && (e = e.substring(0, e.length - 1)), e.endsWith(DEFAULT_VERSION_PATH_BASE) || (e = `${e}${DEFAULT_VERSION_PATH_BASE}`), e;
}
var DEFAULT_MAX_GAS_AMOUNT = 2e5, DEFAULT_TXN_EXP_SEC_FROM_NOW = 20, DEFAULT_TXN_TIMEOUT_SEC = 20, APTOS_COIN = "0x1::aptos_coin::AptosCoin";
function Memoize(t) {
  let e, n, a;
  return typeof t == "object" ? (e = t.hashFunction, n = t.ttlMs, a = t.tags) : e = t, (c, o, d) => {
    if (d.value != null)
      d.value = getNewFunction(d.value, e, n, a);
    else if (d.get != null)
      d.get = getNewFunction(d.get, e, n, a);
    else
      throw new Error("Only put a Memoize() decorator on a method or get accessor.");
  };
}
function MemoizeExpiring(t, e) {
  return Memoize({
    ttlMs: t,
    hashFunction: e
  });
}
var clearCacheTagsMap = /* @__PURE__ */ new Map();
function clear(t) {
  const e = /* @__PURE__ */ new Set();
  for (const n of t) {
    const a = clearCacheTagsMap.get(n);
    if (a)
      for (const c of a)
        e.has(c) || (c.clear(), e.add(c));
  }
  return e.size;
}
function getNewFunction(t, e, n = 0, a) {
  const c = Symbol("__memoized_map__");
  return function(...o) {
    let d;
    const m = this;
    m.hasOwnProperty(c) || Object.defineProperty(m, c, {
      configurable: !1,
      enumerable: !1,
      writable: !1,
      value: /* @__PURE__ */ new Map()
    });
    const w = m[c];
    if (Array.isArray(a))
      for (const S of a)
        clearCacheTagsMap.has(S) ? clearCacheTagsMap.get(S).push(w) : clearCacheTagsMap.set(S, [w]);
    if (e || o.length > 0 || n > 0) {
      let S;
      e === !0 ? S = o.map((P) => P.toString()).join("!") : e ? S = e.apply(m, o) : S = o[0];
      const A = `${S}__timestamp`;
      let B = !1;
      if (n > 0)
        if (!w.has(A))
          B = !0;
        else {
          const P = w.get(A);
          B = Date.now() - P > n;
        }
      w.has(S) && !B ? d = w.get(S) : (d = t.apply(m, o), w.set(S, d), n > 0 && w.set(A, Date.now()));
    } else {
      const S = m;
      w.has(S) ? d = w.get(S) : (d = t.apply(m, o), w.set(S, d));
    }
    return d;
  };
}
var HexString = class {
  static fromBuffer(t) {
    return HexString.fromUint8Array(t);
  }
  static fromUint8Array(t) {
    return new HexString(bytesToHex(t));
  }
  static ensure(t) {
    return typeof t == "string" ? new HexString(t) : t;
  }
  constructor(t) {
    t.startsWith("0x") ? this.hexString = t : this.hexString = `0x${t}`;
  }
  hex() {
    return this.hexString;
  }
  noPrefix() {
    return this.hexString.slice(2);
  }
  toString() {
    return this.hex();
  }
  toShortString() {
    return `0x${this.hexString.replace(/^0x0*/, "")}`;
  }
  toUint8Array() {
    return Uint8Array.from(hexToBytes(this.noPrefix()));
  }
};
async function paginateWithCursor(t, e, n, a) {
  var c;
  const o = [];
  let d;
  for (; ; ) {
    const m = await t(
      HexString.ensure(e).hex(),
      (c = a?.ledgerVersion) == null ? void 0 : c.toString(),
      d,
      n
    );
    if (d = m.__headers["x-aptos-cursor"], delete m.__headers, o.push(...m), d == null)
      break;
  }
  return o;
}
var NetworkToIndexerAPI = {
  mainnet: "https://indexer.mainnet.aptoslabs.com/v1/graphql",
  testnet: "https://indexer-testnet.staging.gcp.aptosdev.com/v1/graphql",
  devnet: "https://indexer-devnet.staging.gcp.aptosdev.com/v1/graphql"
}, NetworkToNodeAPI = {
  mainnet: "https://fullnode.mainnet.aptoslabs.com/v1",
  testnet: "https://fullnode.testnet.aptoslabs.com/v1",
  devnet: "https://fullnode.devnet.aptoslabs.com/v1"
}, aptos_types_exports = {};
__export(aptos_types_exports, {
  AccountAddress: () => AccountAddress,
  AccountAuthenticator: () => AccountAuthenticator,
  AccountAuthenticatorEd25519: () => AccountAuthenticatorEd25519,
  AccountAuthenticatorMultiEd25519: () => AccountAuthenticatorMultiEd25519,
  ArgumentABI: () => ArgumentABI,
  AuthenticationKey: () => AuthenticationKey,
  ChainId: () => ChainId,
  ChangeSet: () => ChangeSet,
  Ed25519PublicKey: () => Ed25519PublicKey,
  Ed25519Signature: () => Ed25519Signature,
  EntryFunction: () => EntryFunction,
  EntryFunctionABI: () => EntryFunctionABI,
  Identifier: () => Identifier,
  Module: () => Module,
  ModuleId: () => ModuleId,
  MultiAgentRawTransaction: () => MultiAgentRawTransaction,
  MultiEd25519PublicKey: () => MultiEd25519PublicKey,
  MultiEd25519Signature: () => MultiEd25519Signature,
  MultiSig: () => MultiSig,
  MultiSigTransactionPayload: () => MultiSigTransactionPayload,
  RawTransaction: () => RawTransaction,
  RawTransactionWithData: () => RawTransactionWithData,
  RotationProofChallenge: () => RotationProofChallenge,
  Script: () => Script,
  ScriptABI: () => ScriptABI,
  SignedTransaction: () => SignedTransaction,
  StructTag: () => StructTag,
  Transaction: () => Transaction,
  TransactionArgument: () => TransactionArgument,
  TransactionArgumentAddress: () => TransactionArgumentAddress,
  TransactionArgumentBool: () => TransactionArgumentBool,
  TransactionArgumentU128: () => TransactionArgumentU128,
  TransactionArgumentU16: () => TransactionArgumentU16,
  TransactionArgumentU256: () => TransactionArgumentU256,
  TransactionArgumentU32: () => TransactionArgumentU32,
  TransactionArgumentU64: () => TransactionArgumentU64,
  TransactionArgumentU8: () => TransactionArgumentU8,
  TransactionArgumentU8Vector: () => TransactionArgumentU8Vector,
  TransactionAuthenticator: () => TransactionAuthenticator,
  TransactionAuthenticatorEd25519: () => TransactionAuthenticatorEd25519,
  TransactionAuthenticatorMultiAgent: () => TransactionAuthenticatorMultiAgent,
  TransactionAuthenticatorMultiEd25519: () => TransactionAuthenticatorMultiEd25519,
  TransactionPayload: () => TransactionPayload,
  TransactionPayloadEntryFunction: () => TransactionPayloadEntryFunction,
  TransactionPayloadMultisig: () => TransactionPayloadMultisig,
  TransactionPayloadScript: () => TransactionPayloadScript,
  TransactionScriptABI: () => TransactionScriptABI,
  TypeArgumentABI: () => TypeArgumentABI,
  TypeTag: () => TypeTag,
  TypeTagAddress: () => TypeTagAddress,
  TypeTagBool: () => TypeTagBool,
  TypeTagParser: () => TypeTagParser,
  TypeTagParserError: () => TypeTagParserError,
  TypeTagSigner: () => TypeTagSigner,
  TypeTagStruct: () => TypeTagStruct,
  TypeTagU128: () => TypeTagU128,
  TypeTagU16: () => TypeTagU16,
  TypeTagU256: () => TypeTagU256,
  TypeTagU32: () => TypeTagU32,
  TypeTagU64: () => TypeTagU64,
  TypeTagU8: () => TypeTagU8,
  TypeTagVector: () => TypeTagVector,
  UserTransaction: () => UserTransaction,
  WriteSet: () => WriteSet,
  stringStructTag: () => stringStructTag
});
var bcs_exports = {};
__export(bcs_exports, {
  Deserializer: () => Deserializer,
  Serializer: () => Serializer,
  bcsSerializeBool: () => bcsSerializeBool,
  bcsSerializeBytes: () => bcsSerializeBytes,
  bcsSerializeFixedBytes: () => bcsSerializeFixedBytes,
  bcsSerializeStr: () => bcsSerializeStr,
  bcsSerializeU128: () => bcsSerializeU128,
  bcsSerializeU16: () => bcsSerializeU16,
  bcsSerializeU32: () => bcsSerializeU32,
  bcsSerializeU8: () => bcsSerializeU8,
  bcsSerializeUint64: () => bcsSerializeUint64,
  bcsToBytes: () => bcsToBytes,
  deserializeVector: () => deserializeVector,
  serializeVector: () => serializeVector,
  serializeVectorWithFunc: () => serializeVectorWithFunc
});
var MAX_U8_NUMBER = 2 ** 8 - 1, MAX_U16_NUMBER = 2 ** 16 - 1, MAX_U32_NUMBER = 2 ** 32 - 1, MAX_U64_BIG_INT = BigInt(2 ** 64) - BigInt(1), MAX_U128_BIG_INT = BigInt(2 ** 128) - BigInt(1), MAX_U256_BIG_INT = BigInt(2 ** 256) - BigInt(1), Serializer = class {
  constructor() {
    this.buffer = new ArrayBuffer(64), this.offset = 0;
  }
  ensureBufferWillHandleSize(t) {
    for (; this.buffer.byteLength < this.offset + t; ) {
      const e = new ArrayBuffer(this.buffer.byteLength * 2);
      new Uint8Array(e).set(new Uint8Array(this.buffer)), this.buffer = e;
    }
  }
  serialize(t) {
    this.ensureBufferWillHandleSize(t.length), new Uint8Array(this.buffer, this.offset).set(t), this.offset += t.length;
  }
  serializeWithFunction(t, e, n) {
    this.ensureBufferWillHandleSize(e);
    const a = new DataView(this.buffer, this.offset);
    t.apply(a, [0, n, !0]), this.offset += e;
  }
  serializeStr(t) {
    const e = new TextEncoder();
    this.serializeBytes(e.encode(t));
  }
  serializeBytes(t) {
    this.serializeU32AsUleb128(t.length), this.serialize(t);
  }
  serializeFixedBytes(t) {
    this.serialize(t);
  }
  serializeBool(t) {
    if (typeof t != "boolean")
      throw new Error("Value needs to be a boolean");
    const e = t ? 1 : 0;
    this.serialize(new Uint8Array([e]));
  }
  serializeU8(t) {
    this.serialize(new Uint8Array([t]));
  }
  serializeU16(t) {
    this.serializeWithFunction(DataView.prototype.setUint16, 2, t);
  }
  serializeU32(t) {
    this.serializeWithFunction(DataView.prototype.setUint32, 4, t);
  }
  serializeU64(t) {
    const e = BigInt(t.toString()) & BigInt(MAX_U32_NUMBER), n = BigInt(t.toString()) >> BigInt(32);
    this.serializeU32(Number(e)), this.serializeU32(Number(n));
  }
  serializeU128(t) {
    const e = BigInt(t.toString()) & MAX_U64_BIG_INT, n = BigInt(t.toString()) >> BigInt(64);
    this.serializeU64(e), this.serializeU64(n);
  }
  serializeU256(t) {
    const e = BigInt(t.toString()) & MAX_U128_BIG_INT, n = BigInt(t.toString()) >> BigInt(128);
    this.serializeU128(e), this.serializeU128(n);
  }
  serializeU32AsUleb128(t) {
    let e = t;
    const n = [];
    for (; e >>> 7; )
      n.push(e & 127 | 128), e >>>= 7;
    n.push(e), this.serialize(new Uint8Array(n));
  }
  getBytes() {
    return new Uint8Array(this.buffer).slice(0, this.offset);
  }
};
__decorateClass([
  checkNumberRange(0, MAX_U8_NUMBER)
], Serializer.prototype, "serializeU8", 1);
__decorateClass([
  checkNumberRange(0, MAX_U16_NUMBER)
], Serializer.prototype, "serializeU16", 1);
__decorateClass([
  checkNumberRange(0, MAX_U32_NUMBER)
], Serializer.prototype, "serializeU32", 1);
__decorateClass([
  checkNumberRange(BigInt(0), MAX_U64_BIG_INT)
], Serializer.prototype, "serializeU64", 1);
__decorateClass([
  checkNumberRange(BigInt(0), MAX_U128_BIG_INT)
], Serializer.prototype, "serializeU128", 1);
__decorateClass([
  checkNumberRange(BigInt(0), MAX_U256_BIG_INT)
], Serializer.prototype, "serializeU256", 1);
__decorateClass([
  checkNumberRange(0, MAX_U32_NUMBER)
], Serializer.prototype, "serializeU32AsUleb128", 1);
function checkNumberRange(t, e, n) {
  return (a, c, o) => {
    const d = o.value;
    return o.value = function(w) {
      const S = BigInt(w.toString());
      if (S > BigInt(e.toString()) || S < BigInt(t.toString()))
        throw new Error(n || "Value is out of range");
      d.apply(this, [w]);
    }, o;
  };
}
var Deserializer = class {
  constructor(t) {
    this.buffer = new ArrayBuffer(t.length), new Uint8Array(this.buffer).set(t, 0), this.offset = 0;
  }
  read(t) {
    if (this.offset + t > this.buffer.byteLength)
      throw new Error("Reached to the end of buffer");
    const e = this.buffer.slice(this.offset, this.offset + t);
    return this.offset += t, e;
  }
  deserializeStr() {
    const t = this.deserializeBytes();
    return new TextDecoder().decode(t);
  }
  deserializeBytes() {
    const t = this.deserializeUleb128AsU32();
    return new Uint8Array(this.read(t));
  }
  deserializeFixedBytes(t) {
    return new Uint8Array(this.read(t));
  }
  deserializeBool() {
    const t = new Uint8Array(this.read(1))[0];
    if (t !== 1 && t !== 0)
      throw new Error("Invalid boolean value");
    return t === 1;
  }
  deserializeU8() {
    return new DataView(this.read(1)).getUint8(0);
  }
  deserializeU16() {
    return new DataView(this.read(2)).getUint16(0, !0);
  }
  deserializeU32() {
    return new DataView(this.read(4)).getUint32(0, !0);
  }
  deserializeU64() {
    const t = this.deserializeU32(), e = this.deserializeU32();
    return BigInt(BigInt(e) << BigInt(32) | BigInt(t));
  }
  deserializeU128() {
    const t = this.deserializeU64(), e = this.deserializeU64();
    return BigInt(e << BigInt(64) | t);
  }
  deserializeU256() {
    const t = this.deserializeU128(), e = this.deserializeU128();
    return BigInt(e << BigInt(128) | t);
  }
  deserializeUleb128AsU32() {
    let t = BigInt(0), e = 0;
    for (; t < MAX_U32_NUMBER; ) {
      const n = this.deserializeU8();
      if (t |= BigInt(n & 127) << BigInt(e), !(n & 128))
        break;
      e += 7;
    }
    if (t > MAX_U32_NUMBER)
      throw new Error("Overflow while parsing uleb128-encoded uint32 value");
    return Number(t);
  }
};
function serializeVector(t, e) {
  e.serializeU32AsUleb128(t.length), t.forEach((n) => {
    n.serialize(e);
  });
}
function serializeVectorWithFunc(t, e) {
  const n = new Serializer();
  n.serializeU32AsUleb128(t.length);
  const a = n[e];
  return t.forEach((c) => {
    a.call(n, c);
  }), n.getBytes();
}
function deserializeVector(t, e) {
  const n = t.deserializeUleb128AsU32(), a = [];
  for (let c = 0; c < n; c += 1)
    a.push(e.deserialize(t));
  return a;
}
function bcsToBytes(t) {
  const e = new Serializer();
  return t.serialize(e), e.getBytes();
}
function bcsSerializeUint64(t) {
  const e = new Serializer();
  return e.serializeU64(t), e.getBytes();
}
function bcsSerializeU8(t) {
  const e = new Serializer();
  return e.serializeU8(t), e.getBytes();
}
function bcsSerializeU16(t) {
  const e = new Serializer();
  return e.serializeU16(t), e.getBytes();
}
function bcsSerializeU32(t) {
  const e = new Serializer();
  return e.serializeU32(t), e.getBytes();
}
function bcsSerializeU128(t) {
  const e = new Serializer();
  return e.serializeU128(t), e.getBytes();
}
function bcsSerializeBool(t) {
  const e = new Serializer();
  return e.serializeBool(t), e.getBytes();
}
function bcsSerializeStr(t) {
  const e = new Serializer();
  return e.serializeStr(t), e.getBytes();
}
function bcsSerializeBytes(t) {
  const e = new Serializer();
  return e.serializeBytes(t), e.getBytes();
}
function bcsSerializeFixedBytes(t) {
  const e = new Serializer();
  return e.serializeFixedBytes(t), e.getBytes();
}
var _AccountAddress = class {
  constructor(t) {
    if (t.length !== _AccountAddress.LENGTH)
      throw new Error("Expected address of length 32");
    this.address = t;
  }
  static fromHex(t) {
    let e = HexString.ensure(t);
    e.noPrefix().length % 2 !== 0 && (e = new HexString(`0${e.noPrefix()}`));
    const n = e.toUint8Array();
    if (n.length > _AccountAddress.LENGTH)
      throw new Error("Hex string is too long. Address's length is 32 bytes.");
    if (n.length === _AccountAddress.LENGTH)
      return new _AccountAddress(n);
    const a = new Uint8Array(_AccountAddress.LENGTH);
    return a.set(n, _AccountAddress.LENGTH - n.length), new _AccountAddress(a);
  }
  static isValid(t) {
    if (t === "")
      return !1;
    let e = HexString.ensure(t);
    return e.noPrefix().length % 2 !== 0 && (e = new HexString(`0${e.noPrefix()}`)), e.toUint8Array().length <= _AccountAddress.LENGTH;
  }
  toHexString() {
    return HexString.fromUint8Array(this.address).hex();
  }
  serialize(t) {
    t.serializeFixedBytes(this.address);
  }
  static deserialize(t) {
    return new _AccountAddress(t.deserializeFixedBytes(_AccountAddress.LENGTH));
  }
}, AccountAddress = _AccountAddress;
AccountAddress.LENGTH = 32;
AccountAddress.CORE_CODE_ADDRESS = _AccountAddress.fromHex("0x1");
var _Ed25519PublicKey = class {
  constructor(t) {
    if (t.length !== _Ed25519PublicKey.LENGTH)
      throw new Error(`Ed25519PublicKey length should be ${_Ed25519PublicKey.LENGTH}`);
    this.value = t;
  }
  toBytes() {
    return this.value;
  }
  serialize(t) {
    t.serializeBytes(this.value);
  }
  static deserialize(t) {
    const e = t.deserializeBytes();
    return new _Ed25519PublicKey(e);
  }
}, Ed25519PublicKey = _Ed25519PublicKey;
Ed25519PublicKey.LENGTH = 32;
var _Ed25519Signature = class {
  constructor(t) {
    if (this.value = t, t.length !== _Ed25519Signature.LENGTH)
      throw new Error(`Ed25519Signature length should be ${_Ed25519Signature.LENGTH}`);
  }
  serialize(t) {
    t.serializeBytes(this.value);
  }
  static deserialize(t) {
    const e = t.deserializeBytes();
    return new _Ed25519Signature(e);
  }
}, Ed25519Signature = _Ed25519Signature;
Ed25519Signature.LENGTH = 64;
var MAX_SIGNATURES_SUPPORTED = 32, MultiEd25519PublicKey = class {
  constructor(t, e) {
    if (this.public_keys = t, this.threshold = e, e > MAX_SIGNATURES_SUPPORTED)
      throw new Error(`"threshold" cannot be larger than ${MAX_SIGNATURES_SUPPORTED}`);
  }
  toBytes() {
    const t = new Uint8Array(this.public_keys.length * Ed25519PublicKey.LENGTH + 1);
    return this.public_keys.forEach((e, n) => {
      t.set(e.value, n * Ed25519PublicKey.LENGTH);
    }), t[this.public_keys.length * Ed25519PublicKey.LENGTH] = this.threshold, t;
  }
  serialize(t) {
    t.serializeBytes(this.toBytes());
  }
  static deserialize(t) {
    const e = t.deserializeBytes(), n = e[e.length - 1], a = [];
    for (let c = 0; c < e.length - 1; c += Ed25519PublicKey.LENGTH) {
      const o = c;
      a.push(new Ed25519PublicKey(e.subarray(o, o + Ed25519PublicKey.LENGTH)));
    }
    return new MultiEd25519PublicKey(a, n);
  }
}, _MultiEd25519Signature = class {
  constructor(t, e) {
    if (this.signatures = t, this.bitmap = e, e.length !== _MultiEd25519Signature.BITMAP_LEN)
      throw new Error(`"bitmap" length should be ${_MultiEd25519Signature.BITMAP_LEN}`);
  }
  toBytes() {
    const t = new Uint8Array(this.signatures.length * Ed25519Signature.LENGTH + _MultiEd25519Signature.BITMAP_LEN);
    return this.signatures.forEach((e, n) => {
      t.set(e.value, n * Ed25519Signature.LENGTH);
    }), t.set(this.bitmap, this.signatures.length * Ed25519Signature.LENGTH), t;
  }
  static createBitmap(t) {
    const n = new Uint8Array([0, 0, 0, 0]), a = /* @__PURE__ */ new Set();
    return t.forEach((c) => {
      if (c >= MAX_SIGNATURES_SUPPORTED)
        throw new Error(`Invalid bit value ${c}.`);
      if (a.has(c))
        throw new Error("Duplicated bits detected.");
      a.add(c);
      const o = Math.floor(c / 8);
      let d = n[o];
      d |= 128 >> c % 8, n[o] = d;
    }), n;
  }
  serialize(t) {
    t.serializeBytes(this.toBytes());
  }
  static deserialize(t) {
    const e = t.deserializeBytes(), n = e.subarray(e.length - 4), a = [];
    for (let c = 0; c < e.length - n.length; c += Ed25519Signature.LENGTH) {
      const o = c;
      a.push(new Ed25519Signature(e.subarray(o, o + Ed25519Signature.LENGTH)));
    }
    return new _MultiEd25519Signature(a, n);
  }
}, MultiEd25519Signature = _MultiEd25519Signature;
MultiEd25519Signature.BITMAP_LEN = 4;
var TransactionAuthenticator = class {
  static deserialize(t) {
    const e = t.deserializeUleb128AsU32();
    switch (e) {
      case 0:
        return TransactionAuthenticatorEd25519.load(t);
      case 1:
        return TransactionAuthenticatorMultiEd25519.load(t);
      case 2:
        return TransactionAuthenticatorMultiAgent.load(t);
      default:
        throw new Error(`Unknown variant index for TransactionAuthenticator: ${e}`);
    }
  }
}, TransactionAuthenticatorEd25519 = class extends TransactionAuthenticator {
  constructor(t, e) {
    super(), this.public_key = t, this.signature = e;
  }
  serialize(t) {
    t.serializeU32AsUleb128(0), this.public_key.serialize(t), this.signature.serialize(t);
  }
  static load(t) {
    const e = Ed25519PublicKey.deserialize(t), n = Ed25519Signature.deserialize(t);
    return new TransactionAuthenticatorEd25519(e, n);
  }
}, TransactionAuthenticatorMultiEd25519 = class extends TransactionAuthenticator {
  constructor(t, e) {
    super(), this.public_key = t, this.signature = e;
  }
  serialize(t) {
    t.serializeU32AsUleb128(1), this.public_key.serialize(t), this.signature.serialize(t);
  }
  static load(t) {
    const e = MultiEd25519PublicKey.deserialize(t), n = MultiEd25519Signature.deserialize(t);
    return new TransactionAuthenticatorMultiEd25519(e, n);
  }
}, TransactionAuthenticatorMultiAgent = class extends TransactionAuthenticator {
  constructor(t, e, n) {
    super(), this.sender = t, this.secondary_signer_addresses = e, this.secondary_signers = n;
  }
  serialize(t) {
    t.serializeU32AsUleb128(2), this.sender.serialize(t), serializeVector(this.secondary_signer_addresses, t), serializeVector(this.secondary_signers, t);
  }
  static load(t) {
    const e = AccountAuthenticator.deserialize(t), n = deserializeVector(t, AccountAddress), a = deserializeVector(t, AccountAuthenticator);
    return new TransactionAuthenticatorMultiAgent(e, n, a);
  }
}, AccountAuthenticator = class {
  static deserialize(t) {
    const e = t.deserializeUleb128AsU32();
    switch (e) {
      case 0:
        return AccountAuthenticatorEd25519.load(t);
      case 1:
        return AccountAuthenticatorMultiEd25519.load(t);
      default:
        throw new Error(`Unknown variant index for AccountAuthenticator: ${e}`);
    }
  }
}, AccountAuthenticatorEd25519 = class extends AccountAuthenticator {
  constructor(t, e) {
    super(), this.public_key = t, this.signature = e;
  }
  serialize(t) {
    t.serializeU32AsUleb128(0), this.public_key.serialize(t), this.signature.serialize(t);
  }
  static load(t) {
    const e = Ed25519PublicKey.deserialize(t), n = Ed25519Signature.deserialize(t);
    return new AccountAuthenticatorEd25519(e, n);
  }
}, AccountAuthenticatorMultiEd25519 = class extends AccountAuthenticator {
  constructor(t, e) {
    super(), this.public_key = t, this.signature = e;
  }
  serialize(t) {
    t.serializeU32AsUleb128(1), this.public_key.serialize(t), this.signature.serialize(t);
  }
  static load(t) {
    const e = MultiEd25519PublicKey.deserialize(t), n = MultiEd25519Signature.deserialize(t);
    return new AccountAuthenticatorMultiEd25519(e, n);
  }
}, Identifier = class {
  constructor(t) {
    this.value = t;
  }
  serialize(t) {
    t.serializeStr(this.value);
  }
  static deserialize(t) {
    const e = t.deserializeStr();
    return new Identifier(e);
  }
}, TypeTag = class {
  static deserialize(t) {
    const e = t.deserializeUleb128AsU32();
    switch (e) {
      case 0:
        return TypeTagBool.load(t);
      case 1:
        return TypeTagU8.load(t);
      case 2:
        return TypeTagU64.load(t);
      case 3:
        return TypeTagU128.load(t);
      case 4:
        return TypeTagAddress.load(t);
      case 5:
        return TypeTagSigner.load(t);
      case 6:
        return TypeTagVector.load(t);
      case 7:
        return TypeTagStruct.load(t);
      case 8:
        return TypeTagU16.load(t);
      case 9:
        return TypeTagU32.load(t);
      case 10:
        return TypeTagU256.load(t);
      default:
        throw new Error(`Unknown variant index for TypeTag: ${e}`);
    }
  }
}, TypeTagBool = class extends TypeTag {
  serialize(t) {
    t.serializeU32AsUleb128(0);
  }
  static load(t) {
    return new TypeTagBool();
  }
}, TypeTagU8 = class extends TypeTag {
  serialize(t) {
    t.serializeU32AsUleb128(1);
  }
  static load(t) {
    return new TypeTagU8();
  }
}, TypeTagU16 = class extends TypeTag {
  serialize(t) {
    t.serializeU32AsUleb128(1);
  }
  static load(t) {
    return new TypeTagU16();
  }
}, TypeTagU32 = class extends TypeTag {
  serialize(t) {
    t.serializeU32AsUleb128(1);
  }
  static load(t) {
    return new TypeTagU32();
  }
}, TypeTagU64 = class extends TypeTag {
  serialize(t) {
    t.serializeU32AsUleb128(2);
  }
  static load(t) {
    return new TypeTagU64();
  }
}, TypeTagU128 = class extends TypeTag {
  serialize(t) {
    t.serializeU32AsUleb128(3);
  }
  static load(t) {
    return new TypeTagU128();
  }
}, TypeTagU256 = class extends TypeTag {
  serialize(t) {
    t.serializeU32AsUleb128(1);
  }
  static load(t) {
    return new TypeTagU256();
  }
}, TypeTagAddress = class extends TypeTag {
  serialize(t) {
    t.serializeU32AsUleb128(4);
  }
  static load(t) {
    return new TypeTagAddress();
  }
}, TypeTagSigner = class extends TypeTag {
  serialize(t) {
    t.serializeU32AsUleb128(5);
  }
  static load(t) {
    return new TypeTagSigner();
  }
}, TypeTagVector = class extends TypeTag {
  constructor(t) {
    super(), this.value = t;
  }
  serialize(t) {
    t.serializeU32AsUleb128(6), this.value.serialize(t);
  }
  static load(t) {
    const e = TypeTag.deserialize(t);
    return new TypeTagVector(e);
  }
}, TypeTagStruct = class extends TypeTag {
  constructor(t) {
    super(), this.value = t;
  }
  serialize(t) {
    t.serializeU32AsUleb128(7), this.value.serialize(t);
  }
  static load(t) {
    const e = StructTag.deserialize(t);
    return new TypeTagStruct(e);
  }
  isStringTypeTag() {
    return this.value.module_name.value === "string" && this.value.name.value === "String" && this.value.address.toHexString() === AccountAddress.fromHex("0x1").toHexString();
  }
}, StructTag = class {
  constructor(t, e, n, a) {
    this.address = t, this.module_name = e, this.name = n, this.type_args = a;
  }
  static fromString(t) {
    const e = new TypeTagParser(t).parseTypeTag();
    return new StructTag(
      e.value.address,
      e.value.module_name,
      e.value.name,
      e.value.type_args
    );
  }
  serialize(t) {
    this.address.serialize(t), this.module_name.serialize(t), this.name.serialize(t), serializeVector(this.type_args, t);
  }
  static deserialize(t) {
    const e = AccountAddress.deserialize(t), n = Identifier.deserialize(t), a = Identifier.deserialize(t), c = deserializeVector(t, TypeTag);
    return new StructTag(e, n, a, c);
  }
}, stringStructTag = new StructTag(
  AccountAddress.fromHex("0x1"),
  new Identifier("string"),
  new Identifier("String"),
  []
);
function bail(t) {
  throw new TypeTagParserError(t);
}
function isWhiteSpace(t) {
  return !!t.match(/\s/);
}
function isValidAlphabetic(t) {
  return !!t.match(/[_A-Za-z0-9]/g);
}
function isGeneric(t) {
  return !!t.match(/T\d+/g);
}
function nextToken(t, e) {
  const n = t[e];
  if (n === ":") {
    if (t.slice(e, e + 2) === "::")
      return [["COLON", "::"], 2];
    bail("Unrecognized token.");
  } else {
    if (n === "<")
      return [["LT", "<"], 1];
    if (n === ">")
      return [["GT", ">"], 1];
    if (n === ",")
      return [["COMMA", ","], 1];
    if (isWhiteSpace(n)) {
      let a = "";
      for (let c = e; c < t.length; c += 1) {
        const o = t[c];
        if (isWhiteSpace(o))
          a = `${a}${o}`;
        else
          break;
      }
      return [["SPACE", a], a.length];
    } else if (isValidAlphabetic(n)) {
      let a = "";
      for (let c = e; c < t.length; c += 1) {
        const o = t[c];
        if (isValidAlphabetic(o))
          a = `${a}${o}`;
        else
          break;
      }
      return isGeneric(a) ? [["GENERIC", a], a.length] : [["IDENT", a], a.length];
    }
  }
  throw new Error("Unrecognized token.");
}
function tokenize(t) {
  let e = 0;
  const n = [];
  for (; e < t.length; ) {
    const [a, c] = nextToken(t, e);
    a[0] !== "SPACE" && n.push(a), e += c;
  }
  return n;
}
var TypeTagParser = class {
  constructor(t, e) {
    this.typeTags = [], this.tokens = tokenize(t), this.typeTags = e || [];
  }
  consume(t) {
    const e = this.tokens.shift();
    (!e || e[1] !== t) && bail("Invalid type tag.");
  }
  parseCommaList(t, e) {
    const n = [];
    for (this.tokens.length <= 0 && bail("Invalid type tag."); this.tokens[0][1] !== t && (n.push(this.parseTypeTag()), !(this.tokens.length > 0 && this.tokens[0][1] === t || (this.consume(","), this.tokens.length > 0 && this.tokens[0][1] === t && e))); )
      this.tokens.length <= 0 && bail("Invalid type tag.");
    return n;
  }
  parseTypeTag() {
    this.tokens.length === 0 && bail("Invalid type tag.");
    const [t, e] = this.tokens.shift();
    if (e === "u8")
      return new TypeTagU8();
    if (e === "u16")
      return new TypeTagU16();
    if (e === "u32")
      return new TypeTagU32();
    if (e === "u64")
      return new TypeTagU64();
    if (e === "u128")
      return new TypeTagU128();
    if (e === "u256")
      return new TypeTagU256();
    if (e === "bool")
      return new TypeTagBool();
    if (e === "address")
      return new TypeTagAddress();
    if (e === "vector") {
      this.consume("<");
      const n = this.parseTypeTag();
      return this.consume(">"), new TypeTagVector(n);
    }
    if (e === "string")
      return new StructTag(AccountAddress.fromHex("0x1"), new Identifier("string"), new Identifier("String"), []);
    if (t === "IDENT" && (e.startsWith("0x") || e.startsWith("0X"))) {
      const n = e;
      this.consume("::");
      const [a, c] = this.tokens.shift();
      a !== "IDENT" && bail("Invalid type tag."), this.consume("::");
      const [o, d] = this.tokens.shift();
      if (o !== "IDENT" && bail("Invalid type tag."), c === "object" && d === "Object")
        return this.tokens.splice(0, 3), new TypeTagAddress();
      let m = [];
      this.tokens.length > 0 && this.tokens[0][1] === "<" && (this.consume("<"), m = this.parseCommaList(">", !0), this.consume(">"));
      const w = new StructTag(
        AccountAddress.fromHex(n),
        new Identifier(c),
        new Identifier(d),
        m
      );
      return new TypeTagStruct(w);
    }
    if (t === "GENERIC") {
      this.typeTags.length === 0 && bail("Can't convert generic type since no typeTags were specified.");
      const n = parseInt(e.substring(1), 10);
      return new TypeTagParser(this.typeTags[n]).parseTypeTag();
    }
    throw new Error("Invalid type tag.");
  }
}, TypeTagParserError = class extends Error {
  constructor(t) {
    super(t), this.name = "TypeTagParserError";
  }
}, RawTransaction = class {
  constructor(t, e, n, a, c, o, d) {
    this.sender = t, this.sequence_number = e, this.payload = n, this.max_gas_amount = a, this.gas_unit_price = c, this.expiration_timestamp_secs = o, this.chain_id = d;
  }
  serialize(t) {
    this.sender.serialize(t), t.serializeU64(this.sequence_number), this.payload.serialize(t), t.serializeU64(this.max_gas_amount), t.serializeU64(this.gas_unit_price), t.serializeU64(this.expiration_timestamp_secs), this.chain_id.serialize(t);
  }
  static deserialize(t) {
    const e = AccountAddress.deserialize(t), n = t.deserializeU64(), a = TransactionPayload.deserialize(t), c = t.deserializeU64(), o = t.deserializeU64(), d = t.deserializeU64(), m = ChainId.deserialize(t);
    return new RawTransaction(
      e,
      n,
      a,
      c,
      o,
      d,
      m
    );
  }
}, Script = class {
  constructor(t, e, n) {
    this.code = t, this.ty_args = e, this.args = n;
  }
  serialize(t) {
    t.serializeBytes(this.code), serializeVector(this.ty_args, t), serializeVector(this.args, t);
  }
  static deserialize(t) {
    const e = t.deserializeBytes(), n = deserializeVector(t, TypeTag), a = deserializeVector(t, TransactionArgument);
    return new Script(e, n, a);
  }
}, EntryFunction = class {
  constructor(t, e, n, a) {
    this.module_name = t, this.function_name = e, this.ty_args = n, this.args = a;
  }
  static natural(t, e, n, a) {
    return new EntryFunction(ModuleId.fromStr(t), new Identifier(e), n, a);
  }
  static natual(t, e, n, a) {
    return EntryFunction.natural(t, e, n, a);
  }
  serialize(t) {
    this.module_name.serialize(t), this.function_name.serialize(t), serializeVector(this.ty_args, t), t.serializeU32AsUleb128(this.args.length), this.args.forEach((e) => {
      t.serializeBytes(e);
    });
  }
  static deserialize(t) {
    const e = ModuleId.deserialize(t), n = Identifier.deserialize(t), a = deserializeVector(t, TypeTag), c = t.deserializeUleb128AsU32(), o = [];
    for (let m = 0; m < c; m += 1)
      o.push(t.deserializeBytes());
    const d = o;
    return new EntryFunction(e, n, a, d);
  }
}, MultiSigTransactionPayload = class {
  constructor(t) {
    this.transaction_payload = t;
  }
  serialize(t) {
    t.serializeU32AsUleb128(0), this.transaction_payload.serialize(t);
  }
  static deserialize(t) {
    return t.deserializeUleb128AsU32(), new MultiSigTransactionPayload(EntryFunction.deserialize(t));
  }
}, MultiSig = class {
  constructor(t, e) {
    this.multisig_address = t, this.transaction_payload = e;
  }
  serialize(t) {
    this.multisig_address.serialize(t), this.transaction_payload === void 0 ? t.serializeBool(!1) : (t.serializeBool(!0), this.transaction_payload.serialize(t));
  }
  static deserialize(t) {
    const e = AccountAddress.deserialize(t), n = t.deserializeBool();
    let a;
    return n && (a = MultiSigTransactionPayload.deserialize(t)), new MultiSig(e, a);
  }
}, Module = class {
  constructor(t) {
    this.code = t;
  }
  serialize(t) {
    t.serializeBytes(this.code);
  }
  static deserialize(t) {
    const e = t.deserializeBytes();
    return new Module(e);
  }
}, ModuleId = class {
  constructor(t, e) {
    this.address = t, this.name = e;
  }
  static fromStr(t) {
    const e = t.split("::");
    if (e.length !== 2)
      throw new Error("Invalid module id.");
    return new ModuleId(AccountAddress.fromHex(new HexString(e[0])), new Identifier(e[1]));
  }
  serialize(t) {
    this.address.serialize(t), this.name.serialize(t);
  }
  static deserialize(t) {
    const e = AccountAddress.deserialize(t), n = Identifier.deserialize(t);
    return new ModuleId(e, n);
  }
}, ChangeSet = class {
  serialize(t) {
    throw new Error("Not implemented.");
  }
  static deserialize(t) {
    throw new Error("Not implemented.");
  }
}, WriteSet = class {
  serialize(t) {
    throw new Error("Not implmented.");
  }
  static deserialize(t) {
    throw new Error("Not implmented.");
  }
}, SignedTransaction = class {
  constructor(t, e) {
    this.raw_txn = t, this.authenticator = e;
  }
  serialize(t) {
    this.raw_txn.serialize(t), this.authenticator.serialize(t);
  }
  static deserialize(t) {
    const e = RawTransaction.deserialize(t), n = TransactionAuthenticator.deserialize(t);
    return new SignedTransaction(e, n);
  }
}, RawTransactionWithData = class {
  static deserialize(t) {
    const e = t.deserializeUleb128AsU32();
    switch (e) {
      case 0:
        return MultiAgentRawTransaction.load(t);
      default:
        throw new Error(`Unknown variant index for RawTransactionWithData: ${e}`);
    }
  }
}, MultiAgentRawTransaction = class extends RawTransactionWithData {
  constructor(t, e) {
    super(), this.raw_txn = t, this.secondary_signer_addresses = e;
  }
  serialize(t) {
    t.serializeU32AsUleb128(0), this.raw_txn.serialize(t), serializeVector(this.secondary_signer_addresses, t);
  }
  static load(t) {
    const e = RawTransaction.deserialize(t), n = deserializeVector(t, AccountAddress);
    return new MultiAgentRawTransaction(e, n);
  }
}, TransactionPayload = class {
  static deserialize(t) {
    const e = t.deserializeUleb128AsU32();
    switch (e) {
      case 0:
        return TransactionPayloadScript.load(t);
      case 2:
        return TransactionPayloadEntryFunction.load(t);
      case 3:
        return TransactionPayloadMultisig.load(t);
      default:
        throw new Error(`Unknown variant index for TransactionPayload: ${e}`);
    }
  }
}, TransactionPayloadScript = class extends TransactionPayload {
  constructor(t) {
    super(), this.value = t;
  }
  serialize(t) {
    t.serializeU32AsUleb128(0), this.value.serialize(t);
  }
  static load(t) {
    const e = Script.deserialize(t);
    return new TransactionPayloadScript(e);
  }
}, TransactionPayloadEntryFunction = class extends TransactionPayload {
  constructor(t) {
    super(), this.value = t;
  }
  serialize(t) {
    t.serializeU32AsUleb128(2), this.value.serialize(t);
  }
  static load(t) {
    const e = EntryFunction.deserialize(t);
    return new TransactionPayloadEntryFunction(e);
  }
}, TransactionPayloadMultisig = class extends TransactionPayload {
  constructor(t) {
    super(), this.value = t;
  }
  serialize(t) {
    t.serializeU32AsUleb128(3), this.value.serialize(t);
  }
  static load(t) {
    const e = MultiSig.deserialize(t);
    return new TransactionPayloadMultisig(e);
  }
}, ChainId = class {
  constructor(t) {
    this.value = t;
  }
  serialize(t) {
    t.serializeU8(this.value);
  }
  static deserialize(t) {
    const e = t.deserializeU8();
    return new ChainId(e);
  }
}, TransactionArgument = class {
  static deserialize(t) {
    const e = t.deserializeUleb128AsU32();
    switch (e) {
      case 0:
        return TransactionArgumentU8.load(t);
      case 1:
        return TransactionArgumentU64.load(t);
      case 2:
        return TransactionArgumentU128.load(t);
      case 3:
        return TransactionArgumentAddress.load(t);
      case 4:
        return TransactionArgumentU8Vector.load(t);
      case 5:
        return TransactionArgumentBool.load(t);
      case 6:
        return TransactionArgumentU16.load(t);
      case 7:
        return TransactionArgumentU32.load(t);
      case 8:
        return TransactionArgumentU256.load(t);
      default:
        throw new Error(`Unknown variant index for TransactionArgument: ${e}`);
    }
  }
}, TransactionArgumentU8 = class extends TransactionArgument {
  constructor(t) {
    super(), this.value = t;
  }
  serialize(t) {
    t.serializeU32AsUleb128(0), t.serializeU8(this.value);
  }
  static load(t) {
    const e = t.deserializeU8();
    return new TransactionArgumentU8(e);
  }
}, TransactionArgumentU16 = class extends TransactionArgument {
  constructor(t) {
    super(), this.value = t;
  }
  serialize(t) {
    t.serializeU32AsUleb128(6), t.serializeU16(this.value);
  }
  static load(t) {
    const e = t.deserializeU16();
    return new TransactionArgumentU16(e);
  }
}, TransactionArgumentU32 = class extends TransactionArgument {
  constructor(t) {
    super(), this.value = t;
  }
  serialize(t) {
    t.serializeU32AsUleb128(7), t.serializeU32(this.value);
  }
  static load(t) {
    const e = t.deserializeU32();
    return new TransactionArgumentU32(e);
  }
}, TransactionArgumentU64 = class extends TransactionArgument {
  constructor(t) {
    super(), this.value = t;
  }
  serialize(t) {
    t.serializeU32AsUleb128(1), t.serializeU64(this.value);
  }
  static load(t) {
    const e = t.deserializeU64();
    return new TransactionArgumentU64(e);
  }
}, TransactionArgumentU128 = class extends TransactionArgument {
  constructor(t) {
    super(), this.value = t;
  }
  serialize(t) {
    t.serializeU32AsUleb128(2), t.serializeU128(this.value);
  }
  static load(t) {
    const e = t.deserializeU128();
    return new TransactionArgumentU128(e);
  }
}, TransactionArgumentU256 = class extends TransactionArgument {
  constructor(t) {
    super(), this.value = t;
  }
  serialize(t) {
    t.serializeU32AsUleb128(8), t.serializeU256(this.value);
  }
  static load(t) {
    const e = t.deserializeU256();
    return new TransactionArgumentU256(e);
  }
}, TransactionArgumentAddress = class extends TransactionArgument {
  constructor(t) {
    super(), this.value = t;
  }
  serialize(t) {
    t.serializeU32AsUleb128(3), this.value.serialize(t);
  }
  static load(t) {
    const e = AccountAddress.deserialize(t);
    return new TransactionArgumentAddress(e);
  }
}, TransactionArgumentU8Vector = class extends TransactionArgument {
  constructor(t) {
    super(), this.value = t;
  }
  serialize(t) {
    t.serializeU32AsUleb128(4), t.serializeBytes(this.value);
  }
  static load(t) {
    const e = t.deserializeBytes();
    return new TransactionArgumentU8Vector(e);
  }
}, TransactionArgumentBool = class extends TransactionArgument {
  constructor(t) {
    super(), this.value = t;
  }
  serialize(t) {
    t.serializeU32AsUleb128(5), t.serializeBool(this.value);
  }
  static load(t) {
    const e = t.deserializeBool();
    return new TransactionArgumentBool(e);
  }
}, Transaction = class {
  getHashSalt() {
    const t = sha3_256.create();
    return t.update("APTOS::Transaction"), t.digest();
  }
  static deserialize(t) {
    const e = t.deserializeUleb128AsU32();
    switch (e) {
      case 0:
        return UserTransaction.load(t);
      default:
        throw new Error(`Unknown variant index for Transaction: ${e}`);
    }
  }
}, UserTransaction = class extends Transaction {
  constructor(t) {
    super(), this.value = t;
  }
  hash() {
    const t = sha3_256.create();
    return t.update(this.getHashSalt()), t.update(bcsToBytes(this)), t.digest();
  }
  serialize(t) {
    t.serializeU32AsUleb128(0), this.value.serialize(t);
  }
  static load(t) {
    return new UserTransaction(SignedTransaction.deserialize(t));
  }
}, TypeArgumentABI = class {
  constructor(t) {
    this.name = t;
  }
  serialize(t) {
    t.serializeStr(this.name);
  }
  static deserialize(t) {
    const e = t.deserializeStr();
    return new TypeArgumentABI(e);
  }
}, ArgumentABI = class {
  constructor(t, e) {
    this.name = t, this.type_tag = e;
  }
  serialize(t) {
    t.serializeStr(this.name), this.type_tag.serialize(t);
  }
  static deserialize(t) {
    const e = t.deserializeStr(), n = TypeTag.deserialize(t);
    return new ArgumentABI(e, n);
  }
}, ScriptABI = class {
  static deserialize(t) {
    const e = t.deserializeUleb128AsU32();
    switch (e) {
      case 0:
        return TransactionScriptABI.load(t);
      case 1:
        return EntryFunctionABI.load(t);
      default:
        throw new Error(`Unknown variant index for TransactionPayload: ${e}`);
    }
  }
}, TransactionScriptABI = class extends ScriptABI {
  constructor(t, e, n, a, c) {
    super(), this.name = t, this.doc = e, this.code = n, this.ty_args = a, this.args = c;
  }
  serialize(t) {
    t.serializeU32AsUleb128(0), t.serializeStr(this.name), t.serializeStr(this.doc), t.serializeBytes(this.code), serializeVector(this.ty_args, t), serializeVector(this.args, t);
  }
  static load(t) {
    const e = t.deserializeStr(), n = t.deserializeStr(), a = t.deserializeBytes(), c = deserializeVector(t, TypeArgumentABI), o = deserializeVector(t, ArgumentABI);
    return new TransactionScriptABI(e, n, a, c, o);
  }
}, EntryFunctionABI = class extends ScriptABI {
  constructor(t, e, n, a, c) {
    super(), this.name = t, this.module_name = e, this.doc = n, this.ty_args = a, this.args = c;
  }
  serialize(t) {
    t.serializeU32AsUleb128(1), t.serializeStr(this.name), this.module_name.serialize(t), t.serializeStr(this.doc), serializeVector(this.ty_args, t), serializeVector(this.args, t);
  }
  static load(t) {
    const e = t.deserializeStr(), n = ModuleId.deserialize(t), a = t.deserializeStr(), c = deserializeVector(t, TypeArgumentABI), o = deserializeVector(t, ArgumentABI);
    return new EntryFunctionABI(e, n, a, c, o);
  }
}, _AuthenticationKey = class {
  constructor(t) {
    if (t.length !== _AuthenticationKey.LENGTH)
      throw new Error("Expected a byte array of length 32");
    this.bytes = t;
  }
  static fromMultiEd25519PublicKey(t) {
    const e = t.toBytes(), n = new Uint8Array(e.length + 1);
    n.set(e), n.set([_AuthenticationKey.MULTI_ED25519_SCHEME], e.length);
    const a = sha3_256.create();
    return a.update(n), new _AuthenticationKey(a.digest());
  }
  static fromEd25519PublicKey(t) {
    const e = t.value, n = new Uint8Array(e.length + 1);
    n.set(e), n.set([_AuthenticationKey.ED25519_SCHEME], e.length);
    const a = sha3_256.create();
    return a.update(n), new _AuthenticationKey(a.digest());
  }
  derivedAddress() {
    return HexString.fromUint8Array(this.bytes);
  }
}, AuthenticationKey = _AuthenticationKey;
AuthenticationKey.LENGTH = 32;
AuthenticationKey.MULTI_ED25519_SCHEME = 1;
AuthenticationKey.ED25519_SCHEME = 0;
AuthenticationKey.DERIVE_RESOURCE_ACCOUNT_SCHEME = 255;
var RotationProofChallenge = class {
  constructor(t, e, n, a, c, o, d) {
    this.accountAddress = t, this.moduleName = e, this.structName = n, this.sequenceNumber = a, this.originator = c, this.currentAuthKey = o, this.newPublicKey = d;
  }
  serialize(t) {
    this.accountAddress.serialize(t), t.serializeStr(this.moduleName), t.serializeStr(this.structName), t.serializeU64(this.sequenceNumber), this.originator.serialize(t), this.currentAuthKey.serialize(t), t.serializeBytes(this.newPublicKey);
  }
}, _AptosAccount = class {
  static fromAptosAccountObject(t) {
    return new _AptosAccount(HexString.ensure(t.privateKeyHex).toUint8Array(), t.address);
  }
  static isValidPath(t) {
    return /^m\/44'\/637'\/[0-9]+'\/[0-9]+'\/[0-9]+'+$/.test(t);
  }
  static fromDerivePath(t, e) {
    if (!_AptosAccount.isValidPath(t))
      throw new Error("Invalid derivation path");
    const n = e.trim().split(/\s+/).map((c) => c.toLowerCase()).join(" "), { key: a } = derivePath(t, bytesToHex(mnemonicToSeedSync_1(n)));
    return new _AptosAccount(a);
  }
  constructor(t, e) {
    t ? this.signingKey = nacl2.sign.keyPair.fromSeed(t.slice(0, 32)) : this.signingKey = nacl2.sign.keyPair(), this.accountAddress = HexString.ensure(e || this.authKey().hex());
  }
  address() {
    return this.accountAddress;
  }
  authKey() {
    const t = new Ed25519PublicKey(this.signingKey.publicKey);
    return AuthenticationKey.fromEd25519PublicKey(t).derivedAddress();
  }
  static getResourceAccountAddress(t, e) {
    const n = bcsToBytes(AccountAddress.fromHex(t)), a = new Uint8Array([...n, ...e, AuthenticationKey.DERIVE_RESOURCE_ACCOUNT_SCHEME]), c = sha3_256.create();
    return c.update(a), HexString.fromUint8Array(c.digest());
  }
  pubKey() {
    return HexString.fromUint8Array(this.signingKey.publicKey);
  }
  signBuffer(t) {
    const e = nacl2.sign.detached(t, this.signingKey.secretKey);
    return HexString.fromUint8Array(e);
  }
  signHexString(t) {
    const e = HexString.ensure(t).toUint8Array();
    return this.signBuffer(e);
  }
  verifySignature(t, e) {
    const n = HexString.ensure(t).toUint8Array(), a = HexString.ensure(e).toUint8Array();
    return nacl2.sign.detached.verify(n, a, this.signingKey.publicKey);
  }
  toPrivateKeyObject() {
    return {
      address: this.address().hex(),
      publicKeyHex: this.pubKey().hex(),
      privateKeyHex: HexString.fromUint8Array(this.signingKey.secretKey.slice(0, 32)).hex()
    };
  }
}, AptosAccount = _AptosAccount;
__decorateClass([
  Memoize()
], AptosAccount.prototype, "authKey", 1);
var TokenDataFieldsFragmentDoc = `
    fragment TokenDataFields on current_token_datas {
  creator_address
  collection_name
  description
  metadata_uri
  name
  token_data_id_hash
  collection_data_id_hash
}
    `, CollectionDataFieldsFragmentDoc = `
    fragment CollectionDataFields on current_collection_datas {
  metadata_uri
  supply
  description
  collection_name
  collection_data_id_hash
  table_handle
  creator_address
}
    `, GetAccountCoinsData = `
    query getAccountCoinsData($owner_address: String, $offset: Int, $limit: Int) {
  current_coin_balances(
    where: {owner_address: {_eq: $owner_address}}
    offset: $offset
    limit: $limit
  ) {
    amount
    coin_type
    coin_info {
      name
      decimals
      symbol
    }
  }
}
    `, GetAccountCurrentTokens = `
    query getAccountCurrentTokens($address: String!, $offset: Int, $limit: Int) {
  current_token_ownerships(
    where: {owner_address: {_eq: $address}, amount: {_gt: 0}}
    order_by: [{last_transaction_version: desc}, {creator_address: asc}, {collection_name: asc}, {name: asc}]
    offset: $offset
    limit: $limit
  ) {
    amount
    current_token_data {
      ...TokenDataFields
    }
    current_collection_data {
      ...CollectionDataFields
    }
    last_transaction_version
    property_version
  }
}
    ${TokenDataFieldsFragmentDoc}
${CollectionDataFieldsFragmentDoc}`, GetAccountTokensCount = `
    query getAccountTokensCount($owner_address: String) {
  current_token_ownerships_aggregate(
    where: {owner_address: {_eq: $owner_address}, amount: {_gt: "0"}}
  ) {
    aggregate {
      count
    }
  }
}
    `, GetAccountTransactionsCount = `
    query getAccountTransactionsCount($address: String) {
  move_resources_aggregate(
    where: {address: {_eq: $address}}
    distinct_on: transaction_version
  ) {
    aggregate {
      count
    }
  }
}
    `, GetAccountTransactionsData = `
    query getAccountTransactionsData($address: String, $limit: Int, $offset: Int) {
  move_resources(
    where: {address: {_eq: $address}}
    order_by: {transaction_version: desc}
    distinct_on: transaction_version
    limit: $limit
    offset: $offset
  ) {
    transaction_version
  }
}
    `, GetCurrentDelegatorBalancesCount = `
    query getCurrentDelegatorBalancesCount($poolAddress: String) {
  current_delegator_balances_aggregate(
    where: {pool_type: {_eq: "active_shares"}, pool_address: {_eq: $poolAddress}, amount: {_gt: "0"}}
    distinct_on: delegator_address
  ) {
    aggregate {
      count
    }
  }
}
    `, GetDelegatedStakingActivities = `
    query getDelegatedStakingActivities($delegatorAddress: String, $poolAddress: String) {
  delegated_staking_activities(
    where: {delegator_address: {_eq: $delegatorAddress}, pool_address: {_eq: $poolAddress}}
  ) {
    amount
    delegator_address
    event_index
    event_type
    pool_address
    transaction_version
  }
}
    `, GetIndexerLedgerInfo = `
    query getIndexerLedgerInfo {
  ledger_infos {
    chain_id
  }
}
    `, GetTokenActivities = `
    query getTokenActivities($idHash: String!, $offset: Int, $limit: Int) {
  token_activities(
    where: {token_data_id_hash: {_eq: $idHash}}
    order_by: {transaction_version: desc}
    offset: $offset
    limit: $limit
  ) {
    creator_address
    collection_name
    name
    token_data_id_hash
    collection_data_id_hash
    from_address
    to_address
    transaction_version
    transaction_timestamp
    property_version
    transfer_type
    event_sequence_number
    token_amount
  }
}
    `, GetTokenActivitiesCount = `
    query getTokenActivitiesCount($token_id: String) {
  token_activities_aggregate(where: {token_data_id_hash: {_eq: $token_id}}) {
    aggregate {
      count
    }
  }
}
    `, GetTokenData = `
    query getTokenData($token_id: String) {
  current_token_datas(where: {token_data_id_hash: {_eq: $token_id}}) {
    token_data_id_hash
    name
    collection_name
    creator_address
    default_properties
    largest_property_version
    maximum
    metadata_uri
    payee_address
    royalty_points_denominator
    royalty_points_numerator
    supply
  }
}
    `, GetTokenOwnersData = `
    query getTokenOwnersData($token_id: String, $property_version: numeric) {
  current_token_ownerships(
    where: {token_data_id_hash: {_eq: $token_id}, property_version: {_eq: $property_version}}
  ) {
    owner_address
  }
}
    `, GetTopUserTransactions = `
    query getTopUserTransactions($limit: Int) {
  user_transactions(limit: $limit, order_by: {version: desc}) {
    version
  }
}
    `, GetUserTransactions = `
    query getUserTransactions($limit: Int, $start_version: bigint, $offset: Int) {
  user_transactions(
    limit: $limit
    order_by: {version: desc}
    where: {version: {_lte: $start_version}}
    offset: $offset
  ) {
    version
  }
}
    `, IndexerClient = class {
  constructor(t) {
    this.endpoint = t;
  }
  static validateAddress(t) {
    if (t.length < 66)
      throw new Error("Address needs to be 66 chars long.");
  }
  async queryIndexer(t) {
    const { data: e } = await axios2.post(this.endpoint, t);
    if (e.errors)
      throw new Error(`Indexer data error ${JSON.stringify(e.errors, null, " ")}`);
    return e.data;
  }
  async getIndexerLedgerInfo() {
    const t = {
      query: GetIndexerLedgerInfo
    };
    return this.queryIndexer(t);
  }
  async getAccountNFTs(t, e) {
    const n = HexString.ensure(t).hex();
    IndexerClient.validateAddress(n);
    const a = {
      query: GetAccountCurrentTokens,
      variables: { address: n, offset: e?.offset, limit: e?.limit }
    };
    return this.queryIndexer(a);
  }
  async getTokenActivities(t, e) {
    const n = {
      query: GetTokenActivities,
      variables: { idHash: t, offset: e?.offset, limit: e?.limit }
    };
    return this.queryIndexer(n);
  }
  async getAccountCoinsData(t, e) {
    const n = HexString.ensure(t).hex();
    IndexerClient.validateAddress(n);
    const a = {
      query: GetAccountCoinsData,
      variables: { owner_address: n, offset: e?.offset, limit: e?.limit }
    };
    return this.queryIndexer(a);
  }
  async getAccountTokensCount(t) {
    const e = HexString.ensure(t).hex();
    IndexerClient.validateAddress(e);
    const n = {
      query: GetAccountTokensCount,
      variables: { owner_address: e }
    };
    return this.queryIndexer(n);
  }
  async getAccountTransactionsCount(t) {
    const e = HexString.ensure(t).hex();
    IndexerClient.validateAddress(e);
    const n = {
      query: GetAccountTransactionsCount,
      variables: { address: e }
    };
    return this.queryIndexer(n);
  }
  async getAccountTransactionsData(t, e) {
    const n = HexString.ensure(t).hex();
    IndexerClient.validateAddress(n);
    const a = {
      query: GetAccountTransactionsData,
      variables: { address: n, offset: e?.offset, limit: e?.limit }
    };
    return this.queryIndexer(a);
  }
  async getDelegatedStakingActivities(t, e) {
    const n = HexString.ensure(t).hex(), a = HexString.ensure(e).hex();
    IndexerClient.validateAddress(n), IndexerClient.validateAddress(a);
    const c = {
      query: GetDelegatedStakingActivities,
      variables: {
        delegatorAddress: n,
        poolAddress: a
      }
    };
    return this.queryIndexer(c);
  }
  async getTokenActivitiesCount(t) {
    const e = {
      query: GetTokenActivitiesCount,
      variables: { token_id: t }
    };
    return this.queryIndexer(e);
  }
  async getTokenData(t) {
    const e = {
      query: GetTokenData,
      variables: { token_id: t }
    };
    return this.queryIndexer(e);
  }
  async getTokenOwnersData(t, e) {
    const n = {
      query: GetTokenOwnersData,
      variables: { token_id: t, property_version: e }
    };
    return this.queryIndexer(n);
  }
  async getTopUserTransactions(t) {
    const e = {
      query: GetTopUserTransactions,
      variables: { limit: t }
    };
    return this.queryIndexer(e);
  }
  async getUserTransactions(t, e) {
    const n = {
      query: GetUserTransactions,
      variables: { start_version: t, offset: e?.offset, limit: e?.limit }
    };
    return this.queryIndexer(n);
  }
  async getCurrentDelegatorBalancesCount(t) {
    const e = HexString.ensure(t).hex();
    IndexerClient.validateAddress(e);
    const n = {
      query: GetCurrentDelegatorBalancesCount,
      variables: { poolAddress: e }
    };
    return this.queryIndexer(n);
  }
}, generated_exports = {};
__export(generated_exports, {
  $AccountData: () => $AccountData,
  $AccountSignature: () => $AccountSignature,
  $AccountSignature_Ed25519Signature: () => $AccountSignature_Ed25519Signature,
  $AccountSignature_MultiEd25519Signature: () => $AccountSignature_MultiEd25519Signature,
  $Address: () => $Address,
  $AptosError: () => $AptosError,
  $AptosErrorCode: () => $AptosErrorCode,
  $Block: () => $Block,
  $BlockMetadataTransaction: () => $BlockMetadataTransaction,
  $DecodedTableData: () => $DecodedTableData,
  $DeleteModule: () => $DeleteModule,
  $DeleteResource: () => $DeleteResource,
  $DeleteTableItem: () => $DeleteTableItem,
  $DeletedTableData: () => $DeletedTableData,
  $DirectWriteSet: () => $DirectWriteSet,
  $Ed25519Signature: () => $Ed25519Signature,
  $EncodeSubmissionRequest: () => $EncodeSubmissionRequest,
  $EntryFunctionId: () => $EntryFunctionId,
  $EntryFunctionPayload: () => $EntryFunctionPayload,
  $Event: () => $Event,
  $EventGuid: () => $EventGuid,
  $GasEstimation: () => $GasEstimation,
  $GenesisPayload: () => $GenesisPayload,
  $GenesisPayload_WriteSetPayload: () => $GenesisPayload_WriteSetPayload,
  $GenesisTransaction: () => $GenesisTransaction,
  $HashValue: () => $HashValue,
  $HealthCheckSuccess: () => $HealthCheckSuccess,
  $HexEncodedBytes: () => $HexEncodedBytes,
  $IdentifierWrapper: () => $IdentifierWrapper,
  $IndexResponse: () => $IndexResponse,
  $ModuleBundlePayload: () => $ModuleBundlePayload,
  $MoveAbility: () => $MoveAbility,
  $MoveFunction: () => $MoveFunction,
  $MoveFunctionGenericTypeParam: () => $MoveFunctionGenericTypeParam,
  $MoveFunctionVisibility: () => $MoveFunctionVisibility,
  $MoveModule: () => $MoveModule,
  $MoveModuleBytecode: () => $MoveModuleBytecode,
  $MoveModuleId: () => $MoveModuleId,
  $MoveResource: () => $MoveResource,
  $MoveScriptBytecode: () => $MoveScriptBytecode,
  $MoveStruct: () => $MoveStruct,
  $MoveStructField: () => $MoveStructField,
  $MoveStructGenericTypeParam: () => $MoveStructGenericTypeParam,
  $MoveStructTag: () => $MoveStructTag,
  $MoveStructValue: () => $MoveStructValue,
  $MoveType: () => $MoveType,
  $MoveValue: () => $MoveValue,
  $MultiAgentSignature: () => $MultiAgentSignature,
  $MultiEd25519Signature: () => $MultiEd25519Signature,
  $MultisigPayload: () => $MultisigPayload,
  $MultisigTransactionPayload: () => $MultisigTransactionPayload,
  $PendingTransaction: () => $PendingTransaction,
  $RawTableItemRequest: () => $RawTableItemRequest,
  $RoleType: () => $RoleType,
  $ScriptPayload: () => $ScriptPayload,
  $ScriptWriteSet: () => $ScriptWriteSet,
  $StateCheckpointTransaction: () => $StateCheckpointTransaction,
  $StateKeyWrapper: () => $StateKeyWrapper,
  $SubmitTransactionRequest: () => $SubmitTransactionRequest,
  $TableItemRequest: () => $TableItemRequest,
  $Transaction: () => $Transaction,
  $TransactionPayload: () => $TransactionPayload,
  $TransactionPayload_EntryFunctionPayload: () => $TransactionPayload_EntryFunctionPayload,
  $TransactionPayload_ModuleBundlePayload: () => $TransactionPayload_ModuleBundlePayload,
  $TransactionPayload_MultisigPayload: () => $TransactionPayload_MultisigPayload,
  $TransactionPayload_ScriptPayload: () => $TransactionPayload_ScriptPayload,
  $TransactionSignature: () => $TransactionSignature,
  $TransactionSignature_Ed25519Signature: () => $TransactionSignature_Ed25519Signature,
  $TransactionSignature_MultiAgentSignature: () => $TransactionSignature_MultiAgentSignature,
  $TransactionSignature_MultiEd25519Signature: () => $TransactionSignature_MultiEd25519Signature,
  $Transaction_BlockMetadataTransaction: () => $Transaction_BlockMetadataTransaction,
  $Transaction_GenesisTransaction: () => $Transaction_GenesisTransaction,
  $Transaction_PendingTransaction: () => $Transaction_PendingTransaction,
  $Transaction_StateCheckpointTransaction: () => $Transaction_StateCheckpointTransaction,
  $Transaction_UserTransaction: () => $Transaction_UserTransaction,
  $TransactionsBatchSingleSubmissionFailure: () => $TransactionsBatchSingleSubmissionFailure,
  $TransactionsBatchSubmissionResult: () => $TransactionsBatchSubmissionResult,
  $U128: () => $U128,
  $U256: () => $U256,
  $U64: () => $U64,
  $UserTransaction: () => $UserTransaction,
  $VersionedEvent: () => $VersionedEvent,
  $ViewRequest: () => $ViewRequest,
  $WriteModule: () => $WriteModule,
  $WriteResource: () => $WriteResource,
  $WriteSet: () => $WriteSet,
  $WriteSetChange: () => $WriteSetChange,
  $WriteSetChange_DeleteModule: () => $WriteSetChange_DeleteModule,
  $WriteSetChange_DeleteResource: () => $WriteSetChange_DeleteResource,
  $WriteSetChange_DeleteTableItem: () => $WriteSetChange_DeleteTableItem,
  $WriteSetChange_WriteModule: () => $WriteSetChange_WriteModule,
  $WriteSetChange_WriteResource: () => $WriteSetChange_WriteResource,
  $WriteSetChange_WriteTableItem: () => $WriteSetChange_WriteTableItem,
  $WriteSetPayload: () => $WriteSetPayload,
  $WriteSet_DirectWriteSet: () => $WriteSet_DirectWriteSet,
  $WriteSet_ScriptWriteSet: () => $WriteSet_ScriptWriteSet,
  $WriteTableItem: () => $WriteTableItem,
  AccountsService: () => AccountsService,
  ApiError: () => ApiError,
  AptosErrorCode: () => AptosErrorCode,
  AptosGeneratedClient: () => AptosGeneratedClient,
  BaseHttpRequest: () => BaseHttpRequest,
  BlocksService: () => BlocksService,
  CancelError: () => CancelError,
  CancelablePromise: () => CancelablePromise,
  EventsService: () => EventsService,
  GeneralService: () => GeneralService,
  MoveFunctionVisibility: () => MoveFunctionVisibility,
  OpenAPI: () => OpenAPI,
  RoleType: () => RoleType,
  TablesService: () => TablesService,
  TransactionsService: () => TransactionsService,
  ViewService: () => ViewService
});
var BaseHttpRequest = class {
  constructor(t) {
    this.config = t;
  }
}, ApiError = class extends Error {
  constructor(t, e, n) {
    super(n), this.name = "ApiError", this.url = e.url, this.status = e.status, this.statusText = e.statusText, this.body = e.body, this.request = t;
  }
}, CancelError = class extends Error {
  constructor(t) {
    super(t), this.name = "CancelError";
  }
  get isCancelled() {
    return !0;
  }
}, CancelablePromise = class {
  constructor(t) {
    this._isResolved = !1, this._isRejected = !1, this._isCancelled = !1, this._cancelHandlers = [], this._promise = new Promise((e, n) => {
      this._resolve = e, this._reject = n;
      const a = (d) => {
        var m;
        this._isResolved || this._isRejected || this._isCancelled || (this._isResolved = !0, (m = this._resolve) == null || m.call(this, d));
      }, c = (d) => {
        var m;
        this._isResolved || this._isRejected || this._isCancelled || (this._isRejected = !0, (m = this._reject) == null || m.call(this, d));
      }, o = (d) => {
        this._isResolved || this._isRejected || this._isCancelled || this._cancelHandlers.push(d);
      };
      return Object.defineProperty(o, "isResolved", {
        get: () => this._isResolved
      }), Object.defineProperty(o, "isRejected", {
        get: () => this._isRejected
      }), Object.defineProperty(o, "isCancelled", {
        get: () => this._isCancelled
      }), t(a, c, o);
    });
  }
  then(t, e) {
    return this._promise.then(t, e);
  }
  catch(t) {
    return this._promise.catch(t);
  }
  finally(t) {
    return this._promise.finally(t);
  }
  cancel() {
    var t;
    if (!(this._isResolved || this._isRejected || this._isCancelled)) {
      if (this._isCancelled = !0, this._cancelHandlers.length)
        try {
          for (const e of this._cancelHandlers)
            e();
        } catch (e) {
          console.warn("Cancellation threw an error", e);
          return;
        }
      this._cancelHandlers.length = 0, (t = this._reject) == null || t.call(this, new CancelError("Request aborted"));
    }
  }
  get isCancelled() {
    return this._isCancelled;
  }
}, CookieJar = class {
  constructor(t = /* @__PURE__ */ new Map()) {
    this.jar = t;
  }
  setCookie(t, e) {
    var n;
    const a = t.origin.toLowerCase();
    this.jar.has(a) || this.jar.set(a, []);
    const c = CookieJar.parse(e);
    this.jar.set(a, [...((n = this.jar.get(a)) == null ? void 0 : n.filter((o) => o.name !== c.name)) || [], c]);
  }
  getCookies(t) {
    var e;
    const n = t.origin.toLowerCase();
    return this.jar.get(n) ? ((e = this.jar.get(n)) == null ? void 0 : e.filter((a) => !a.expires || a.expires > /* @__PURE__ */ new Date())) || [] : [];
  }
  static parse(t) {
    if (typeof t != "string")
      throw new Error("argument str must be a string");
    const e = t.split(";").map((a) => a.trim());
    let n;
    if (e.length > 0) {
      const [a, c] = e[0].split("=");
      if (!a || !c)
        throw new Error("Invalid cookie");
      n = {
        name: a,
        value: c
      };
    } else
      throw new Error("Invalid cookie");
    return e.slice(1).forEach((a) => {
      const [c, o] = a.split("=");
      if (!c.trim())
        throw new Error("Invalid cookie");
      const d = c.toLowerCase(), m = o?.charAt(0) === "'" || o?.charAt(0) === '"' ? o?.slice(1, -1) : o;
      if (d === "expires" && (n.expires = new Date(m)), d === "path" && (n.path = m), d === "samesite") {
        if (m !== "Lax" && m !== "None" && m !== "Strict")
          throw new Error("Invalid cookie SameSite value");
        n.sameSite = m;
      }
      d === "secure" && (n.secure = !0);
    }), n;
  }
}, jar = new CookieJar();
axios2.interceptors.response.use((t) => (Array.isArray(t.headers["set-cookie"]) && t.headers["set-cookie"].forEach((e) => {
  jar.setCookie(new URL(t.config.url), e);
}), t));
axios2.interceptors.request.use(function(t) {
  const e = jar.getCookies(new URL(t.url));
  return e?.length > 0 && t.headers && (t.headers.cookie = e.map((n) => `${n.name}=${n.value}`).join("; ")), t;
});
var isDefined = (t) => t != null, isString$1 = (t) => typeof t == "string", isStringWithValue = (t) => isString$1(t) && t !== "", isBlob = (t) => typeof t == "object" && typeof t.type == "string" && typeof t.stream == "function" && typeof t.arrayBuffer == "function" && typeof t.constructor == "function" && typeof t.constructor.name == "string" && /^(Blob|File)$/.test(t.constructor.name) && /^(Blob|File)$/.test(t[Symbol.toStringTag]), isFormData = (t) => t instanceof FormData$1, isSuccess = (t) => t >= 200 && t < 300, base64 = (t) => btoa(t), getQueryString = (t) => {
  const e = [], n = (c, o) => {
    e.push(`${encodeURIComponent(c)}=${encodeURIComponent(String(o))}`);
  }, a = (c, o) => {
    isDefined(o) && (Array.isArray(o) ? o.forEach((d) => {
      a(c, d);
    }) : typeof o == "object" ? Object.entries(o).forEach(([d, m]) => {
      a(`${c}[${d}]`, m);
    }) : n(c, o));
  };
  return Object.entries(t).forEach(([c, o]) => {
    a(c, o);
  }), e.length > 0 ? `?${e.join("&")}` : "";
}, getUrl = (t, e) => {
  const n = t.ENCODE_PATH || encodeURI, a = e.url.replace("{api-version}", t.VERSION).replace(/{(.*?)}/g, (o, d) => {
    var m;
    return (m = e.path) != null && m.hasOwnProperty(d) ? n(String(e.path[d])) : o;
  }), c = `${t.BASE}${a}`;
  return e.query ? `${c}${getQueryString(e.query)}` : c;
}, getFormData = (t) => {
  if (t.formData) {
    const e = new FormData$1(), n = (a, c) => {
      isString$1(c) || isBlob(c) ? e.append(a, c) : e.append(a, JSON.stringify(c));
    };
    return Object.entries(t.formData).filter(([a, c]) => isDefined(c)).forEach(([a, c]) => {
      Array.isArray(c) ? c.forEach((o) => n(a, o)) : n(a, c);
    }), e;
  }
}, resolve = async (t, e) => typeof e == "function" ? e(t) : e, getHeaders = async (t, e, n) => {
  const a = await resolve(e, t.TOKEN), c = await resolve(e, t.USERNAME), o = await resolve(e, t.PASSWORD), d = await resolve(e, t.HEADERS), m = typeof n?.getHeaders == "function" && n?.getHeaders() || {}, w = Object.entries({
    Accept: "application/json",
    ...d,
    ...e.headers,
    ...m
  }).filter(([S, A]) => isDefined(A)).reduce((S, [A, B]) => ({
    ...S,
    [A]: String(B)
  }), {});
  if (isStringWithValue(a) && (w.Authorization = `Bearer ${a}`), isStringWithValue(c) && isStringWithValue(o)) {
    const S = base64(`${c}:${o}`);
    w.Authorization = `Basic ${S}`;
  }
  return e.body && (e.mediaType ? w["Content-Type"] = e.mediaType : isBlob(e.body) ? w["Content-Type"] = e.body.type || "application/octet-stream" : isString$1(e.body) ? w["Content-Type"] = "text/plain" : isFormData(e.body) || (w["Content-Type"] = "application/json")), w;
}, getRequestBody = (t) => {
  if (t.body)
    return t.body;
}, sendRequest = async (t, e, n, a, c, o, d) => {
  const m = axios2.CancelToken.source(), w = {
    url: n,
    headers: o,
    data: a ?? c,
    method: e.method,
    withCredentials: t.WITH_CREDENTIALS,
    cancelToken: m.token
  };
  Object.keys(t.HEADERS || {}).filter((A) => A.toLowerCase() === "accept").map((A) => t.HEADERS[A]).includes("application/x-bcs") && (w.responseType = "arraybuffer"), d(() => m.cancel("The user aborted a request."));
  try {
    return await axios2.request(w);
  } catch (A) {
    const B = A;
    if (B.response)
      return B.response;
    throw A;
  }
}, getResponseHeader = (t, e) => {
  if (e) {
    const n = t.headers[e];
    if (isString$1(n))
      return n;
  }
}, getResponseBody = (t) => {
  if (t.status !== 204)
    return t.data;
}, catchErrorCodes = (t, e) => {
  const a = {
    400: "Bad Request",
    401: "Unauthorized",
    403: "Forbidden",
    404: "Not Found",
    429: "Too Many Requests",
    500: "Internal Server Error",
    502: "Bad Gateway",
    503: "Service Unavailable",
    ...t.errors
  }[e.status];
  if (a)
    throw new ApiError(t, e, a);
  if (!e.ok)
    throw new ApiError(t, e, "Generic Error");
}, request = (t, e) => new CancelablePromise(async (n, a, c) => {
  try {
    const o = getUrl(t, e), d = getFormData(e), m = getRequestBody(e), w = await getHeaders(t, e, d);
    if (!c.isCancelled) {
      const S = await sendRequest(t, e, o, m, d, w, c), A = getResponseBody(S), B = getResponseHeader(S, e.responseHeader), P = {
        url: o,
        ok: isSuccess(S.status),
        status: S.status,
        statusText: S.statusText,
        body: B ?? A
      };
      catchErrorCodes(e, P);
      const I = P.body;
      try {
        I.__headers = S.headers;
      } catch {
      }
      n(I);
    }
  } catch (o) {
    a(o);
  }
}), AxiosHttpRequest = class extends BaseHttpRequest {
  constructor(t) {
    super(t);
  }
  request(t) {
    return request(this.config, t);
  }
}, AccountsService = class {
  constructor(t) {
    this.httpRequest = t;
  }
  getAccount(t, e) {
    return this.httpRequest.request({
      method: "GET",
      url: "/accounts/{address}",
      path: {
        address: t
      },
      query: {
        ledger_version: e
      }
    });
  }
  getAccountResources(t, e, n, a) {
    return this.httpRequest.request({
      method: "GET",
      url: "/accounts/{address}/resources",
      path: {
        address: t
      },
      query: {
        ledger_version: e,
        start: n,
        limit: a
      }
    });
  }
  getAccountModules(t, e, n, a) {
    return this.httpRequest.request({
      method: "GET",
      url: "/accounts/{address}/modules",
      path: {
        address: t
      },
      query: {
        ledger_version: e,
        start: n,
        limit: a
      }
    });
  }
  getAccountResource(t, e, n) {
    return this.httpRequest.request({
      method: "GET",
      url: "/accounts/{address}/resource/{resource_type}",
      path: {
        address: t,
        resource_type: e
      },
      query: {
        ledger_version: n
      }
    });
  }
  getAccountModule(t, e, n) {
    return this.httpRequest.request({
      method: "GET",
      url: "/accounts/{address}/module/{module_name}",
      path: {
        address: t,
        module_name: e
      },
      query: {
        ledger_version: n
      }
    });
  }
}, BlocksService = class {
  constructor(t) {
    this.httpRequest = t;
  }
  getBlockByHeight(t, e) {
    return this.httpRequest.request({
      method: "GET",
      url: "/blocks/by_height/{block_height}",
      path: {
        block_height: t
      },
      query: {
        with_transactions: e
      }
    });
  }
  getBlockByVersion(t, e) {
    return this.httpRequest.request({
      method: "GET",
      url: "/blocks/by_version/{version}",
      path: {
        version: t
      },
      query: {
        with_transactions: e
      }
    });
  }
}, EventsService = class {
  constructor(t) {
    this.httpRequest = t;
  }
  getEventsByCreationNumber(t, e, n, a) {
    return this.httpRequest.request({
      method: "GET",
      url: "/accounts/{address}/events/{creation_number}",
      path: {
        address: t,
        creation_number: e
      },
      query: {
        start: n,
        limit: a
      }
    });
  }
  getEventsByEventHandle(t, e, n, a, c) {
    return this.httpRequest.request({
      method: "GET",
      url: "/accounts/{address}/events/{event_handle}/{field_name}",
      path: {
        address: t,
        event_handle: e,
        field_name: n
      },
      query: {
        start: a,
        limit: c
      }
    });
  }
}, GeneralService = class {
  constructor(t) {
    this.httpRequest = t;
  }
  spec() {
    return this.httpRequest.request({
      method: "GET",
      url: "/spec"
    });
  }
  healthy(t) {
    return this.httpRequest.request({
      method: "GET",
      url: "/-/healthy",
      query: {
        duration_secs: t
      }
    });
  }
  getLedgerInfo() {
    return this.httpRequest.request({
      method: "GET",
      url: "/"
    });
  }
}, TablesService = class {
  constructor(t) {
    this.httpRequest = t;
  }
  getTableItem(t, e, n) {
    return this.httpRequest.request({
      method: "POST",
      url: "/tables/{table_handle}/item",
      path: {
        table_handle: t
      },
      query: {
        ledger_version: n
      },
      body: e,
      mediaType: "application/json"
    });
  }
  getRawTableItem(t, e, n) {
    return this.httpRequest.request({
      method: "POST",
      url: "/tables/{table_handle}/raw_item",
      path: {
        table_handle: t
      },
      query: {
        ledger_version: n
      },
      body: e,
      mediaType: "application/json"
    });
  }
}, TransactionsService = class {
  constructor(t) {
    this.httpRequest = t;
  }
  getTransactions(t, e) {
    return this.httpRequest.request({
      method: "GET",
      url: "/transactions",
      query: {
        start: t,
        limit: e
      }
    });
  }
  submitTransaction(t) {
    return this.httpRequest.request({
      method: "POST",
      url: "/transactions",
      body: t,
      mediaType: "application/json"
    });
  }
  getTransactionByHash(t) {
    return this.httpRequest.request({
      method: "GET",
      url: "/transactions/by_hash/{txn_hash}",
      path: {
        txn_hash: t
      }
    });
  }
  getTransactionByVersion(t) {
    return this.httpRequest.request({
      method: "GET",
      url: "/transactions/by_version/{txn_version}",
      path: {
        txn_version: t
      }
    });
  }
  getAccountTransactions(t, e, n) {
    return this.httpRequest.request({
      method: "GET",
      url: "/accounts/{address}/transactions",
      path: {
        address: t
      },
      query: {
        start: e,
        limit: n
      }
    });
  }
  submitBatchTransactions(t) {
    return this.httpRequest.request({
      method: "POST",
      url: "/transactions/batch",
      body: t,
      mediaType: "application/json"
    });
  }
  simulateTransaction(t, e, n, a) {
    return this.httpRequest.request({
      method: "POST",
      url: "/transactions/simulate",
      query: {
        estimate_max_gas_amount: e,
        estimate_gas_unit_price: n,
        estimate_prioritized_gas_unit_price: a
      },
      body: t,
      mediaType: "application/json"
    });
  }
  encodeSubmission(t) {
    return this.httpRequest.request({
      method: "POST",
      url: "/transactions/encode_submission",
      body: t,
      mediaType: "application/json"
    });
  }
  estimateGasPrice() {
    return this.httpRequest.request({
      method: "GET",
      url: "/estimate_gas_price"
    });
  }
}, ViewService = class {
  constructor(t) {
    this.httpRequest = t;
  }
  view(t, e) {
    return this.httpRequest.request({
      method: "POST",
      url: "/view",
      query: {
        ledger_version: e
      },
      body: t,
      mediaType: "application/json"
    });
  }
}, AptosGeneratedClient = class {
  constructor(t, e = AxiosHttpRequest) {
    var n, a, c, o;
    this.request = new e({
      BASE: (n = t?.BASE) != null ? n : "/v1",
      VERSION: (a = t?.VERSION) != null ? a : "1.2.0",
      WITH_CREDENTIALS: (c = t?.WITH_CREDENTIALS) != null ? c : !1,
      CREDENTIALS: (o = t?.CREDENTIALS) != null ? o : "include",
      TOKEN: t?.TOKEN,
      USERNAME: t?.USERNAME,
      PASSWORD: t?.PASSWORD,
      HEADERS: t?.HEADERS,
      ENCODE_PATH: t?.ENCODE_PATH
    }), this.accounts = new AccountsService(this.request), this.blocks = new BlocksService(this.request), this.events = new EventsService(this.request), this.general = new GeneralService(this.request), this.tables = new TablesService(this.request), this.transactions = new TransactionsService(this.request), this.view = new ViewService(this.request);
  }
}, OpenAPI = {
  BASE: "/v1",
  VERSION: "1.2.0",
  WITH_CREDENTIALS: !1,
  CREDENTIALS: "include",
  TOKEN: void 0,
  USERNAME: void 0,
  PASSWORD: void 0,
  HEADERS: void 0,
  ENCODE_PATH: void 0
}, AptosErrorCode = /* @__PURE__ */ ((t) => (t.ACCOUNT_NOT_FOUND = "account_not_found", t.RESOURCE_NOT_FOUND = "resource_not_found", t.MODULE_NOT_FOUND = "module_not_found", t.STRUCT_FIELD_NOT_FOUND = "struct_field_not_found", t.VERSION_NOT_FOUND = "version_not_found", t.TRANSACTION_NOT_FOUND = "transaction_not_found", t.TABLE_ITEM_NOT_FOUND = "table_item_not_found", t.BLOCK_NOT_FOUND = "block_not_found", t.VERSION_PRUNED = "version_pruned", t.BLOCK_PRUNED = "block_pruned", t.INVALID_INPUT = "invalid_input", t.INVALID_TRANSACTION_UPDATE = "invalid_transaction_update", t.SEQUENCE_NUMBER_TOO_OLD = "sequence_number_too_old", t.VM_ERROR = "vm_error", t.HEALTH_CHECK_FAILED = "health_check_failed", t.MEMPOOL_IS_FULL = "mempool_is_full", t.INTERNAL_ERROR = "internal_error", t.WEB_FRAMEWORK_ERROR = "web_framework_error", t.BCS_NOT_SUPPORTED = "bcs_not_supported", t.API_DISABLED = "api_disabled", t))(AptosErrorCode || {}), MoveFunctionVisibility = /* @__PURE__ */ ((t) => (t.PRIVATE = "private", t.PUBLIC = "public", t.FRIEND = "friend", t))(MoveFunctionVisibility || {}), RoleType = /* @__PURE__ */ ((t) => (t.VALIDATOR = "validator", t.FULL_NODE = "full_node", t))(RoleType || {}), $AccountData = {
  description: `Account data

    A simplified version of the onchain Account resource`,
  properties: {
    sequence_number: {
      type: "U64",
      isRequired: !0
    },
    authentication_key: {
      type: "HexEncodedBytes",
      isRequired: !0
    }
  }
}, $AccountSignature = {
  type: "one-of",
  description: `Account signature scheme

    The account signature scheme allows you to have two types of accounts:

    1. A single Ed25519 key account, one private key
    2. A k-of-n multi-Ed25519 key account, multiple private keys, such that k-of-n must sign a transaction.`,
  contains: [{
    type: "AccountSignature_Ed25519Signature"
  }, {
    type: "AccountSignature_MultiEd25519Signature"
  }]
}, $AccountSignature_Ed25519Signature = {
  type: "all-of",
  contains: [{
    properties: {
      type: {
        type: "string",
        isRequired: !0
      }
    }
  }, {
    type: "Ed25519Signature"
  }]
}, $AccountSignature_MultiEd25519Signature = {
  type: "all-of",
  contains: [{
    properties: {
      type: {
        type: "string",
        isRequired: !0
      }
    }
  }, {
    type: "MultiEd25519Signature"
  }]
}, $Address = {
  type: "string",
  description: `A hex encoded 32 byte Aptos account address.

    This is represented in a string as a 64 character hex string, sometimes
    shortened by stripping leading 0s, and adding a 0x.

    For example, address 0x0000000000000000000000000000000000000000000000000000000000000001 is represented as 0x1.
    `,
  format: "hex"
}, $AptosError = {
  description: `This is the generic struct we use for all API errors, it contains a string
    message and an Aptos API specific error code.`,
  properties: {
    message: {
      type: "string",
      description: "A message describing the error",
      isRequired: !0
    },
    error_code: {
      type: "AptosErrorCode",
      isRequired: !0
    },
    vm_error_code: {
      type: "number",
      description: "A code providing VM error details when submitting transactions to the VM",
      format: "uint64"
    }
  }
}, $AptosErrorCode = {
  type: "Enum"
}, $Block = {
  description: `A Block with or without transactions

    This contains the information about a transactions along with
    associated transactions if requested`,
  properties: {
    block_height: {
      type: "U64",
      isRequired: !0
    },
    block_hash: {
      type: "HashValue",
      isRequired: !0
    },
    block_timestamp: {
      type: "U64",
      isRequired: !0
    },
    first_version: {
      type: "U64",
      isRequired: !0
    },
    last_version: {
      type: "U64",
      isRequired: !0
    },
    transactions: {
      type: "array",
      contains: {
        type: "Transaction"
      }
    }
  }
}, $BlockMetadataTransaction = {
  description: `A block metadata transaction

    This signifies the beginning of a block, and contains information
    about the specific block`,
  properties: {
    version: {
      type: "U64",
      isRequired: !0
    },
    hash: {
      type: "HashValue",
      isRequired: !0
    },
    state_change_hash: {
      type: "HashValue",
      isRequired: !0
    },
    event_root_hash: {
      type: "HashValue",
      isRequired: !0
    },
    state_checkpoint_hash: {
      type: "HashValue"
    },
    gas_used: {
      type: "U64",
      isRequired: !0
    },
    success: {
      type: "boolean",
      description: "Whether the transaction was successful",
      isRequired: !0
    },
    vm_status: {
      type: "string",
      description: "The VM status of the transaction, can tell useful information in a failure",
      isRequired: !0
    },
    accumulator_root_hash: {
      type: "HashValue",
      isRequired: !0
    },
    changes: {
      type: "array",
      contains: {
        type: "WriteSetChange"
      },
      isRequired: !0
    },
    id: {
      type: "HashValue",
      isRequired: !0
    },
    epoch: {
      type: "U64",
      isRequired: !0
    },
    round: {
      type: "U64",
      isRequired: !0
    },
    events: {
      type: "array",
      contains: {
        type: "Event"
      },
      isRequired: !0
    },
    previous_block_votes_bitvec: {
      type: "array",
      contains: {
        type: "number",
        format: "uint8"
      },
      isRequired: !0
    },
    proposer: {
      type: "Address",
      isRequired: !0
    },
    failed_proposer_indices: {
      type: "array",
      contains: {
        type: "number",
        format: "uint32"
      },
      isRequired: !0
    },
    timestamp: {
      type: "U64",
      isRequired: !0
    }
  }
}, $DecodedTableData = {
  description: "Decoded table data",
  properties: {
    key: {
      description: "Key of table in JSON",
      properties: {},
      isRequired: !0
    },
    key_type: {
      type: "string",
      description: "Type of key",
      isRequired: !0
    },
    value: {
      description: "Value of table in JSON",
      properties: {},
      isRequired: !0
    },
    value_type: {
      type: "string",
      description: "Type of value",
      isRequired: !0
    }
  }
}, $DeletedTableData = {
  description: "Deleted table data",
  properties: {
    key: {
      description: "Deleted key",
      properties: {},
      isRequired: !0
    },
    key_type: {
      type: "string",
      description: "Deleted key type",
      isRequired: !0
    }
  }
}, $DeleteModule = {
  description: "Delete a module",
  properties: {
    address: {
      type: "Address",
      isRequired: !0
    },
    state_key_hash: {
      type: "string",
      description: "State key hash",
      isRequired: !0
    },
    module: {
      type: "MoveModuleId",
      isRequired: !0
    }
  }
}, $DeleteResource = {
  description: "Delete a resource",
  properties: {
    address: {
      type: "Address",
      isRequired: !0
    },
    state_key_hash: {
      type: "string",
      description: "State key hash",
      isRequired: !0
    },
    resource: {
      type: "MoveStructTag",
      isRequired: !0
    }
  }
}, $DeleteTableItem = {
  description: "Delete a table item",
  properties: {
    state_key_hash: {
      type: "string",
      isRequired: !0
    },
    handle: {
      type: "HexEncodedBytes",
      isRequired: !0
    },
    key: {
      type: "HexEncodedBytes",
      isRequired: !0
    },
    data: {
      type: "DeletedTableData"
    }
  }
}, $DirectWriteSet = {
  properties: {
    changes: {
      type: "array",
      contains: {
        type: "WriteSetChange"
      },
      isRequired: !0
    },
    events: {
      type: "array",
      contains: {
        type: "Event"
      },
      isRequired: !0
    }
  }
}, $Ed25519Signature = {
  description: "A single Ed25519 signature",
  properties: {
    public_key: {
      type: "HexEncodedBytes",
      isRequired: !0
    },
    signature: {
      type: "HexEncodedBytes",
      isRequired: !0
    }
  }
}, $EncodeSubmissionRequest = {
  description: "Request to encode a submission",
  properties: {
    sender: {
      type: "Address",
      isRequired: !0
    },
    sequence_number: {
      type: "U64",
      isRequired: !0
    },
    max_gas_amount: {
      type: "U64",
      isRequired: !0
    },
    gas_unit_price: {
      type: "U64",
      isRequired: !0
    },
    expiration_timestamp_secs: {
      type: "U64",
      isRequired: !0
    },
    payload: {
      type: "TransactionPayload",
      isRequired: !0
    },
    secondary_signers: {
      type: "array",
      contains: {
        type: "Address"
      }
    }
  }
}, $EntryFunctionId = {
  type: "string",
  description: "Entry function id is string representation of a entry function defined on-chain.\n\n    Format: `{address}::{module name}::{function name}`\n\n    Both `module name` and `function name` are case-sensitive.\n    "
}, $EntryFunctionPayload = {
  description: "Payload which runs a single entry function",
  properties: {
    function: {
      type: "EntryFunctionId",
      isRequired: !0
    },
    type_arguments: {
      type: "array",
      contains: {
        type: "MoveType"
      },
      isRequired: !0
    },
    arguments: {
      type: "array",
      contains: {
        properties: {}
      },
      isRequired: !0
    }
  }
}, $Event = {
  description: "An event from a transaction",
  properties: {
    guid: {
      type: "EventGuid",
      isRequired: !0
    },
    sequence_number: {
      type: "U64",
      isRequired: !0
    },
    type: {
      type: "MoveType",
      isRequired: !0
    },
    data: {
      description: "The JSON representation of the event",
      properties: {},
      isRequired: !0
    }
  }
}, $EventGuid = {
  properties: {
    creation_number: {
      type: "U64",
      isRequired: !0
    },
    account_address: {
      type: "Address",
      isRequired: !0
    }
  }
}, $GasEstimation = {
  description: "Struct holding the outputs of the estimate gas API",
  properties: {
    deprioritized_gas_estimate: {
      type: "number",
      description: "The deprioritized estimate for the gas unit price",
      format: "uint64"
    },
    gas_estimate: {
      type: "number",
      description: "The current estimate for the gas unit price",
      isRequired: !0,
      format: "uint64"
    },
    prioritized_gas_estimate: {
      type: "number",
      description: "The prioritized estimate for the gas unit price",
      format: "uint64"
    }
  }
}, $GenesisPayload = {
  type: "one-of",
  description: "The writeset payload of the Genesis transaction",
  contains: [{
    type: "GenesisPayload_WriteSetPayload"
  }]
}, $GenesisPayload_WriteSetPayload = {
  type: "all-of",
  contains: [{
    properties: {
      type: {
        type: "string",
        isRequired: !0
      }
    }
  }, {
    type: "WriteSetPayload"
  }]
}, $GenesisTransaction = {
  description: `The genesis transaction

    This only occurs at the genesis transaction (version 0)`,
  properties: {
    version: {
      type: "U64",
      isRequired: !0
    },
    hash: {
      type: "HashValue",
      isRequired: !0
    },
    state_change_hash: {
      type: "HashValue",
      isRequired: !0
    },
    event_root_hash: {
      type: "HashValue",
      isRequired: !0
    },
    state_checkpoint_hash: {
      type: "HashValue"
    },
    gas_used: {
      type: "U64",
      isRequired: !0
    },
    success: {
      type: "boolean",
      description: "Whether the transaction was successful",
      isRequired: !0
    },
    vm_status: {
      type: "string",
      description: "The VM status of the transaction, can tell useful information in a failure",
      isRequired: !0
    },
    accumulator_root_hash: {
      type: "HashValue",
      isRequired: !0
    },
    changes: {
      type: "array",
      contains: {
        type: "WriteSetChange"
      },
      isRequired: !0
    },
    payload: {
      type: "GenesisPayload",
      isRequired: !0
    },
    events: {
      type: "array",
      contains: {
        type: "Event"
      },
      isRequired: !0
    }
  }
}, $HashValue = {
  type: "string"
}, $HealthCheckSuccess = {
  description: "Representation of a successful healthcheck",
  properties: {
    message: {
      type: "string",
      isRequired: !0
    }
  }
}, $HexEncodedBytes = {
  type: "string",
  description: "All bytes (Vec<u8>) data is represented as hex-encoded string prefixed with `0x` and fulfilled with\n    two hex digits per byte.\n\n    Unlike the `Address` type, HexEncodedBytes will not trim any zeros.\n    ",
  format: "hex"
}, $IdentifierWrapper = {
  type: "string"
}, $IndexResponse = {
  description: `The struct holding all data returned to the client by the
    index endpoint (i.e., GET "/").  Only for responding in JSON`,
  properties: {
    chain_id: {
      type: "number",
      description: "Chain ID of the current chain",
      isRequired: !0,
      format: "uint8"
    },
    epoch: {
      type: "U64",
      isRequired: !0
    },
    ledger_version: {
      type: "U64",
      isRequired: !0
    },
    oldest_ledger_version: {
      type: "U64",
      isRequired: !0
    },
    ledger_timestamp: {
      type: "U64",
      isRequired: !0
    },
    node_role: {
      type: "RoleType",
      isRequired: !0
    },
    oldest_block_height: {
      type: "U64",
      isRequired: !0
    },
    block_height: {
      type: "U64",
      isRequired: !0
    },
    git_hash: {
      type: "string",
      description: `Git hash of the build of the API endpoint.  Can be used to determine the exact
            software version used by the API endpoint.`
    }
  }
}, $ModuleBundlePayload = {
  properties: {
    modules: {
      type: "array",
      contains: {
        type: "MoveModuleBytecode"
      },
      isRequired: !0
    }
  }
}, $MoveAbility = {
  type: "string"
}, $MoveFunction = {
  description: "Move function",
  properties: {
    name: {
      type: "IdentifierWrapper",
      isRequired: !0
    },
    visibility: {
      type: "MoveFunctionVisibility",
      isRequired: !0
    },
    is_entry: {
      type: "boolean",
      description: "Whether the function can be called as an entry function directly in a transaction",
      isRequired: !0
    },
    is_view: {
      type: "boolean",
      description: "Whether the function is a view function or not",
      isRequired: !0
    },
    generic_type_params: {
      type: "array",
      contains: {
        type: "MoveFunctionGenericTypeParam"
      },
      isRequired: !0
    },
    params: {
      type: "array",
      contains: {
        type: "MoveType"
      },
      isRequired: !0
    },
    return: {
      type: "array",
      contains: {
        type: "MoveType"
      },
      isRequired: !0
    }
  }
}, $MoveFunctionGenericTypeParam = {
  description: "Move function generic type param",
  properties: {
    constraints: {
      type: "array",
      contains: {
        type: "MoveAbility"
      },
      isRequired: !0
    }
  }
}, $MoveFunctionVisibility = {
  type: "Enum"
}, $MoveModule = {
  description: "A Move module",
  properties: {
    address: {
      type: "Address",
      isRequired: !0
    },
    name: {
      type: "IdentifierWrapper",
      isRequired: !0
    },
    friends: {
      type: "array",
      contains: {
        type: "MoveModuleId"
      },
      isRequired: !0
    },
    exposed_functions: {
      type: "array",
      contains: {
        type: "MoveFunction"
      },
      isRequired: !0
    },
    structs: {
      type: "array",
      contains: {
        type: "MoveStruct"
      },
      isRequired: !0
    }
  }
}, $MoveModuleBytecode = {
  description: "Move module bytecode along with it's ABI",
  properties: {
    bytecode: {
      type: "HexEncodedBytes",
      isRequired: !0
    },
    abi: {
      type: "MoveModule"
    }
  }
}, $MoveModuleId = {
  type: "string",
  description: `Move module id is a string representation of Move module.

    Format: \`{address}::{module name}\`

    \`address\` should be hex-encoded 32 byte account address that is prefixed with \`0x\`.

    Module name is case-sensitive.
    `
}, $MoveResource = {
  description: "A parsed Move resource",
  properties: {
    type: {
      type: "MoveStructTag",
      isRequired: !0
    },
    data: {
      type: "MoveStructValue",
      isRequired: !0
    }
  }
}, $MoveScriptBytecode = {
  description: "Move script bytecode",
  properties: {
    bytecode: {
      type: "HexEncodedBytes",
      isRequired: !0
    },
    abi: {
      type: "MoveFunction"
    }
  }
}, $MoveStruct = {
  description: "A move struct",
  properties: {
    name: {
      type: "IdentifierWrapper",
      isRequired: !0
    },
    is_native: {
      type: "boolean",
      description: "Whether the struct is a native struct of Move",
      isRequired: !0
    },
    abilities: {
      type: "array",
      contains: {
        type: "MoveAbility"
      },
      isRequired: !0
    },
    generic_type_params: {
      type: "array",
      contains: {
        type: "MoveStructGenericTypeParam"
      },
      isRequired: !0
    },
    fields: {
      type: "array",
      contains: {
        type: "MoveStructField"
      },
      isRequired: !0
    }
  }
}, $MoveStructField = {
  description: "Move struct field",
  properties: {
    name: {
      type: "IdentifierWrapper",
      isRequired: !0
    },
    type: {
      type: "MoveType",
      isRequired: !0
    }
  }
}, $MoveStructGenericTypeParam = {
  description: "Move generic type param",
  properties: {
    constraints: {
      type: "array",
      contains: {
        type: "MoveAbility"
      },
      isRequired: !0
    }
  }
}, $MoveStructTag = {
  type: "string",
  description: "String representation of a MoveStructTag (on-chain Move struct type). This exists so you\n    can specify MoveStructTags as path / query parameters, e.g. for get_events_by_event_handle.\n\n    It is a combination of:\n    1. `move_module_address`, `module_name` and `struct_name`, all joined by `::`\n    2. `struct generic type parameters` joined by `, `\n\n    Examples:\n     * `0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>`\n     * `0x1::account::Account`\n\n    Note:\n    1. Empty chars should be ignored when comparing 2 struct tag ids.\n    2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n\n    See [doc](https://aptos.dev/concepts/accounts) for more details.\n    ",
  pattern: "^0x[0-9a-zA-Z:_<>]+$"
}, $MoveStructValue = {
  description: 'This is a JSON representation of some data within an account resource. More specifically,\n    it is a map of strings to arbitrary JSON values / objects, where the keys are top level\n    fields within the given resource.\n\n    To clarify, you might query for 0x1::account::Account and see the example data.\n\n    Move `bool` type value is serialized into `boolean`.\n\n    Move `u8`, `u16` and `u32` type value is serialized into `integer`.\n\n    Move `u64`, `u128` and `u256` type value is serialized into `string`.\n\n    Move `address` type value (32 byte Aptos account address) is serialized into a HexEncodedBytes string.\n    For example:\n    - `0x1`\n    - `0x1668f6be25668c1a17cd8caf6b8d2f25`\n\n    Move `vector` type value is serialized into `array`, except `vector<u8>` which is serialized into a\n    HexEncodedBytes string with `0x` prefix.\n    For example:\n    - `vector<u64>{255, 255}` => `["255", "255"]`\n    - `vector<u8>{255, 255}` => `0xffff`\n\n    Move `struct` type value is serialized into `object` that looks like this (except some Move stdlib types, see the following section):\n    ```json\n    {\n        field1_name: field1_value,\n        field2_name: field2_value,\n        ......\n    }\n    ```\n\n    For example:\n    `{ "created": "0xa550c18", "role_id": "0" }`\n\n     **Special serialization for Move stdlib types**:\n    - [0x1::string::String](https://github.com/aptos-labs/aptos-core/blob/main/language/move-stdlib/docs/ascii.md)\n    is serialized into `string`. For example, struct value `0x1::string::String{bytes: b"Hello World!"}`\n    is serialized as `"Hello World!"` in JSON.\n    ',
  properties: {}
}, $MoveType = {
  type: "string",
  description: `String representation of an on-chain Move type tag that is exposed in transaction payload.
    Values:
    - bool
    - u8
    - u16
    - u32
    - u64
    - u128
    - u256
    - address
    - signer
    - vector: \`vector<{non-reference MoveTypeId}>\`
    - struct: \`{address}::{module_name}::{struct_name}::<{generic types}>\`

    Vector type value examples:
    - \`vector<u8>\`
    - \`vector<vector<u64>>\`
    - \`vector<0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>>\`

    Struct type value examples:
    - \`0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>
    - \`0x1::account::Account\`

    Note:
    1. Empty chars should be ignored when comparing 2 struct tag ids.
    2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).
    `,
  pattern: "^(bool|u8|u64|u128|address|signer|vector<.+>|0x[0-9a-zA-Z:_<, >]+)$"
}, $MoveValue = {
  type: "any-of",
  description: "An enum of the possible Move value types",
  contains: [{
    type: "number",
    format: "uint8"
  }, {
    type: "number",
    format: "uint16"
  }, {
    type: "number",
    format: "uint32"
  }, {
    type: "U64"
  }, {
    type: "U128"
  }, {
    type: "U256"
  }, {
    type: "boolean"
  }, {
    type: "Address"
  }, {
    type: "array",
    contains: {
      type: "MoveValue"
    }
  }, {
    type: "HexEncodedBytes"
  }, {
    type: "MoveStructValue"
  }, {
    type: "string"
  }]
}, $MultiAgentSignature = {
  description: `Multi agent signature for multi agent transactions

    This allows you to have transactions across multiple accounts`,
  properties: {
    sender: {
      type: "AccountSignature",
      isRequired: !0
    },
    secondary_signer_addresses: {
      type: "array",
      contains: {
        type: "Address"
      },
      isRequired: !0
    },
    secondary_signers: {
      type: "array",
      contains: {
        type: "AccountSignature"
      },
      isRequired: !0
    }
  }
}, $MultiEd25519Signature = {
  description: `A Ed25519 multi-sig signature

    This allows k-of-n signing for a transaction`,
  properties: {
    public_keys: {
      type: "array",
      contains: {
        type: "HexEncodedBytes"
      },
      isRequired: !0
    },
    signatures: {
      type: "array",
      contains: {
        type: "HexEncodedBytes"
      },
      isRequired: !0
    },
    threshold: {
      type: "number",
      description: "The number of signatures required for a successful transaction",
      isRequired: !0,
      format: "uint8"
    },
    bitmap: {
      type: "HexEncodedBytes",
      isRequired: !0
    }
  }
}, $MultisigPayload = {
  description: `A multisig transaction that allows an owner of a multisig account to execute a pre-approved
    transaction as the multisig account.`,
  properties: {
    multisig_address: {
      type: "Address",
      isRequired: !0
    },
    transaction_payload: {
      type: "MultisigTransactionPayload"
    }
  }
}, $MultisigTransactionPayload = {
  type: "any-of",
  contains: [{
    type: "EntryFunctionPayload"
  }]
}, $PendingTransaction = {
  description: "A transaction waiting in mempool",
  properties: {
    hash: {
      type: "HashValue",
      isRequired: !0
    },
    sender: {
      type: "Address",
      isRequired: !0
    },
    sequence_number: {
      type: "U64",
      isRequired: !0
    },
    max_gas_amount: {
      type: "U64",
      isRequired: !0
    },
    gas_unit_price: {
      type: "U64",
      isRequired: !0
    },
    expiration_timestamp_secs: {
      type: "U64",
      isRequired: !0
    },
    payload: {
      type: "TransactionPayload",
      isRequired: !0
    },
    signature: {
      type: "TransactionSignature"
    }
  }
}, $RawTableItemRequest = {
  description: "Table Item request for the GetTableItemRaw API",
  properties: {
    key: {
      type: "HexEncodedBytes",
      isRequired: !0
    }
  }
}, $RoleType = {
  type: "Enum"
}, $ScriptPayload = {
  description: "Payload which runs a script that can run multiple functions",
  properties: {
    code: {
      type: "MoveScriptBytecode",
      isRequired: !0
    },
    type_arguments: {
      type: "array",
      contains: {
        type: "MoveType"
      },
      isRequired: !0
    },
    arguments: {
      type: "array",
      contains: {
        properties: {}
      },
      isRequired: !0
    }
  }
}, $ScriptWriteSet = {
  properties: {
    execute_as: {
      type: "Address",
      isRequired: !0
    },
    script: {
      type: "ScriptPayload",
      isRequired: !0
    }
  }
}, $StateCheckpointTransaction = {
  description: "A state checkpoint transaction",
  properties: {
    version: {
      type: "U64",
      isRequired: !0
    },
    hash: {
      type: "HashValue",
      isRequired: !0
    },
    state_change_hash: {
      type: "HashValue",
      isRequired: !0
    },
    event_root_hash: {
      type: "HashValue",
      isRequired: !0
    },
    state_checkpoint_hash: {
      type: "HashValue"
    },
    gas_used: {
      type: "U64",
      isRequired: !0
    },
    success: {
      type: "boolean",
      description: "Whether the transaction was successful",
      isRequired: !0
    },
    vm_status: {
      type: "string",
      description: "The VM status of the transaction, can tell useful information in a failure",
      isRequired: !0
    },
    accumulator_root_hash: {
      type: "HashValue",
      isRequired: !0
    },
    changes: {
      type: "array",
      contains: {
        type: "WriteSetChange"
      },
      isRequired: !0
    },
    timestamp: {
      type: "U64",
      isRequired: !0
    }
  }
}, $StateKeyWrapper = {
  type: "string",
  description: `Representation of a StateKey as a hex string. This is used for cursor based pagination.
    `
}, $SubmitTransactionRequest = {
  description: `A request to submit a transaction

    This requires a transaction and a signature of it`,
  properties: {
    sender: {
      type: "Address",
      isRequired: !0
    },
    sequence_number: {
      type: "U64",
      isRequired: !0
    },
    max_gas_amount: {
      type: "U64",
      isRequired: !0
    },
    gas_unit_price: {
      type: "U64",
      isRequired: !0
    },
    expiration_timestamp_secs: {
      type: "U64",
      isRequired: !0
    },
    payload: {
      type: "TransactionPayload",
      isRequired: !0
    },
    signature: {
      type: "TransactionSignature",
      isRequired: !0
    }
  }
}, $TableItemRequest = {
  description: "Table Item request for the GetTableItem API",
  properties: {
    key_type: {
      type: "MoveType",
      isRequired: !0
    },
    value_type: {
      type: "MoveType",
      isRequired: !0
    },
    key: {
      description: "The value of the table item's key",
      properties: {},
      isRequired: !0
    }
  }
}, $Transaction = {
  type: "one-of",
  description: "Enum of the different types of transactions in Aptos",
  contains: [{
    type: "Transaction_PendingTransaction"
  }, {
    type: "Transaction_UserTransaction"
  }, {
    type: "Transaction_GenesisTransaction"
  }, {
    type: "Transaction_BlockMetadataTransaction"
  }, {
    type: "Transaction_StateCheckpointTransaction"
  }]
}, $Transaction_BlockMetadataTransaction = {
  type: "all-of",
  contains: [{
    properties: {
      type: {
        type: "string",
        isRequired: !0
      }
    }
  }, {
    type: "BlockMetadataTransaction"
  }]
}, $Transaction_GenesisTransaction = {
  type: "all-of",
  contains: [{
    properties: {
      type: {
        type: "string",
        isRequired: !0
      }
    }
  }, {
    type: "GenesisTransaction"
  }]
}, $Transaction_PendingTransaction = {
  type: "all-of",
  contains: [{
    properties: {
      type: {
        type: "string",
        isRequired: !0
      }
    }
  }, {
    type: "PendingTransaction"
  }]
}, $Transaction_StateCheckpointTransaction = {
  type: "all-of",
  contains: [{
    properties: {
      type: {
        type: "string",
        isRequired: !0
      }
    }
  }, {
    type: "StateCheckpointTransaction"
  }]
}, $Transaction_UserTransaction = {
  type: "all-of",
  contains: [{
    properties: {
      type: {
        type: "string",
        isRequired: !0
      }
    }
  }, {
    type: "UserTransaction"
  }]
}, $TransactionPayload = {
  type: "one-of",
  description: "An enum of the possible transaction payloads",
  contains: [{
    type: "TransactionPayload_EntryFunctionPayload"
  }, {
    type: "TransactionPayload_ScriptPayload"
  }, {
    type: "TransactionPayload_ModuleBundlePayload"
  }, {
    type: "TransactionPayload_MultisigPayload"
  }]
}, $TransactionPayload_EntryFunctionPayload = {
  type: "all-of",
  contains: [{
    properties: {
      type: {
        type: "string",
        isRequired: !0
      }
    }
  }, {
    type: "EntryFunctionPayload"
  }]
}, $TransactionPayload_ModuleBundlePayload = {
  type: "all-of",
  contains: [{
    properties: {
      type: {
        type: "string",
        isRequired: !0
      }
    }
  }, {
    type: "ModuleBundlePayload"
  }]
}, $TransactionPayload_MultisigPayload = {
  type: "all-of",
  contains: [{
    properties: {
      type: {
        type: "string",
        isRequired: !0
      }
    }
  }, {
    type: "MultisigPayload"
  }]
}, $TransactionPayload_ScriptPayload = {
  type: "all-of",
  contains: [{
    properties: {
      type: {
        type: "string",
        isRequired: !0
      }
    }
  }, {
    type: "ScriptPayload"
  }]
}, $TransactionsBatchSingleSubmissionFailure = {
  description: "Information telling which batch submission transactions failed",
  properties: {
    error: {
      type: "AptosError",
      isRequired: !0
    },
    transaction_index: {
      type: "number",
      description: "The index of which transaction failed, same as submission order",
      isRequired: !0,
      format: "uint64"
    }
  }
}, $TransactionsBatchSubmissionResult = {
  description: `Batch transaction submission result

    Tells which transactions failed`,
  properties: {
    transaction_failures: {
      type: "array",
      contains: {
        type: "TransactionsBatchSingleSubmissionFailure"
      },
      isRequired: !0
    }
  }
}, $TransactionSignature = {
  type: "one-of",
  description: "An enum representing the different transaction signatures available",
  contains: [{
    type: "TransactionSignature_Ed25519Signature"
  }, {
    type: "TransactionSignature_MultiEd25519Signature"
  }, {
    type: "TransactionSignature_MultiAgentSignature"
  }]
}, $TransactionSignature_Ed25519Signature = {
  type: "all-of",
  contains: [{
    properties: {
      type: {
        type: "string",
        isRequired: !0
      }
    }
  }, {
    type: "Ed25519Signature"
  }]
}, $TransactionSignature_MultiAgentSignature = {
  type: "all-of",
  contains: [{
    properties: {
      type: {
        type: "string",
        isRequired: !0
      }
    }
  }, {
    type: "MultiAgentSignature"
  }]
}, $TransactionSignature_MultiEd25519Signature = {
  type: "all-of",
  contains: [{
    properties: {
      type: {
        type: "string",
        isRequired: !0
      }
    }
  }, {
    type: "MultiEd25519Signature"
  }]
}, $U128 = {
  type: "string",
  description: `A string containing a 128-bit unsigned integer.

    We represent u128 values as a string to ensure compatibility with languages such
    as JavaScript that do not parse u128s in JSON natively.
    `,
  format: "uint128"
}, $U256 = {
  type: "string",
  description: `A string containing a 256-bit unsigned integer.

    We represent u256 values as a string to ensure compatibility with languages such
    as JavaScript that do not parse u256s in JSON natively.
    `,
  format: "uint256"
}, $U64 = {
  type: "string",
  description: `A string containing a 64-bit unsigned integer.

    We represent u64 values as a string to ensure compatibility with languages such
    as JavaScript that do not parse u64s in JSON natively.
    `,
  format: "uint64"
}, $UserTransaction = {
  description: "A transaction submitted by a user to change the state of the blockchain",
  properties: {
    version: {
      type: "U64",
      isRequired: !0
    },
    hash: {
      type: "HashValue",
      isRequired: !0
    },
    state_change_hash: {
      type: "HashValue",
      isRequired: !0
    },
    event_root_hash: {
      type: "HashValue",
      isRequired: !0
    },
    state_checkpoint_hash: {
      type: "HashValue"
    },
    gas_used: {
      type: "U64",
      isRequired: !0
    },
    success: {
      type: "boolean",
      description: "Whether the transaction was successful",
      isRequired: !0
    },
    vm_status: {
      type: "string",
      description: "The VM status of the transaction, can tell useful information in a failure",
      isRequired: !0
    },
    accumulator_root_hash: {
      type: "HashValue",
      isRequired: !0
    },
    changes: {
      type: "array",
      contains: {
        type: "WriteSetChange"
      },
      isRequired: !0
    },
    sender: {
      type: "Address",
      isRequired: !0
    },
    sequence_number: {
      type: "U64",
      isRequired: !0
    },
    max_gas_amount: {
      type: "U64",
      isRequired: !0
    },
    gas_unit_price: {
      type: "U64",
      isRequired: !0
    },
    expiration_timestamp_secs: {
      type: "U64",
      isRequired: !0
    },
    payload: {
      type: "TransactionPayload",
      isRequired: !0
    },
    signature: {
      type: "TransactionSignature"
    },
    events: {
      type: "array",
      contains: {
        type: "Event"
      },
      isRequired: !0
    },
    timestamp: {
      type: "U64",
      isRequired: !0
    }
  }
}, $VersionedEvent = {
  description: "An event from a transaction with a version",
  properties: {
    version: {
      type: "U64",
      isRequired: !0
    },
    guid: {
      type: "EventGuid",
      isRequired: !0
    },
    sequence_number: {
      type: "U64",
      isRequired: !0
    },
    type: {
      type: "MoveType",
      isRequired: !0
    },
    data: {
      description: "The JSON representation of the event",
      properties: {},
      isRequired: !0
    }
  }
}, $ViewRequest = {
  description: "View request for the Move View Function API",
  properties: {
    function: {
      type: "EntryFunctionId",
      isRequired: !0
    },
    type_arguments: {
      type: "array",
      contains: {
        type: "MoveType"
      },
      isRequired: !0
    },
    arguments: {
      type: "array",
      contains: {
        properties: {}
      },
      isRequired: !0
    }
  }
}, $WriteModule = {
  description: "Write a new module or update an existing one",
  properties: {
    address: {
      type: "Address",
      isRequired: !0
    },
    state_key_hash: {
      type: "string",
      description: "State key hash",
      isRequired: !0
    },
    data: {
      type: "MoveModuleBytecode",
      isRequired: !0
    }
  }
}, $WriteResource = {
  description: "Write a resource or update an existing one",
  properties: {
    address: {
      type: "Address",
      isRequired: !0
    },
    state_key_hash: {
      type: "string",
      description: "State key hash",
      isRequired: !0
    },
    data: {
      type: "MoveResource",
      isRequired: !0
    }
  }
}, $WriteSet = {
  type: "one-of",
  description: "The associated writeset with a payload",
  contains: [{
    type: "WriteSet_ScriptWriteSet"
  }, {
    type: "WriteSet_DirectWriteSet"
  }]
}, $WriteSet_DirectWriteSet = {
  type: "all-of",
  contains: [{
    properties: {
      type: {
        type: "string",
        isRequired: !0
      }
    }
  }, {
    type: "DirectWriteSet"
  }]
}, $WriteSet_ScriptWriteSet = {
  type: "all-of",
  contains: [{
    properties: {
      type: {
        type: "string",
        isRequired: !0
      }
    }
  }, {
    type: "ScriptWriteSet"
  }]
}, $WriteSetChange = {
  type: "one-of",
  description: "A final state change of a transaction on a resource or module",
  contains: [{
    type: "WriteSetChange_DeleteModule"
  }, {
    type: "WriteSetChange_DeleteResource"
  }, {
    type: "WriteSetChange_DeleteTableItem"
  }, {
    type: "WriteSetChange_WriteModule"
  }, {
    type: "WriteSetChange_WriteResource"
  }, {
    type: "WriteSetChange_WriteTableItem"
  }]
}, $WriteSetChange_DeleteModule = {
  type: "all-of",
  contains: [{
    properties: {
      type: {
        type: "string",
        isRequired: !0
      }
    }
  }, {
    type: "DeleteModule"
  }]
}, $WriteSetChange_DeleteResource = {
  type: "all-of",
  contains: [{
    properties: {
      type: {
        type: "string",
        isRequired: !0
      }
    }
  }, {
    type: "DeleteResource"
  }]
}, $WriteSetChange_DeleteTableItem = {
  type: "all-of",
  contains: [{
    properties: {
      type: {
        type: "string",
        isRequired: !0
      }
    }
  }, {
    type: "DeleteTableItem"
  }]
}, $WriteSetChange_WriteModule = {
  type: "all-of",
  contains: [{
    properties: {
      type: {
        type: "string",
        isRequired: !0
      }
    }
  }, {
    type: "WriteModule"
  }]
}, $WriteSetChange_WriteResource = {
  type: "all-of",
  contains: [{
    properties: {
      type: {
        type: "string",
        isRequired: !0
      }
    }
  }, {
    type: "WriteResource"
  }]
}, $WriteSetChange_WriteTableItem = {
  type: "all-of",
  contains: [{
    properties: {
      type: {
        type: "string",
        isRequired: !0
      }
    }
  }, {
    type: "WriteTableItem"
  }]
}, $WriteSetPayload = {
  description: "A writeset payload, used only for genesis",
  properties: {
    write_set: {
      type: "WriteSet",
      isRequired: !0
    }
  }
}, $WriteTableItem = {
  description: "Change set to write a table item",
  properties: {
    state_key_hash: {
      type: "string",
      isRequired: !0
    },
    handle: {
      type: "HexEncodedBytes",
      isRequired: !0
    },
    key: {
      type: "HexEncodedBytes",
      isRequired: !0
    },
    value: {
      type: "HexEncodedBytes",
      isRequired: !0
    },
    data: {
      type: "DecodedTableData"
    }
  }
};
function assertType(t, e, n) {
  if (!e?.includes(typeof t))
    throw new Error(
      n || `Invalid arg: ${t} type should be ${e instanceof Array ? e.join(" or ") : e}`
    );
}
function ensureBoolean(t) {
  if (assertType(t, ["boolean", "string"]), typeof t == "boolean")
    return t;
  if (t === "true")
    return !0;
  if (t === "false")
    return !1;
  throw new Error("Invalid boolean string.");
}
function ensureNumber(t) {
  if (assertType(t, ["number", "string"]), typeof t == "number")
    return t;
  const e = Number.parseInt(t, 10);
  if (Number.isNaN(e))
    throw new Error("Invalid number string.");
  return e;
}
function ensureBigInt(t) {
  return assertType(t, ["number", "bigint", "string"]), BigInt(t);
}
function serializeArg(t, e, n) {
  if (e instanceof TypeTagBool) {
    n.serializeBool(ensureBoolean(t));
    return;
  }
  if (e instanceof TypeTagU8) {
    n.serializeU8(ensureNumber(t));
    return;
  }
  if (e instanceof TypeTagU16) {
    n.serializeU16(ensureNumber(t));
    return;
  }
  if (e instanceof TypeTagU32) {
    n.serializeU32(ensureNumber(t));
    return;
  }
  if (e instanceof TypeTagU64) {
    n.serializeU64(ensureBigInt(t));
    return;
  }
  if (e instanceof TypeTagU128) {
    n.serializeU128(ensureBigInt(t));
    return;
  }
  if (e instanceof TypeTagU256) {
    n.serializeU256(ensureBigInt(t));
    return;
  }
  if (e instanceof TypeTagAddress) {
    let a;
    if (typeof t == "string" || t instanceof HexString)
      a = AccountAddress.fromHex(t);
    else if (t instanceof AccountAddress)
      a = t;
    else
      throw new Error("Invalid account address.");
    a.serialize(n);
    return;
  }
  if (e instanceof TypeTagVector) {
    if (e.value instanceof TypeTagU8) {
      if (t instanceof Uint8Array) {
        n.serializeBytes(t);
        return;
      }
      if (typeof t == "string") {
        n.serializeStr(t);
        return;
      }
    }
    if (!Array.isArray(t))
      throw new Error("Invalid vector args.");
    n.serializeU32AsUleb128(t.length), t.forEach((a) => serializeArg(a, e.value, n));
    return;
  }
  if (e instanceof TypeTagStruct) {
    const { address: a, module_name: c, name: o } = e.value;
    if (`${HexString.fromUint8Array(a.address).toShortString()}::${c.value}::${o.value}` != "0x1::string::String")
      throw new Error("The only supported struct arg is of type 0x1::string::String");
    assertType(t, ["string"]), n.serializeStr(t);
    return;
  }
  throw new Error("Unsupported arg type.");
}
function argToTransactionArgument(t, e) {
  if (e instanceof TypeTagBool)
    return new TransactionArgumentBool(ensureBoolean(t));
  if (e instanceof TypeTagU8)
    return new TransactionArgumentU8(ensureNumber(t));
  if (e instanceof TypeTagU16)
    return new TransactionArgumentU16(ensureNumber(t));
  if (e instanceof TypeTagU32)
    return new TransactionArgumentU32(ensureNumber(t));
  if (e instanceof TypeTagU64)
    return new TransactionArgumentU64(ensureBigInt(t));
  if (e instanceof TypeTagU128)
    return new TransactionArgumentU128(ensureBigInt(t));
  if (e instanceof TypeTagU256)
    return new TransactionArgumentU256(ensureBigInt(t));
  if (e instanceof TypeTagAddress) {
    let n;
    if (typeof t == "string" || t instanceof HexString)
      n = AccountAddress.fromHex(t);
    else if (t instanceof AccountAddress)
      n = t;
    else
      throw new Error("Invalid account address.");
    return new TransactionArgumentAddress(n);
  }
  if (e instanceof TypeTagVector && e.value instanceof TypeTagU8) {
    if (!(t instanceof Uint8Array))
      throw new Error(`${t} should be an instance of Uint8Array`);
    return new TransactionArgumentU8Vector(t);
  }
  throw new Error("Unknown type for TransactionArgument.");
}
var RAW_TRANSACTION_SALT = "APTOS::RawTransaction", RAW_TRANSACTION_WITH_DATA_SALT = "APTOS::RawTransactionWithData", TransactionBuilder = class {
  constructor(t, e) {
    this.rawTxnBuilder = e, this.signingFunction = t;
  }
  build(t, e, n) {
    if (!this.rawTxnBuilder)
      throw new Error("this.rawTxnBuilder doesn't exist.");
    return this.rawTxnBuilder.build(t, e, n);
  }
  static getSigningMessage(t) {
    const e = sha3_256.create();
    if (t instanceof RawTransaction)
      e.update(RAW_TRANSACTION_SALT);
    else if (t instanceof MultiAgentRawTransaction)
      e.update(RAW_TRANSACTION_WITH_DATA_SALT);
    else
      throw new Error("Unknown transaction type.");
    const n = e.digest(), a = bcsToBytes(t), c = new Uint8Array(n.length + a.length);
    return c.set(n), c.set(a, n.length), c;
  }
}, TransactionBuilderEd25519 = class extends TransactionBuilder {
  constructor(t, e, n) {
    super(t, n), this.publicKey = e;
  }
  rawToSigned(t) {
    const e = TransactionBuilder.getSigningMessage(t), n = this.signingFunction(e), a = new TransactionAuthenticatorEd25519(
      new Ed25519PublicKey(this.publicKey),
      n
    );
    return new SignedTransaction(t, a);
  }
  sign(t) {
    return bcsToBytes(this.rawToSigned(t));
  }
}, TransactionBuilderMultiEd25519 = class extends TransactionBuilder {
  constructor(t, e) {
    super(t), this.publicKey = e;
  }
  rawToSigned(t) {
    const e = TransactionBuilder.getSigningMessage(t), n = this.signingFunction(e), a = new TransactionAuthenticatorMultiEd25519(this.publicKey, n);
    return new SignedTransaction(t, a);
  }
  sign(t) {
    return bcsToBytes(this.rawToSigned(t));
  }
}, TransactionBuilderABI = class {
  constructor(t, e) {
    this.abiMap = /* @__PURE__ */ new Map(), t.forEach((n) => {
      const a = new Deserializer(n), c = ScriptABI.deserialize(a);
      let o;
      if (c instanceof EntryFunctionABI) {
        const d = c, { address: m, name: w } = d.module_name;
        o = `${HexString.fromUint8Array(m.address).toShortString()}::${w.value}::${d.name}`;
      } else
        o = c.name;
      if (this.abiMap.has(o))
        throw new Error("Found conflicting ABI interfaces");
      this.abiMap.set(o, c);
    }), this.builderConfig = {
      maxGasAmount: BigInt(DEFAULT_MAX_GAS_AMOUNT),
      expSecFromNow: DEFAULT_TXN_EXP_SEC_FROM_NOW,
      ...e
    };
  }
  static toBCSArgs(t, e) {
    if (t.length !== e.length)
      throw new Error("Wrong number of args provided.");
    return e.map((n, a) => {
      const c = new Serializer();
      return serializeArg(n, t[a].type_tag, c), c.getBytes();
    });
  }
  static toTransactionArguments(t, e) {
    if (t.length !== e.length)
      throw new Error("Wrong number of args provided.");
    return e.map((n, a) => argToTransactionArgument(n, t[a].type_tag));
  }
  setSequenceNumber(t) {
    this.builderConfig.sequenceNumber = BigInt(t);
  }
  buildTransactionPayload(t, e, n) {
    const a = e.map((d) => new TypeTagParser(d).parseTypeTag());
    let c;
    if (!this.abiMap.has(t))
      throw new Error(`Cannot find function: ${t}`);
    const o = this.abiMap.get(t);
    if (o instanceof EntryFunctionABI) {
      const d = o, m = TransactionBuilderABI.toBCSArgs(d.args, n);
      c = new TransactionPayloadEntryFunction(
        new EntryFunction(d.module_name, new Identifier(d.name), a, m)
      );
    } else if (o instanceof TransactionScriptABI) {
      const d = o, m = TransactionBuilderABI.toTransactionArguments(d.args, n);
      c = new TransactionPayloadScript(new Script(d.code, a, m));
    } else
      throw new Error("Unknown ABI format.");
    return c;
  }
  build(t, e, n) {
    const { sender: a, sequenceNumber: c, gasUnitPrice: o, maxGasAmount: d, expSecFromNow: m, chainId: w } = this.builderConfig;
    if (!o)
      throw new Error("No gasUnitPrice provided.");
    const S = a instanceof AccountAddress ? a : AccountAddress.fromHex(a), A = BigInt(Math.floor(Date.now() / 1e3) + Number(m)), B = this.buildTransactionPayload(t, e, n);
    if (B)
      return new RawTransaction(
        S,
        BigInt(c),
        B,
        BigInt(d),
        BigInt(o),
        A,
        new ChainId(Number(w))
      );
    throw new Error("Invalid ABI.");
  }
}, TransactionBuilderRemoteABI = class {
  constructor(t, e) {
    this.aptosClient = t, this.builderConfig = e;
  }
  async fetchABI(t) {
    const n = (await this.aptosClient.getAccountModules(t)).map((c) => c.abi).flatMap(
      (c) => c.exposed_functions.filter((o) => o.is_entry).map(
        (o) => ({
          fullName: `${c.address}::${c.name}::${o.name}`,
          ...o
        })
      )
    ), a = /* @__PURE__ */ new Map();
    return n.forEach((c) => {
      a.set(c.fullName, c);
    }), a;
  }
  async build(t, e, n) {
    if (t = ((Z) => Z.replace(/^0[xX]0*/g, "0x"))(t), t.split("::").length !== 3)
      throw new Error(
        "'func' needs to be a fully qualified function name in format <address>::<module>::<function>, e.g. 0x1::coins::transfer"
      );
    const [o, d] = t.split("::"), m = await this.fetchABI(o);
    if (!m.has(t))
      throw new Error(`${t} doesn't exist.`);
    const w = m.get(t), A = w.params.filter((Z) => Z !== "signer" && Z !== "&signer").map(
      (Z, X) => new ArgumentABI(`var${X}`, new TypeTagParser(Z, e).parseTypeTag())
    ), B = new EntryFunctionABI(
      w.name,
      ModuleId.fromStr(`${o}::${d}`),
      "",
      w.generic_type_params.map((Z, X) => new TypeArgumentABI(`${X}`)),
      A
    ), { sender: P, ...I } = this.builderConfig, O = P instanceof AccountAddress ? HexString.fromUint8Array(P.address) : P, [{ sequence_number: L }, C, { gas_estimate: z }] = await Promise.all([
      I?.sequenceNumber ? Promise.resolve({ sequence_number: I?.sequenceNumber }) : this.aptosClient.getAccount(O),
      I?.chainId ? Promise.resolve(I?.chainId) : this.aptosClient.getChainId(),
      I?.gasUnitPrice ? Promise.resolve({ gas_estimate: I?.gasUnitPrice }) : this.aptosClient.estimateGasPrice()
    ]);
    return new TransactionBuilderABI([bcsToBytes(B)], {
      sender: P,
      sequenceNumber: L,
      chainId: C,
      gasUnitPrice: BigInt(z),
      ...I
    }).build(t, e, n);
  }
};
__decorateClass([
  MemoizeExpiring(10 * 60 * 1e3)
], TransactionBuilderRemoteABI.prototype, "fetchABI", 1);
var _AptosClient = class {
  constructor(t, e, n = !1) {
    if (!t)
      throw new Error("Node URL cannot be empty.");
    const a = e == null ? {} : { ...e };
    n ? this.nodeUrl = t : this.nodeUrl = fixNodeUrl(t), a.BASE = this.nodeUrl, e?.WITH_CREDENTIALS === !1 ? a.WITH_CREDENTIALS = !1 : a.WITH_CREDENTIALS = !0, this.client = new AptosGeneratedClient(a);
  }
  async getAccount(t) {
    return this.client.accounts.getAccount(HexString.ensure(t).hex());
  }
  async getAccountTransactions(t, e) {
    var n;
    return this.client.transactions.getAccountTransactions(
      HexString.ensure(t).hex(),
      (n = e?.start) == null ? void 0 : n.toString(),
      e?.limit
    );
  }
  async getAccountModules(t, e) {
    const n = this.client.accounts.getAccountModules.bind({ httpRequest: this.client.request });
    return await paginateWithCursor(n, t, 1e3, e);
  }
  async getAccountModule(t, e, n) {
    var a;
    return this.client.accounts.getAccountModule(
      HexString.ensure(t).hex(),
      e,
      (a = n?.ledgerVersion) == null ? void 0 : a.toString()
    );
  }
  async getAccountResources(t, e) {
    const n = this.client.accounts.getAccountResources.bind({ httpRequest: this.client.request });
    return await paginateWithCursor(n, t, 9999, e);
  }
  async getAccountResource(t, e, n) {
    var a;
    return this.client.accounts.getAccountResource(
      HexString.ensure(t).hex(),
      e,
      (a = n?.ledgerVersion) == null ? void 0 : a.toString()
    );
  }
  static generateBCSTransaction(t, e) {
    return new TransactionBuilderEd25519((a) => {
      const c = t.signBuffer(a);
      return new aptos_types_exports.Ed25519Signature(c.toUint8Array());
    }, t.pubKey().toUint8Array()).sign(e);
  }
  static generateBCSSimulation(t, e) {
    return new TransactionBuilderEd25519((a) => {
      const c = new Uint8Array(64);
      return new aptos_types_exports.Ed25519Signature(c);
    }, t.pubKey().toUint8Array()).sign(e);
  }
  async generateTransaction(t, e, n) {
    const a = { sender: t };
    if (n?.sequence_number && (a.sequenceNumber = n.sequence_number), n?.gas_unit_price && (a.gasUnitPrice = n.gas_unit_price), n?.max_gas_amount && (a.maxGasAmount = n.max_gas_amount), n?.expiration_timestamp_secs) {
      const o = Number.parseInt(n.expiration_timestamp_secs, 10);
      a.expSecFromNow = o - Math.floor(Date.now() / 1e3);
    }
    return new TransactionBuilderRemoteABI(this, a).build(e.function, e.type_arguments, e.arguments);
  }
  async signTransaction(t, e) {
    return Promise.resolve(_AptosClient.generateBCSTransaction(t, e));
  }
  async getEventsByCreationNumber(t, e, n) {
    var a;
    return this.client.events.getEventsByCreationNumber(
      HexString.ensure(t).hex(),
      e.toString(),
      (a = n?.start) == null ? void 0 : a.toString(),
      n?.limit
    );
  }
  async getEventsByEventHandle(t, e, n, a) {
    var c;
    return this.client.events.getEventsByEventHandle(
      HexString.ensure(t).hex(),
      e,
      n,
      (c = a?.start) == null ? void 0 : c.toString(),
      a?.limit
    );
  }
  async submitTransaction(t) {
    return this.submitSignedBCSTransaction(t);
  }
  async simulateTransaction(t, e, n) {
    let a;
    return t instanceof AptosAccount ? a = _AptosClient.generateBCSSimulation(t, e) : t instanceof MultiEd25519PublicKey ? a = new TransactionBuilderMultiEd25519(() => {
      const { threshold: o } = t, d = [], m = [];
      for (let S = 0; S < o; S += 1)
        d.push(S), m.push(new aptos_types_exports.Ed25519Signature(new Uint8Array(64)));
      const w = aptos_types_exports.MultiEd25519Signature.createBitmap(d);
      return new aptos_types_exports.MultiEd25519Signature(m, w);
    }, t).sign(e) : a = new TransactionBuilderEd25519(() => {
      const o = new Uint8Array(64);
      return new aptos_types_exports.Ed25519Signature(o);
    }, t.toBytes()).sign(e), this.submitBCSSimulation(a, n);
  }
  async submitSignedBCSTransaction(t) {
    return this.client.request.request({
      url: "/transactions",
      method: "POST",
      body: t,
      mediaType: "application/x.aptos.signed_transaction+bcs"
    });
  }
  async submitBCSSimulation(t, e) {
    var n, a, c;
    const o = {
      estimate_gas_unit_price: (n = e?.estimateGasUnitPrice) != null ? n : !1,
      estimate_max_gas_amount: (a = e?.estimateMaxGasAmount) != null ? a : !1,
      estimate_prioritized_gas_unit_price: (c = e?.estimatePrioritizedGasUnitPrice) != null ? c : !1
    };
    return this.client.request.request({
      url: "/transactions/simulate",
      query: o,
      method: "POST",
      body: t,
      mediaType: "application/x.aptos.signed_transaction+bcs"
    });
  }
  async getTransactions(t) {
    var e;
    return this.client.transactions.getTransactions((e = t?.start) == null ? void 0 : e.toString(), t?.limit);
  }
  async getTransactionByHash(t) {
    return this.client.transactions.getTransactionByHash(t);
  }
  async getTransactionByVersion(t) {
    return this.client.transactions.getTransactionByVersion(t.toString());
  }
  async transactionPending(t) {
    try {
      return (await this.client.transactions.getTransactionByHash(t)).type === "pending_transaction";
    } catch (e) {
      if (e?.status === 404)
        return !0;
      throw e;
    }
  }
  async waitForTransactionWithResult(t, e) {
    var n, a;
    const c = (n = e?.timeoutSecs) != null ? n : DEFAULT_TXN_TIMEOUT_SEC, o = (a = e?.checkSuccess) != null ? a : !1;
    let d = !0, m = 0, w;
    for (; d && !(m >= c); ) {
      try {
        if (w = await this.client.transactions.getTransactionByHash(t), d = w.type === "pending_transaction", !d)
          break;
      } catch (S) {
        const A = S instanceof ApiError, B = A && S.status !== 404 && S.status >= 400 && S.status < 500;
        if (!A || B)
          throw S;
      }
      await sleep(1e3), m += 1;
    }
    if (w === void 0)
      throw new Error(`Waiting for transaction ${t} failed`);
    if (d)
      throw new WaitForTransactionError(
        `Waiting for transaction ${t} timed out after ${c} seconds`,
        w
      );
    if (!o)
      return w;
    if (!w?.success)
      throw new FailedTransactionError(
        `Transaction ${t} committed to the blockchain but execution failed`,
        w
      );
    return w;
  }
  async waitForTransaction(t, e) {
    await this.waitForTransactionWithResult(t, e);
  }
  async getLedgerInfo() {
    return this.client.general.getLedgerInfo();
  }
  async getChainId() {
    return (await this.getLedgerInfo()).chain_id;
  }
  async getTableItem(t, e, n) {
    var a;
    return await this.client.tables.getTableItem(t, e, (a = n?.ledgerVersion) == null ? void 0 : a.toString());
  }
  async generateRawTransaction(t, e, n) {
    const [{ sequence_number: a }, c, { gas_estimate: o }] = await Promise.all([
      this.getAccount(t),
      this.getChainId(),
      n?.gasUnitPrice ? Promise.resolve({ gas_estimate: n.gasUnitPrice }) : this.estimateGasPrice()
    ]), { maxGasAmount: d, gasUnitPrice: m, expireTimestamp: w } = {
      maxGasAmount: BigInt(DEFAULT_MAX_GAS_AMOUNT),
      gasUnitPrice: BigInt(o),
      expireTimestamp: BigInt(Math.floor(Date.now() / 1e3) + DEFAULT_TXN_EXP_SEC_FROM_NOW),
      ...n
    };
    return new aptos_types_exports.RawTransaction(
      aptos_types_exports.AccountAddress.fromHex(t),
      BigInt(a),
      e,
      d,
      m,
      w,
      new aptos_types_exports.ChainId(c)
    );
  }
  async generateSignSubmitTransaction(t, e, n) {
    const a = await this.generateRawTransaction(t.address(), e, n), c = _AptosClient.generateBCSTransaction(t, a);
    return (await this.submitSignedBCSTransaction(c)).hash;
  }
  async publishPackage(t, e, n, a) {
    const c = new Serializer();
    serializeVector(n, c);
    const o = new aptos_types_exports.TransactionPayloadEntryFunction(
      aptos_types_exports.EntryFunction.natural(
        "0x1::code",
        "publish_package_txn",
        [],
        [bcsSerializeBytes(e), c.getBytes()]
      )
    );
    return this.generateSignSubmitTransaction(t, o, a);
  }
  async generateSignSubmitWaitForTransaction(t, e, n) {
    const a = await this.generateSignSubmitTransaction(t, e, n);
    return this.waitForTransactionWithResult(a, n);
  }
  async estimateGasPrice() {
    return this.client.transactions.estimateGasPrice();
  }
  async estimateMaxGasAmount(t) {
    const e = `0x1::coin::CoinStore<${APTOS_COIN}>`, [{ gas_estimate: n }, a] = await Promise.all([
      this.estimateGasPrice(),
      this.getAccountResources(t)
    ]), c = a.find((d) => d.type === e);
    return BigInt(c.data.coin.value) / BigInt(n);
  }
  async rotateAuthKeyEd25519(t, e, n) {
    const { sequence_number: a, authentication_key: c } = await this.getAccount(
      t.address()
    ), o = new AptosAccount(e), d = new aptos_types_exports.RotationProofChallenge(
      aptos_types_exports.AccountAddress.CORE_CODE_ADDRESS,
      "account",
      "RotationProofChallenge",
      BigInt(a),
      aptos_types_exports.AccountAddress.fromHex(t.address()),
      new aptos_types_exports.AccountAddress(new HexString(c).toUint8Array()),
      o.pubKey().toUint8Array()
    ), m = HexString.fromUint8Array(bcsToBytes(d)), w = t.signHexString(m), S = o.signHexString(m), A = new aptos_types_exports.TransactionPayloadEntryFunction(
      aptos_types_exports.EntryFunction.natural(
        "0x1::account",
        "rotate_authentication_key",
        [],
        [
          bcsSerializeU8(0),
          bcsSerializeBytes(t.pubKey().toUint8Array()),
          bcsSerializeU8(0),
          bcsSerializeBytes(o.pubKey().toUint8Array()),
          bcsSerializeBytes(w.toUint8Array()),
          bcsSerializeBytes(S.toUint8Array())
        ]
      )
    ), B = await this.generateRawTransaction(t.address(), A, n), P = _AptosClient.generateBCSTransaction(t, B);
    return this.submitSignedBCSTransaction(P);
  }
  async lookupOriginalAddress(t) {
    const e = await this.getAccountResource("0x1", "0x1::account::OriginatingAddress"), {
      address_map: { handle: n }
    } = e.data, a = await this.getTableItem(n, {
      key_type: "address",
      value_type: "address",
      key: HexString.ensure(t).hex()
    });
    return new HexString(a);
  }
  async getBlockByHeight(t, e) {
    return this.client.blocks.getBlockByHeight(t, e);
  }
  async getBlockByVersion(t, e) {
    return this.client.blocks.getBlockByVersion(t, e);
  }
  async view(t, e) {
    return this.client.view.view(t, e);
  }
  clearCache(t) {
    clear(t);
  }
}, AptosClient = _AptosClient;
__decorateClass([
  parseApiError
], AptosClient.prototype, "getAccount", 1);
__decorateClass([
  parseApiError
], AptosClient.prototype, "getAccountTransactions", 1);
__decorateClass([
  parseApiError
], AptosClient.prototype, "getAccountModules", 1);
__decorateClass([
  parseApiError
], AptosClient.prototype, "getAccountModule", 1);
__decorateClass([
  parseApiError
], AptosClient.prototype, "getAccountResources", 1);
__decorateClass([
  parseApiError
], AptosClient.prototype, "getAccountResource", 1);
__decorateClass([
  parseApiError
], AptosClient.prototype, "getEventsByCreationNumber", 1);
__decorateClass([
  parseApiError
], AptosClient.prototype, "getEventsByEventHandle", 1);
__decorateClass([
  parseApiError
], AptosClient.prototype, "submitSignedBCSTransaction", 1);
__decorateClass([
  parseApiError
], AptosClient.prototype, "submitBCSSimulation", 1);
__decorateClass([
  parseApiError
], AptosClient.prototype, "getTransactions", 1);
__decorateClass([
  parseApiError
], AptosClient.prototype, "getTransactionByHash", 1);
__decorateClass([
  parseApiError
], AptosClient.prototype, "getTransactionByVersion", 1);
__decorateClass([
  parseApiError
], AptosClient.prototype, "getLedgerInfo", 1);
__decorateClass([
  Memoize()
], AptosClient.prototype, "getChainId", 1);
__decorateClass([
  parseApiError
], AptosClient.prototype, "getTableItem", 1);
__decorateClass([
  parseApiError,
  Memoize({
    ttlMs: 5 * 60 * 1e3,
    tags: ["gas_estimates"]
  })
], AptosClient.prototype, "estimateGasPrice", 1);
__decorateClass([
  parseApiError
], AptosClient.prototype, "estimateMaxGasAmount", 1);
__decorateClass([
  parseApiError
], AptosClient.prototype, "getBlockByHeight", 1);
__decorateClass([
  parseApiError
], AptosClient.prototype, "getBlockByVersion", 1);
__decorateClass([
  parseApiError
], AptosClient.prototype, "view", 1);
var ApiError2 = class extends Error {
  constructor(t, e, n, a) {
    super(e), this.status = t, this.message = e, this.errorCode = n, this.vmErrorCode = a;
  }
}, WaitForTransactionError = class extends Error {
  constructor(t, e) {
    super(t), this.lastSubmittedTransaction = e;
  }
}, FailedTransactionError = class extends Error {
  constructor(t, e) {
    super(t), this.transaction = e;
  }
};
function parseApiError(t, e, n) {
  const a = n.value;
  return n.value = async function(...o) {
    var d, m;
    try {
      return await a.apply(this, [...o]);
    } catch (w) {
      throw w instanceof ApiError ? new ApiError2(
        w.status,
        JSON.stringify({ message: w.message, ...w.body }),
        (d = w.body) == null ? void 0 : d.error_code,
        (m = w.body) == null ? void 0 : m.vm_error_code
      ) : w;
    }
  }, n;
}
var Provider = class {
  constructor(t, e, n = !1) {
    let a = null, c = null;
    if (typeof t == "object" && isCustomEndpoints(t) ? (a = t.fullnodeUrl, c = t.indexerUrl, this.network = "CUSTOM") : (a = NetworkToNodeAPI[t], c = NetworkToIndexerAPI[t], this.network = t), !a || !c)
      throw new Error("network is not provided");
    this.aptosClient = new AptosClient(a, e, n), this.indexerClient = new IndexerClient(c);
  }
};
function applyMixin(t, e, n) {
  Object.getOwnPropertyNames(e.prototype).forEach((a) => {
    const c = Object.getOwnPropertyDescriptor(e.prototype, a);
    c && (c.value = function(...o) {
      return this[n][a](...o);
    }, Object.defineProperty(t.prototype, a, c));
  });
}
applyMixin(Provider, AptosClient, "aptosClient");
applyMixin(Provider, IndexerClient, "indexerClient");
function isCustomEndpoints(t) {
  return t.fullnodeUrl !== void 0 && typeof t.fullnodeUrl == "string" && t.indexerUrl !== void 0 && typeof t.indexerUrl == "string";
}
var PropertyValue = class {
  constructor(t, e) {
    this.type = t, this.value = e;
  }
}, PropertyMap = class {
  constructor() {
    this.data = {};
  }
  setProperty(t, e) {
    this.data[t] = e;
  }
};
function getPropertyType(t) {
  let e;
  return t === "string" || t === "String" ? e = new TypeTagStruct(stringStructTag) : e = new TypeTagParser(t).parseTypeTag(), e;
}
function deserializePropertyMap(t) {
  const e = t.map.data, n = new PropertyMap();
  return e.forEach((a) => {
    const { key: c } = a, o = a.value.value, d = a.value.type, m = getPropertyType(d), w = deserializeValueBasedOnTypeTag(m, o), S = new PropertyValue(d, w);
    n.setProperty(c, S);
  }), n;
}
function deserializeValueBasedOnTypeTag(t, e) {
  const n = new Deserializer(new HexString(e).toUint8Array());
  let a = "";
  return t instanceof TypeTagU8 ? a = n.deserializeU8().toString() : t instanceof TypeTagU64 ? a = n.deserializeU64().toString() : t instanceof TypeTagU128 ? a = n.deserializeU128().toString() : t instanceof TypeTagBool ? a = n.deserializeBool() ? "true" : "false" : t instanceof TypeTagAddress ? a = HexString.fromUint8Array(n.deserializeFixedBytes(32)).hex() : t instanceof TypeTagStruct && t.isStringTypeTag() ? a = n.deserializeStr() : a = e, a;
}
var token_types_exports = {};
__export(token_types_exports, {
  PropertyMap: () => PropertyMap,
  PropertyValue: () => PropertyValue,
  Token: () => Token,
  TokenData: () => TokenData
});
var TokenData = class {
  constructor(t, e, n, a, c, o, d, m) {
    this.collection = t, this.description = e, this.name = n, this.maximum = a, this.supply = c, this.uri = o, this.default_properties = deserializePropertyMap(d), this.mutability_config = m;
  }
}, Token = class {
  constructor(t, e, n) {
    this.id = t, this.amount = e, this.token_properties = deserializePropertyMap(n);
  }
};
class AptosConfig extends BaseWebToken {
  signerInstance;
  _publicKey;
  constructor(e) {
    super(e), this.base = ["aptom", 1e8];
  }
  async getProvider() {
    return this.providerInstance ??= new AptosClient(this.providerUrl);
  }
  async getTx(e) {
    const a = await (await this.getProvider()).waitForTransactionWithResult(
      e,
      /* { checkSuccess: true } */
      { timeoutSecs: 1, checkSuccess: !0 }
    ), c = a?.payload;
    if (!a.success)
      throw new Error(a?.vm_status ?? "Unknown Aptos error");
    if (!(c?.function === "0x1::coin::transfer" && c?.type_arguments[0] === "0x1::aptos_coin::AptosCoin" && a?.vm_status === "Executed successfully"))
      throw new Error(`Aptos tx ${e} failed validation`);
    const o = a.type === "pending_transaction";
    return {
      to: c.arguments[0],
      from: a.sender,
      amount: new BigNumber$1(c.arguments[1]),
      pending: o,
      confirmed: !o
    };
  }
  ownerToAddress(e) {
    const n = sha3.sha3_256.create();
    return n.update(Buffer$F.from(e)), n.update("\0"), `0x${n.hex()}`;
  }
  async sign(e) {
    return await this.getSigner().sign(e);
  }
  getSigner() {
    return this.signerInstance ??= new InjectedAptosSigner(this.wallet, this._publicKey);
  }
  async verify(e, n, a) {
    return await InjectedAptosSigner.verify(e, n, a);
  }
  async getCurrentHeight() {
    return new BigNumber$1((await (await this.getProvider()).client.blocks.httpRequest.request({ method: "GET", url: "/" })).block_height);
  }
  async getFee(e, n) {
    const a = await this.getProvider();
    if (!this.address)
      throw new Error("Address is undefined - you might be missing a wallet, or have not run Irys.ready()");
    const o = await new TransactionBuilderRemoteABI(a, { sender: this.address }).build("0x1::coin::transfer", ["0x1::aptos_coin::AptosCoin"], [n ?? "0x149f7dc9c8e43c14ab46d3a6b62cfe84d67668f764277411f98732bf6718acf9", new BigNumber$1(e).toNumber()]), m = new TransactionBuilderEd25519((A) => {
      const B = new Uint8Array(64);
      return new aptos_types_exports.Ed25519Signature(B);
    }, await this.getPublicKey()).sign(o), w = {
      estimate_gas_unit_price: !0,
      estimate_max_gas_amount: !0
    }, S = await a.client.request.request({
      url: "/transactions/simulate",
      query: w,
      method: "POST",
      body: m,
      mediaType: "application/x.aptos.signed_transaction+bcs"
    });
    return { gasUnitPrice: +S[0].gas_unit_price, maxGasAmount: +S[0].max_gas_amount };
  }
  async sendTx(e) {
    return (await this.wallet.signAndSubmitTransaction(e)).hash;
  }
  async createTx(e, n, a) {
    return { txId: void 0, tx: {
      arguments: [n, new BigNumber$1(e).toNumber()],
      function: "0x1::coin::transfer",
      type: "entry_function_payload",
      type_arguments: ["0x1::aptos_coin::AptosCoin"]
    } };
  }
  async getPublicKey() {
    return this._publicKey ??= Buffer$F.from((await this.wallet.account()).publicKey.toString().slice(2), "hex");
  }
  async ready() {
    this._publicKey = await this.getPublicKey(), this._address = this.ownerToAddress(this._publicKey);
    const e = await this.getProvider();
    this._address = await e.lookupOriginalAddress(this.address ?? "").then((n) => n.toString()).catch((n) => this._address), this._address?.length == 66 && this._address.charAt(2) === "0" && (this._address = this._address.slice(0, 2) + this._address.slice(3));
  }
}
class EthereumEthersV5 extends EthereumConfig {
}
class EthereumEthersV6 extends EthereumConfig {
  async createTx(e, n, a) {
    const c = this.w3signer, o = { to: n, from: this.address, value: e.toString(), gasLimit: BigInt(0) }, d = await this.provider.estimateGas(o);
    return o.gasLimit = d, { tx: await c.populateTransaction(o), txId: void 0 };
  }
  async getTx(e) {
    const a = await this.provider.getTransaction(e);
    if (!a)
      throw new Error("Tx doesn't exist");
    if (!a.to)
      throw new Error(`Unable to resolve transactions ${e} receiver`);
    return {
      from: a.from,
      to: a.to,
      blockHeight: a.blockNumber ? new BigNumber$1(a.blockNumber) : void 0,
      amount: new BigNumber$1(a.value.toString()),
      pending: !a.blockNumber,
      confirmed: await a.confirmations() >= this.minConfirm
    };
  }
  async ready() {
    const e = this.wallet;
    this.provider = e;
    const n = await e.getSigner();
    n._signTypedData = async (a, c, o) => n.signTypedData(a, c, o), e.getSigner = () => n, this.wallet = e, await super.ready();
  }
}
class ArweaveConfig extends BaseWebToken {
  isSlow = !0;
  opts;
  signerInstance;
  constructor(e) {
    super(e), this.base = ["winston", 1e12], this.needsFee = !0;
  }
  getProvider() {
    if (!this.providerInstance) {
      const e = new URL(this.providerUrl ?? "https://arweave.net");
      this.providerInstance = Arweave.init(
        /* config ??  */
        {
          url: e,
          network: this?.opts?.network
        }
      );
    }
    return this.providerInstance;
  }
  async getTx(e) {
    const n = await this.getProvider(), a = await n.transactions.getStatus(e);
    let c;
    a.status === 200 && (c = await n.transactions.get(e));
    const o = a.status !== 202 && (a.confirmed?.number_of_confirmations ?? 0) >= this.minConfirm;
    let d;
    return c?.owner && (d = this.ownerToAddress(c.owner)), {
      from: d ?? void 0,
      to: c?.target ?? void 0,
      amount: new BigNumber$1(c?.quantity ?? 0),
      pending: a.status === 202,
      confirmed: o
    };
  }
  ownerToAddress(e) {
    return Arweave.utils.bufferTob64Url(crypto$4.createHash("sha256").update(Arweave.utils.b64UrlToBuffer(Buffer$F.isBuffer(e) ? base64url(e) : e)).digest());
  }
  async sign(e) {
    return this.getSigner().sign(e);
  }
  getSigner() {
    if (this.signerInstance)
      return this.signerInstance;
    switch (this?.opts?.provider ?? "arconnect") {
      case "arconnect":
        this.signerInstance = new InjectedArweaveSigner(this.wallet, this.getProvider());
    }
    return this.signerInstance;
  }
  async verify(e, n, a) {
    return Buffer$F.isBuffer(e) && (e = e.toString()), this.getProvider().crypto.verify(e, n, a);
  }
  async getCurrentHeight() {
    return (await this.getProvider()).network.getInfo().then((e) => new BigNumber$1(e.height));
  }
  async getFee(e, n) {
    return new BigNumber$1(await (await this.getProvider()).transactions.getPrice(new BigNumber$1(e).toNumber(), n)).integerValue(BigNumber$1.ROUND_CEIL);
  }
  async sendTx(e) {
    return await (await this.getProvider()).transactions.post(e);
  }
  async createTx(e, n, a) {
    const o = await (await this.getProvider()).createTransaction({ quantity: new BigNumber$1(e).toString(), reward: a?.toString(), target: n });
    o.merkle = void 0, o.deepHash = void 0;
    const d = await this.wallet.sign(o);
    return { txId: d.id, tx: d };
  }
  async getPublicKey() {
    const e = this.getSigner();
    return await e.setPublicKey(), Arweave.utils.bufferTob64Url(e.publicKey);
  }
  async ready() {
    const e = await this.getPublicKey(), n = this.ownerToAddress(e);
    this._address = n;
  }
}
async function augmentTokenPrivy(t, e) {
  if (!e.sendTransaction)
    throw new Error("missing required sendTransaction function - add sendTransaction from the usePrivy hook to the wallet object");
  const n = e.sendTransaction;
  t.sendTx = async (a) => n({
    ...a,
    gasLimit: a.gasLimit.toHexString(),
    maxFeePerGas: a.maxFeePerGas.toHexString(),
    maxPriorityFeePerGas: a.maxPriorityFeePerGas.toHexString()
  }).then((c) => c.transactionHash);
}
function augmentViemV2(t, e) {
  const n = e.provider, a = e.publicClient, c = e.accountIndex ?? 0;
  if (t.ready = async function() {
    await this.getSigner().ready(), this._address = await n.getAddresses().then((o) => o[c].toString().toLowerCase()), this.providerInstance = this.wallet;
  }.bind(t), t.getFee = async (o) => new BigNumber$1(0), t.getSigner = function() {
    return this.signer || (this.signer = new InjectedTypedEthereumSigner({
      getSigner: () => ({
        getAddress: async () => n.getAddresses().then((o) => o[c]),
        _signTypedData: async (o, d, m) => (m["Transaction hash"] = "0x" + Buffer$F.from(m["Transaction hash"]).toString("hex"), await n.signTypedData({ account: m.address, domain: o, types: d, primaryType: "Bundlr", message: m }))
      })
    })), this.signer;
  }.bind(t), t.getCurrentHeight = async () => new BigNumber$1((await a.getBlockNumber()).toString()), t.contractAddress)
    throw new Error("viemv2 is not supported for ERC20 tokens");
  t.getTx = async (o) => {
    const d = await a.getTransaction({ hash: o }), m = await a.getBlockNumber();
    return {
      to: d.to,
      from: d.from,
      blockHeight: new BigNumber$1(d.blockNumber.toString()),
      amount: new BigNumber$1(d.value.toString()),
      pending: !d.blockNumber,
      confirmed: m - d.blockNumber >= t.minConfirm
    };
  }, t.createTx = async function(o, d) {
    return {
      txId: void 0,
      tx: {
        account: t.address,
        to: d,
        value: o.toString()
      }
    };
  }.bind(t), t.sendTx = async function(o) {
    return await n.sendTransaction({ account: o.account, to: o.to, value: o.value, chain: n.chain });
  };
}
function getTokenConfig({ irys: t, token: e, wallet: n, providerUrl: a, contractAddress: c, providerName: o, tokenOpts: d }) {
  switch (e) {
    case "ethereum":
      return resolveProvider({
        family: "ethereum",
        providerName: o,
        config: {
          irys: t,
          name: "ethereum",
          ticker: "ETH",
          providerUrl: a ?? "https://cloudflare-eth.com/",
          wallet: n,
          opts: d
        }
      });
    case "matic":
      return resolveProvider({
        family: "ethereum",
        providerName: o,
        config: {
          irys: t,
          name: "matic",
          ticker: "MATIC",
          providerUrl: a ?? "https://polygon-rpc.com",
          wallet: n,
          minConfirm: 1,
          opts: d
        }
      });
    case "arbitrum":
      return resolveProvider({
        family: "ethereum",
        providerName: o,
        config: {
          irys: t,
          name: "arbitrum",
          ticker: "ETH",
          providerUrl: a ?? "https://arb1.arbitrum.io/rpc",
          wallet: n,
          opts: d
        }
      });
    case "bnb":
      return resolveProvider({
        family: "ethereum",
        providerName: o,
        config: {
          irys: t,
          name: "bnb",
          ticker: "BNB",
          providerUrl: a ?? "https://bsc-dataseed.binance.org",
          wallet: n,
          opts: d
        }
      });
    case "avalanche":
      return resolveProvider({
        family: "ethereum",
        providerName: o,
        config: {
          irys: t,
          name: "avalanche",
          ticker: "AVAX",
          providerUrl: a ?? "https://api.avax.network/ext/bc/C/rpc",
          wallet: n,
          opts: d
        }
      });
    case "boba-eth":
      return resolveProvider({
        family: "ethereum",
        providerName: o,
        config: {
          irys: t,
          name: "boba-eth",
          ticker: "ETH",
          providerUrl: a ?? "https://mainnet.boba.network/",
          minConfirm: 1,
          wallet: n,
          opts: d
        }
      });
    case "boba": {
      const m = new ERC20Config({
        irys: t,
        name: "boba",
        ticker: "BOBA",
        providerUrl: a ?? "https://mainnet.boba.network/",
        contractAddress: c ?? "0xa18bF3994C0Cc6E3b63ac420308E5383f53120D7",
        minConfirm: 1,
        wallet: n
      });
      return m.price = async () => {
        const w = await axios$3.post("https://api.livecoinwatch.com/coins/single", JSON.stringify({ currency: "USD", code: `${m.ticker}` }), {
          headers: { "x-api-key": "75a7a824-6577-45e6-ad86-511d590c7cc8", "content-type": "application/json" }
        });
        if (await Utils.checkAndThrow(w, "Getting price data"), !w?.data?.rate)
          throw new Error(`unable to get price for ${m.name}`);
        return +w.data.rate;
      }, m;
    }
    case "solana":
      return new SolanaConfig({
        irys: t,
        name: "solana",
        ticker: "SOL",
        providerUrl: a ?? "https://api.mainnet-beta.solana.com/",
        wallet: n
      });
    case "near":
      return new NearConfig({
        irys: t,
        name: "near",
        ticker: "NEAR",
        providerUrl: a ?? "https://rpc.mainnet.near.org",
        wallet: n
      });
    case "aptos":
      return new AptosConfig({
        irys: t,
        name: "aptos",
        ticker: "APTOS",
        providerUrl: a ?? "https://fullnode.mainnet.aptoslabs.com/v1",
        wallet: n
      });
    case "arweave":
      return new ArweaveConfig({
        irys: t,
        name: "arweave",
        ticker: "AR",
        providerUrl: a ?? "https://arweave.net",
        wallet: n
      });
    case "base-eth":
      return new EthereumConfig({
        irys: t,
        name: "base-eth",
        ticker: "ETH",
        providerUrl: a ?? "https://mainnet.base.org/",
        minConfirm: 2,
        wallet: n
      });
    case "usdc-eth":
      return new ERC20Config({
        irys: t,
        name: "usdc-eth",
        ticker: "USDC",
        providerUrl: a ?? "https://cloudflare-eth.com/",
        contractAddress: c ?? "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        wallet: n
      });
    case "usdc-polygon":
      return new ERC20Config({
        irys: t,
        name: "usdc-polygon",
        ticker: "USDC",
        providerUrl: a ?? "https://polygon-rpc.com",
        contractAddress: c ?? "0x3c499c542cef5e3811e1192ce70d8cc03d5c3359"
      });
    default:
      throw new Error(`Unknown/Unsupported token ${e}`);
  }
}
function resolveProvider({ family: t, providerName: e, config: n }) {
  let a;
  switch (t) {
    case "ethereum":
      switch (e) {
        case "ethersv5":
          return new EthereumEthersV5(n);
        case "ethersv6":
          return new EthereumEthersV6(n);
        case "privy-embedded":
          return a = new EthereumEthersV5(n), augmentTokenPrivy(a, n.opts), a;
        case "viemv2":
          return a = new EthereumConfig(n), augmentViemV2(a, n.opts), a;
        default:
          return new EthereumConfig(n);
      }
    default:
      throw new Error(`Unknown token family ${t}`);
  }
}
class WebIrys extends BaseWebIrys {
  constructor({ url: e, token: n, wallet: a, config: c }) {
    super({
      url: e,
      wallet: a,
      config: c,
      getTokenConfig: (o) => getTokenConfig({
        irys: o,
        token: n.toLowerCase(),
        wallet: a?.provider ?? a,
        providerUrl: c?.providerUrl ?? a?.rpcUrl,
        contractAddress: c?.contractAddress,
        providerName: a?.name,
        tokenOpts: { ...c?.tokenOpts, ...a }
      })
    });
  }
}
const WebIrys$1 = WebIrys;
var eventemitter3 = { exports: {} };
(function(t) {
  var e = Object.prototype.hasOwnProperty, n = "~";
  function a() {
  }
  Object.create && (a.prototype = /* @__PURE__ */ Object.create(null), new a().__proto__ || (n = !1));
  function c(w, S, A) {
    this.fn = w, this.context = S, this.once = A || !1;
  }
  function o(w, S, A, B, P) {
    if (typeof A != "function")
      throw new TypeError("The listener must be a function");
    var I = new c(A, B || w, P), O = n ? n + S : S;
    return w._events[O] ? w._events[O].fn ? w._events[O] = [w._events[O], I] : w._events[O].push(I) : (w._events[O] = I, w._eventsCount++), w;
  }
  function d(w, S) {
    --w._eventsCount === 0 ? w._events = new a() : delete w._events[S];
  }
  function m() {
    this._events = new a(), this._eventsCount = 0;
  }
  m.prototype.eventNames = function() {
    var S = [], A, B;
    if (this._eventsCount === 0)
      return S;
    for (B in A = this._events)
      e.call(A, B) && S.push(n ? B.slice(1) : B);
    return Object.getOwnPropertySymbols ? S.concat(Object.getOwnPropertySymbols(A)) : S;
  }, m.prototype.listeners = function(S) {
    var A = n ? n + S : S, B = this._events[A];
    if (!B)
      return [];
    if (B.fn)
      return [B.fn];
    for (var P = 0, I = B.length, O = new Array(I); P < I; P++)
      O[P] = B[P].fn;
    return O;
  }, m.prototype.listenerCount = function(S) {
    var A = n ? n + S : S, B = this._events[A];
    return B ? B.fn ? 1 : B.length : 0;
  }, m.prototype.emit = function(S, A, B, P, I, O) {
    var L = n ? n + S : S;
    if (!this._events[L])
      return !1;
    var C = this._events[L], z = arguments.length, q, Z;
    if (C.fn) {
      switch (C.once && this.removeListener(S, C.fn, void 0, !0), z) {
        case 1:
          return C.fn.call(C.context), !0;
        case 2:
          return C.fn.call(C.context, A), !0;
        case 3:
          return C.fn.call(C.context, A, B), !0;
        case 4:
          return C.fn.call(C.context, A, B, P), !0;
        case 5:
          return C.fn.call(C.context, A, B, P, I), !0;
        case 6:
          return C.fn.call(C.context, A, B, P, I, O), !0;
      }
      for (Z = 1, q = new Array(z - 1); Z < z; Z++)
        q[Z - 1] = arguments[Z];
      C.fn.apply(C.context, q);
    } else {
      var X = C.length, ie;
      for (Z = 0; Z < X; Z++)
        switch (C[Z].once && this.removeListener(S, C[Z].fn, void 0, !0), z) {
          case 1:
            C[Z].fn.call(C[Z].context);
            break;
          case 2:
            C[Z].fn.call(C[Z].context, A);
            break;
          case 3:
            C[Z].fn.call(C[Z].context, A, B);
            break;
          case 4:
            C[Z].fn.call(C[Z].context, A, B, P);
            break;
          default:
            if (!q)
              for (ie = 1, q = new Array(z - 1); ie < z; ie++)
                q[ie - 1] = arguments[ie];
            C[Z].fn.apply(C[Z].context, q);
        }
    }
    return !0;
  }, m.prototype.on = function(S, A, B) {
    return o(this, S, A, B, !1);
  }, m.prototype.once = function(S, A, B) {
    return o(this, S, A, B, !0);
  }, m.prototype.removeListener = function(S, A, B, P) {
    var I = n ? n + S : S;
    if (!this._events[I])
      return this;
    if (!A)
      return d(this, I), this;
    var O = this._events[I];
    if (O.fn)
      O.fn === A && (!P || O.once) && (!B || O.context === B) && d(this, I);
    else {
      for (var L = 0, C = [], z = O.length; L < z; L++)
        (O[L].fn !== A || P && !O[L].once || B && O[L].context !== B) && C.push(O[L]);
      C.length ? this._events[I] = C.length === 1 ? C[0] : C : d(this, I);
    }
    return this;
  }, m.prototype.removeAllListeners = function(S) {
    var A;
    return S ? (A = n ? n + S : S, this._events[A] && d(this, A)) : (this._events = new a(), this._eventsCount = 0), this;
  }, m.prototype.off = m.prototype.removeListener, m.prototype.addListener = m.prototype.on, m.prefixed = n, m.EventEmitter = m, t.exports = m;
})(eventemitter3);
var eventemitter3Exports = eventemitter3.exports;
const EventEmitter = /* @__PURE__ */ getDefaultExportFromCjs$2(eventemitter3Exports);
var __extends$4 = /* @__PURE__ */ function() {
  var t = function(e, n) {
    return t = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(a, c) {
      a.__proto__ = c;
    } || function(a, c) {
      for (var o in c)
        Object.prototype.hasOwnProperty.call(c, o) && (a[o] = c[o]);
    }, t(e, n);
  };
  return function(e, n) {
    if (typeof n != "function" && n !== null)
      throw new TypeError("Class extends value " + String(n) + " is not a constructor or null");
    t(e, n);
    function a() {
      this.constructor = e;
    }
    e.prototype = n === null ? Object.create(n) : (a.prototype = n.prototype, new a());
  };
}(), WalletAdapter = (
  /** @class */
  function(t) {
    __extends$4(e, t);
    function e() {
      return t !== null && t.apply(this, arguments) || this;
    }
    return e;
  }(EventEmitter)
), __extends$3 = /* @__PURE__ */ function() {
  var t = function(e, n) {
    return t = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(a, c) {
      a.__proto__ = c;
    } || function(a, c) {
      for (var o in c)
        Object.prototype.hasOwnProperty.call(c, o) && (a[o] = c[o]);
    }, t(e, n);
  };
  return function(e, n) {
    if (typeof n != "function" && n !== null)
      throw new TypeError("Class extends value " + String(n) + " is not a constructor or null");
    t(e, n);
    function a() {
      this.constructor = e;
    }
    e.prototype = n === null ? Object.create(n) : (a.prototype = n.prototype, new a());
  };
}(), __assign$2 = function() {
  return __assign$2 = Object.assign || function(t) {
    for (var e, n = 1, a = arguments.length; n < a; n++) {
      e = arguments[n];
      for (var c in e)
        Object.prototype.hasOwnProperty.call(e, c) && (t[c] = e[c]);
    }
    return t;
  }, __assign$2.apply(this, arguments);
}, __awaiter$3 = function(t, e, n, a) {
  function c(o) {
    return o instanceof n ? o : new n(function(d) {
      d(o);
    });
  }
  return new (n || (n = Promise))(function(o, d) {
    function m(A) {
      try {
        S(a.next(A));
      } catch (B) {
        d(B);
      }
    }
    function w(A) {
      try {
        S(a.throw(A));
      } catch (B) {
        d(B);
      }
    }
    function S(A) {
      A.done ? o(A.value) : c(A.value).then(m, w);
    }
    S((a = a.apply(t, e || [])).next());
  });
}, __generator$3 = function(t, e) {
  var n = { label: 0, sent: function() {
    if (o[0] & 1)
      throw o[1];
    return o[1];
  }, trys: [], ops: [] }, a, c, o, d;
  return d = { next: m(0), throw: m(1), return: m(2) }, typeof Symbol == "function" && (d[Symbol.iterator] = function() {
    return this;
  }), d;
  function m(S) {
    return function(A) {
      return w([S, A]);
    };
  }
  function w(S) {
    if (a)
      throw new TypeError("Generator is already executing.");
    for (; d && (d = 0, S[0] && (n = 0)), n; )
      try {
        if (a = 1, c && (o = S[0] & 2 ? c.return : S[0] ? c.throw || ((o = c.return) && o.call(c), 0) : c.next) && !(o = o.call(c, S[1])).done)
          return o;
        switch (c = 0, o && (S = [S[0] & 2, o.value]), S[0]) {
          case 0:
          case 1:
            o = S;
            break;
          case 4:
            return n.label++, { value: S[1], done: !1 };
          case 5:
            n.label++, c = S[1], S = [0];
            continue;
          case 7:
            S = n.ops.pop(), n.trys.pop();
            continue;
          default:
            if (o = n.trys, !(o = o.length > 0 && o[o.length - 1]) && (S[0] === 6 || S[0] === 2)) {
              n = 0;
              continue;
            }
            if (S[0] === 3 && (!o || S[1] > o[0] && S[1] < o[3])) {
              n.label = S[1];
              break;
            }
            if (S[0] === 6 && n.label < o[1]) {
              n.label = o[1], o = S;
              break;
            }
            if (o && n.label < o[2]) {
              n.label = o[2], n.ops.push(S);
              break;
            }
            o[2] && n.ops.pop(), n.trys.pop();
            continue;
        }
        S = e.call(t, n);
      } catch (A) {
        S = [6, A], c = 0;
      } finally {
        a = o = 0;
      }
    if (S[0] & 5)
      throw S[1];
    return { value: S[0] ? S[1] : void 0, done: !0 };
  }
}, __read = function(t, e) {
  var n = typeof Symbol == "function" && t[Symbol.iterator];
  if (!n)
    return t;
  var a = n.call(t), c, o = [], d;
  try {
    for (; (e === void 0 || e-- > 0) && !(c = a.next()).done; )
      o.push(c.value);
  } catch (m) {
    d = { error: m };
  } finally {
    try {
      c && !c.done && (n = a.return) && n.call(a);
    } finally {
      if (d)
        throw d.error;
    }
  }
  return o;
}, Wallet = (
  /** @class */
  function(t) {
    __extends$3(e, t);
    function e(n, a) {
      var c = t.call(this) || this;
      if (c._handleMessage = function(o) {
        if (c._injectedProvider && o.source === window || o.origin === c._providerUrl.origin && o.source === c._popup) {
          if (o.data.method === "connected") {
            var d = new PublicKey(o.data.params.publicKey);
            (!c._publicKey || !c._publicKey.equals(d)) && (c._publicKey && !c._publicKey.equals(d) && c._handleDisconnect(), c._publicKey = d, c._autoApprove = !!o.data.params.autoApprove, c.emit("connect", c._publicKey));
          } else if (o.data.method === "disconnected")
            c._handleDisconnect();
          else if ((o.data.result || o.data.error) && c._responsePromises.has(o.data.id)) {
            var m = __read(c._responsePromises.get(o.data.id), 2), w = m[0], S = m[1];
            o.data.result ? w(o.data.result) : S(new Error(o.data.error));
          }
        }
      }, c._handleConnect = function() {
        return c._handlerAdded || (c._handlerAdded = !0, window.addEventListener("message", c._handleMessage), window.addEventListener("beforeunload", c.disconnect)), c._injectedProvider ? new Promise(function(o) {
          c._sendRequest("connect", {}), o();
        }) : (window.name = "parent", c._popup = window.open(c._providerUrl.toString(), "_blank", "location,resizable,width=460,height=675"), new Promise(function(o) {
          c.once("connect", o);
        }));
      }, c._handleDisconnect = function() {
        c._handlerAdded && (c._handlerAdded = !1, window.removeEventListener("message", c._handleMessage), window.removeEventListener("beforeunload", c.disconnect)), c._publicKey && (c._publicKey = null, c.emit("disconnect")), c._responsePromises.forEach(function(o, d) {
          var m = __read(o, 2);
          m[0];
          var w = m[1];
          c._responsePromises.delete(d), w("Wallet disconnected");
        });
      }, c._sendRequest = function(o, d) {
        return __awaiter$3(c, void 0, void 0, function() {
          var m, w = this;
          return __generator$3(this, function(S) {
            if (o !== "connect" && !this.connected)
              throw new Error("Wallet not connected");
            return m = this._nextRequestId, ++this._nextRequestId, [2, new Promise(function(A, B) {
              w._responsePromises.set(m, [A, B]), w._injectedProvider ? w._injectedProvider.postMessage({
                jsonrpc: "2.0",
                id: m,
                method: o,
                params: __assign$2({ network: w._network }, d)
              }) : (w._popup.postMessage({
                jsonrpc: "2.0",
                id: m,
                method: o,
                params: d
              }, w._providerUrl.origin), w.autoApprove || w._popup.focus());
            })];
          });
        });
      }, c.connect = function() {
        return c._popup && c._popup.close(), c._handleConnect();
      }, c.disconnect = function() {
        return __awaiter$3(c, void 0, void 0, function() {
          return __generator$3(this, function(o) {
            switch (o.label) {
              case 0:
                return this._injectedProvider ? [4, this._sendRequest("disconnect", {})] : [3, 2];
              case 1:
                o.sent(), o.label = 2;
              case 2:
                return this._popup && this._popup.close(), this._handleDisconnect(), [
                  2
                  /*return*/
                ];
            }
          });
        });
      }, c.sign = function(o, d) {
        return __awaiter$3(c, void 0, void 0, function() {
          var m, w, S;
          return __generator$3(this, function(A) {
            switch (A.label) {
              case 0:
                if (!(o instanceof Uint8Array))
                  throw new Error("Data must be an instance of Uint8Array");
                return [4, this._sendRequest("sign", {
                  data: o,
                  display: d
                })];
              case 1:
                return m = A.sent(), w = bs58$3.decode(m.signature), S = new PublicKey(m.publicKey), [2, {
                  signature: w,
                  publicKey: S
                }];
            }
          });
        });
      }, isInjectedProvider(n))
        c._injectedProvider = n;
      else if (isString(n))
        c._providerUrl = new URL(n), c._providerUrl.hash = new URLSearchParams({
          origin: window.location.origin,
          network: a
        }).toString();
      else
        throw new Error("provider parameter must be an injected provider or a URL string.");
      return c._network = a, c._publicKey = null, c._autoApprove = !1, c._popup = null, c._handlerAdded = !1, c._nextRequestId = 1, c._responsePromises = /* @__PURE__ */ new Map(), c;
    }
    return Object.defineProperty(e.prototype, "publicKey", {
      get: function() {
        return this._publicKey;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(e.prototype, "connected", {
      get: function() {
        return this._publicKey !== null;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(e.prototype, "autoApprove", {
      get: function() {
        return this._autoApprove;
      },
      enumerable: !1,
      configurable: !0
    }), e;
  }(EventEmitter)
);
function isString(t) {
  return typeof t == "string";
}
function isInjectedProvider(t) {
  return isObject(t) && isFunction(t.postMessage);
}
function isObject(t) {
  return typeof t == "object" && t !== null;
}
function isFunction(t) {
  return typeof t == "function";
}
var __extends$2 = /* @__PURE__ */ function() {
  var t = function(e, n) {
    return t = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(a, c) {
      a.__proto__ = c;
    } || function(a, c) {
      for (var o in c)
        Object.prototype.hasOwnProperty.call(c, o) && (a[o] = c[o]);
    }, t(e, n);
  };
  return function(e, n) {
    if (typeof n != "function" && n !== null)
      throw new TypeError("Class extends value " + String(n) + " is not a constructor or null");
    t(e, n);
    function a() {
      this.constructor = e;
    }
    e.prototype = n === null ? Object.create(n) : (a.prototype = n.prototype, new a());
  };
}(), __awaiter$2 = function(t, e, n, a) {
  function c(o) {
    return o instanceof n ? o : new n(function(d) {
      d(o);
    });
  }
  return new (n || (n = Promise))(function(o, d) {
    function m(A) {
      try {
        S(a.next(A));
      } catch (B) {
        d(B);
      }
    }
    function w(A) {
      try {
        S(a.throw(A));
      } catch (B) {
        d(B);
      }
    }
    function S(A) {
      A.done ? o(A.value) : c(A.value).then(m, w);
    }
    S((a = a.apply(t, e || [])).next());
  });
}, __generator$2 = function(t, e) {
  var n = { label: 0, sent: function() {
    if (o[0] & 1)
      throw o[1];
    return o[1];
  }, trys: [], ops: [] }, a, c, o, d;
  return d = { next: m(0), throw: m(1), return: m(2) }, typeof Symbol == "function" && (d[Symbol.iterator] = function() {
    return this;
  }), d;
  function m(S) {
    return function(A) {
      return w([S, A]);
    };
  }
  function w(S) {
    if (a)
      throw new TypeError("Generator is already executing.");
    for (; d && (d = 0, S[0] && (n = 0)), n; )
      try {
        if (a = 1, c && (o = S[0] & 2 ? c.return : S[0] ? c.throw || ((o = c.return) && o.call(c), 0) : c.next) && !(o = o.call(c, S[1])).done)
          return o;
        switch (c = 0, o && (S = [S[0] & 2, o.value]), S[0]) {
          case 0:
          case 1:
            o = S;
            break;
          case 4:
            return n.label++, { value: S[1], done: !1 };
          case 5:
            n.label++, c = S[1], S = [0];
            continue;
          case 7:
            S = n.ops.pop(), n.trys.pop();
            continue;
          default:
            if (o = n.trys, !(o = o.length > 0 && o[o.length - 1]) && (S[0] === 6 || S[0] === 2)) {
              n = 0;
              continue;
            }
            if (S[0] === 3 && (!o || S[1] > o[0] && S[1] < o[3])) {
              n.label = S[1];
              break;
            }
            if (S[0] === 6 && n.label < o[1]) {
              n.label = o[1], o = S;
              break;
            }
            if (o && n.label < o[2]) {
              n.label = o[2], n.ops.push(S);
              break;
            }
            o[2] && n.ops.pop(), n.trys.pop();
            continue;
        }
        S = e.call(t, n);
      } catch (A) {
        S = [6, A], c = 0;
      } finally {
        a = o = 0;
      }
    if (S[0] & 5)
      throw S[1];
    return { value: S[0] ? S[1] : void 0, done: !0 };
  }
}, WebAdapter = (
  /** @class */
  function(t) {
    __extends$2(e, t);
    function e(n, a, c) {
      var o = t.call(this) || this;
      return o._instance = null, o.handleMessage = function(d) {
      }, o._sendRequest = function(d, m) {
        return __awaiter$2(o, void 0, void 0, function() {
          var w, S;
          return __generator$2(this, function(A) {
            switch (A.label) {
              case 0:
                return !((w = this._instance) === null || w === void 0) && w.sendRequest ? [4, this._instance.sendRequest(d, m)] : [3, 2];
              case 1:
                return [2, A.sent()];
              case 2:
                return !((S = this._instance) === null || S === void 0) && S._sendRequest ? [4, this._instance._sendRequest(d, m)] : [3, 4];
              case 3:
                return [2, A.sent()];
              case 4:
                throw new Error("Unsupported version of `@project-serum/sol-wallet-adapter`");
            }
          });
        });
      }, o._handleConnect = function() {
        o.emit("connect");
      }, o._handleDisconnect = function() {
        window.clearInterval(o._pollTimer), o.emit("disconnect");
      }, o._network = a, o._provider = c, o;
    }
    return Object.defineProperty(e.prototype, "publicKey", {
      get: function() {
        return this._instance.publicKey || null;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(e.prototype, "connected", {
      get: function() {
        return this._instance.connected || !1;
      },
      enumerable: !1,
      configurable: !0
    }), e.prototype.connect = function() {
      return __awaiter$2(this, void 0, void 0, function() {
        var n = this;
        return __generator$2(this, function(a) {
          switch (a.label) {
            case 0:
              return this._instance = new Wallet(this._provider, this._network), this._instance.on("connect", this._handleConnect), this._instance.on("disconnect", this._handleDisconnect), this._pollTimer = window.setInterval(function() {
                var c, o;
                ((o = (c = n._instance) === null || c === void 0 ? void 0 : c._popup) === null || o === void 0 ? void 0 : o.closed) !== !1 && n._handleDisconnect();
              }, 200), [4, this._instance.connect()];
            case 1:
              return a.sent(), [
                2
                /*return*/
              ];
          }
        });
      });
    }, e.prototype.disconnect = function() {
      return __awaiter$2(this, void 0, void 0, function() {
        return __generator$2(this, function(n) {
          switch (n.label) {
            case 0:
              if (!this.connected)
                throw new Error("Wallet not connected");
              return this._instance.removeAllListeners("connect"), this._instance.removeAllListeners("disconnect"), [4, this._instance.disconnect()];
            case 1:
              return n.sent(), [
                2
                /*return*/
              ];
          }
        });
      });
    }, e.prototype.signTransaction = function(n) {
      return __awaiter$2(this, void 0, void 0, function() {
        var a;
        return __generator$2(this, function(c) {
          switch (c.label) {
            case 0:
              if (!this.connected)
                throw new Error("Wallet not connected");
              return [4, this._sendRequest("signTransactionV2", {
                transaction: bs58$3.encode(n)
              })];
            case 1:
              return a = c.sent().transaction, [2, bs58$3.decode(a)];
          }
        });
      });
    }, e.prototype.signAllTransactions = function(n) {
      return __awaiter$2(this, void 0, void 0, function() {
        var a;
        return __generator$2(this, function(c) {
          switch (c.label) {
            case 0:
              if (!this.connected)
                throw new Error("Wallet not connected");
              return [4, this._sendRequest("signAllTransactionsV2", {
                transactions: n.map(function(o) {
                  return bs58$3.encode(o);
                })
              })];
            case 1:
              return a = c.sent().transactions, [2, a.map(function(o) {
                return bs58$3.decode(o);
              })];
          }
        });
      });
    }, e.prototype.signAndSendTransaction = function(n, a) {
      return __awaiter$2(this, void 0, void 0, function() {
        var c;
        return __generator$2(this, function(o) {
          switch (o.label) {
            case 0:
              if (!this.connected)
                throw new Error("Wallet not connected");
              return [4, this._sendRequest("signAndSendTransaction", {
                transaction: bs58$3.encode(n),
                options: a
              })];
            case 1:
              return c = o.sent(), [2, c.signature];
          }
        });
      });
    }, e.prototype.signMessage = function(n, a) {
      return a === void 0 && (a = "hex"), __awaiter$2(this, void 0, void 0, function() {
        var c;
        return __generator$2(this, function(o) {
          switch (o.label) {
            case 0:
              if (!this.connected)
                throw new Error("Wallet not connected");
              return [4, this._instance.sign(n, a)];
            case 1:
              return c = o.sent().signature, [2, Uint8Array.from(c)];
          }
        });
      });
    }, e;
  }(WalletAdapter)
);
let getRandomValues;
const rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues && (getRandomValues = typeof crypto < "u" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto), !getRandomValues))
    throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
  return getRandomValues(rnds8);
}
const byteToHex = [];
for (let t = 0; t < 256; ++t)
  byteToHex.push((t + 256).toString(16).slice(1));
function unsafeStringify(t, e = 0) {
  return byteToHex[t[e + 0]] + byteToHex[t[e + 1]] + byteToHex[t[e + 2]] + byteToHex[t[e + 3]] + "-" + byteToHex[t[e + 4]] + byteToHex[t[e + 5]] + "-" + byteToHex[t[e + 6]] + byteToHex[t[e + 7]] + "-" + byteToHex[t[e + 8]] + byteToHex[t[e + 9]] + "-" + byteToHex[t[e + 10]] + byteToHex[t[e + 11]] + byteToHex[t[e + 12]] + byteToHex[t[e + 13]] + byteToHex[t[e + 14]] + byteToHex[t[e + 15]];
}
const randomUUID = typeof crypto < "u" && crypto.randomUUID && crypto.randomUUID.bind(crypto), native = {
  randomUUID
};
function v4(t, e, n) {
  if (native.randomUUID && !e && !t)
    return native.randomUUID();
  t = t || {};
  const a = t.random || (t.rng || rng)();
  if (a[6] = a[6] & 15 | 64, a[8] = a[8] & 63 | 128, e) {
    n = n || 0;
    for (let c = 0; c < 16; ++c)
      e[n + c] = a[c];
    return e;
  }
  return unsafeStringify(a);
}
var __extends$1 = /* @__PURE__ */ function() {
  var t = function(e, n) {
    return t = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(a, c) {
      a.__proto__ = c;
    } || function(a, c) {
      for (var o in c)
        Object.prototype.hasOwnProperty.call(c, o) && (a[o] = c[o]);
    }, t(e, n);
  };
  return function(e, n) {
    if (typeof n != "function" && n !== null)
      throw new TypeError("Class extends value " + String(n) + " is not a constructor or null");
    t(e, n);
    function a() {
      this.constructor = e;
    }
    e.prototype = n === null ? Object.create(n) : (a.prototype = n.prototype, new a());
  };
}(), __assign$1 = function() {
  return __assign$1 = Object.assign || function(t) {
    for (var e, n = 1, a = arguments.length; n < a; n++) {
      e = arguments[n];
      for (var c in e)
        Object.prototype.hasOwnProperty.call(e, c) && (t[c] = e[c]);
    }
    return t;
  }, __assign$1.apply(this, arguments);
}, __awaiter$1 = function(t, e, n, a) {
  function c(o) {
    return o instanceof n ? o : new n(function(d) {
      d(o);
    });
  }
  return new (n || (n = Promise))(function(o, d) {
    function m(A) {
      try {
        S(a.next(A));
      } catch (B) {
        d(B);
      }
    }
    function w(A) {
      try {
        S(a.throw(A));
      } catch (B) {
        d(B);
      }
    }
    function S(A) {
      A.done ? o(A.value) : c(A.value).then(m, w);
    }
    S((a = a.apply(t, e || [])).next());
  });
}, __generator$1 = function(t, e) {
  var n = { label: 0, sent: function() {
    if (o[0] & 1)
      throw o[1];
    return o[1];
  }, trys: [], ops: [] }, a, c, o, d;
  return d = { next: m(0), throw: m(1), return: m(2) }, typeof Symbol == "function" && (d[Symbol.iterator] = function() {
    return this;
  }), d;
  function m(S) {
    return function(A) {
      return w([S, A]);
    };
  }
  function w(S) {
    if (a)
      throw new TypeError("Generator is already executing.");
    for (; d && (d = 0, S[0] && (n = 0)), n; )
      try {
        if (a = 1, c && (o = S[0] & 2 ? c.return : S[0] ? c.throw || ((o = c.return) && o.call(c), 0) : c.next) && !(o = o.call(c, S[1])).done)
          return o;
        switch (c = 0, o && (S = [S[0] & 2, o.value]), S[0]) {
          case 0:
          case 1:
            o = S;
            break;
          case 4:
            return n.label++, { value: S[1], done: !1 };
          case 5:
            n.label++, c = S[1], S = [0];
            continue;
          case 7:
            S = n.ops.pop(), n.trys.pop();
            continue;
          default:
            if (o = n.trys, !(o = o.length > 0 && o[o.length - 1]) && (S[0] === 6 || S[0] === 2)) {
              n = 0;
              continue;
            }
            if (S[0] === 3 && (!o || S[1] > o[0] && S[1] < o[3])) {
              n.label = S[1];
              break;
            }
            if (S[0] === 6 && n.label < o[1]) {
              n.label = o[1], o = S;
              break;
            }
            if (o && n.label < o[2]) {
              n.label = o[2], n.ops.push(S);
              break;
            }
            o[2] && n.ops.pop(), n.trys.pop();
            continue;
        }
        S = e.call(t, n);
      } catch (A) {
        S = [6, A], c = 0;
      } finally {
        a = o = 0;
      }
    if (S[0] & 5)
      throw S[1];
    return { value: S[0] ? S[1] : void 0, done: !0 };
  }
}, IframeAdapter = (
  /** @class */
  function(t) {
    __extends$1(e, t);
    function e(n, a) {
      var c = this, o;
      return c = t.call(this) || this, c._publicKey = null, c._messageHandlers = {}, c.handleMessage = function(d) {
        if (c._messageHandlers[d.id]) {
          var m = c._messageHandlers[d.id], w = m.resolve, S = m.reject;
          delete c._messageHandlers[d.id], d.error ? S(d.error) : w(d.result);
        }
      }, c._sendMessage = function(d) {
        if (!c.connected)
          throw new Error("Wallet not connected");
        return new Promise(function(m, w) {
          var S, A, B = v4();
          c._messageHandlers[B] = { resolve: m, reject: w }, (A = (S = c._iframe) === null || S === void 0 ? void 0 : S.contentWindow) === null || A === void 0 || A.postMessage({
            channel: "solflareWalletAdapterToIframe",
            data: __assign$1({ id: B }, d)
          }, "*");
        });
      }, c._iframe = n, c._publicKey = new PublicKey((o = a?.toString) === null || o === void 0 ? void 0 : o.call(a)), c;
    }
    return Object.defineProperty(e.prototype, "publicKey", {
      get: function() {
        return this._publicKey || null;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(e.prototype, "connected", {
      get: function() {
        return !0;
      },
      enumerable: !1,
      configurable: !0
    }), e.prototype.connect = function() {
      return __awaiter$1(this, void 0, void 0, function() {
        return __generator$1(this, function(n) {
          return [
            2
            /*return*/
          ];
        });
      });
    }, e.prototype.disconnect = function() {
      return __awaiter$1(this, void 0, void 0, function() {
        return __generator$1(this, function(n) {
          switch (n.label) {
            case 0:
              return [4, this._sendMessage({
                method: "disconnect"
              })];
            case 1:
              return n.sent(), [
                2
                /*return*/
              ];
          }
        });
      });
    }, e.prototype.signTransaction = function(n) {
      var a;
      return __awaiter$1(this, void 0, void 0, function() {
        var c, o;
        return __generator$1(this, function(d) {
          switch (d.label) {
            case 0:
              if (!this.connected)
                throw new Error("Wallet not connected");
              d.label = 1;
            case 1:
              return d.trys.push([1, 3, , 4]), [4, this._sendMessage({
                method: "signTransaction",
                params: {
                  transaction: bs58$3.encode(n)
                }
              })];
            case 2:
              return c = d.sent(), [2, bs58$3.decode(c)];
            case 3:
              throw o = d.sent(), new Error(((a = o?.toString) === null || a === void 0 ? void 0 : a.call(o)) || "Failed to sign transaction");
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, e.prototype.signAllTransactions = function(n) {
      var a;
      return __awaiter$1(this, void 0, void 0, function() {
        var c, o;
        return __generator$1(this, function(d) {
          switch (d.label) {
            case 0:
              if (!this.connected)
                throw new Error("Wallet not connected");
              d.label = 1;
            case 1:
              return d.trys.push([1, 3, , 4]), [4, this._sendMessage({
                method: "signAllTransactions",
                params: {
                  transactions: n.map(function(m) {
                    return bs58$3.encode(m);
                  })
                }
              })];
            case 2:
              return c = d.sent(), [2, c.map(function(m) {
                return bs58$3.decode(m);
              })];
            case 3:
              throw o = d.sent(), new Error(((a = o?.toString) === null || a === void 0 ? void 0 : a.call(o)) || "Failed to sign transactions");
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, e.prototype.signAndSendTransaction = function(n, a) {
      var c;
      return __awaiter$1(this, void 0, void 0, function() {
        var o, d;
        return __generator$1(this, function(m) {
          switch (m.label) {
            case 0:
              if (!this.connected)
                throw new Error("Wallet not connected");
              m.label = 1;
            case 1:
              return m.trys.push([1, 3, , 4]), [4, this._sendMessage({
                method: "signAndSendTransaction",
                params: {
                  transaction: bs58$3.encode(n),
                  options: a
                }
              })];
            case 2:
              return o = m.sent(), [2, o];
            case 3:
              throw d = m.sent(), new Error(((c = d?.toString) === null || c === void 0 ? void 0 : c.call(d)) || "Failed to sign and send transaction");
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, e.prototype.signMessage = function(n, a) {
      var c;
      return a === void 0 && (a = "hex"), __awaiter$1(this, void 0, void 0, function() {
        var o, d;
        return __generator$1(this, function(m) {
          switch (m.label) {
            case 0:
              if (!this.connected)
                throw new Error("Wallet not connected");
              m.label = 1;
            case 1:
              return m.trys.push([1, 3, , 4]), [4, this._sendMessage({
                method: "signMessage",
                params: {
                  data: n,
                  display: a
                }
              })];
            case 2:
              return o = m.sent(), [2, Uint8Array.from(bs58$3.decode(o))];
            case 3:
              throw d = m.sent(), new Error(((c = d?.toString) === null || c === void 0 ? void 0 : c.call(d)) || "Failed to sign message");
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, e;
  }(WalletAdapter)
);
function isLegacyTransactionInstance(t) {
  return t.version === void 0;
}
var VERSION = "1.4.2", __extends = /* @__PURE__ */ function() {
  var t = function(e, n) {
    return t = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(a, c) {
      a.__proto__ = c;
    } || function(a, c) {
      for (var o in c)
        Object.prototype.hasOwnProperty.call(c, o) && (a[o] = c[o]);
    }, t(e, n);
  };
  return function(e, n) {
    if (typeof n != "function" && n !== null)
      throw new TypeError("Class extends value " + String(n) + " is not a constructor or null");
    t(e, n);
    function a() {
      this.constructor = e;
    }
    e.prototype = n === null ? Object.create(n) : (a.prototype = n.prototype, new a());
  };
}(), __assign = function() {
  return __assign = Object.assign || function(t) {
    for (var e, n = 1, a = arguments.length; n < a; n++) {
      e = arguments[n];
      for (var c in e)
        Object.prototype.hasOwnProperty.call(e, c) && (t[c] = e[c]);
    }
    return t;
  }, __assign.apply(this, arguments);
}, __awaiter = function(t, e, n, a) {
  function c(o) {
    return o instanceof n ? o : new n(function(d) {
      d(o);
    });
  }
  return new (n || (n = Promise))(function(o, d) {
    function m(A) {
      try {
        S(a.next(A));
      } catch (B) {
        d(B);
      }
    }
    function w(A) {
      try {
        S(a.throw(A));
      } catch (B) {
        d(B);
      }
    }
    function S(A) {
      A.done ? o(A.value) : c(A.value).then(m, w);
    }
    S((a = a.apply(t, e || [])).next());
  });
}, __generator = function(t, e) {
  var n = { label: 0, sent: function() {
    if (o[0] & 1)
      throw o[1];
    return o[1];
  }, trys: [], ops: [] }, a, c, o, d;
  return d = { next: m(0), throw: m(1), return: m(2) }, typeof Symbol == "function" && (d[Symbol.iterator] = function() {
    return this;
  }), d;
  function m(S) {
    return function(A) {
      return w([S, A]);
    };
  }
  function w(S) {
    if (a)
      throw new TypeError("Generator is already executing.");
    for (; d && (d = 0, S[0] && (n = 0)), n; )
      try {
        if (a = 1, c && (o = S[0] & 2 ? c.return : S[0] ? c.throw || ((o = c.return) && o.call(c), 0) : c.next) && !(o = o.call(c, S[1])).done)
          return o;
        switch (c = 0, o && (S = [S[0] & 2, o.value]), S[0]) {
          case 0:
          case 1:
            o = S;
            break;
          case 4:
            return n.label++, { value: S[1], done: !1 };
          case 5:
            n.label++, c = S[1], S = [0];
            continue;
          case 7:
            S = n.ops.pop(), n.trys.pop();
            continue;
          default:
            if (o = n.trys, !(o = o.length > 0 && o[o.length - 1]) && (S[0] === 6 || S[0] === 2)) {
              n = 0;
              continue;
            }
            if (S[0] === 3 && (!o || S[1] > o[0] && S[1] < o[3])) {
              n.label = S[1];
              break;
            }
            if (S[0] === 6 && n.label < o[1]) {
              n.label = o[1], o = S;
              break;
            }
            if (o && n.label < o[2]) {
              n.label = o[2], n.ops.push(S);
              break;
            }
            o[2] && n.ops.pop(), n.trys.pop();
            continue;
        }
        S = e.call(t, n);
      } catch (A) {
        S = [6, A], c = 0;
      } finally {
        a = o = 0;
      }
    if (S[0] & 5)
      throw S[1];
    return { value: S[0] ? S[1] : void 0, done: !0 };
  }
}, __values = function(t) {
  var e = typeof Symbol == "function" && Symbol.iterator, n = e && t[e], a = 0;
  if (n)
    return n.call(t);
  if (t && typeof t.length == "number")
    return {
      next: function() {
        return t && a >= t.length && (t = void 0), { value: t && t[a++], done: !t };
      }
    };
  throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Solflare = (
  /** @class */
  function(t) {
    __extends(e, t);
    function e(n) {
      var a = t.call(this) || this;
      return a._network = "mainnet-beta", a._provider = null, a._iframeParams = {}, a._adapterInstance = null, a._element = null, a._iframe = null, a._connectHandler = null, a._flutterHandlerInterval = null, a._handleEvent = function(c) {
        var o, d, m, w;
        switch (c.type) {
          case "connect_native_web": {
            a._collapseIframe(), a._adapterInstance = new WebAdapter(a._iframe, a._network, ((o = c.data) === null || o === void 0 ? void 0 : o.provider) || a._provider || "https://solflare.com/provider"), a._adapterInstance.on("connect", a._webConnected), a._adapterInstance.on("disconnect", a._webDisconnected), a._adapterInstance.connect(), a._setPreferredAdapter("native_web");
            return;
          }
          case "connect": {
            a._collapseIframe(), a._adapterInstance = new IframeAdapter(a._iframe, ((d = c.data) === null || d === void 0 ? void 0 : d.publicKey) || ""), a._adapterInstance.connect(), a._setPreferredAdapter((m = c.data) === null || m === void 0 ? void 0 : m.adapter), a._connectHandler && (a._connectHandler.resolve(), a._connectHandler = null), a.emit("connect", a.publicKey);
            return;
          }
          case "disconnect": {
            a._connectHandler && (a._connectHandler.reject(), a._connectHandler = null), a._disconnected(), a.emit("disconnect");
            return;
          }
          case "accountChanged": {
            !((w = c.data) === null || w === void 0) && w.publicKey ? (a._adapterInstance = new IframeAdapter(a._iframe, c.data.publicKey), a._adapterInstance.connect(), a.emit("accountChanged", a.publicKey)) : a.emit("accountChanged", void 0);
            return;
          }
          case "collapse": {
            a._collapseIframe();
            return;
          }
          default:
            return;
        }
      }, a._handleResize = function(c) {
        c.resizeMode === "full" ? c.params.mode === "fullscreen" ? a._expandIframe() : c.params.mode === "hide" && a._collapseIframe() : c.resizeMode === "coordinates" && a._iframe && (a._iframe.style.top = isFinite(c.params.top) ? "".concat(c.params.top, "px") : "", a._iframe.style.bottom = isFinite(c.params.bottom) ? "".concat(c.params.bottom, "px") : "", a._iframe.style.left = isFinite(c.params.left) ? "".concat(c.params.left, "px") : "", a._iframe.style.right = isFinite(c.params.right) ? "".concat(c.params.right, "px") : "", a._iframe.style.width = isFinite(c.params.width) ? "".concat(c.params.width, "px") : c.params.width, a._iframe.style.height = isFinite(c.params.height) ? "".concat(c.params.height, "px") : c.params.height);
      }, a._handleMessage = function(c) {
        var o;
        if (((o = c.data) === null || o === void 0 ? void 0 : o.channel) === "solflareIframeToWalletAdapter") {
          var d = c.data.data || {};
          d.type === "event" ? a._handleEvent(d.event) : d.type === "resize" ? a._handleResize(d) : d.type === "response" && a._adapterInstance && a._adapterInstance.handleMessage(d);
        }
      }, a._removeElement = function() {
        a._flutterHandlerInterval !== null && (clearInterval(a._flutterHandlerInterval), a._flutterHandlerInterval = null), a._element && (a._element.remove(), a._element = null);
      }, a._removeDanglingElements = function() {
        var c, o, d = document.getElementsByClassName("solflare-wallet-adapter-iframe");
        try {
          for (var m = __values(d), w = m.next(); !w.done; w = m.next()) {
            var S = w.value;
            S.parentElement && S.remove();
          }
        } catch (A) {
          c = { error: A };
        } finally {
          try {
            w && !w.done && (o = m.return) && o.call(m);
          } finally {
            if (c)
              throw c.error;
          }
        }
      }, a._injectElement = function() {
        a._removeElement(), a._removeDanglingElements();
        var c = __assign(__assign({}, a._iframeParams), { cluster: a._network || "mainnet-beta", origin: window.location.origin || "", title: document.title || "", version: 1, sdkVersion: VERSION }), o = a._getPreferredAdapter();
        o && (c.adapter = o), a._provider && (c.provider = a._provider);
        var d = Object.keys(c).map(function(w) {
          return "".concat(w, "=").concat(encodeURIComponent(c[w]));
        }).join("&"), m = "".concat(e.IFRAME_URL, "?").concat(d);
        a._element = document.createElement("div"), a._element.className = "solflare-wallet-adapter-iframe", a._element.innerHTML = `
      <iframe src='`.concat(m, `' referrerPolicy='strict-origin-when-cross-origin' style='position: fixed; top: 0; bottom: 0; left: 0; right: 0; width: 100%; height: 100%; border: none; border-radius: 0; z-index: 99999; color-scheme: auto;' allowtransparency='true'></iframe>
    `), document.body.appendChild(a._element), a._iframe = a._element.querySelector("iframe"), window.fromFlutter = a._handleMobileMessage, a._flutterHandlerInterval = setInterval(function() {
          window.fromFlutter = a._handleMobileMessage;
        }, 100), window.addEventListener("message", a._handleMessage, !1);
      }, a._collapseIframe = function() {
        a._iframe && (a._iframe.style.top = "", a._iframe.style.right = "", a._iframe.style.height = "2px", a._iframe.style.width = "2px");
      }, a._expandIframe = function() {
        a._iframe && (a._iframe.style.top = "0px", a._iframe.style.bottom = "0px", a._iframe.style.left = "0px", a._iframe.style.right = "0px", a._iframe.style.width = "100%", a._iframe.style.height = "100%");
      }, a._getPreferredAdapter = function() {
        return localStorage && localStorage.getItem("solflarePreferredWalletAdapter") || null;
      }, a._setPreferredAdapter = function(c) {
        localStorage && c && localStorage.setItem("solflarePreferredWalletAdapter", c);
      }, a._clearPreferredAdapter = function() {
        localStorage && localStorage.removeItem("solflarePreferredWalletAdapter");
      }, a._webConnected = function() {
        a._connectHandler && (a._connectHandler.resolve(), a._connectHandler = null), a.emit("connect", a.publicKey);
      }, a._webDisconnected = function() {
        a._connectHandler && (a._connectHandler.reject(), a._connectHandler = null), a._disconnected(), a.emit("disconnect");
      }, a._disconnected = function() {
        window.removeEventListener("message", a._handleMessage, !1), a._removeElement(), a._clearPreferredAdapter(), a._adapterInstance = null;
      }, a._handleMobileMessage = function(c) {
        var o, d;
        (d = (o = a._iframe) === null || o === void 0 ? void 0 : o.contentWindow) === null || d === void 0 || d.postMessage({
          channel: "solflareMobileToIframe",
          data: c
        }, "*");
      }, n?.network && (a._network = n?.network), n?.provider && (a._provider = n?.provider), n?.params && (a._iframeParams = __assign({}, n?.params)), a;
    }
    return Object.defineProperty(e.prototype, "publicKey", {
      get: function() {
        var n;
        return ((n = this._adapterInstance) === null || n === void 0 ? void 0 : n.publicKey) || null;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(e.prototype, "isConnected", {
      get: function() {
        var n;
        return !!(!((n = this._adapterInstance) === null || n === void 0) && n.connected);
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(e.prototype, "connected", {
      get: function() {
        return this.isConnected;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(e.prototype, "autoApprove", {
      get: function() {
        return !1;
      },
      enumerable: !1,
      configurable: !0
    }), e.prototype.connect = function() {
      return __awaiter(this, void 0, void 0, function() {
        var n = this;
        return __generator(this, function(a) {
          switch (a.label) {
            case 0:
              return this.connected ? [
                2
                /*return*/
              ] : (this._injectElement(), [4, new Promise(function(c, o) {
                n._connectHandler = { resolve: c, reject: o };
              })]);
            case 1:
              return a.sent(), [
                2
                /*return*/
              ];
          }
        });
      });
    }, e.prototype.disconnect = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(n) {
          switch (n.label) {
            case 0:
              return this._adapterInstance ? [4, this._adapterInstance.disconnect()] : [
                2
                /*return*/
              ];
            case 1:
              return n.sent(), this._disconnected(), this.emit("disconnect"), [
                2
                /*return*/
              ];
          }
        });
      });
    }, e.prototype.signTransaction = function(n) {
      return __awaiter(this, void 0, void 0, function() {
        var a, c;
        return __generator(this, function(o) {
          switch (o.label) {
            case 0:
              if (!this.connected)
                throw new Error("Wallet not connected");
              return a = isLegacyTransactionInstance(n) ? Uint8Array.from(n.serialize({ verifySignatures: !1, requireAllSignatures: !1 })) : n.serialize(), [4, this._adapterInstance.signTransaction(a)];
            case 1:
              return c = o.sent(), [2, isLegacyTransactionInstance(n) ? Transaction$1.from(c) : VersionedTransaction.deserialize(c)];
          }
        });
      });
    }, e.prototype.signAllTransactions = function(n) {
      return __awaiter(this, void 0, void 0, function() {
        var a, c;
        return __generator(this, function(o) {
          switch (o.label) {
            case 0:
              if (!this.connected)
                throw new Error("Wallet not connected");
              return a = n.map(function(d) {
                return isLegacyTransactionInstance(d) ? Uint8Array.from(d.serialize({ verifySignatures: !1, requireAllSignatures: !1 })) : d.serialize();
              }), [4, this._adapterInstance.signAllTransactions(a)];
            case 1:
              if (c = o.sent(), c.length !== n.length)
                throw new Error("Failed to sign all transactions");
              return [2, c.map(function(d, m) {
                return isLegacyTransactionInstance(n[m]) ? Transaction$1.from(d) : VersionedTransaction.deserialize(d);
              })];
          }
        });
      });
    }, e.prototype.signAndSendTransaction = function(n, a) {
      return __awaiter(this, void 0, void 0, function() {
        var c;
        return __generator(this, function(o) {
          switch (o.label) {
            case 0:
              if (!this.connected)
                throw new Error("Wallet not connected");
              return c = isLegacyTransactionInstance(n) ? n.serialize({ verifySignatures: !1, requireAllSignatures: !1 }) : n.serialize(), [4, this._adapterInstance.signAndSendTransaction(c, a)];
            case 1:
              return [2, o.sent()];
          }
        });
      });
    }, e.prototype.signMessage = function(n, a) {
      return a === void 0 && (a = "utf8"), __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(c) {
          switch (c.label) {
            case 0:
              if (!this.connected)
                throw new Error("Wallet not connected");
              return [4, this._adapterInstance.signMessage(n, a)];
            case 1:
              return [2, c.sent()];
          }
        });
      });
    }, e.prototype.sign = function(n, a) {
      return a === void 0 && (a = "utf8"), __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(c) {
          switch (c.label) {
            case 0:
              return [4, this.signMessage(n, a)];
            case 1:
              return [2, c.sent()];
          }
        });
      });
    }, e.prototype.detectWallet = function(n) {
      var a;
      return n === void 0 && (n = 10), __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(c) {
          return window.SolflareApp || !((a = window.solflare) === null || a === void 0) && a.isSolflare ? [2, !0] : [2, new Promise(function(o) {
            var d, m;
            d = setInterval(function() {
              var w;
              (window.SolflareApp || !((w = window.solflare) === null || w === void 0) && w.isSolflare) && (clearInterval(d), clearTimeout(m), o(!0));
            }, 500), m = setTimeout(function() {
              clearInterval(d), o(!1);
            }, n * 1e3);
          })];
        });
      });
    }, e.IFRAME_URL = "https://connect.solflare.com/", e;
  }(EventEmitter)
);
async function getIrysInstance(t, e) {
  const n = new Solflare();
  return await n.connect(), new WebIrys$1({
    url: t,
    token: e,
    wallet: {
      rpcUrl: "https://solflare.com/ul/v1/connect",
      name: "solana",
      provider: n
    }
  });
}
export {
  WebIrys$1 as WebIrys,
  getIrysInstance
};
